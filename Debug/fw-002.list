
fw-002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf98  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800d11c  0800d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1a0  0800d1a0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1a0  0800d1a0  0001d1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1a8  0800d1a8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1ac  0800d1ac  0001d1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003658  20000210  0800d3c0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003868  0800d3c0  00023868  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023c2c  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a4b  00000000  00000000  00043ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b8  00000000  00000000  0004a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001917  00000000  00000000  0004c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a94  00000000  00000000  0004e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f069  00000000  00000000  00075d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd728  00000000  00000000  000a4dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088bc  00000000  00000000  001724ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0017ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000210 	.word	0x20000210
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800d104 	.word	0x0800d104

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000214 	.word	0x20000214
 80001c0:	0800d104 	.word	0x0800d104

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_CRC_Init+0x20>)
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <MX_CRC_Init+0x24>)
 80004cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_CRC_Init+0x20>)
 80004d0:	f001 fb6b 	bl	8001baa <HAL_CRC_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004da:	f000 fae5 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000022c 	.word	0x2000022c
 80004e8:	40023000 	.word	0x40023000

080004ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_CRC_MspInit+0x38>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d10d      	bne.n	800051a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40023000 	.word	0x40023000
 8000528:	40023800 	.word	0x40023800

0800052c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <MX_DMA_Init+0xd8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a32      	ldr	r2, [pc, #200]	; (8000604 <MX_DMA_Init+0xd8>)
 800053c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_DMA_Init+0xd8>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_DMA_Init+0xd8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <MX_DMA_Init+0xd8>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_DMA_Init+0xd8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <MX_DMA_Init+0xdc>)
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <MX_DMA_Init+0xe0>)
 800056e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_DMA_Init+0xdc>)
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_DMA_Init+0xdc>)
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_DMA_Init+0xdc>)
 800057e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000582:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_DMA_Init+0xdc>)
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_DMA_Init+0xdc>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_DMA_Init+0xdc>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_DMA_Init+0xdc>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_DMA_Init+0xdc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_DMA_Init+0xdc>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_DMA_Init+0xdc>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_DMA_Init+0xdc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_DMA_Init+0xdc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <MX_DMA_Init+0xdc>)
 80005be:	f001 fb11 	bl	8001be4 <HAL_DMA_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 80005c8:	f000 fa6e 	bl	8000aa8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	200f      	movs	r0, #15
 80005d2:	f001 fab4 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f001 facd 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2038      	movs	r0, #56	; 0x38
 80005e2:	f001 faac 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005e6:	2038      	movs	r0, #56	; 0x38
 80005e8:	f001 fac5 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	203b      	movs	r0, #59	; 0x3b
 80005f2:	f001 faa4 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f6:	203b      	movs	r0, #59	; 0x3b
 80005f8:	f001 fabd 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	20000234 	.word	0x20000234
 800060c:	40026410 	.word	0x40026410

08000610 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <MX_GPIO_Init+0x15c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4f      	ldr	r2, [pc, #316]	; (800076c <MX_GPIO_Init+0x15c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <MX_GPIO_Init+0x15c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <MX_GPIO_Init+0x15c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a48      	ldr	r2, [pc, #288]	; (800076c <MX_GPIO_Init+0x15c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <MX_GPIO_Init+0x15c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x15c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <MX_GPIO_Init+0x15c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <MX_GPIO_Init+0x15c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <MX_GPIO_Init+0x15c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a3a      	ldr	r2, [pc, #232]	; (800076c <MX_GPIO_Init+0x15c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <MX_GPIO_Init+0x15c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b34      	ldr	r3, [pc, #208]	; (800076c <MX_GPIO_Init+0x15c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a33      	ldr	r2, [pc, #204]	; (800076c <MX_GPIO_Init+0x15c>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_GPIO_Init+0x15c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80006b2:	2200      	movs	r2, #0
 80006b4:	f242 0127 	movw	r1, #8231	; 0x2027
 80006b8:	482d      	ldr	r0, [pc, #180]	; (8000770 <MX_GPIO_Init+0x160>)
 80006ba:	f002 f9a2 	bl	8002a02 <HAL_GPIO_WritePin>
                          |Out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out1_Pin|Out6_Pin|Out5_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f248 4110 	movw	r1, #33808	; 0x8410
 80006c4:	482b      	ldr	r0, [pc, #172]	; (8000774 <MX_GPIO_Init+0x164>)
 80006c6:	f002 f99c 	bl	8002a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2110      	movs	r1, #16
 80006ce:	4828      	ldr	r0, [pc, #160]	; (8000770 <MX_GPIO_Init+0x160>)
 80006d0:	f002 f997 	bl	8002a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80006d4:	f242 0337 	movw	r3, #8247	; 0x2037
 80006d8:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|Out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <MX_GPIO_Init+0x160>)
 80006ee:	f001 fed5 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Out1_Pin|Out6_Pin|Out5_Pin;
 80006f2:	f248 4310 	movw	r3, #33808	; 0x8410
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <MX_GPIO_Init+0x164>)
 800070c:	f001 fec6 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = In6_Pin|In4_Pin|In3_Pin|In5_Pin;
 8000710:	f24d 0304 	movw	r3, #53252	; 0xd004
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_GPIO_Init+0x168>)
 8000726:	f001 feb9 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = In1_Pin|In2_Pin;
 800072a:	23c0      	movs	r3, #192	; 0xc0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0x160>)
 800073e:	f001 fead 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0x164>)
 8000760:	f001 fe9c 	bl	800249c <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020800 	.word	0x40020800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400

0800077c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C2_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C2_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C2_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C2_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C2_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C2_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ba:	f002 f93b 	bl	8002a34 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 f970 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000294 	.word	0x20000294
 80007d0:	40005800 	.word	0x40005800
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_I2C_MspInit+0x84>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12c      	bne.n	8000854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000828:	2304      	movs	r3, #4
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_I2C_MspInit+0x8c>)
 8000834:	f001 fe32 	bl	800249c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005800 	.word	0x40005800
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f001 f80f 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f865 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f7ff fecb 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f7ff fe57 	bl	800052c <MX_DMA_Init>
  MX_SPI1_Init();
 800087e:	f000 fa57 	bl	8000d30 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000882:	f000 fa8b 	bl	8000d9c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000886:	f009 fc1d 	bl	800a0c4 <MX_FATFS_Init>
  MX_TIM4_Init();
 800088a:	f000 fdbf 	bl	800140c <MX_TIM4_Init>
  MX_I2C2_Init();
 800088e:	f7ff ff75 	bl	800077c <MX_I2C2_Init>
  MX_RTC_Init();
 8000892:	f000 f945 	bl	8000b20 <MX_RTC_Init>
  MX_SPI3_Init();
 8000896:	f000 fab7 	bl	8000e08 <MX_SPI3_Init>
  MX_UART4_Init();
 800089a:	f000 fef7 	bl	800168c <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 800089e:	f00b fe11 	bl	800c4c4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80008a2:	f000 fd43 	bl	800132c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008a6:	f000 ff1b 	bl	80016e0 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80008aa:	f000 f905 	bl	8000ab8 <MX_RNG_Init>
  MX_SDIO_SD_Init();
 80008ae:	f000 f9a5 	bl	8000bfc <MX_SDIO_SD_Init>
  MX_CRC_Init();
 80008b2:	f7ff fe07 	bl	80004c4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  	MM_Init();
 80008b6:	f00b fcd9 	bl	800c26c <MM_Init>
	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <main+0xbc>)
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <main+0xc0>)
 80008c0:	f006 fe89 	bl	80075d6 <HAL_UART_Receive_IT>

#ifdef LORA
	HAL_SPI_DeInit(&hspi3);
 80008c4:	4819      	ldr	r0, [pc, #100]	; (800092c <main+0xc4>)
 80008c6:	f005 fd89 	bl	80063dc <HAL_SPI_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008d8:	2338      	movs	r3, #56	; 0x38
 80008da:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <main+0xc8>)
 80008ea:	f001 fdd7 	bl	800249c <HAL_GPIO_Init>
	#define LORA_SET HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
	#define LORA_RESET HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	LORA_RESET
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <main+0xc8>)
 80008f4:	f002 f885 	bl	8002a02 <HAL_GPIO_WritePin>


#endif
  	init_OK = 1;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <main+0xcc>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
  	Debug_LED2 = YELLOW;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <main+0xd0>)
 8000900:	2202      	movs	r2, #2
 8000902:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  Debug_LED1 = 	RED;
	  Debug_LED1 = BLACK;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <main+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 800090a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090e:	f001 f81b 	bl	8001948 <HAL_Delay>
//	  Debug_LED1 = BLACK;

	  Debug_LED1 = GREEN;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <main+0xd4>)
 8000914:	2203      	movs	r2, #3
 8000916:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091c:	f001 f814 	bl	8001948 <HAL_Delay>
	  Debug_LED1 = BLACK;
 8000920:	e7f0      	b.n	8000904 <main+0x9c>
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000
 8000928:	2000063c 	.word	0x2000063c
 800092c:	2000044c 	.word	0x2000044c
 8000930:	40020400 	.word	0x40020400
 8000934:	200006e9 	.word	0x200006e9
 8000938:	200006e6 	.word	0x200006e6
 800093c:	200006e5 	.word	0x200006e5

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b096      	sub	sp, #88	; 0x58
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f00c fb4c 	bl	800cfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000972:	2309      	movs	r3, #9
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800097a:	2301      	movs	r3, #1
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000988:	2319      	movs	r3, #25
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 800098c:	23c0      	movs	r3, #192	; 0xc0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fae3 	bl	8003f68 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009a8:	f000 f87e 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2103      	movs	r1, #3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fd1a 	bl	8004404 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009d6:	f000 f867 	bl	8000aa8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009da:	2304      	movs	r3, #4
 80009dc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 ff74 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009f2:	f000 f859 	bl	8000aa8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 fded 	bl	80045dc <HAL_RCC_MCOConfig>
}
 8000a02:	bf00      	nop
 8000a04:	3758      	adds	r7, #88	; 0x58
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]

	//			HAL_UART_Transmit(&huart2,(uint8_t *)" \r\n", 3, 10);


}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <Main_IncTic>:



void Main_IncTic(void){
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <Buttons_Handler>:

void Buttons_Handler (uint8_t Butt, Button_events_TypeDef Event){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]


	if ((Butt == 0) && (Event == SHORT_CLC)) {
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d114      	bne.n	8000a68 <Buttons_Handler+0x40>
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d111      	bne.n	8000a68 <Buttons_Handler+0x40>
		Debug_LED_toggle(2);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f00b fbc9 	bl	800c1dc <Debug_LED_toggle>
		if (Debug_LED2) {LORA_SET}
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <Buttons_Handler+0x70>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <Buttons_Handler+0x36>
 8000a52:	2201      	movs	r2, #1
 8000a54:	2108      	movs	r1, #8
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <Buttons_Handler+0x74>)
 8000a58:	f001 ffd3 	bl	8002a02 <HAL_GPIO_WritePin>
 8000a5c:	e004      	b.n	8000a68 <Buttons_Handler+0x40>
		else {LORA_RESET}
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2108      	movs	r1, #8
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <Buttons_Handler+0x74>)
 8000a64:	f001 ffcd 	bl	8002a02 <HAL_GPIO_WritePin>
	}
	if ((Butt == 0) && (Event == DOUBLE_CLC)) {
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10f      	bne.n	8000a8e <Buttons_Handler+0x66>
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d10c      	bne.n	8000a8e <Buttons_Handler+0x66>
		uint8_t send_data[10] = {0x00, 0x64, 0xfe, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa};
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <Buttons_Handler+0x78>)
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a7c:	c303      	stmia	r3!, {r0, r1}
 8000a7e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,send_data, 10, 10);
 8000a80:	f107 010c 	add.w	r1, r7, #12
 8000a84:	230a      	movs	r3, #10
 8000a86:	220a      	movs	r2, #10
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <Buttons_Handler+0x7c>)
 8000a8a:	f006 fd12 	bl	80074b2 <HAL_UART_Transmit>
	}
	if ((Butt == 0) && (Event == LONG_CLC)) {

	}

}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200006e6 	.word	0x200006e6
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	0800d11c 	.word	0x0800d11c
 8000aa4:	2000063c 	.word	0x2000063c

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Debug_LED2 = RED;
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <Error_Handler+0xc>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
//  __disable_irq();
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <Error_Handler+0xa>
 8000ab4:	200006e6 	.word	0x200006e6

08000ab8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_RNG_Init+0x20>)
 8000abe:	4a07      	ldr	r2, [pc, #28]	; (8000adc <MX_RNG_Init+0x24>)
 8000ac0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_RNG_Init+0x20>)
 8000ac4:	f003 fffc 	bl	8004ac0 <HAL_RNG_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000ace:	f7ff ffeb 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200002e8 	.word	0x200002e8
 8000adc:	50060800 	.word	0x50060800

08000ae0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_RNG_MspInit+0x38>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10d      	bne.n	8000b0e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_RNG_MspInit+0x3c>)
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_RNG_MspInit+0x3c>)
 8000afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b00:	6353      	str	r3, [r2, #52]	; 0x34
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_RNG_MspInit+0x3c>)
 8000b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	50060800 	.word	0x50060800
 8000b1c:	40023800 	.word	0x40023800

08000b20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b36:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <MX_RTC_Init+0xac>)
 8000b38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b42:	227f      	movs	r2, #127	; 0x7f
 8000b44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b60:	f003 ffd8 	bl	8004b14 <HAL_RTC_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000b6a:	f7ff ff9d 	bl	8000aa8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000b8a:	f004 f84d 	bl	8004c28 <HAL_RTC_SetTime>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8000b94:	f7ff ff88 	bl	8000aa8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <MX_RTC_Init+0xa8>)
 8000bb0:	f004 f8f0 	bl	8004d94 <HAL_RTC_SetDate>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8000bba:	f7ff ff75 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002f8 	.word	0x200002f8
 8000bcc:	40002800 	.word	0x40002800

08000bd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <HAL_RTC_MspInit+0x24>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d102      	bne.n	8000be8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_RTC_MspInit+0x28>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40002800 	.word	0x40002800
 8000bf8:	42470e3c 	.word	0x42470e3c

08000bfc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <MX_SDIO_SD_Init+0x3c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 48;
 8000c26:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <MX_SDIO_SD_Init+0x38>)
 8000c28:	2230      	movs	r2, #48	; 0x30
 8000c2a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000318 	.word	0x20000318
 8000c38:	40012c00 	.word	0x40012c00

08000c3c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <HAL_SD_MspInit+0xe4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d15b      	bne.n	8000d16 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a28      	ldr	r2, [pc, #160]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <HAL_SD_MspInit+0xe8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000cb2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <HAL_SD_MspInit+0xec>)
 8000cd0:	f001 fbe4 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <HAL_SD_MspInit+0xec>)
 8000cf2:	f001 fbd3 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d06:	230c      	movs	r3, #12
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <HAL_SD_MspInit+0xf0>)
 8000d12:	f001 fbc3 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40012c00 	.word	0x40012c00
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <MX_SPI1_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d64:	2220      	movs	r2, #32
 8000d66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_SPI1_Init+0x64>)
 8000d82:	f005 faa2 	bl	80062ca <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f7ff fe8c 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000039c 	.word	0x2000039c
 8000d98:	40013000 	.word	0x40013000

08000d9c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000da2:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <MX_SPI2_Init+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000de8:	220a      	movs	r2, #10
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_SPI2_Init+0x64>)
 8000dee:	f005 fa6c 	bl	80062ca <HAL_SPI_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000df8:	f7ff fe56 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200003f4 	.word	0x200003f4
 8000e04:	40003800 	.word	0x40003800

08000e08 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <MX_SPI3_Init+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e3c:	2218      	movs	r2, #24
 8000e3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e54:	220a      	movs	r2, #10
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_SPI3_Init+0x64>)
 8000e5a:	f005 fa36 	bl	80062ca <HAL_SPI_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e64:	f7ff fe20 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000044c 	.word	0x2000044c
 8000e70:	40003c00 	.word	0x40003c00

08000e74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a89      	ldr	r2, [pc, #548]	; (80010b8 <HAL_SPI_MspInit+0x244>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d15b      	bne.n	8000f4e <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	4b88      	ldr	r3, [pc, #544]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a87      	ldr	r2, [pc, #540]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b85      	ldr	r3, [pc, #532]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	4b81      	ldr	r3, [pc, #516]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a80      	ldr	r2, [pc, #512]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ece:	23a0      	movs	r3, #160	; 0xa0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4875      	ldr	r0, [pc, #468]	; (80010c0 <HAL_SPI_MspInit+0x24c>)
 8000eea:	f001 fad7 	bl	800249c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000eee:	4b75      	ldr	r3, [pc, #468]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000ef0:	4a75      	ldr	r2, [pc, #468]	; (80010c8 <HAL_SPI_MspInit+0x254>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ef4:	4b73      	ldr	r3, [pc, #460]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000ef6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000efa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efc:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000efe:	2240      	movs	r2, #64	; 0x40
 8000f00:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f02:	4b70      	ldr	r3, [pc, #448]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f08:	4b6e      	ldr	r3, [pc, #440]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f10:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f16:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f1c:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f22:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f28:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2a:	4b66      	ldr	r3, [pc, #408]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f30:	4864      	ldr	r0, [pc, #400]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f32:	f000 fe57 	bl	8001be4 <HAL_DMA_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f3c:	f7ff fdb4 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a60      	ldr	r2, [pc, #384]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f44:	649a      	str	r2, [r3, #72]	; 0x48
 8000f46:	4a5f      	ldr	r2, [pc, #380]	; (80010c4 <HAL_SPI_MspInit+0x250>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000f4c:	e0af      	b.n	80010ae <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a5e      	ldr	r2, [pc, #376]	; (80010cc <HAL_SPI_MspInit+0x258>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d179      	bne.n	800104c <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	4b57      	ldr	r3, [pc, #348]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a56      	ldr	r2, [pc, #344]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b54      	ldr	r3, [pc, #336]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	4b50      	ldr	r3, [pc, #320]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fac:	2308      	movs	r3, #8
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4842      	ldr	r0, [pc, #264]	; (80010d0 <HAL_SPI_MspInit+0x25c>)
 8000fc8:	f001 fa68 	bl	800249c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483a      	ldr	r0, [pc, #232]	; (80010d4 <HAL_SPI_MspInit+0x260>)
 8000fea:	f001 fa57 	bl	800249c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <HAL_SPI_MspInit+0x268>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ffa:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8000ffc:	2240      	movs	r2, #64	; 0x40
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001022:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001026:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800102e:	482a      	ldr	r0, [pc, #168]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001030:	f000 fdd8 	bl	8001be4 <HAL_DMA_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 800103a:	f7ff fd35 	bl	8000aa8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a25      	ldr	r2, [pc, #148]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001042:	649a      	str	r2, [r3, #72]	; 0x48
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <HAL_SPI_MspInit+0x264>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6393      	str	r3, [r2, #56]	; 0x38
}
 800104a:	e030      	b.n	80010ae <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_SPI_MspInit+0x26c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12b      	bne.n	80010ae <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_SPI_MspInit+0x248>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8001060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_SPI_MspInit+0x248>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_SPI_MspInit+0x248>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800108e:	2338      	movs	r3, #56	; 0x38
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800109e:	2306      	movs	r3, #6
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <HAL_SPI_MspInit+0x260>)
 80010aa:	f001 f9f7 	bl	800249c <HAL_GPIO_Init>
}
 80010ae:	bf00      	nop
 80010b0:	3738      	adds	r7, #56	; 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40013000 	.word	0x40013000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	200004a4 	.word	0x200004a4
 80010c8:	40026458 	.word	0x40026458
 80010cc:	40003800 	.word	0x40003800
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020400 	.word	0x40020400
 80010d8:	20000504 	.word	0x20000504
 80010dc:	40026070 	.word	0x40026070
 80010e0:	40003c00 	.word	0x40003c00

080010e4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <HAL_SPI_MspDeInit+0x8c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10f      	bne.n	8001116 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_SPI_MspDeInit+0x90>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_SPI_MspDeInit+0x90>)
 80010fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8001102:	21a0      	movs	r1, #160	; 0xa0
 8001104:	481c      	ldr	r0, [pc, #112]	; (8001178 <HAL_SPI_MspDeInit+0x94>)
 8001106:	f001 fb67 	bl	80027d8 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fe16 	bl	8001d40 <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001114:	e028      	b.n	8001168 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_SPI_MspDeInit+0x98>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d114      	bne.n	800114a <HAL_SPI_MspDeInit+0x66>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_SPI_MspDeInit+0x90>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_SPI_MspDeInit+0x90>)
 8001126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 800112c:	2108      	movs	r1, #8
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <HAL_SPI_MspDeInit+0x9c>)
 8001130:	f001 fb52 	bl	80027d8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4812      	ldr	r0, [pc, #72]	; (8001184 <HAL_SPI_MspDeInit+0xa0>)
 800113a:	f001 fb4d 	bl	80027d8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fdfc 	bl	8001d40 <HAL_DMA_DeInit>
}
 8001148:	e00e      	b.n	8001168 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_SPI_MspDeInit+0xa4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d109      	bne.n	8001168 <HAL_SPI_MspDeInit+0x84>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_SPI_MspDeInit+0x90>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_SPI_MspDeInit+0x90>)
 800115a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8001160:	2138      	movs	r1, #56	; 0x38
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <HAL_SPI_MspDeInit+0xa0>)
 8001164:	f001 fb38 	bl	80027d8 <HAL_GPIO_DeInit>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013000 	.word	0x40013000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000
 800117c:	40003800 	.word	0x40003800
 8001180:	40020800 	.word	0x40020800
 8001184:	40020400 	.word	0x40020400
 8001188:	40003c00 	.word	0x40003c00

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x48>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x48>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x48>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_MspInit+0x48>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_MspInit+0x48>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_MspInit+0x48>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40023800 	.word	0x40023800

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f00b f831 	bl	800c284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA1_Stream4_IRQHandler+0x10>)
 800122e:	f000 fecf 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000504 	.word	0x20000504

0800123c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <TIM3_IRQHandler+0x10>)
 8001242:	f005 fbfb 	bl	8006a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000568 	.word	0x20000568

08001250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM4_IRQHandler+0x10>)
 8001256:	f005 fbf1 	bl	8006a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200005b0 	.word	0x200005b0

08001264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART2_IRQHandler+0x10>)
 800126a:	f006 f9e5 	bl	8007638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000063c 	.word	0x2000063c

08001278 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA2_Stream0_IRQHandler+0x10>)
 800127e:	f000 fea7 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000234 	.word	0x20000234

0800128c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA2_Stream3_IRQHandler+0x10>)
 8001292:	f000 fe9d 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200004a4 	.word	0x200004a4

080012a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <OTG_FS_IRQHandler+0x10>)
 80012a6:	f001 fe48 	bl	8002f3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20003320 	.word	0x20003320

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f00b fe9a 	bl	800d01c <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20020000 	.word	0x20020000
 8001314:	00000400 	.word	0x00000400
 8001318:	20000564 	.word	0x20000564
 800131c:	20003868 	.word	0x20003868

08001320 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_TIM3_Init+0xd8>)
 8001350:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <MX_TIM3_Init+0xdc>)
 8001352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM3_Init+0xd8>)
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_TIM3_Init+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_TIM3_Init+0xd8>)
 8001362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_TIM3_Init+0xd8>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_TIM3_Init+0xd8>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001374:	4823      	ldr	r0, [pc, #140]	; (8001404 <MX_TIM3_Init+0xd8>)
 8001376:	f005 fa49 	bl	800680c <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001380:	f7ff fb92 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	4619      	mov	r1, r3
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM3_Init+0xd8>)
 8001394:	f005 ffb4 	bl	8007300 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800139e:	f7ff fb83 	bl	8000aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	; 0x60
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4812      	ldr	r0, [pc, #72]	; (8001404 <MX_TIM3_Init+0xd8>)
 80013ba:	f005 fc47 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013c4:	f7ff fb70 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2208      	movs	r2, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM3_Init+0xd8>)
 80013d0:	f005 fc3c 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013da:	f7ff fb65 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	220c      	movs	r2, #12
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM3_Init+0xd8>)
 80013e6:	f005 fc31 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80013f0:	f7ff fb5a 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM3_Init+0xd8>)
 80013f6:	f000 f8c9 	bl	800158c <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000568 	.word	0x20000568
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <MX_TIM4_Init+0xec>)
 8001430:	4a32      	ldr	r2, [pc, #200]	; (80014fc <MX_TIM4_Init+0xf0>)
 8001432:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <MX_TIM4_Init+0xec>)
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <MX_TIM4_Init+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM4_Init+0xec>)
 8001442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001446:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_TIM4_Init+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_TIM4_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001454:	4828      	ldr	r0, [pc, #160]	; (80014f8 <MX_TIM4_Init+0xec>)
 8001456:	f005 f9d9 	bl	800680c <HAL_TIM_PWM_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001460:	f7ff fb22 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4619      	mov	r1, r3
 8001472:	4821      	ldr	r0, [pc, #132]	; (80014f8 <MX_TIM4_Init+0xec>)
 8001474:	f005 ff44 	bl	8007300 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800147e:	f7ff fb13 	bl	8000aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001482:	2360      	movs	r3, #96	; 0x60
 8001484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	4817      	ldr	r0, [pc, #92]	; (80014f8 <MX_TIM4_Init+0xec>)
 800149a:	f005 fbd7 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80014a4:	f7ff fb00 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2204      	movs	r2, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <MX_TIM4_Init+0xec>)
 80014b0:	f005 fbcc 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014ba:	f7ff faf5 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2208      	movs	r2, #8
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_TIM4_Init+0xec>)
 80014c6:	f005 fbc1 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80014d0:	f7ff faea 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	220c      	movs	r2, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM4_Init+0xec>)
 80014dc:	f005 fbb6 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80014e6:	f7ff fadf 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM4_Init+0xec>)
 80014ec:	f000 f84e 	bl	800158c <HAL_TIM_MspPostInit>

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200005b0 	.word	0x200005b0
 80014fc:	40000800 	.word	0x40000800

08001500 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_TIM_PWM_MspInit+0x80>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d116      	bne.n	8001540 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_TIM_PWM_MspInit+0x84>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_TIM_PWM_MspInit+0x84>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_TIM_PWM_MspInit+0x84>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201d      	movs	r0, #29
 8001534:	f000 fb03 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001538:	201d      	movs	r0, #29
 800153a:	f000 fb1c 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800153e:	e01a      	b.n	8001576 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM4)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_TIM_PWM_MspInit+0x88>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d115      	bne.n	8001576 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_TIM_PWM_MspInit+0x84>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_TIM_PWM_MspInit+0x84>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_TIM_PWM_MspInit+0x84>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	201e      	movs	r0, #30
 800156c:	f000 fae7 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001570:	201e      	movs	r0, #30
 8001572:	f000 fb00 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40000400 	.word	0x40000400
 8001584:	40023800 	.word	0x40023800
 8001588:	40000800 	.word	0x40000800

0800158c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a33      	ldr	r2, [pc, #204]	; (8001678 <HAL_TIM_MspPostInit+0xec>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d13c      	bne.n	8001628 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b32      	ldr	r3, [pc, #200]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a2a      	ldr	r2, [pc, #168]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Pout7_Pin;
 80015e6:	2340      	movs	r3, #64	; 0x40
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f6:	2302      	movs	r3, #2
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pout7_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	481f      	ldr	r0, [pc, #124]	; (8001680 <HAL_TIM_MspPostInit+0xf4>)
 8001602:	f000 ff4b 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pout5_Pin|Pout6_Pin;
 8001606:	2303      	movs	r3, #3
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001616:	2302      	movs	r3, #2
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4818      	ldr	r0, [pc, #96]	; (8001684 <HAL_TIM_MspPostInit+0xf8>)
 8001622:	f000 ff3b 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001626:	e023      	b.n	8001670 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_TIM_MspPostInit+0xfc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11e      	bne.n	8001670 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_TIM_MspPostInit+0xf0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Pout1_Pin|Pout2_Pin|Pout3_Pin|Pout4_Pin;
 800164e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001660:	2302      	movs	r3, #2
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <HAL_TIM_MspPostInit+0xf8>)
 800166c:	f000 ff16 	bl	800249c <HAL_GPIO_Init>
}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40000400 	.word	0x40000400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40000800 	.word	0x40000800

0800168c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_UART4_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_UART4_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_UART4_Init+0x4c>)
 8001698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800169c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_UART4_Init+0x4c>)
 80016c4:	f005 fea8 	bl	8007418 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80016ce:	f7ff f9eb 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200005f8 	.word	0x200005f8
 80016dc:	40004c00 	.word	0x40004c00

080016e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_USART2_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001718:	f005 fe7e 	bl	8007418 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f7ff f9c1 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000063c 	.word	0x2000063c
 8001730:	40004400 	.word	0x40004400

08001734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a36      	ldr	r2, [pc, #216]	; (800182c <HAL_UART_MspInit+0xf8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12c      	bne.n	80017b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <HAL_UART_MspInit+0xfc>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a34      	ldr	r2, [pc, #208]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_UART_MspInit+0xfc>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_UART_MspInit+0xfc>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Tx_Pin|Rx_Pin;
 800178e:	2303      	movs	r3, #3
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800179e:	2308      	movs	r3, #8
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <HAL_UART_MspInit+0x100>)
 80017aa:	f000 fe77 	bl	800249c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017ae:	e038      	b.n	8001822 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_UART_MspInit+0x104>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d133      	bne.n	8001822 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a14      	ldr	r2, [pc, #80]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_UART_MspInit+0xfc>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f2:	230c      	movs	r3, #12
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001802:	2307      	movs	r3, #7
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <HAL_UART_MspInit+0x100>)
 800180e:	f000 fe45 	bl	800249c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2026      	movs	r0, #38	; 0x26
 8001818:	f000 f991 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800181c:	2026      	movs	r0, #38	; 0x26
 800181e:	f000 f9aa 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40004c00 	.word	0x40004c00
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40004400 	.word	0x40004400

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001858:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001866:	f7ff fd5b 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f00b fbdd 	bl	800d028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7fe fffb 	bl	8000868 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001880:	0800d1b0 	.word	0x0800d1b0
  ldr r2, =_sbss
 8001884:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001888:	20003868 	.word	0x20003868

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f935 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2004      	movs	r0, #4
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fc62 	bl	800118c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f94d 	bl	8001b92 <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f915 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000040 	.word	0x20000040
 800192c:	20000048 	.word	0x20000048
 8001930:	20000044 	.word	0x20000044

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_GetTick+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000680 	.word	0x20000680

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fff0 	bl	8001934 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffe0 	bl	8001934 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000048 	.word	0x20000048

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <__NVIC_EnableIRQ+0x34>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff90 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff2d 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff42 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff90 	bl	8001a80 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5f 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff35 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e00e      	b.n	8001bda <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	795b      	ldrb	r3, [r3, #5]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe fc8d 	bl	80004ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fea0 	bl	8001934 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e099      	b.n	8001d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c20:	e00f      	b.n	8001c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c22:	f7ff fe87 	bl	8001934 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d908      	bls.n	8001c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e078      	b.n	8001d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e8      	bne.n	8001c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_DMA_Init+0x158>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d117      	bne.n	8001d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fb5d 	bl	80023a8 <DMA_CheckFifoParam>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d02:	2301      	movs	r3, #1
 8001d04:	e016      	b.n	8001d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fb16 	bl	8002340 <DMA_CalcBaseAndBitshift>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	f010803f 	.word	0xf010803f

08001d40 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e050      	b.n	8001df4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d101      	bne.n	8001d62 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e048      	b.n	8001df4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2221      	movs	r2, #33	; 0x21
 8001da0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 facc 	bl	8002340 <DMA_CalcBaseAndBitshift>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	223f      	movs	r2, #63	; 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_DMA_Start_IT+0x26>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e040      	b.n	8001ea4 <HAL_DMA_Start_IT+0xa8>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d12f      	bne.n	8001e96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 fa4a 	bl	80022e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	223f      	movs	r2, #63	; 0x3f
 8001e56:	409a      	lsls	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0216 	orr.w	r2, r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0208 	orr.w	r2, r2, #8
 8001e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e005      	b.n	8001ea2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eba:	f7ff fd3b 	bl	8001934 <HAL_GetTick>
 8001ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d008      	beq.n	8001ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e052      	b.n	8001f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_Abort+0x62>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2e:	e013      	b.n	8001f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f30:	f7ff fd00 	bl	8001934 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d90c      	bls.n	8001f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e015      	b.n	8001f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e4      	bne.n	8001f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	223f      	movs	r2, #63	; 0x3f
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d004      	beq.n	8001faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00c      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2205      	movs	r2, #5
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fdc:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_DMA_IRQHandler+0x248>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a8e      	ldr	r2, [pc, #568]	; (800221c <HAL_DMA_IRQHandler+0x24c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01a      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2208      	movs	r2, #8
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2204      	movs	r2, #4
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2204      	movs	r2, #4
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	2210      	movs	r2, #16
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d043      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03c      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ca:	2210      	movs	r2, #16
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d018      	beq.n	8002112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d024      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e01f      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e016      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0208 	bic.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2220      	movs	r2, #32
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808f 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8087 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	2220      	movs	r2, #32
 8002168:	409a      	lsls	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b05      	cmp	r3, #5
 8002178:	d136      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0216 	bic.w	r2, r2, #22
 8002188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <HAL_DMA_IRQHandler+0x1da>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	223f      	movs	r2, #63	; 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d07e      	beq.n	80022dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
        }
        return;
 80021e6:	e079      	b.n	80022dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	2b00      	cmp	r3, #0
 800220a:	d031      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e02c      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
 8002216:	bf00      	nop
 8002218:	20000040 	.word	0x20000040
 800221c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e01e      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0210 	bic.w	r2, r2, #16
 800224e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d032      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d022      	beq.n	80022ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2205      	movs	r2, #5
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d307      	bcc.n	80022b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f2      	bne.n	800229c <HAL_DMA_IRQHandler+0x2cc>
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x30e>
        return;
 80022dc:	bf00      	nop
    }
  }
}
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b40      	cmp	r3, #64	; 0x40
 8002310:	d108      	bne.n	8002324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002322:	e007      	b.n	8002334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3b10      	subs	r3, #16
 8002350:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <DMA_CalcBaseAndBitshift+0x60>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <DMA_CalcBaseAndBitshift+0x64>)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d909      	bls.n	8002382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	659a      	str	r2, [r3, #88]	; 0x58
 8002380:	e007      	b.n	8002392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	aaaaaaab 	.word	0xaaaaaaab
 80023a4:	0800d184 	.word	0x0800d184

080023a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d856      	bhi.n	8002476 <DMA_CheckFifoParam+0xce>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <DMA_CheckFifoParam+0x28>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f3 	.word	0x080023f3
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	08002477 	.word	0x08002477
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e043      	b.n	800247a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fa:	d140      	bne.n	800247e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e03d      	b.n	800247e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d121      	bne.n	8002450 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d837      	bhi.n	8002482 <DMA_CheckFifoParam+0xda>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <DMA_CheckFifoParam+0x70>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	0800242f 	.word	0x0800242f
 8002420:	08002429 	.word	0x08002429
 8002424:	08002441 	.word	0x08002441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e030      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e022      	b.n	8002486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244e:	e01c      	b.n	800248a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d903      	bls.n	800245e <DMA_CheckFifoParam+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245c:	e018      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e015      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e00b      	b.n	800248e <DMA_CheckFifoParam+0xe6>
      break;
 8002476:	bf00      	nop
 8002478:	e00a      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e008      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e006      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;   
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
    }
  } 
  
  return status; 
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e16f      	b.n	800278c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8161 	beq.w	8002786 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d005      	beq.n	80024dc <HAL_GPIO_Init+0x40>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d130      	bne.n	800253e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002512:	2201      	movs	r2, #1
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0201 	and.w	r2, r3, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d017      	beq.n	800257a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d123      	bne.n	80025ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	6939      	ldr	r1, [r7, #16]
 80025ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80bb 	beq.w	8002786 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	4a63      	ldr	r2, [pc, #396]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261e:	6453      	str	r3, [r2, #68]	; 0x44
 8002620:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800262c:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <HAL_GPIO_Init+0x310>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a57      	ldr	r2, [pc, #348]	; (80027b0 <HAL_GPIO_Init+0x314>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_GPIO_Init+0x220>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_GPIO_Init+0x318>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d02b      	beq.n	80026b8 <HAL_GPIO_Init+0x21c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a55      	ldr	r2, [pc, #340]	; (80027b8 <HAL_GPIO_Init+0x31c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d025      	beq.n	80026b4 <HAL_GPIO_Init+0x218>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a54      	ldr	r2, [pc, #336]	; (80027bc <HAL_GPIO_Init+0x320>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01f      	beq.n	80026b0 <HAL_GPIO_Init+0x214>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a53      	ldr	r2, [pc, #332]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d019      	beq.n	80026ac <HAL_GPIO_Init+0x210>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_GPIO_Init+0x328>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x20c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a51      	ldr	r2, [pc, #324]	; (80027c8 <HAL_GPIO_Init+0x32c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x208>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a50      	ldr	r2, [pc, #320]	; (80027cc <HAL_GPIO_Init+0x330>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x204>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x200>
 8002698:	2308      	movs	r3, #8
 800269a:	e010      	b.n	80026be <HAL_GPIO_Init+0x222>
 800269c:	2309      	movs	r3, #9
 800269e:	e00e      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026a0:	2307      	movs	r3, #7
 80026a2:	e00c      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026a4:	2306      	movs	r3, #6
 80026a6:	e00a      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026a8:	2305      	movs	r3, #5
 80026aa:	e008      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026b0:	2303      	movs	r3, #3
 80026b2:	e004      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e002      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_GPIO_Init+0x222>
 80026bc:	2300      	movs	r3, #0
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	f002 0203 	and.w	r2, r2, #3
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	4093      	lsls	r3, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026d0:	4936      	ldr	r1, [pc, #216]	; (80027ac <HAL_GPIO_Init+0x310>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_GPIO_Init+0x338>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002702:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <HAL_GPIO_Init+0x338>)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_GPIO_Init+0x338>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800272c:	4a29      	ldr	r2, [pc, #164]	; (80027d4 <HAL_GPIO_Init+0x338>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_GPIO_Init+0x338>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_GPIO_Init+0x338>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_GPIO_Init+0x338>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_GPIO_Init+0x338>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f ae88 	bne.w	80024ac <HAL_GPIO_Init+0x10>
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40021400 	.word	0x40021400
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40021c00 	.word	0x40021c00
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027e6:	e0d1      	b.n	800298c <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027e8:	2201      	movs	r2, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80c4 	beq.w	8002986 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027fe:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_GPIO_DeInit+0x1d0>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a62      	ldr	r2, [pc, #392]	; (80029ac <HAL_GPIO_DeInit+0x1d4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d031      	beq.n	800288c <HAL_GPIO_DeInit+0xb4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a61      	ldr	r2, [pc, #388]	; (80029b0 <HAL_GPIO_DeInit+0x1d8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d02b      	beq.n	8002888 <HAL_GPIO_DeInit+0xb0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_GPIO_DeInit+0x1dc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d025      	beq.n	8002884 <HAL_GPIO_DeInit+0xac>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_GPIO_DeInit+0x1e0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01f      	beq.n	8002880 <HAL_GPIO_DeInit+0xa8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a5e      	ldr	r2, [pc, #376]	; (80029bc <HAL_GPIO_DeInit+0x1e4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d019      	beq.n	800287c <HAL_GPIO_DeInit+0xa4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a5d      	ldr	r2, [pc, #372]	; (80029c0 <HAL_GPIO_DeInit+0x1e8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_GPIO_DeInit+0xa0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <HAL_GPIO_DeInit+0x1ec>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00d      	beq.n	8002874 <HAL_GPIO_DeInit+0x9c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <HAL_GPIO_DeInit+0x1f0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_DeInit+0x98>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a5a      	ldr	r2, [pc, #360]	; (80029cc <HAL_GPIO_DeInit+0x1f4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_GPIO_DeInit+0x94>
 8002868:	2308      	movs	r3, #8
 800286a:	e010      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 800286c:	2309      	movs	r3, #9
 800286e:	e00e      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 8002870:	2307      	movs	r3, #7
 8002872:	e00c      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 8002874:	2306      	movs	r3, #6
 8002876:	e00a      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 8002878:	2305      	movs	r3, #5
 800287a:	e008      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 800287c:	2304      	movs	r3, #4
 800287e:	e006      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 8002880:	2303      	movs	r3, #3
 8002882:	e004      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 8002884:	2302      	movs	r3, #2
 8002886:	e002      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_GPIO_DeInit+0xb6>
 800288c:	2300      	movs	r3, #0
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	fa03 f202 	lsl.w	r2, r3, r2
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d132      	bne.n	8002906 <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	4949      	ldr	r1, [pc, #292]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028ae:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4946      	ldr	r1, [pc, #280]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028bc:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	4942      	ldr	r1, [pc, #264]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028ca:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	493f      	ldr	r1, [pc, #252]	; (80029d0 <HAL_GPIO_DeInit+0x1f8>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <HAL_GPIO_DeInit+0x1d0>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43da      	mvns	r2, r3
 80028f8:	482b      	ldr	r0, [pc, #172]	; (80029a8 <HAL_GPIO_DeInit+0x1d0>)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	400a      	ands	r2, r1
 8002900:	3302      	adds	r3, #2
 8002902:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2103      	movs	r1, #3
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	08d2      	lsrs	r2, r2, #3
 800293c:	4019      	ands	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2103      	movs	r1, #3
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	2101      	movs	r1, #1
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2103      	movs	r1, #3
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f af27 	bne.w	80027e8 <HAL_GPIO_DeInit+0x10>
  }
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40021c00 	.word	0x40021c00
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e001      	b.n	80029f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	807b      	strh	r3, [r7, #2]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a12:	787b      	ldrb	r3, [r7, #1]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a18:	887a      	ldrh	r2, [r7, #2]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a1e:	e003      	b.n	8002a28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	041a      	lsls	r2, r3, #16
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e12b      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd febc 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a98:	f001 fed8 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8002a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a81      	ldr	r2, [pc, #516]	; (8002ca8 <HAL_I2C_Init+0x274>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d807      	bhi.n	8002ab8 <HAL_I2C_Init+0x84>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a80      	ldr	r2, [pc, #512]	; (8002cac <HAL_I2C_Init+0x278>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e006      	b.n	8002ac6 <HAL_I2C_Init+0x92>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a7d      	ldr	r2, [pc, #500]	; (8002cb0 <HAL_I2C_Init+0x27c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	bf94      	ite	ls
 8002ac0:	2301      	movls	r3, #1
 8002ac2:	2300      	movhi	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0e7      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a78      	ldr	r2, [pc, #480]	; (8002cb4 <HAL_I2C_Init+0x280>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a6a      	ldr	r2, [pc, #424]	; (8002ca8 <HAL_I2C_Init+0x274>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d802      	bhi.n	8002b08 <HAL_I2C_Init+0xd4>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3301      	adds	r3, #1
 8002b06:	e009      	b.n	8002b1c <HAL_I2C_Init+0xe8>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	4a69      	ldr	r2, [pc, #420]	; (8002cb8 <HAL_I2C_Init+0x284>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	495c      	ldr	r1, [pc, #368]	; (8002ca8 <HAL_I2C_Init+0x274>)
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	d819      	bhi.n	8002b70 <HAL_I2C_Init+0x13c>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e59      	subs	r1, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4a:	1c59      	adds	r1, r3, #1
 8002b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b50:	400b      	ands	r3, r1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_I2C_Init+0x138>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e59      	subs	r1, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	e051      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e04f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_I2C_Init+0x168>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e58      	subs	r0, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e012      	b.n	8002bc2 <HAL_I2C_Init+0x18e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Init+0x196>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e022      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_I2C_Init+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e58      	subs	r0, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	440b      	add	r3, r1
 8002be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bee:	e00f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	0099      	lsls	r1, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6809      	ldr	r1, [r1, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6911      	ldr	r1, [r2, #16]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	000186a0 	.word	0x000186a0
 8002cac:	001e847f 	.word	0x001e847f
 8002cb0:	003d08ff 	.word	0x003d08ff
 8002cb4:	431bde83 	.word	0x431bde83
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cbe:	b08f      	sub	sp, #60	; 0x3c
 8002cc0:	af0a      	add	r7, sp, #40	; 0x28
 8002cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e10f      	b.n	8002eee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f009 fdb7 	bl	800c85c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f005 ff8b 	bl	8008c28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	687e      	ldr	r6, [r7, #4]
 8002d1a:	466d      	mov	r5, sp
 8002d1c:	f106 0410 	add.w	r4, r6, #16
 8002d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d30:	1d33      	adds	r3, r6, #4
 8002d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	f005 fe6d 	bl	8008a14 <USB_CoreInit>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d0      	b.n	8002eee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 ff78 	bl	8008c48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e04a      	b.n	8002df4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	333d      	adds	r3, #61	; 0x3d
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	333c      	adds	r3, #60	; 0x3c
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	b298      	uxth	r0, r3
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3342      	adds	r3, #66	; 0x42
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	333f      	adds	r3, #63	; 0x3f
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3344      	adds	r3, #68	; 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3348      	adds	r3, #72	; 0x48
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	3301      	adds	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3af      	bcc.n	8002d5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	e044      	b.n	8002e8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3b5      	bcc.n	8002e04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	687e      	ldr	r6, [r7, #4]
 8002ea0:	466d      	mov	r5, sp
 8002ea2:	f106 0410 	add.w	r4, r6, #16
 8002ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb6:	1d33      	adds	r3, r6, #4
 8002eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f005 ff10 	bl	8008ce0 <USB_DevInit>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00d      	b.n	8002eee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f006 ff81 	bl	8009dee <USB_DevDisconnect>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_PCD_Start+0x16>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e012      	b.n	8002f32 <HAL_PCD_Start+0x3c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f005 fe75 	bl	8008c08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 ff43 	bl	8009dae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f3a:	b590      	push	{r4, r7, lr}
 8002f3c:	b08d      	sub	sp, #52	; 0x34
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f006 fffa 	bl	8009f4a <USB_GetMode>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 838f 	bne.w	800367c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f006 ff63 	bl	8009e2e <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8385 	beq.w	800367a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f006 ff5a 	bl	8009e2e <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f002 0202 	and.w	r2, r2, #2
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f006 ff48 	bl	8009e2e <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d161      	bne.n	800306c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0210 	bic.w	r2, r2, #16
 8002fb6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	0c5b      	lsrs	r3, r3, #17
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d124      	bne.n	800302e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d035      	beq.n	800305c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	6a38      	ldr	r0, [r7, #32]
 8003004:	f006 fd85 	bl	8009b12 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003014:	441a      	add	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003026:	441a      	add	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	e016      	b.n	800305c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	0c5b      	lsrs	r3, r3, #17
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2b06      	cmp	r3, #6
 8003038:	d110      	bne.n	800305c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003040:	2208      	movs	r2, #8
 8003042:	4619      	mov	r1, r3
 8003044:	6a38      	ldr	r0, [r7, #32]
 8003046:	f006 fd64 	bl	8009b12 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003056:	441a      	add	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0210 	orr.w	r2, r2, #16
 800306a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f006 fedc 	bl	8009e2e <USB_ReadInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003080:	d16e      	bne.n	8003160 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f006 fee1 	bl	8009e52 <USB_ReadDevAllOutEpInterrupt>
 8003090:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003092:	e062      	b.n	800315a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d057      	beq.n	800314e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f006 ff04 	bl	8009eb6 <USB_ReadDevOutEPInterrupt>
 80030ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	461a      	mov	r2, r3
 80030c8:	2301      	movs	r3, #1
 80030ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fda2 	bl	8003c18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	2308      	movs	r3, #8
 80030ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fe9c 	bl	8003e30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310e:	461a      	mov	r2, r3
 8003110:	2310      	movs	r3, #16
 8003112:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	461a      	mov	r2, r3
 800312c:	2320      	movs	r3, #32
 800312e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800314c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	3301      	adds	r3, #1
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d199      	bne.n	8003094 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f006 fe62 	bl	8009e2e <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003174:	f040 80c0 	bne.w	80032f8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f006 fe81 	bl	8009e84 <USB_ReadDevAllInEpInterrupt>
 8003182:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003188:	e0b2      	b.n	80032f0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a7 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f006 fea5 	bl	8009ef0 <USB_ReadDevInEPInterrupt>
 80031a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d057      	beq.n	8003262 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2201      	movs	r2, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69f9      	ldr	r1, [r7, #28]
 80031ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d2:	4013      	ands	r3, r2
 80031d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e2:	461a      	mov	r2, r3
 80031e4:	2301      	movs	r3, #1
 80031e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d132      	bne.n	8003256 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3348      	adds	r3, #72	; 0x48
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4403      	add	r3, r0
 8003210:	3344      	adds	r3, #68	; 0x44
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4419      	add	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4403      	add	r3, r0
 8003224:	3348      	adds	r3, #72	; 0x48
 8003226:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	2b00      	cmp	r3, #0
 800322c:	d113      	bne.n	8003256 <HAL_PCD_IRQHandler+0x31c>
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3350      	adds	r3, #80	; 0x50
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800324e:	461a      	mov	r2, r3
 8003250:	2101      	movs	r1, #1
 8003252:	f006 fea9 	bl	8009fa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f009 fb8c 	bl	800c97a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003278:	461a      	mov	r2, r3
 800327a:	2308      	movs	r3, #8
 800327c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003294:	461a      	mov	r2, r3
 8003296:	2310      	movs	r3, #16
 8003298:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b0:	461a      	mov	r2, r3
 80032b2:	2340      	movs	r3, #64	; 0x40
 80032b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	461a      	mov	r2, r3
 80032ce:	2302      	movs	r3, #2
 80032d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fc0c 	bl	8003afc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	3301      	adds	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f47f af49 	bne.w	800318a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f006 fd96 	bl	8009e2e <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800330c:	d114      	bne.n	8003338 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f009 fba0 	bl	800ca68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f006 fd76 	bl	8009e2e <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334c:	d112      	bne.n	8003374 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f009 fb5c 	bl	800ca1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003372:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f006 fd58 	bl	8009e2e <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	f040 80c7 	bne.w	800351a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2110      	movs	r1, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 fdfe 	bl	8008fa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b0:	e056      	b.n	8003460 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	461a      	mov	r2, r3
 80033c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d6:	0151      	lsls	r1, r2, #5
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	440a      	add	r2, r1
 80033dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033e4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f6:	0151      	lsls	r1, r2, #5
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	440a      	add	r2, r1
 80033fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003404:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	461a      	mov	r2, r3
 8003414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003418:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	440a      	add	r2, r1
 8003430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344a:	0151      	lsls	r1, r2, #5
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	440a      	add	r2, r1
 8003450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003458:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	3301      	adds	r3, #1
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d3a3      	bcc.n	80033b2 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003478:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800347c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003496:	f043 030b 	orr.w	r3, r3, #11
 800349a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ac:	f043 030b 	orr.w	r3, r3, #11
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	e015      	b.n	80034e0 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034da:	f043 030b 	orr.w	r3, r3, #11
 80034de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003504:	461a      	mov	r2, r3
 8003506:	f006 fd4f 	bl	8009fa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f006 fc85 	bl	8009e2e <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d124      	bne.n	800357a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f006 fd15 	bl	8009f64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f005 fd8e 	bl	8009060 <USB_GetDevSpeed>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681c      	ldr	r4, [r3, #0]
 8003550:	f001 f972 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8003554:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	4620      	mov	r0, r4
 8003560:	f005 fab0 	bl	8008ac4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f009 fa30 	bl	800c9ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f006 fc55 	bl	8009e2e <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b08      	cmp	r3, #8
 800358c:	d10a      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f009 fa0d 	bl	800c9ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f002 0208 	and.w	r2, r2, #8
 80035a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f006 fc40 	bl	8009e2e <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b8:	d10f      	bne.n	80035da <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f009 fa6f 	bl	800caa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f006 fc25 	bl	8009e2e <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ee:	d10f      	bne.n	8003610 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f009 fa42 	bl	800ca84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800360e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f006 fc0a 	bl	8009e2e <USB_ReadInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d10a      	bne.n	800363c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f009 fa50 	bl	800cacc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800363a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f006 fbf4 	bl	8009e2e <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d115      	bne.n	800367c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f009 fa40 	bl	800cae8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	e000      	b.n	800367c <HAL_PCD_IRQHandler+0x742>
      return;
 800367a:	bf00      	nop
    }
  }
}
 800367c:	3734      	adds	r7, #52	; 0x34
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_PCD_SetAddress+0x1a>
 8003698:	2302      	movs	r3, #2
 800369a:	e013      	b.n	80036c4 <HAL_PCD_SetAddress+0x42>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f006 fb55 	bl	8009d64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	70fb      	strb	r3, [r7, #3]
 80036de:	460b      	mov	r3, r1
 80036e0:	803b      	strh	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da0f      	bge.n	8003712 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3338      	adds	r3, #56	; 0x38
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	705a      	strb	r2, [r3, #1]
 8003710:	e00f      	b.n	8003732 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	3304      	adds	r3, #4
 800372a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800373e:	883a      	ldrh	r2, [r7, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	78ba      	ldrb	r2, [r7, #2]
 8003748:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	785b      	ldrb	r3, [r3, #1]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800375c:	78bb      	ldrb	r3, [r7, #2]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d102      	bne.n	8003768 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_PCD_EP_Open+0xaa>
 8003772:	2302      	movs	r3, #2
 8003774:	e00e      	b.n	8003794 <HAL_PCD_EP_Open+0xc8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f005 fc8f 	bl	80090a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003792:	7afb      	ldrb	r3, [r7, #11]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da0f      	bge.n	80037d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3338      	adds	r3, #56	; 0x38
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	3304      	adds	r3, #4
 80037c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	705a      	strb	r2, [r3, #1]
 80037ce:	e00f      	b.n	80037f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_PCD_EP_Close+0x6e>
 8003806:	2302      	movs	r3, #2
 8003808:	e00e      	b.n	8003828 <HAL_PCD_EP_Close+0x8c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	4618      	mov	r0, r3
 800381a:	f005 fccb 	bl	80091b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	460b      	mov	r3, r1
 800383e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	3304      	adds	r3, #4
 8003858:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2200      	movs	r2, #0
 8003870:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	b2da      	uxtb	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d102      	bne.n	800388c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800388c:	7afb      	ldrb	r3, [r7, #11]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	f005 ffa6 	bl	80097f4 <USB_EP0StartXfer>
 80038a8:	e008      	b.n	80038bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	f005 fd58 	bl	800936c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038e8:	681b      	ldr	r3, [r3, #0]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	460b      	mov	r3, r1
 8003902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003904:	7afb      	ldrb	r3, [r7, #11]
 8003906:	f003 020f 	and.w	r2, r3, #15
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	3338      	adds	r3, #56	; 0x38
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	3304      	adds	r3, #4
 800391a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2201      	movs	r2, #1
 8003932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	b2da      	uxtb	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d102      	bne.n	800394e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	f005 ff45 	bl	80097f4 <USB_EP0StartXfer>
 800396a:	e008      	b.n	800397e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	f005 fcf7 	bl	800936c <USB_EPStartXfer>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d901      	bls.n	80039a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e050      	b.n	8003a48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da0f      	bge.n	80039ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	3338      	adds	r3, #56	; 0x38
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	3304      	adds	r3, #4
 80039c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	705a      	strb	r2, [r3, #1]
 80039cc:	e00d      	b.n	80039ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	3304      	adds	r3, #4
 80039e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_PCD_EP_SetStall+0x82>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e01e      	b.n	8003a48 <HAL_PCD_EP_SetStall+0xc0>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f006 f8d1 	bl	8009bc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2d9      	uxtb	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f006 fab5 	bl	8009fa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f003 020f 	and.w	r2, r3, #15
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d901      	bls.n	8003a6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e042      	b.n	8003af4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da0f      	bge.n	8003a96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	3338      	adds	r3, #56	; 0x38
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	705a      	strb	r2, [r3, #1]
 8003a94:	e00f      	b.n	8003ab6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	f003 020f 	and.w	r2, r3, #15
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_PCD_EP_ClrStall+0x86>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e00e      	b.n	8003af4 <HAL_PCD_EP_ClrStall+0xa4>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f006 f8d8 	bl	8009c9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3338      	adds	r3, #56	; 0x38
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d901      	bls.n	8003b34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e06c      	b.n	8003c0e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d902      	bls.n	8003b50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3303      	adds	r3, #3
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b58:	e02b      	b.n	8003bb2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d902      	bls.n	8003b76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3303      	adds	r3, #3
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	68d9      	ldr	r1, [r3, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4603      	mov	r3, r0
 8003b94:	6978      	ldr	r0, [r7, #20]
 8003b96:	f005 ff7f 	bl	8009a98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	441a      	add	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d809      	bhi.n	8003bdc <PCD_WriteEmptyTxFifo+0xe0>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d203      	bcs.n	8003bdc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1be      	bne.n	8003b5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d811      	bhi.n	8003c0c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	2201      	movs	r2, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c08:	4013      	ands	r3, r2
 8003c0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	333c      	adds	r3, #60	; 0x3c
 8003c30:	3304      	adds	r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	f040 80a0 	bne.w	8003d90 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d015      	beq.n	8003c86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a72      	ldr	r2, [pc, #456]	; (8003e28 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f240 80dd 	bls.w	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80d7 	beq.w	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c82:	6093      	str	r3, [r2, #8]
 8003c84:	e0cb      	b.n	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	6093      	str	r3, [r2, #8]
 8003ca2:	e0bc      	b.n	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 80b7 	bne.w	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d90f      	bls.n	8003cd8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd4:	6093      	str	r3, [r2, #8]
 8003cd6:	e0a2      	b.n	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	0159      	lsls	r1, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003cfe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d12:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d26:	6819      	ldr	r1, [r3, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4403      	add	r3, r0
 8003d36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4419      	add	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4403      	add	r3, r0
 8003d4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d50:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d114      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x16a>
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	f006 f913 	bl	8009fa8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f008 fddb 	bl	800c944 <HAL_PCD_DataOutStageCallback>
 8003d8e:	e046      	b.n	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <PCD_EP_OutXfrComplete_int+0x214>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d124      	bne.n	8003de2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	461a      	mov	r2, r3
 8003db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db4:	6093      	str	r3, [r2, #8]
 8003db6:	e032      	b.n	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f008 fdb2 	bl	800c944 <HAL_PCD_DataOutStageCallback>
 8003de0:	e01d      	b.n	8003e1e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d114      	bne.n	8003e12 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f006 f8cb 	bl	8009fa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f008 fd93 	bl	800c944 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	4f54300a 	.word	0x4f54300a
 8003e2c:	4f54310a 	.word	0x4f54310a

08003e30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d90e      	bls.n	8003e84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f008 fd4b 	bl	800c920 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d90c      	bls.n	8003eac <PCD_EP_OutSetupPacket_int+0x7c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	f006 f87e 	bl	8009fa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	4f54300a 	.word	0x4f54300a

08003ebc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eda:	883b      	ldrh	r3, [r7, #0]
 8003edc:	0419      	lsls	r1, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e028      	b.n	8003f3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e00d      	b.n	8003f1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3340      	adds	r3, #64	; 0x40
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	3301      	adds	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3ec      	bcc.n	8003efe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f24:	883b      	ldrh	r3, [r7, #0]
 8003f26:	0418      	lsls	r0, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4302      	orrs	r2, r0
 8003f34:	3340      	adds	r3, #64	; 0x40
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	887a      	ldrh	r2, [r7, #2]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e236      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d050      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	4b9e      	ldr	r3, [pc, #632]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4b9b      	ldr	r3, [pc, #620]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b98      	ldr	r3, [pc, #608]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b94      	ldr	r3, [pc, #592]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d036      	beq.n	8004026 <HAL_RCC_OscConfig+0xbe>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d132      	bne.n	8004026 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e211      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4b8e      	ldr	r3, [pc, #568]	; (8004204 <HAL_RCC_OscConfig+0x29c>)
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fcad 	bl	8001934 <HAL_GetTick>
 8003fda:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fde:	f7fd fca9 	bl	8001934 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1fb      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff0:	4b83      	ldr	r3, [pc, #524]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x76>
 8003ffc:	e014      	b.n	8004028 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fc99 	bl	8001934 <HAL_GetTick>
 8004002:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004006:	f7fd fc95 	bl	8001934 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1e7      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004018:	4b79      	ldr	r3, [pc, #484]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x9e>
 8004024:	e000      	b.n	8004028 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004026:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d077      	beq.n	8004124 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004034:	4b72      	ldr	r3, [pc, #456]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004040:	4b6f      	ldr	r3, [pc, #444]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004048:	2b08      	cmp	r3, #8
 800404a:	d126      	bne.n	800409a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404c:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d120      	bne.n	800409a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004058:	4b69      	ldr	r3, [pc, #420]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e1bb      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b63      	ldr	r3, [pc, #396]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	21f8      	movs	r1, #248	; 0xf8
 800407e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	fa91 f1a1 	rbit	r1, r1
 8004086:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004088:	6979      	ldr	r1, [r7, #20]
 800408a:	fab1 f181 	clz	r1, r1
 800408e:	b2c9      	uxtb	r1, r1
 8004090:	408b      	lsls	r3, r1
 8004092:	495b      	ldr	r1, [pc, #364]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004098:	e044      	b.n	8004124 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02a      	beq.n	80040f8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_OscConfig+0x2a0>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fd fc44 	bl	8001934 <HAL_GetTick>
 80040ac:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b0:	f7fd fc40 	bl	8001934 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e192      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	4b4f      	ldr	r3, [pc, #316]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b4c      	ldr	r3, [pc, #304]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	21f8      	movs	r1, #248	; 0xf8
 80040dc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	6939      	ldr	r1, [r7, #16]
 80040e0:	fa91 f1a1 	rbit	r1, r1
 80040e4:	60f9      	str	r1, [r7, #12]
  return result;
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	fab1 f181 	clz	r1, r1
 80040ec:	b2c9      	uxtb	r1, r1
 80040ee:	408b      	lsls	r3, r1
 80040f0:	4943      	ldr	r1, [pc, #268]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]
 80040f6:	e015      	b.n	8004124 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f8:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_OscConfig+0x2a0>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fd fc19 	bl	8001934 <HAL_GetTick>
 8004102:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004106:	f7fd fc15 	bl	8001934 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e167      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004118:	4b39      	ldr	r3, [pc, #228]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d030      	beq.n	8004192 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d016      	beq.n	8004166 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004138:	4b34      	ldr	r3, [pc, #208]	; (800420c <HAL_RCC_OscConfig+0x2a4>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413e:	f7fd fbf9 	bl	8001934 <HAL_GetTick>
 8004142:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd fbf5 	bl	8001934 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e147      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004158:	4b29      	ldr	r3, [pc, #164]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x1de>
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <HAL_RCC_OscConfig+0x2a4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416c:	f7fd fbe2 	bl	8001934 <HAL_GetTick>
 8004170:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004174:	f7fd fbde 	bl	8001934 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e130      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8087 	beq.w	80042ae <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d110      	bne.n	80041d4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	4a11      	ldr	r2, [pc, #68]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6413      	str	r3, [r2, #64]	; 0x40
 80041c2:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <HAL_RCC_OscConfig+0x298>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_RCC_OscConfig+0x2a8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <HAL_RCC_OscConfig+0x2a8>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041de:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x2a8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d122      	bne.n	8004232 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_RCC_OscConfig+0x2a8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_RCC_OscConfig+0x2a8>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f8:	f7fd fb9c 	bl	8001934 <HAL_GetTick>
 80041fc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	e012      	b.n	8004226 <HAL_RCC_OscConfig+0x2be>
 8004200:	40023800 	.word	0x40023800
 8004204:	40023802 	.word	0x40023802
 8004208:	42470000 	.word	0x42470000
 800420c:	42470e80 	.word	0x42470e80
 8004210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004214:	f7fd fb8e 	bl	8001934 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e0e0      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <HAL_RCC_OscConfig+0x488>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x48c>)
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004244:	f7fd fb76 	bl	8001934 <HAL_GetTick>
 8004248:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fd fb72 	bl	8001934 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0c2      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ee      	beq.n	800424c <HAL_RCC_OscConfig+0x2e4>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004270:	f7fd fb60 	bl	8001934 <HAL_GetTick>
 8004274:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fd fb5c 	bl	8001934 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0ac      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428e:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ee      	bne.n	8004278 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b55      	ldr	r3, [pc, #340]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a54      	ldr	r2, [pc, #336]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8097 	beq.w	80043e6 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d061      	beq.n	8004388 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d146      	bne.n	800435a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b4b      	ldr	r3, [pc, #300]	; (80043fc <HAL_RCC_OscConfig+0x494>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fd fb2f 	bl	8001934 <HAL_GetTick>
 80042d6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042da:	f7fd fb2b 	bl	8001934 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e07d      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ec:	4b42      	ldr	r3, [pc, #264]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_RCC_OscConfig+0x498>)
 80042fe:	4013      	ands	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	69d1      	ldr	r1, [r2, #28]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6a12      	ldr	r2, [r2, #32]
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800430e:	0192      	lsls	r2, r2, #6
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004316:	0612      	lsls	r2, r2, #24
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	3a01      	subs	r2, #1
 8004322:	0412      	lsls	r2, r2, #16
 8004324:	430a      	orrs	r2, r1
 8004326:	4934      	ldr	r1, [pc, #208]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b33      	ldr	r3, [pc, #204]	; (80043fc <HAL_RCC_OscConfig+0x494>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fd faff 	bl	8001934 <HAL_GetTick>
 8004336:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd fafb 	bl	8001934 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e04d      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x3d2>
 8004358:	e045      	b.n	80043e6 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_RCC_OscConfig+0x494>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd fae8 	bl	8001934 <HAL_GetTick>
 8004364:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004368:	f7fd fae4 	bl	8001934 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e036      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x400>
 8004386:	e02e      	b.n	80043e6 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e029      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004394:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <HAL_RCC_OscConfig+0x490>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d11c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d115      	bne.n	80043e2 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10d      	bne.n	80043e2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d106      	bne.n	80043e2 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40007000 	.word	0x40007000
 80043f4:	40023870 	.word	0x40023870
 80043f8:	40023800 	.word	0x40023800
 80043fc:	42470060 	.word	0x42470060
 8004400:	f0bc8000 	.word	0xf0bc8000

08004404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0d2      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004418:	4b6b      	ldr	r3, [pc, #428]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d90c      	bls.n	8004440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b68      	ldr	r3, [pc, #416]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b66      	ldr	r3, [pc, #408]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0be      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004458:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004470:	4b56      	ldr	r3, [pc, #344]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a55      	ldr	r2, [pc, #340]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4950      	ldr	r1, [pc, #320]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d040      	beq.n	800451c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d115      	bne.n	80044da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e085      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	4b44      	ldr	r3, [pc, #272]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e079      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b40      	ldr	r3, [pc, #256]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e071      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4939      	ldr	r1, [pc, #228]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fd fa22 	bl	8001934 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fd fa1e 	bl	8001934 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e059      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b30      	ldr	r3, [pc, #192]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b2a      	ldr	r3, [pc, #168]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d20c      	bcs.n	8004544 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e03c      	b.n	80045be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	491b      	ldr	r1, [pc, #108]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456e:	4b17      	ldr	r3, [pc, #92]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4913      	ldr	r1, [pc, #76]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004582:	f000 f893 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8004586:	4601      	mov	r1, r0
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004590:	22f0      	movs	r2, #240	; 0xf0
 8004592:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	fa92 f2a2 	rbit	r2, r2
 800459a:	60fa      	str	r2, [r7, #12]
  return result;
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	fab2 f282 	clz	r2, r2
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	40d3      	lsrs	r3, r2
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1cc>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	fa21 f303 	lsr.w	r3, r1, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1d0>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1d4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd f98c 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00
 80045cc:	40023800 	.word	0x40023800
 80045d0:	0800d16c 	.word	0x0800d16c
 80045d4:	20000040 	.word	0x20000040
 80045d8:	20000044 	.word	0x20000044

080045dc <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	; 0x30
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d129      	bne.n	8004642 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800460a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800460e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004610:	2302      	movs	r3, #2
 8004612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004614:	2303      	movs	r3, #3
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800461c:	2300      	movs	r3, #0
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004620:	f107 031c 	add.w	r3, r7, #28
 8004624:	4619      	mov	r1, r3
 8004626:	481f      	ldr	r0, [pc, #124]	; (80046a4 <HAL_RCC_MCOConfig+0xc8>)
 8004628:	f7fd ff38 	bl	800249c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	430b      	orrs	r3, r1
 800463a:	4919      	ldr	r1, [pc, #100]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
  }
}
 8004640:	e029      	b.n	8004696 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800465e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004664:	2302      	movs	r3, #2
 8004666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004668:	2303      	movs	r3, #3
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004674:	f107 031c 	add.w	r3, r7, #28
 8004678:	4619      	mov	r1, r3
 800467a:	480b      	ldr	r0, [pc, #44]	; (80046a8 <HAL_RCC_MCOConfig+0xcc>)
 800467c:	f7fd ff0e 	bl	800249c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	430b      	orrs	r3, r1
 8004690:	4903      	ldr	r1, [pc, #12]	; (80046a0 <HAL_RCC_MCOConfig+0xc4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
}
 8004696:	bf00      	nop
 8004698:	3730      	adds	r7, #48	; 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40020000 	.word	0x40020000
 80046a8:	40020800 	.word	0x40020800

080046ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b0:	b090      	sub	sp, #64	; 0x40
 80046b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046bc:	2300      	movs	r3, #0
 80046be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d00d      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x40>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	f200 80a2 	bhi.w	800481a <HAL_RCC_GetSysClockFreq+0x16e>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x34>
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046de:	e09c      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_GetSysClockFreq+0x184>)
 80046e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046e4:	e09c      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e6:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ea:	e099      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ec:	4b4f      	ldr	r3, [pc, #316]	; (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f6:	4b4d      	ldr	r3, [pc, #308]	; (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d027      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004702:	4b4a      	ldr	r3, [pc, #296]	; (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	2200      	movs	r2, #0
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	627a      	str	r2, [r7, #36]	; 0x24
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004714:	2100      	movs	r1, #0
 8004716:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 8004718:	fb03 f201 	mul.w	r2, r3, r1
 800471c:	2300      	movs	r3, #0
 800471e:	fb00 f303 	mul.w	r3, r0, r3
 8004722:	4413      	add	r3, r2
 8004724:	4a43      	ldr	r2, [pc, #268]	; (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 8004726:	fba0 2102 	umull	r2, r1, r0, r2
 800472a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800472c:	62ba      	str	r2, [r7, #40]	; 0x28
 800472e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004730:	4413      	add	r3, r2
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004736:	2200      	movs	r2, #0
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	61fa      	str	r2, [r7, #28]
 800473c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004744:	f7fb fd3e 	bl	80001c4 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004750:	e055      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004752:	4b36      	ldr	r3, [pc, #216]	; (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	2200      	movs	r2, #0
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	617a      	str	r2, [r7, #20]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004764:	f04f 0b00 	mov.w	fp, #0
 8004768:	4652      	mov	r2, sl
 800476a:	465b      	mov	r3, fp
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	0159      	lsls	r1, r3, #5
 8004776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477a:	0150      	lsls	r0, r2, #5
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	ebb2 080a 	subs.w	r8, r2, sl
 8004784:	eb63 090b 	sbc.w	r9, r3, fp
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004794:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004798:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800479c:	ebb2 0408 	subs.w	r4, r2, r8
 80047a0:	eb63 0509 	sbc.w	r5, r3, r9
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	00eb      	lsls	r3, r5, #3
 80047ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	eb14 030a 	adds.w	r3, r4, sl
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	eb45 030b 	adc.w	r3, r5, fp
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047d0:	4629      	mov	r1, r5
 80047d2:	028b      	lsls	r3, r1, #10
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	4604      	mov	r4, r0
 80047da:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80047de:	4601      	mov	r1, r0
 80047e0:	028a      	lsls	r2, r1, #10
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	2200      	movs	r2, #0
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	60fa      	str	r2, [r7, #12]
 80047ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f2:	f7fb fce7 	bl	80001c4 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4613      	mov	r3, r2
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	0c1b      	lsrs	r3, r3, #16
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	3301      	adds	r3, #1
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800480e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004818:	e002      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetSysClockFreq+0x184>)
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800481e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004822:	4618      	mov	r0, r3
 8004824:	3740      	adds	r7, #64	; 0x40
 8004826:	46bd      	mov	sp, r7
 8004828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	00f42400 	.word	0x00f42400
 8004834:	017d7840 	.word	0x017d7840

08004838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800483c:	4b02      	ldr	r3, [pc, #8]	; (8004848 <HAL_RCC_GetHCLKFreq+0x10>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	20000040 	.word	0x20000040

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004852:	f7ff fff1 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004856:	4601      	mov	r1, r0
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004860:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004864:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	fa92 f2a2 	rbit	r2, r2
 800486c:	603a      	str	r2, [r7, #0]
  return result;
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	fab2 f282 	clz	r2, r2
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	40d3      	lsrs	r3, r2
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <HAL_RCC_GetPCLK1Freq+0x40>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	0800d17c 	.word	0x0800d17c

08004890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004896:	f7ff ffcf 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 800489a:	4601      	mov	r1, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80048a4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80048a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	fa92 f2a2 	rbit	r2, r2
 80048b0:	603a      	str	r2, [r7, #0]
  return result;
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	fab2 f282 	clz	r2, r2
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	40d3      	lsrs	r3, r2
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800
 80048d0:	0800d17c 	.word	0x0800d17c

080048d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d14c      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f8:	4b6d      	ldr	r3, [pc, #436]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048fe:	f7fd f819 	bl	8001934 <HAL_GetTick>
 8004902:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004906:	f7fd f815 	bl	8001934 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e0c7      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004918:	4b66      	ldr	r3, [pc, #408]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f0      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800492c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	fa92 f2a2 	rbit	r2, r2
 8004934:	613a      	str	r2, [r7, #16]
  return result;
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	fab2 f282 	clz	r2, r2
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	fa03 f202 	lsl.w	r2, r3, r2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800494a:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	fa91 f1a1 	rbit	r1, r1
 8004952:	61b9      	str	r1, [r7, #24]
  return result;
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	fab1 f181 	clz	r1, r1
 800495a:	b2c9      	uxtb	r1, r1
 800495c:	408b      	lsls	r3, r1
 800495e:	4955      	ldr	r1, [pc, #340]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004966:	4b52      	ldr	r3, [pc, #328]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800496c:	f7fc ffe2 	bl	8001934 <HAL_GetTick>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004974:	f7fc ffde 	bl	8001934 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e090      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004986:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8083 	beq.w	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	4a42      	ldr	r2, [pc, #264]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ae:	6413      	str	r3, [r2, #64]	; 0x40
 80049b0:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049bc:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3d      	ldr	r2, [pc, #244]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c6:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fc ffb4 	bl	8001934 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fc ffb0 	bl	8001934 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e062      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049e2:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ee:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d02f      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	6a3a      	ldr	r2, [r7, #32]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d028      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1c:	4b27      	ldr	r3, [pc, #156]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a22:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a28:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d114      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fc ff7e 	bl	8001934 <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fc ff7a 	bl	8001934 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e02a      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a52:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ee      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
 8004a86:	e005      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a92:	6093      	str	r3, [r2, #8]
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004a96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	4904      	ldr	r1, [pc, #16]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	42470068 	.word	0x42470068
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42470e40 	.word	0x42470e40

08004ac0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e01c      	b.n	8004b0c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	795b      	ldrb	r3, [r3, #5]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fb fffc 	bl	8000ae0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0204 	orr.w	r2, r2, #4
 8004afc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07c      	b.n	8004c20 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7f5b      	ldrb	r3, [r3, #29]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc f84a 	bl	8000bd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	22ca      	movs	r2, #202	; 0xca
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2253      	movs	r2, #83	; 0x53
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9e6 	bl	8004f24 <RTC_EnterInitMode>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	22ff      	movs	r2, #255	; 0xff
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e057      	b.n	8004c20 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b82:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68d2      	ldr	r2, [r2, #12]
 8004baa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6919      	ldr	r1, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	041a      	lsls	r2, r3, #16
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bce:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f97f 	bl	8004ed4 <HAL_RTC_WaitForSynchro>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2204      	movs	r2, #4
 8004be8:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e018      	b.n	8004c20 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	7f1b      	ldrb	r3, [r3, #28]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_RTC_SetTime+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0a3      	b.n	8004d8c <HAL_RTC_SetTime+0x164>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d126      	bne.n	8004ca4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f984 	bl	8004f7c <RTC_ByteToBcd2>
 8004c74:	4603      	mov	r3, r0
 8004c76:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f97d 	bl	8004f7c <RTC_ByteToBcd2>
 8004c82:	4603      	mov	r3, r0
 8004c84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c86:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	789b      	ldrb	r3, [r3, #2]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f975 	bl	8004f7c <RTC_ByteToBcd2>
 8004c92:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	78db      	ldrb	r3, [r3, #3]
 8004c9c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e018      	b.n	8004cd6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004cc4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004cca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	78db      	ldrb	r3, [r3, #3]
 8004cd0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	22ca      	movs	r2, #202	; 0xca
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2253      	movs	r2, #83	; 0x53
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f91c 	bl	8004f24 <RTC_EnterInitMode>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e040      	b.n	8004d8c <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d18:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d28:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d50:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f8be 	bl	8004ed4 <HAL_RTC_WaitForSynchro>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e00a      	b.n	8004d8c <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
  }
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}

08004d94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	7f1b      	ldrb	r3, [r3, #28]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_RTC_SetDate+0x1c>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e08d      	b.n	8004ecc <HAL_RTC_SetDate+0x138>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2202      	movs	r2, #2
 8004dba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10e      	bne.n	8004de0 <HAL_RTC_SetDate+0x4c>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d008      	beq.n	8004de0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	f023 0310 	bic.w	r3, r3, #16
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	330a      	adds	r3, #10
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11c      	bne.n	8004e20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	78db      	ldrb	r3, [r3, #3]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f8c6 	bl	8004f7c <RTC_ByteToBcd2>
 8004df0:	4603      	mov	r3, r0
 8004df2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f8bf 	bl	8004f7c <RTC_ByteToBcd2>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e02:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	789b      	ldrb	r3, [r3, #2]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f8b7 	bl	8004f7c <RTC_ByteToBcd2>
 8004e0e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e10:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e00e      	b.n	8004e3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	78db      	ldrb	r3, [r3, #3]
 8004e24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e2c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	22ca      	movs	r2, #202	; 0xca
 8004e44:	625a      	str	r2, [r3, #36]	; 0x24
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2253      	movs	r2, #83	; 0x53
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f868 	bl	8004f24 <RTC_EnterInitMode>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	22ff      	movs	r2, #255	; 0xff
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2204      	movs	r2, #4
 8004e66:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e02c      	b.n	8004ecc <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e90:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f81e 	bl	8004ed4 <HAL_RTC_WaitForSynchro>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	22ff      	movs	r2, #255	; 0xff
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e00a      	b.n	8004ecc <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004eca:	2300      	movs	r3, #0
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd90      	pop	{r4, r7, pc}

08004ed4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef0:	f7fc fd20 	bl	8001934 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ef6:	e009      	b.n	8004f0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ef8:	f7fc fd1c 	bl	8001934 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f06:	d901      	bls.n	8004f0c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e007      	b.n	8004f1c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d119      	bne.n	8004f72 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f04f 32ff 	mov.w	r2, #4294967295
 8004f46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f48:	f7fc fcf4 	bl	8001934 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f4e:	e009      	b.n	8004f64 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f50:	f7fc fcf0 	bl	8001934 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f5e:	d901      	bls.n	8004f64 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e007      	b.n	8004f74 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ee      	beq.n	8004f50 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8004f8a:	e005      	b.n	8004f98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	3b0a      	subs	r3, #10
 8004f96:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d8f6      	bhi.n	8004f8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b2db      	uxtb	r3, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e022      	b.n	800500e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fb fe2e 	bl	8000c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f815 	bl	8005018 <HAL_SD_InitCard>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e00a      	b.n	800500e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005018:	b5b0      	push	{r4, r5, r7, lr}
 800501a:	b08e      	sub	sp, #56	; 0x38
 800501c:	af04      	add	r7, sp, #16
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005020:	2300      	movs	r3, #0
 8005022:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005034:	2376      	movs	r3, #118	; 0x76
 8005036:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681d      	ldr	r5, [r3, #0]
 800503c:	466c      	mov	r4, sp
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005050:	4628      	mov	r0, r5
 8005052:	f002 ff77 	bl	8007f44 <SDIO_Init>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800505c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e04c      	b.n	8005102 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005068:	4b28      	ldr	r3, [pc, #160]	; (800510c <HAL_SD_InitCard+0xf4>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f002 ffac 	bl	8007fd0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005078:	4b24      	ldr	r3, [pc, #144]	; (800510c <HAL_SD_InitCard+0xf4>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff04 	bl	8005e8c <SD_PowerON>
 8005084:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e02e      	b.n	8005102 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fe23 	bl	8005cf0 <SD_InitCard>
 80050aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e01b      	b.n	8005102 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050d2:	4618      	mov	r0, r3
 80050d4:	f003 f80a 	bl	80080ec <SDMMC_CmdBlockLength>
 80050d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00f      	beq.n	8005100 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <HAL_SD_InitCard+0xf8>)
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3728      	adds	r7, #40	; 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bdb0      	pop	{r4, r5, r7, pc}
 800510a:	bf00      	nop
 800510c:	422580a0 	.word	0x422580a0
 8005110:	004005ff 	.word	0x004005ff

08005114 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b092      	sub	sp, #72	; 0x48
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005122:	f7fc fc07 	bl	8001934 <HAL_GetTick>
 8005126:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1bd      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	f040 81b0 	bne.w	80054b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800515a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	441a      	add	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	429a      	cmp	r2, r3
 8005166:	d907      	bls.n	8005178 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e1a4      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2200      	movs	r2, #0
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	2b01      	cmp	r3, #1
 800518e:	d002      	beq.n	8005196 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	025b      	lsls	r3, r3, #9
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
 800519a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	025b      	lsls	r3, r3, #9
 80051a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051a2:	2390      	movs	r3, #144	; 0x90
 80051a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80051a6:	2302      	movs	r3, #2
 80051a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f107 0214 	add.w	r2, r7, #20
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f002 ff6a 	bl	8008096 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d90a      	bls.n	80051de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2202      	movs	r2, #2
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 ffcd 	bl	8008174 <SDMMC_CmdReadMultiBlock>
 80051da:	6478      	str	r0, [r7, #68]	; 0x44
 80051dc:	e009      	b.n	80051f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 ffa0 	bl	8008130 <SDMMC_CmdReadSingleBlock>
 80051f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80051f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d012      	beq.n	800521e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a7a      	ldr	r2, [pc, #488]	; (80053e8 <HAL_SD_ReadBlocks+0x2d4>)
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	431a      	orrs	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e151      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005222:	e061      	b.n	80052e8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d03c      	beq.n	80052ac <HAL_SD_ReadBlocks+0x198>
 8005232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d039      	beq.n	80052ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005238:	2300      	movs	r3, #0
 800523a:	643b      	str	r3, [r7, #64]	; 0x40
 800523c:	e033      	b.n	80052a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f002 fea8 	bl	8007f98 <SDIO_ReadFIFO>
 8005248:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	3301      	adds	r3, #1
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	3b01      	subs	r3, #1
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	b2da      	uxtb	r2, r3
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	3301      	adds	r3, #1
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	3b01      	subs	r3, #1
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	b2da      	uxtb	r2, r3
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	3301      	adds	r3, #1
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005286:	3b01      	subs	r3, #1
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	0e1b      	lsrs	r3, r3, #24
 800528e:	b2da      	uxtb	r2, r3
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	3301      	adds	r3, #1
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	3b01      	subs	r3, #1
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	3301      	adds	r3, #1
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
 80052a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a8:	2b07      	cmp	r3, #7
 80052aa:	d9c8      	bls.n	800523e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052ac:	f7fc fb42 	bl	8001934 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <HAL_SD_ReadBlocks+0x1ae>
 80052bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d112      	bne.n	80052e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a48      	ldr	r2, [pc, #288]	; (80053e8 <HAL_SD_ReadBlocks+0x2d4>)
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0ec      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	f240 332a 	movw	r3, #810	; 0x32a
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d095      	beq.n	8005224 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d022      	beq.n	800534c <HAL_SD_ReadBlocks+0x238>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d91f      	bls.n	800534c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	2b03      	cmp	r3, #3
 8005312:	d01b      	beq.n	800534c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f002 ff91 	bl	8008240 <SDMMC_CmdStopTransfer>
 800531e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005322:	2b00      	cmp	r3, #0
 8005324:	d012      	beq.n	800534c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2f      	ldr	r2, [pc, #188]	; (80053e8 <HAL_SD_ReadBlocks+0x2d4>)
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0ba      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d012      	beq.n	8005380 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_SD_ReadBlocks+0x2d4>)
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	f043 0208 	orr.w	r2, r3, #8
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0a0      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d012      	beq.n	80053b4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_SD_ReadBlocks+0x2d4>)
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f043 0202 	orr.w	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e086      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d063      	beq.n	800548a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <HAL_SD_ReadBlocks+0x2d4>)
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	f043 0220 	orr.w	r2, r3, #32
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e06c      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
 80053e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f002 fdd1 	bl	8007f98 <SDIO_ReadFIFO>
 80053f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005402:	3301      	adds	r3, #1
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005408:	3b01      	subs	r3, #1
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	b2da      	uxtb	r2, r3
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	3301      	adds	r3, #1
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	3b01      	subs	r3, #1
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	b2da      	uxtb	r2, r3
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	3301      	adds	r3, #1
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	3b01      	subs	r3, #1
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	0e1b      	lsrs	r3, r3, #24
 800543c:	b2da      	uxtb	r2, r3
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	3301      	adds	r3, #1
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	3b01      	subs	r3, #1
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800544e:	f7fc fa71 	bl	8001934 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800545a:	429a      	cmp	r2, r3
 800545c:	d902      	bls.n	8005464 <HAL_SD_ReadBlocks+0x350>
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	2b00      	cmp	r3, #0
 8005462:	d112      	bne.n	800548a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a18      	ldr	r2, [pc, #96]	; (80054cc <HAL_SD_ReadBlocks+0x3b8>)
 800546a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e01b      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SD_ReadBlocks+0x38a>
 8005498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1a6      	bne.n	80053ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e006      	b.n	80054c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3748      	adds	r7, #72	; 0x48
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	004005ff 	.word	0x004005ff

080054d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b092      	sub	sp, #72	; 0x48
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054de:	f7fc fa29 	bl	8001934 <HAL_GetTick>
 80054e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e166      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	f040 8159 	bne.w	80057c2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	441a      	add	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	429a      	cmp	r2, r3
 8005522:	d907      	bls.n	8005534 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e14d      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2203      	movs	r2, #3
 8005538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2200      	movs	r2, #0
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005548:	2b01      	cmp	r3, #1
 800554a:	d002      	beq.n	8005552 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	025b      	lsls	r3, r3, #9
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005552:	f04f 33ff 	mov.w	r3, #4294967295
 8005556:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	025b      	lsls	r3, r3, #9
 800555c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800555e:	2390      	movs	r3, #144	; 0x90
 8005560:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005566:	2300      	movs	r3, #0
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800556a:	2301      	movs	r3, #1
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f107 0218 	add.w	r2, r7, #24
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f002 fd8c 	bl	8008096 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d90a      	bls.n	800559a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005590:	4618      	mov	r0, r3
 8005592:	f002 fe33 	bl	80081fc <SDMMC_CmdWriteMultiBlock>
 8005596:	6478      	str	r0, [r7, #68]	; 0x44
 8005598:	e009      	b.n	80055ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2210      	movs	r2, #16
 800559e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f002 fe06 	bl	80081b8 <SDMMC_CmdWriteSingleBlock>
 80055ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d012      	beq.n	80055da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a87      	ldr	r2, [pc, #540]	; (80057d8 <HAL_SD_WriteBlocks+0x308>)
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0fa      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80055de:	e065      	b.n	80056ac <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d040      	beq.n	8005670 <HAL_SD_WriteBlocks+0x1a0>
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03d      	beq.n	8005670 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	643b      	str	r3, [r7, #64]	; 0x40
 80055f8:	e037      	b.n	800566a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	3301      	adds	r3, #1
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005608:	3b01      	subs	r3, #1
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	021a      	lsls	r2, r3, #8
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	3301      	adds	r3, #1
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800561e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005620:	3b01      	subs	r3, #1
 8005622:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	041a      	lsls	r2, r3, #16
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	3301      	adds	r3, #1
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	3b01      	subs	r3, #1
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	061a      	lsls	r2, r3, #24
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	3301      	adds	r3, #1
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	3b01      	subs	r3, #1
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f107 0214 	add.w	r2, r7, #20
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f002 fca6 	bl	8007fb0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	3301      	adds	r3, #1
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	2b07      	cmp	r3, #7
 800566e:	d9c4      	bls.n	80055fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005670:	f7fc f960 	bl	8001934 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800567c:	429a      	cmp	r2, r3
 800567e:	d902      	bls.n	8005686 <HAL_SD_WriteBlocks+0x1b6>
 8005680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005682:	2b00      	cmp	r3, #0
 8005684:	d112      	bne.n	80056ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a53      	ldr	r2, [pc, #332]	; (80057d8 <HAL_SD_WriteBlocks+0x308>)
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e091      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b2:	f240 331a 	movw	r3, #794	; 0x31a
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d091      	beq.n	80055e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d022      	beq.n	8005710 <HAL_SD_WriteBlocks+0x240>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d91f      	bls.n	8005710 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d01b      	beq.n	8005710 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f002 fdaf 	bl	8008240 <SDMMC_CmdStopTransfer>
 80056e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80056e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d012      	beq.n	8005710 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3a      	ldr	r2, [pc, #232]	; (80057d8 <HAL_SD_WriteBlocks+0x308>)
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e05f      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <HAL_SD_WriteBlocks+0x308>)
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f043 0208 	orr.w	r2, r3, #8
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e045      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a20      	ldr	r2, [pc, #128]	; (80057d8 <HAL_SD_WriteBlocks+0x308>)
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e02b      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b00      	cmp	r3, #0
 8005784:	d012      	beq.n	80057ac <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <HAL_SD_WriteBlocks+0x308>)
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f043 0210 	orr.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e011      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e006      	b.n	80057d0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3748      	adds	r7, #72	; 0x48
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	004005ff 	.word	0x004005ff

080057dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ea:	0f9b      	lsrs	r3, r3, #30
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f6:	0e9b      	lsrs	r3, r3, #26
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	b2da      	uxtb	r2, r3
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	b2da      	uxtb	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b2da      	uxtb	r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005832:	b2da      	uxtb	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583c:	0d1b      	lsrs	r3, r3, #20
 800583e:	b29a      	uxth	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	b2da      	uxtb	r2, r3
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800585a:	0bdb      	lsrs	r3, r3, #15
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800586c:	0b9b      	lsrs	r3, r3, #14
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	b2da      	uxtb	r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800587e:	0b5b      	lsrs	r3, r3, #13
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	b2da      	uxtb	r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005890:	0b1b      	lsrs	r3, r3, #12
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	b2da      	uxtb	r2, r3
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2200      	movs	r2, #0
 80058a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d163      	bne.n	8005974 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b0:	009a      	lsls	r2, r3, #2
 80058b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058b6:	4013      	ands	r3, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80058bc:	0f92      	lsrs	r2, r2, #30
 80058be:	431a      	orrs	r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c8:	0edb      	lsrs	r3, r3, #27
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058da:	0e1b      	lsrs	r3, r3, #24
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ec:	0d5b      	lsrs	r3, r3, #21
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fe:	0c9b      	lsrs	r3, r3, #18
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	b2da      	uxtb	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005910:	0bdb      	lsrs	r3, r3, #15
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	7e1b      	ldrb	r3, [r3, #24]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	3302      	adds	r3, #2
 8005934:	2201      	movs	r2, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800593e:	fb03 f202 	mul.w	r2, r3, r2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	7a1b      	ldrb	r3, [r3, #8]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	2201      	movs	r2, #1
 8005952:	409a      	lsls	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005960:	0a52      	lsrs	r2, r2, #9
 8005962:	fb03 f202 	mul.w	r2, r3, r2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005970:	661a      	str	r2, [r3, #96]	; 0x60
 8005972:	e031      	b.n	80059d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005978:	2b01      	cmp	r3, #1
 800597a:	d11d      	bne.n	80059b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598a:	0c1b      	lsrs	r3, r3, #16
 800598c:	431a      	orrs	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	3301      	adds	r3, #1
 8005998:	029a      	lsls	r2, r3, #10
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	661a      	str	r2, [r3, #96]	; 0x60
 80059b6:	e00f      	b.n	80059d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a58      	ldr	r2, [pc, #352]	; (8005b20 <HAL_SD_GetCardCSD+0x344>)
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e09d      	b.n	8005b14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059dc:	0b9b      	lsrs	r3, r3, #14
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ee:	09db      	lsrs	r3, r3, #7
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	0fdb      	lsrs	r3, r3, #31
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	0f5b      	lsrs	r3, r3, #29
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	0e9b      	lsrs	r3, r3, #26
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	0d9b      	lsrs	r3, r3, #22
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	0d5b      	lsrs	r3, r3, #21
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	0c1b      	lsrs	r3, r3, #16
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	0bdb      	lsrs	r3, r3, #15
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	0b9b      	lsrs	r3, r3, #14
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	0b5b      	lsrs	r3, r3, #13
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	0b1b      	lsrs	r3, r3, #12
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	0a9b      	lsrs	r3, r3, #10
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	004005ff 	.word	0x004005ff

08005b24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005b7c:	b5b0      	push	{r4, r5, r7, lr}
 8005b7e:	b08e      	sub	sp, #56	; 0x38
 8005b80:	af04      	add	r7, sp, #16
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d02e      	beq.n	8005bfa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d106      	bne.n	8005bb2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
 8005bb0:	e029      	b.n	8005c06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	d10a      	bne.n	8005bd0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa1c 	bl	8005ff8 <SD_WideBus_Enable>
 8005bc0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8005bce:	e01a      	b.n	8005c06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa59 	bl	800608e <SD_WideBus_Disable>
 8005bdc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
 8005bea:	e00c      	b.n	8005c06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf8:	e005      	b.n	8005c06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a26      	ldr	r2, [pc, #152]	; (8005cac <HAL_SD_ConfigWideBusOperation+0x130>)
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c24:	e01f      	b.n	8005c66 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681d      	ldr	r5, [r3, #0]
 8005c4c:	466c      	mov	r4, sp
 8005c4e:	f107 0314 	add.w	r3, r7, #20
 8005c52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c5a:	f107 0308 	add.w	r3, r7, #8
 8005c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c60:	4628      	mov	r0, r5
 8005c62:	f002 f96f 	bl	8007f44 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f002 fa3c 	bl	80080ec <SDMMC_CmdBlockLength>
 8005c74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00c      	beq.n	8005c96 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <HAL_SD_ConfigWideBusOperation+0x130>)
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3728      	adds	r7, #40	; 0x28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8005caa:	bf00      	nop
 8005cac:	004005ff 	.word	0x004005ff

08005cb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005cbc:	f107 030c 	add.w	r3, r7, #12
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f970 	bl	8005fa8 <SD_SendStatus>
 8005cc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	0a5b      	lsrs	r3, r3, #9
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ce6:	693b      	ldr	r3, [r7, #16]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cf0:	b5b0      	push	{r4, r5, r7, lr}
 8005cf2:	b094      	sub	sp, #80	; 0x50
 8005cf4:	af04      	add	r7, sp, #16
 8005cf6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f002 f974 	bl	8007fee <SDIO_GetPowerState>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d10:	e0b8      	b.n	8005e84 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d02f      	beq.n	8005d7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f002 fb98 	bl	8008454 <SDMMC_CmdSendCID>
 8005d24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <SD_InitCard+0x40>
    {
      return errorstate;
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2e:	e0a9      	b.n	8005e84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f002 f99b 	bl	8008072 <SDIO_GetResponse>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2104      	movs	r1, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 f992 	bl	8008072 <SDIO_GetResponse>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2108      	movs	r1, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f002 f989 	bl	8008072 <SDIO_GetResponse>
 8005d60:	4602      	mov	r2, r0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	210c      	movs	r1, #12
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f002 f980 	bl	8008072 <SDIO_GetResponse>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d00d      	beq.n	8005d9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f107 020e 	add.w	r2, r7, #14
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f002 fb9e 	bl	80084ce <SDMMC_CmdSetRelAdd>
 8005d92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <SD_InitCard+0xae>
    {
      return errorstate;
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9c:	e072      	b.n	8005e84 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d036      	beq.n	8005e14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	461a      	mov	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db6:	041b      	lsls	r3, r3, #16
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f002 fb68 	bl	8008490 <SDMMC_CmdSendCSD>
 8005dc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <SD_InitCard+0xdc>
    {
      return errorstate;
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dca:	e05b      	b.n	8005e84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f002 f94d 	bl	8008072 <SDIO_GetResponse>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2104      	movs	r1, #4
 8005de4:	4618      	mov	r0, r3
 8005de6:	f002 f944 	bl	8008072 <SDIO_GetResponse>
 8005dea:	4602      	mov	r2, r0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2108      	movs	r1, #8
 8005df6:	4618      	mov	r0, r3
 8005df8:	f002 f93b 	bl	8008072 <SDIO_GetResponse>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	210c      	movs	r1, #12
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f002 f932 	bl	8008072 <SDIO_GetResponse>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2104      	movs	r1, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f002 f929 	bl	8008072 <SDIO_GetResponse>
 8005e20:	4603      	mov	r3, r0
 8005e22:	0d1a      	lsrs	r2, r3, #20
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fcd4 	bl	80057dc <HAL_SD_GetCardCSD>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e3e:	e021      	b.n	8005e84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	461c      	mov	r4, r3
 8005e4e:	4615      	mov	r5, r2
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	4608      	mov	r0, r1
 8005e56:	f002 fa15 	bl	8008284 <SDMMC_CmdSelDesel>
 8005e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <SD_InitCard+0x176>
  {
    return errorstate;
 8005e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e64:	e00e      	b.n	8005e84 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	466c      	mov	r4, sp
 8005e6e:	f103 0210 	add.w	r2, r3, #16
 8005e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e78:	3304      	adds	r3, #4
 8005e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f002 f861 	bl	8007f44 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3740      	adds	r7, #64	; 0x40
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bdb0      	pop	{r4, r5, r7, pc}

08005e8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f002 fa10 	bl	80082ca <SDMMC_CmdGoIdleState>
 8005eaa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	e072      	b.n	8005f9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f002 fa23 	bl	8008306 <SDMMC_CmdOperCond>
 8005ec0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f002 f9f9 	bl	80082ca <SDMMC_CmdGoIdleState>
 8005ed8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <SD_PowerON+0x5e>
    {
      return errorstate;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	e05b      	b.n	8005f9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d137      	bne.n	8005f62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f002 fa23 	bl	8008344 <SDMMC_CmdAppCommand>
 8005efe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02d      	beq.n	8005f62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f0a:	e047      	b.n	8005f9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f002 fa16 	bl	8008344 <SDMMC_CmdAppCommand>
 8005f18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <SD_PowerON+0x98>
    {
      return errorstate;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	e03b      	b.n	8005f9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	491e      	ldr	r1, [pc, #120]	; (8005fa4 <SD_PowerON+0x118>)
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f002 fa2c 	bl	8008388 <SDMMC_CmdAppOperCommand>
 8005f30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f3c:	e02e      	b.n	8005f9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f002 f894 	bl	8008072 <SDIO_GetResponse>
 8005f4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	0fdb      	lsrs	r3, r3, #31
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <SD_PowerON+0xcc>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <SD_PowerON+0xce>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]

    count++;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d802      	bhi.n	8005f72 <SD_PowerON+0xe6>
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0cc      	beq.n	8005f0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d902      	bls.n	8005f82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f80:	e00c      	b.n	8005f9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	645a      	str	r2, [r3, #68]	; 0x44
 8005f92:	e002      	b.n	8005f9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	c1100000 	.word	0xc1100000

08005fa8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fbc:	e018      	b.n	8005ff0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f002 faa0 	bl	8008510 <SDMMC_CmdSendStatus>
 8005fd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <SD_SendStatus+0x34>
  {
    return errorstate;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	e009      	b.n	8005ff0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f002 f845 	bl	8008072 <SDIO_GetResponse>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f002 f82f 	bl	8008072 <SDIO_GetResponse>
 8006014:	4603      	mov	r3, r0
 8006016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800601e:	d102      	bne.n	8006026 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006024:	e02f      	b.n	8006086 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006026:	f107 030c 	add.w	r3, r7, #12
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f879 	bl	8006124 <SD_FindSCR>
 8006032:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	e023      	b.n	8006086 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01c      	beq.n	8006082 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f002 f975 	bl	8008344 <SDMMC_CmdAppCommand>
 800605a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	e00f      	b.n	8006086 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f002 f9ae 	bl	80083ce <SDMMC_CmdBusWidth>
 8006072:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	e003      	b.n	8006086 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800607e:	2300      	movs	r3, #0
 8006080:	e001      	b.n	8006086 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006082:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 ffe4 	bl	8008072 <SDIO_GetResponse>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060b4:	d102      	bne.n	80060bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80060b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060ba:	e02f      	b.n	800611c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f82e 	bl	8006124 <SD_FindSCR>
 80060c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e023      	b.n	800611c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01c      	beq.n	8006118 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f002 f92a 	bl	8008344 <SDMMC_CmdAppCommand>
 80060f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	e00f      	b.n	800611c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f002 f963 	bl	80083ce <SDMMC_CmdBusWidth>
 8006108:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	e003      	b.n	800611c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006114:	2300      	movs	r3, #0
 8006116:	e001      	b.n	800611c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006118:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b08f      	sub	sp, #60	; 0x3c
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800612e:	f7fb fc01 	bl	8001934 <HAL_GetTick>
 8006132:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006138:	2300      	movs	r3, #0
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2108      	movs	r1, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f001 ffce 	bl	80080ec <SDMMC_CmdBlockLength>
 8006150:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	e0b2      	b.n	80062c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f002 f8eb 	bl	8008344 <SDMMC_CmdAppCommand>
 800616e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	e0a3      	b.n	80062c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006180:	2308      	movs	r3, #8
 8006182:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006184:	2330      	movs	r3, #48	; 0x30
 8006186:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006188:	2302      	movs	r3, #2
 800618a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800618c:	2300      	movs	r3, #0
 800618e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006190:	2301      	movs	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f107 0210 	add.w	r2, r7, #16
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 ff79 	bl	8008096 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f002 f932 	bl	8008412 <SDMMC_CmdSendSCR>
 80061ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d02a      	beq.n	800620c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	e083      	b.n	80062c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00f      	beq.n	80061e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6819      	ldr	r1, [r3, #0]
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	f107 0208 	add.w	r2, r7, #8
 80061d4:	18d4      	adds	r4, r2, r3
 80061d6:	4608      	mov	r0, r1
 80061d8:	f001 fede 	bl	8007f98 <SDIO_ReadFIFO>
 80061dc:	4603      	mov	r3, r0
 80061de:	6023      	str	r3, [r4, #0]
      index++;
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	3301      	adds	r3, #1
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	e006      	b.n	80061f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d012      	beq.n	800621c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80061f6:	f7fb fb9d 	bl	8001934 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d102      	bne.n	800620c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006206:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800620a:	e05a      	b.n	80062c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0cf      	beq.n	80061ba <SD_FindSCR+0x96>
 800621a:	e000      	b.n	800621e <SD_FindSCR+0xfa>
      break;
 800621c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2208      	movs	r2, #8
 8006232:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006234:	2308      	movs	r3, #8
 8006236:	e044      	b.n	80062c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2202      	movs	r2, #2
 800624c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800624e:	2302      	movs	r3, #2
 8006250:	e037      	b.n	80062c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2220      	movs	r2, #32
 8006266:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006268:	2320      	movs	r3, #32
 800626a:	e02a      	b.n	80062c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f240 523a 	movw	r2, #1338	; 0x53a
 8006274:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	061a      	lsls	r2, r3, #24
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006282:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800628c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	0e1b      	lsrs	r3, r3, #24
 8006292:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	601a      	str	r2, [r3, #0]
    scr++;
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	3304      	adds	r3, #4
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	061a      	lsls	r2, r3, #24
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	0e1b      	lsrs	r3, r3, #24
 80062ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	373c      	adds	r7, #60	; 0x3c
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd90      	pop	{r4, r7, pc}

080062ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e07b      	b.n	80063d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ec:	d009      	beq.n	8006302 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	61da      	str	r2, [r3, #28]
 80062f4:	e005      	b.n	8006302 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d106      	bne.n	8006322 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7fa fda9 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006338:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	ea42 0103 	orr.w	r1, r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	f003 0104 	and.w	r1, r3, #4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	f003 0210 	and.w	r2, r3, #16
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69da      	ldr	r2, [r3, #28]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e01a      	b.n	8006424 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2202      	movs	r2, #2
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006404:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fa fe6c 	bl	80010e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_SPI_Transmit_DMA+0x20>
 8006448:	2302      	movs	r3, #2
 800644a:	e09b      	b.n	8006584 <HAL_SPI_Transmit_DMA+0x158>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d002      	beq.n	8006466 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006460:	2302      	movs	r3, #2
 8006462:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006464:	e089      	b.n	800657a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_SPI_Transmit_DMA+0x46>
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006476:	e080      	b.n	800657a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2203      	movs	r2, #3
 800647c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	88fa      	ldrh	r2, [r7, #6]
 8006496:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064be:	d10f      	bne.n	80064e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e4:	4a29      	ldr	r2, [pc, #164]	; (800658c <HAL_SPI_Transmit_DMA+0x160>)
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ec:	4a28      	ldr	r2, [pc, #160]	; (8006590 <HAL_SPI_Transmit_DMA+0x164>)
 80064ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f4:	4a27      	ldr	r2, [pc, #156]	; (8006594 <HAL_SPI_Transmit_DMA+0x168>)
 80064f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fc:	2200      	movs	r2, #0
 80064fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	4619      	mov	r1, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006516:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006518:	f7fb fc70 	bl	8001dfc <HAL_DMA_Start_IT>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006526:	f043 0210 	orr.w	r2, r3, #16
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800653a:	e01e      	b.n	800657a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d007      	beq.n	800655a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0220 	orr.w	r2, r2, #32
 8006568:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0202 	orr.w	r2, r2, #2
 8006578:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	08006665 	.word	0x08006665
 8006590:	080065bd 	.word	0x080065bd
 8006594:	08006681 	.word	0x08006681

08006598 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr

080065bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ca:	f7fb f9b3 	bl	8001934 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065de:	d03b      	beq.n	8006658 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0220 	bic.w	r2, r2, #32
 80065ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0202 	bic.w	r2, r2, #2
 80065fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	2164      	movs	r1, #100	; 0x64
 8006604:	6978      	ldr	r0, [r7, #20]
 8006606:	f000 f8e3 	bl	80067d0 <SPI_EndRxTxTransaction>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2200      	movs	r2, #0
 800663e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006650:	6978      	ldr	r0, [r7, #20]
 8006652:	f7ff ffaa 	bl	80065aa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006656:	e002      	b.n	800665e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006658:	6978      	ldr	r0, [r7, #20]
 800665a:	f005 ff0b 	bl	800c474 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7ff ff90 	bl	8006598 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0203 	bic.w	r2, r2, #3
 800669c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f043 0210 	orr.w	r2, r3, #16
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ff79 	bl	80065aa <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4613      	mov	r3, r2
 80066ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066d0:	f7fb f930 	bl	8001934 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4413      	add	r3, r2
 80066de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066e0:	f7fb f928 	bl	8001934 <HAL_GetTick>
 80066e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	015b      	lsls	r3, r3, #5
 80066ec:	0d1b      	lsrs	r3, r3, #20
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	fb02 f303 	mul.w	r3, r2, r3
 80066f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066f6:	e054      	b.n	80067a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d050      	beq.n	80067a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006700:	f7fb f918 	bl	8001934 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	429a      	cmp	r2, r3
 800670e:	d902      	bls.n	8006716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d13d      	bne.n	8006792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672e:	d111      	bne.n	8006754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006738:	d004      	beq.n	8006744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006742:	d107      	bne.n	8006754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675c:	d10f      	bne.n	800677e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800677c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e017      	b.n	80067c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3b01      	subs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d19b      	bne.n	80066f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000040 	.word	0x20000040

080067d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ff6a 	bl	80066c0 <SPI_WaitFlagStateUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	f043 0220 	orr.w	r2, r3, #32
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e000      	b.n	8006804 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e041      	b.n	80068a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fa fe64 	bl	8001500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3304      	adds	r3, #4
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f000 faea 	bl	8006e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_TIM_PWM_Start+0x24>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	e022      	b.n	8006916 <HAL_TIM_PWM_Start+0x6a>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d109      	bne.n	80068ea <HAL_TIM_PWM_Start+0x3e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b01      	cmp	r3, #1
 80068e0:	bf14      	ite	ne
 80068e2:	2301      	movne	r3, #1
 80068e4:	2300      	moveq	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	e015      	b.n	8006916 <HAL_TIM_PWM_Start+0x6a>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d109      	bne.n	8006904 <HAL_TIM_PWM_Start+0x58>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	bf14      	ite	ne
 80068fc:	2301      	movne	r3, #1
 80068fe:	2300      	moveq	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e008      	b.n	8006916 <HAL_TIM_PWM_Start+0x6a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e07c      	b.n	8006a18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <HAL_TIM_PWM_Start+0x82>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692c:	e013      	b.n	8006956 <HAL_TIM_PWM_Start+0xaa>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b04      	cmp	r3, #4
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_Start+0x92>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800693c:	e00b      	b.n	8006956 <HAL_TIM_PWM_Start+0xaa>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b08      	cmp	r3, #8
 8006942:	d104      	bne.n	800694e <HAL_TIM_PWM_Start+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800694c:	e003      	b.n	8006956 <HAL_TIM_PWM_Start+0xaa>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2201      	movs	r2, #1
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fcaa 	bl	80072b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2d      	ldr	r2, [pc, #180]	; (8006a20 <HAL_TIM_PWM_Start+0x174>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIM_PWM_Start+0xcc>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <HAL_TIM_PWM_Start+0x178>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <HAL_TIM_PWM_Start+0xd0>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <HAL_TIM_PWM_Start+0xd2>
 800697c:	2300      	movs	r3, #0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a22      	ldr	r2, [pc, #136]	; (8006a20 <HAL_TIM_PWM_Start+0x174>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d01d      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1f      	ldr	r2, [pc, #124]	; (8006a28 <HAL_TIM_PWM_Start+0x17c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_TIM_PWM_Start+0x180>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <HAL_TIM_PWM_Start+0x184>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a16      	ldr	r2, [pc, #88]	; (8006a24 <HAL_TIM_PWM_Start+0x178>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a18      	ldr	r2, [pc, #96]	; (8006a34 <HAL_TIM_PWM_Start+0x188>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x136>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_TIM_PWM_Start+0x18c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d111      	bne.n	8006a06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b06      	cmp	r3, #6
 80069f2:	d010      	beq.n	8006a16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	e007      	b.n	8006a16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40010400 	.word	0x40010400
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40001800 	.word	0x40001800

08006a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d122      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d11b      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0202 	mvn.w	r2, #2
 8006a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9b4 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006a84:	e005      	b.n	8006a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9a7 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f9b6 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d122      	bne.n	8006aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d11b      	bne.n	8006aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0204 	mvn.w	r2, #4
 8006abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f98a 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006ad8:	e005      	b.n	8006ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f97d 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f98c 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d122      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d11b      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0208 	mvn.w	r2, #8
 8006b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2204      	movs	r2, #4
 8006b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f960 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e005      	b.n	8006b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f953 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f962 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d122      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b10      	cmp	r3, #16
 8006b5a:	d11b      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0210 	mvn.w	r2, #16
 8006b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f936 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f929 	bl	8006dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f938 	bl	8006dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d107      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0201 	mvn.w	r2, #1
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f904 	bl	8006dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	2b80      	cmp	r3, #128	; 0x80
 8006bcc:	d10e      	bne.n	8006bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd8:	2b80      	cmp	r3, #128	; 0x80
 8006bda:	d107      	bne.n	8006bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fc0d 	bl	8007406 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d10e      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d107      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8fc 	bl	8006e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d10e      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0220 	mvn.w	r2, #32
 8006c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fbd8 	bl	80073f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e0ac      	b.n	8006dc0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	f200 809f 	bhi.w	8006db4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006db5 	.word	0x08006db5
 8006c84:	08006db5 	.word	0x08006db5
 8006c88:	08006db5 	.word	0x08006db5
 8006c8c:	08006cf1 	.word	0x08006cf1
 8006c90:	08006db5 	.word	0x08006db5
 8006c94:	08006db5 	.word	0x08006db5
 8006c98:	08006db5 	.word	0x08006db5
 8006c9c:	08006d33 	.word	0x08006d33
 8006ca0:	08006db5 	.word	0x08006db5
 8006ca4:	08006db5 	.word	0x08006db5
 8006ca8:	08006db5 	.word	0x08006db5
 8006cac:	08006d73 	.word	0x08006d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f952 	bl	8006f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0208 	orr.w	r2, r2, #8
 8006cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0204 	bic.w	r2, r2, #4
 8006cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6999      	ldr	r1, [r3, #24]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	619a      	str	r2, [r3, #24]
      break;
 8006cee:	e062      	b.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68b9      	ldr	r1, [r7, #8]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f9a2 	bl	8007040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699a      	ldr	r2, [r3, #24]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6999      	ldr	r1, [r3, #24]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	021a      	lsls	r2, r3, #8
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	619a      	str	r2, [r3, #24]
      break;
 8006d30:	e041      	b.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f9f5 	bl	8007128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0208 	orr.w	r2, r2, #8
 8006d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0204 	bic.w	r2, r2, #4
 8006d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69d9      	ldr	r1, [r3, #28]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	61da      	str	r2, [r3, #28]
      break;
 8006d70:	e021      	b.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fa49 	bl	8007210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69d9      	ldr	r1, [r3, #28]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	021a      	lsls	r2, r3, #8
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	61da      	str	r2, [r3, #28]
      break;
 8006db2:	e000      	b.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006db4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
	...

08006e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a3f      	ldr	r2, [pc, #252]	; (8006f34 <TIM_Base_SetConfig+0x110>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d013      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d00f      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a3c      	ldr	r2, [pc, #240]	; (8006f38 <TIM_Base_SetConfig+0x114>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00b      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a3b      	ldr	r2, [pc, #236]	; (8006f3c <TIM_Base_SetConfig+0x118>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a3a      	ldr	r2, [pc, #232]	; (8006f40 <TIM_Base_SetConfig+0x11c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a39      	ldr	r2, [pc, #228]	; (8006f44 <TIM_Base_SetConfig+0x120>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d108      	bne.n	8006e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a2e      	ldr	r2, [pc, #184]	; (8006f34 <TIM_Base_SetConfig+0x110>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d02b      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e84:	d027      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a2b      	ldr	r2, [pc, #172]	; (8006f38 <TIM_Base_SetConfig+0x114>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d023      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <TIM_Base_SetConfig+0x118>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d01f      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a29      	ldr	r2, [pc, #164]	; (8006f40 <TIM_Base_SetConfig+0x11c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01b      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a28      	ldr	r2, [pc, #160]	; (8006f44 <TIM_Base_SetConfig+0x120>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d017      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <TIM_Base_SetConfig+0x124>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <TIM_Base_SetConfig+0x128>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00f      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a25      	ldr	r2, [pc, #148]	; (8006f50 <TIM_Base_SetConfig+0x12c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00b      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a24      	ldr	r2, [pc, #144]	; (8006f54 <TIM_Base_SetConfig+0x130>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d007      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a23      	ldr	r2, [pc, #140]	; (8006f58 <TIM_Base_SetConfig+0x134>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d003      	beq.n	8006ed6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <TIM_Base_SetConfig+0x138>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d108      	bne.n	8006ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <TIM_Base_SetConfig+0x110>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_Base_SetConfig+0xf8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a0b      	ldr	r2, [pc, #44]	; (8006f44 <TIM_Base_SetConfig+0x120>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d103      	bne.n	8006f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	615a      	str	r2, [r3, #20]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40010400 	.word	0x40010400
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400
 8006f50:	40014800 	.word	0x40014800
 8006f54:	40001800 	.word	0x40001800
 8006f58:	40001c00 	.word	0x40001c00
 8006f5c:	40002000 	.word	0x40002000

08006f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f023 0201 	bic.w	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f023 0302 	bic.w	r3, r3, #2
 8006fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a20      	ldr	r2, [pc, #128]	; (8007038 <TIM_OC1_SetConfig+0xd8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC1_SetConfig+0x64>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1f      	ldr	r2, [pc, #124]	; (800703c <TIM_OC1_SetConfig+0xdc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10c      	bne.n	8006fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0308 	bic.w	r3, r3, #8
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f023 0304 	bic.w	r3, r3, #4
 8006fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a15      	ldr	r2, [pc, #84]	; (8007038 <TIM_OC1_SetConfig+0xd8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC1_SetConfig+0x8e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <TIM_OC1_SetConfig+0xdc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d111      	bne.n	8007012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	621a      	str	r2, [r3, #32]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40010000 	.word	0x40010000
 800703c:	40010400 	.word	0x40010400

08007040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0210 	bic.w	r2, r3, #16
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0320 	bic.w	r3, r3, #32
 800708a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a21      	ldr	r2, [pc, #132]	; (8007120 <TIM_OC2_SetConfig+0xe0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_OC2_SetConfig+0x68>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a20      	ldr	r2, [pc, #128]	; (8007124 <TIM_OC2_SetConfig+0xe4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d10d      	bne.n	80070c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a16      	ldr	r2, [pc, #88]	; (8007120 <TIM_OC2_SetConfig+0xe0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC2_SetConfig+0x94>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <TIM_OC2_SetConfig+0xe4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d113      	bne.n	80070fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr
 8007120:	40010000 	.word	0x40010000
 8007124:	40010400 	.word	0x40010400

08007128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a21      	ldr	r2, [pc, #132]	; (8007208 <TIM_OC3_SetConfig+0xe0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_OC3_SetConfig+0x66>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a20      	ldr	r2, [pc, #128]	; (800720c <TIM_OC3_SetConfig+0xe4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d10d      	bne.n	80071aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <TIM_OC3_SetConfig+0xe0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_OC3_SetConfig+0x92>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <TIM_OC3_SetConfig+0xe4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d113      	bne.n	80071e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40010000 	.word	0x40010000
 800720c:	40010400 	.word	0x40010400

08007210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800725a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	031b      	lsls	r3, r3, #12
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a11      	ldr	r2, [pc, #68]	; (80072b0 <TIM_OC4_SetConfig+0xa0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC4_SetConfig+0x68>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a10      	ldr	r2, [pc, #64]	; (80072b4 <TIM_OC4_SetConfig+0xa4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d109      	bne.n	800728c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800727e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	019b      	lsls	r3, r3, #6
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40010400 	.word	0x40010400

080072b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	2201      	movs	r2, #1
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1a      	ldr	r2, [r3, #32]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	43db      	mvns	r3, r3
 80072da:	401a      	ands	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	fa01 f303 	lsl.w	r3, r1, r3
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007314:	2302      	movs	r3, #2
 8007316:	e05a      	b.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a20      	ldr	r2, [pc, #128]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d022      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007364:	d01d      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d018      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1a      	ldr	r2, [pc, #104]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a19      	ldr	r2, [pc, #100]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10c      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40010400 	.word	0x40010400
 80073ec:	40014000 	.word	0x40014000
 80073f0:	40001800 	.word	0x40001800

080073f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e03f      	b.n	80074aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fa f978 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2224      	movs	r2, #36	; 0x24
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800745a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc87 	bl	8007d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b08a      	sub	sp, #40	; 0x28
 80074b6:	af02      	add	r7, sp, #8
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d17c      	bne.n	80075cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_UART_Transmit+0x2c>
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e075      	b.n	80075ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_UART_Transmit+0x3e>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e06e      	b.n	80075ce <HAL_UART_Transmit+0x11c>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2221      	movs	r2, #33	; 0x21
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007506:	f7fa fa15 	bl	8001934 <HAL_GetTick>
 800750a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007520:	d108      	bne.n	8007534 <HAL_UART_Transmit+0x82>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e003      	b.n	800753c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007544:	e02a      	b.n	800759c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2200      	movs	r2, #0
 800754e:	2180      	movs	r1, #128	; 0x80
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fa3a 	bl	80079ca <UART_WaitOnFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e036      	b.n	80075ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	3302      	adds	r3, #2
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	e007      	b.n	800758e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	3301      	adds	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1cf      	bne.n	8007546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2200      	movs	r2, #0
 80075ae:	2140      	movs	r1, #64	; 0x40
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fa0a 	bl	80079ca <UART_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e006      	b.n	80075ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e000      	b.n	80075ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d11d      	bne.n	800762c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Receive_IT+0x26>
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e016      	b.n	800762e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_UART_Receive_IT+0x38>
 800760a:	2302      	movs	r3, #2
 800760c:	e00f      	b.n	800762e <HAL_UART_Receive_IT+0x58>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	461a      	mov	r2, r3
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fa1b 	bl	8007a5e <UART_Start_Receive_IT>
 8007628:	4603      	mov	r3, r0
 800762a:	e000      	b.n	800762e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10d      	bne.n	800768a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <HAL_UART_IRQHandler+0x52>
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 facb 	bl	8007c1e <UART_Receive_IT>
      return;
 8007688:	e17c      	b.n	8007984 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80b1 	beq.w	80077f4 <HAL_UART_IRQHandler+0x1bc>
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d105      	bne.n	80076a8 <HAL_UART_IRQHandler+0x70>
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80a6 	beq.w	80077f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <HAL_UART_IRQHandler+0x90>
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	f043 0201 	orr.w	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_UART_IRQHandler+0xb0>
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	f043 0202 	orr.w	r2, r3, #2
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_UART_IRQHandler+0xd0>
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	f043 0204 	orr.w	r2, r3, #4
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00f      	beq.n	8007732 <HAL_UART_IRQHandler+0xfa>
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <HAL_UART_IRQHandler+0xee>
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f043 0208 	orr.w	r2, r3, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 811f 	beq.w	800797a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <HAL_UART_IRQHandler+0x11e>
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa64 	bl	8007c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <HAL_UART_IRQHandler+0x146>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d031      	beq.n	80077e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9a6 	bl	8007ad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d123      	bne.n	80077da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d013      	beq.n	80077d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	4a77      	ldr	r2, [pc, #476]	; (800798c <HAL_UART_IRQHandler+0x354>)
 80077b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fa fbe8 	bl	8001f8c <HAL_DMA_Abort_IT>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	e00e      	b.n	80077f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8e5 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d8:	e00a      	b.n	80077f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8e1 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e006      	b.n	80077f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8dd 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077ee:	e0c4      	b.n	800797a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	bf00      	nop
    return;
 80077f2:	e0c2      	b.n	800797a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 80a2 	bne.w	8007942 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 809c 	beq.w	8007942 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8096 	beq.w	8007942 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d14f      	bne.n	80078da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007844:	8a3b      	ldrh	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8099 	beq.w	800797e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007850:	8a3a      	ldrh	r2, [r7, #16]
 8007852:	429a      	cmp	r2, r3
 8007854:	f080 8093 	bcs.w	800797e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8a3a      	ldrh	r2, [r7, #16]
 800785c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007868:	d02b      	beq.n	80078c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007878:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0201 	bic.w	r2, r2, #1
 8007888:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695a      	ldr	r2, [r3, #20]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007898:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0210 	bic.w	r2, r2, #16
 80078b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fa faf5 	bl	8001eac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f86e 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078d8:	e051      	b.n	800797e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d047      	beq.n	8007982 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80078f2:	8a7b      	ldrh	r3, [r7, #18]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d044      	beq.n	8007982 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007906:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0201 	bic.w	r2, r2, #1
 8007916:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0210 	bic.w	r2, r2, #16
 8007934:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007936:	8a7b      	ldrh	r3, [r7, #18]
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f83a 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007940:	e01f      	b.n	8007982 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_UART_IRQHandler+0x326>
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8fa 	bl	8007b50 <UART_Transmit_IT>
    return;
 800795c:	e012      	b.n	8007984 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00d      	beq.n	8007984 <HAL_UART_IRQHandler+0x34c>
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f93b 	bl	8007bee <UART_EndTransmit_IT>
    return;
 8007978:	e004      	b.n	8007984 <HAL_UART_IRQHandler+0x34c>
    return;
 800797a:	bf00      	nop
 800797c:	e002      	b.n	8007984 <HAL_UART_IRQHandler+0x34c>
      return;
 800797e:	bf00      	nop
 8007980:	e000      	b.n	8007984 <HAL_UART_IRQHandler+0x34c>
      return;
 8007982:	bf00      	nop
  }
}
 8007984:	3728      	adds	r7, #40	; 0x28
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	08007b29 	.word	0x08007b29

08007990 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079da:	e02c      	b.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d028      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <UART_WaitOnFlagUntilTimeout+0x30>
 80079ea:	f7f9 ffa3 	bl	8001934 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d21d      	bcs.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e00f      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d0c3      	beq.n	80079dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2222      	movs	r2, #34	; 0x22
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0220 	orr.w	r2, r2, #32
 8007ac2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ae6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d107      	bne.n	8007b10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0210 	bic.w	r2, r2, #16
 8007b0e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff ff2d 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b21      	cmp	r3, #33	; 0x21
 8007b62:	d13e      	bne.n	8007be2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6c:	d114      	bne.n	8007b98 <UART_Transmit_IT+0x48>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d110      	bne.n	8007b98 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	1c9a      	adds	r2, r3, #2
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]
 8007b96:	e008      	b.n	8007baa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	1c59      	adds	r1, r3, #1
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6211      	str	r1, [r2, #32]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10f      	bne.n	8007bde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e000      	b.n	8007be4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr

08007bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff febe 	bl	8007990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b22      	cmp	r3, #34	; 0x22
 8007c30:	f040 8099 	bne.w	8007d66 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d117      	bne.n	8007c6e <UART_Receive_IT+0x50>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d113      	bne.n	8007c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	1c9a      	adds	r2, r3, #2
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c6c:	e026      	b.n	8007cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d007      	beq.n	8007c92 <UART_Receive_IT+0x74>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <UART_Receive_IT+0x82>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e008      	b.n	8007cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d148      	bne.n	8007d62 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0220 	bic.w	r2, r2, #32
 8007cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695a      	ldr	r2, [r3, #20]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d123      	bne.n	8007d58 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0210 	bic.w	r2, r2, #16
 8007d24:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d10a      	bne.n	8007d4a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fe2f 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8007d56:	e002      	b.n	8007d5e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7f8 fe56 	bl	8000a0a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e002      	b.n	8007d68 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
  }
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007db0:	f023 030c 	bic.w	r3, r3, #12
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a57      	ldr	r2, [pc, #348]	; (8007f38 <UART_SetConfig+0x1c8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <UART_SetConfig+0x78>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a56      	ldr	r2, [pc, #344]	; (8007f3c <UART_SetConfig+0x1cc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d103      	bne.n	8007df0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007de8:	f7fc fd52 	bl	8004890 <HAL_RCC_GetPCLK2Freq>
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	e002      	b.n	8007df6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007df0:	f7fc fd2c 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8007df4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfe:	d14c      	bne.n	8007e9a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009a      	lsls	r2, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e16:	4a4a      	ldr	r2, [pc, #296]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007e18:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	0119      	lsls	r1, r3, #4
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009a      	lsls	r2, r3, #2
 8007e2a:	441a      	add	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e36:	4b42      	ldr	r3, [pc, #264]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007e38:	fba3 0302 	umull	r0, r3, r3, r2
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	2064      	movs	r0, #100	; 0x64
 8007e40:	fb00 f303 	mul.w	r3, r0, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	3332      	adds	r3, #50	; 0x32
 8007e4a:	4a3d      	ldr	r2, [pc, #244]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e58:	4419      	add	r1, r3
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009a      	lsls	r2, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e70:	4b33      	ldr	r3, [pc, #204]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007e72:	fba3 0302 	umull	r0, r3, r3, r2
 8007e76:	095b      	lsrs	r3, r3, #5
 8007e78:	2064      	movs	r0, #100	; 0x64
 8007e7a:	fb00 f303 	mul.w	r3, r0, r3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	3332      	adds	r3, #50	; 0x32
 8007e84:	4a2e      	ldr	r2, [pc, #184]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	f003 0207 	and.w	r2, r3, #7
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	440a      	add	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e98:	e04a      	b.n	8007f30 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009a      	lsls	r2, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	4a23      	ldr	r2, [pc, #140]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	0119      	lsls	r1, r3, #4
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009a      	lsls	r2, r3, #2
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ed0:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	2064      	movs	r0, #100	; 0x64
 8007eda:	fb00 f303 	mul.w	r3, r0, r3
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	3332      	adds	r3, #50	; 0x32
 8007ee4:	4a16      	ldr	r2, [pc, #88]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ef0:	4419      	add	r1, r3
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009a      	lsls	r2, r3, #2
 8007efc:	441a      	add	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	2064      	movs	r0, #100	; 0x64
 8007f12:	fb00 f303 	mul.w	r3, r0, r3
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	3332      	adds	r3, #50	; 0x32
 8007f1c:	4a08      	ldr	r2, [pc, #32]	; (8007f40 <UART_SetConfig+0x1d0>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	609a      	str	r2, [r3, #8]
}
 8007f30:	bf00      	nop
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40011000 	.word	0x40011000
 8007f3c:	40011400 	.word	0x40011400
 8007f40:	51eb851f 	.word	0x51eb851f

08007f44 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007f44:	b084      	sub	sp, #16
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	f107 001c 	add.w	r0, r7, #28
 8007f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007f5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007f5e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007f62:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007f66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007f6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007f6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007f7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	b004      	add	sp, #16
 8007f96:	4770      	bx	lr

08007f98 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr

08007fd0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007fde:	2002      	movs	r0, #2
 8007fe0:	f7f9 fcb2 	bl	8001948 <HAL_Delay>
  
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr

08008008 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008026:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800802c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008032:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008042:	f023 030f 	bic.w	r3, r3, #15
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr

0800805a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	b2db      	uxtb	r3, r3
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr

08008072 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3314      	adds	r3, #20
 8008080:	461a      	mov	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	4413      	add	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
}  
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80080c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80080c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0

}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80080fa:	2310      	movs	r3, #16
 80080fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800810c:	f107 0308 	add.w	r3, r7, #8
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff78 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008118:	f241 3288 	movw	r2, #5000	; 0x1388
 800811c:	2110      	movs	r1, #16
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa42 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008126:	69fb      	ldr	r3, [r7, #28]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3720      	adds	r7, #32
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800813e:	2311      	movs	r3, #17
 8008140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800814a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800814e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff ff56 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800815c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008160:	2111      	movs	r1, #17
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa20 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800816a:	69fb      	ldr	r3, [r7, #28]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008182:	2312      	movs	r3, #18
 8008184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008186:	2340      	movs	r3, #64	; 0x40
 8008188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800818e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008192:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008194:	f107 0308 	add.w	r3, r7, #8
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff ff34 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80081a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a4:	2112      	movs	r1, #18
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f9fe 	bl	80085a8 <SDMMC_GetCmdResp1>
 80081ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ae:	69fb      	ldr	r3, [r7, #28]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3720      	adds	r7, #32
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80081c6:	2318      	movs	r3, #24
 80081c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff ff12 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80081e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e8:	2118      	movs	r1, #24
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f9dc 	bl	80085a8 <SDMMC_GetCmdResp1>
 80081f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081f2:	69fb      	ldr	r3, [r7, #28]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800820a:	2319      	movs	r3, #25
 800820c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800820e:	2340      	movs	r3, #64	; 0x40
 8008210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800821c:	f107 0308 	add.w	r3, r7, #8
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fef0 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008228:	f241 3288 	movw	r2, #5000	; 0x1388
 800822c:	2119      	movs	r1, #25
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f9ba 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008236:	69fb      	ldr	r3, [r7, #28]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800824c:	230c      	movs	r3, #12
 800824e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800825e:	f107 0308 	add.w	r3, r7, #8
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff fecf 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800826a:	4a05      	ldr	r2, [pc, #20]	; (8008280 <SDMMC_CmdStopTransfer+0x40>)
 800826c:	210c      	movs	r1, #12
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f99a 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008276:	69fb      	ldr	r3, [r7, #28]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	05f5e100 	.word	0x05f5e100

08008284 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008294:	2307      	movs	r3, #7
 8008296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082a6:	f107 0310 	add.w	r3, r7, #16
 80082aa:	4619      	mov	r1, r3
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff feab 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	2107      	movs	r1, #7
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f975 	bl	80085a8 <SDMMC_GetCmdResp1>
 80082be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3728      	adds	r7, #40	; 0x28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b088      	sub	sp, #32
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fe8a 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f92d 	bl	8008554 <SDMMC_GetCmdError>
 80082fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082fc:	69fb      	ldr	r3, [r7, #28]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b088      	sub	sp, #32
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800830e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008314:	2308      	movs	r3, #8
 8008316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008324:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008326:	f107 0308 	add.w	r3, r7, #8
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff fe6b 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb20 	bl	8008978 <SDMMC_GetCmdResp7>
 8008338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800833a:	69fb      	ldr	r3, [r7, #28]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008352:	2337      	movs	r3, #55	; 0x37
 8008354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008356:	2340      	movs	r3, #64	; 0x40
 8008358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800835e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008362:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008364:	f107 0308 	add.w	r3, r7, #8
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7ff fe4c 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008370:	f241 3288 	movw	r2, #5000	; 0x1388
 8008374:	2137      	movs	r1, #55	; 0x37
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f916 	bl	80085a8 <SDMMC_GetCmdResp1>
 800837c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800837e:	69fb      	ldr	r3, [r7, #28]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800839e:	2329      	movs	r3, #41	; 0x29
 80083a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083a2:	2340      	movs	r3, #64	; 0x40
 80083a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff fe26 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fa29 	bl	8008814 <SDMMC_GetCmdResp3>
 80083c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083c4:	69fb      	ldr	r3, [r7, #28]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3720      	adds	r7, #32
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b088      	sub	sp, #32
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80083dc:	2306      	movs	r3, #6
 80083de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083ee:	f107 0308 	add.w	r3, r7, #8
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff fe07 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80083fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80083fe:	2106      	movs	r1, #6
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f8d1 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008408:	69fb      	ldr	r3, [r7, #28]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b088      	sub	sp, #32
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800841e:	2333      	movs	r3, #51	; 0x33
 8008420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800842a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008430:	f107 0308 	add.w	r3, r7, #8
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff fde6 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800843c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008440:	2133      	movs	r1, #51	; 0x33
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f8b0 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800844a:	69fb      	ldr	r3, [r7, #28]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3720      	adds	r7, #32
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008460:	2302      	movs	r3, #2
 8008462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008464:	23c0      	movs	r3, #192	; 0xc0
 8008466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800846c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008472:	f107 0308 	add.w	r3, r7, #8
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff fdc5 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f980 	bl	8008784 <SDMMC_GetCmdResp2>
 8008484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008486:	69fb      	ldr	r3, [r7, #28]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3720      	adds	r7, #32
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800849e:	2309      	movs	r3, #9
 80084a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80084a2:	23c0      	movs	r3, #192	; 0xc0
 80084a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084b0:	f107 0308 	add.w	r3, r7, #8
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fda6 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f961 	bl	8008784 <SDMMC_GetCmdResp2>
 80084c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084c4:	69fb      	ldr	r3, [r7, #28]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b088      	sub	sp, #32
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80084dc:	2303      	movs	r3, #3
 80084de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084e0:	2340      	movs	r3, #64	; 0x40
 80084e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084ee:	f107 0308 	add.w	r3, r7, #8
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff fd87 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	2103      	movs	r1, #3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f9c4 	bl	800888c <SDMMC_GetCmdResp6>
 8008504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008506:	69fb      	ldr	r3, [r7, #28]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800851e:	230d      	movs	r3, #13
 8008520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800852a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008530:	f107 0308 	add.w	r3, r7, #8
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fd66 	bl	8008008 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800853c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008540:	210d      	movs	r1, #13
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f830 	bl	80085a8 <SDMMC_GetCmdResp1>
 8008548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800854a:	69fb      	ldr	r3, [r7, #28]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800855c:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <SDMMC_GetCmdError+0x4c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a10      	ldr	r2, [pc, #64]	; (80085a4 <SDMMC_GetCmdError+0x50>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	0a5b      	lsrs	r3, r3, #9
 8008568:	f241 3288 	movw	r2, #5000	; 0x1388
 800856c:	fb02 f303 	mul.w	r3, r2, r3
 8008570:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	60fa      	str	r2, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800857c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008580:	e009      	b.n	8008596 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f1      	beq.n	8008572 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	22c5      	movs	r2, #197	; 0xc5
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr
 80085a0:	20000040 	.word	0x20000040
 80085a4:	10624dd3 	.word	0x10624dd3

080085a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	460b      	mov	r3, r1
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80085b6:	4b70      	ldr	r3, [pc, #448]	; (8008778 <SDMMC_GetCmdResp1+0x1d0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a70      	ldr	r2, [pc, #448]	; (800877c <SDMMC_GetCmdResp1+0x1d4>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	0a5a      	lsrs	r2, r3, #9
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	fb02 f303 	mul.w	r3, r2, r3
 80085c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	61fa      	str	r2, [r7, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085d8:	e0c9      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0ef      	beq.n	80085ca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1ea      	bne.n	80085ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2204      	movs	r2, #4
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008606:	2304      	movs	r3, #4
 8008608:	e0b1      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d004      	beq.n	8008620 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800861c:	2301      	movs	r3, #1
 800861e:	e0a6      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	22c5      	movs	r2, #197	; 0xc5
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f7ff fd17 	bl	800805a <SDIO_GetCommandResponse>
 800862c:	4603      	mov	r3, r0
 800862e:	461a      	mov	r2, r3
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	4293      	cmp	r3, r2
 8008634:	d001      	beq.n	800863a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008636:	2301      	movs	r3, #1
 8008638:	e099      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800863a:	2100      	movs	r1, #0
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7ff fd18 	bl	8008072 <SDIO_GetResponse>
 8008642:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4b4e      	ldr	r3, [pc, #312]	; (8008780 <SDMMC_GetCmdResp1+0x1d8>)
 8008648:	4013      	ands	r3, r2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800864e:	2300      	movs	r3, #0
 8008650:	e08d      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	da02      	bge.n	800865e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800865c:	e087      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008668:	2340      	movs	r3, #64	; 0x40
 800866a:	e080      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008676:	2380      	movs	r3, #128	; 0x80
 8008678:	e079      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008688:	e071      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008698:	e069      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80086a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a8:	e061      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80086b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086b8:	e059      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086c8:	e051      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086d8:	e049      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80086e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086e8:	e041      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80086f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f8:	e039      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008708:	e031      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008714:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008718:	e029      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008724:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008728:	e021      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008734:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008738:	e019      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008744:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008748:	e011      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008758:	e009      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008764:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008768:	e001      	b.n	800876e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800876a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	3720      	adds	r7, #32
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000040 	.word	0x20000040
 800877c:	10624dd3 	.word	0x10624dd3
 8008780:	fdffe008 	.word	0xfdffe008

08008784 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800878c:	4b1f      	ldr	r3, [pc, #124]	; (800880c <SDMMC_GetCmdResp2+0x88>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <SDMMC_GetCmdResp2+0x8c>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	0a5b      	lsrs	r3, r3, #9
 8008798:	f241 3288 	movw	r2, #5000	; 0x1388
 800879c:	fb02 f303 	mul.w	r3, r2, r3
 80087a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1e5a      	subs	r2, r3, #1
 80087a6:	60fa      	str	r2, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087b0:	e026      	b.n	8008800 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0ef      	beq.n	80087a2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1ea      	bne.n	80087a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2204      	movs	r2, #4
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087de:	2304      	movs	r3, #4
 80087e0:	e00e      	b.n	8008800 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e003      	b.n	8008800 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	22c5      	movs	r2, #197	; 0xc5
 80087fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20000040 	.word	0x20000040
 8008810:	10624dd3 	.word	0x10624dd3

08008814 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800881c:	4b19      	ldr	r3, [pc, #100]	; (8008884 <SDMMC_GetCmdResp3+0x70>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a19      	ldr	r2, [pc, #100]	; (8008888 <SDMMC_GetCmdResp3+0x74>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	0a5b      	lsrs	r3, r3, #9
 8008828:	f241 3288 	movw	r2, #5000	; 0x1388
 800882c:	fb02 f303 	mul.w	r3, r2, r3
 8008830:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1e5a      	subs	r2, r3, #1
 8008836:	60fa      	str	r2, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800883c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008840:	e01b      	b.n	800887a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0ef      	beq.n	8008832 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ea      	bne.n	8008832 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800886e:	2304      	movs	r3, #4
 8008870:	e003      	b.n	800887a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	22c5      	movs	r2, #197	; 0xc5
 8008876:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr
 8008884:	20000040 	.word	0x20000040
 8008888:	10624dd3 	.word	0x10624dd3

0800888c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	460b      	mov	r3, r1
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800889a:	4b35      	ldr	r3, [pc, #212]	; (8008970 <SDMMC_GetCmdResp6+0xe4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a35      	ldr	r2, [pc, #212]	; (8008974 <SDMMC_GetCmdResp6+0xe8>)
 80088a0:	fba2 2303 	umull	r2, r3, r2, r3
 80088a4:	0a5b      	lsrs	r3, r3, #9
 80088a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	61fa      	str	r2, [r7, #28]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088be:	e052      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0ef      	beq.n	80088b0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1ea      	bne.n	80088b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2204      	movs	r2, #4
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088ec:	2304      	movs	r3, #4
 80088ee:	e03a      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008902:	2301      	movs	r3, #1
 8008904:	e02f      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff fba7 	bl	800805a <SDIO_GetCommandResponse>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	4293      	cmp	r3, r2
 8008914:	d001      	beq.n	800891a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008916:	2301      	movs	r3, #1
 8008918:	e025      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	22c5      	movs	r2, #197	; 0xc5
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fba5 	bl	8008072 <SDIO_GetResponse>
 8008928:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	0c1b      	lsrs	r3, r3, #16
 8008938:	b29a      	uxth	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800893e:	2300      	movs	r3, #0
 8008940:	e011      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800894c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008950:	e009      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800895c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008960:	e001      	b.n	8008966 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000040 	.word	0x20000040
 8008974:	10624dd3 	.word	0x10624dd3

08008978 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008980:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <SDMMC_GetCmdResp7+0x94>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a22      	ldr	r2, [pc, #136]	; (8008a10 <SDMMC_GetCmdResp7+0x98>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	0a5b      	lsrs	r3, r3, #9
 800898c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008990:	fb02 f303 	mul.w	r3, r2, r3
 8008994:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1e5a      	subs	r2, r3, #1
 800899a:	60fa      	str	r2, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089a4:	e02c      	b.n	8008a00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0ef      	beq.n	8008996 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1ea      	bne.n	8008996 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d004      	beq.n	80089d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2204      	movs	r2, #4
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089d2:	2304      	movs	r3, #4
 80089d4:	e014      	b.n	8008a00 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e009      	b.n	8008a00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2240      	movs	r2, #64	; 0x40
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089fe:	2300      	movs	r3, #0
  
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20000040 	.word	0x20000040
 8008a10:	10624dd3 	.word	0x10624dd3

08008a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a14:	b084      	sub	sp, #16
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	f107 001c 	add.w	r0, r7, #28
 8008a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d122      	bne.n	8008a72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d105      	bne.n	8008a66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fafa 	bl	800a060 <USB_CoreReset>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
 8008a70:	e010      	b.n	8008a94 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 faee 	bl	800a060 <USB_CoreReset>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d10b      	bne.n	8008ab2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f043 0206 	orr.w	r2, r3, #6
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008abe:	b004      	add	sp, #16
 8008ac0:	4770      	bx	lr
	...

08008ac4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d165      	bne.n	8008ba4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4a41      	ldr	r2, [pc, #260]	; (8008be0 <USB_SetTurnaroundTime+0x11c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d906      	bls.n	8008aee <USB_SetTurnaroundTime+0x2a>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4a40      	ldr	r2, [pc, #256]	; (8008be4 <USB_SetTurnaroundTime+0x120>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d202      	bcs.n	8008aee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ae8:	230f      	movs	r3, #15
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e062      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4a3c      	ldr	r2, [pc, #240]	; (8008be4 <USB_SetTurnaroundTime+0x120>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d306      	bcc.n	8008b04 <USB_SetTurnaroundTime+0x40>
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4a3b      	ldr	r2, [pc, #236]	; (8008be8 <USB_SetTurnaroundTime+0x124>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d202      	bcs.n	8008b04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008afe:	230e      	movs	r3, #14
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	e057      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a38      	ldr	r2, [pc, #224]	; (8008be8 <USB_SetTurnaroundTime+0x124>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d306      	bcc.n	8008b1a <USB_SetTurnaroundTime+0x56>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	4a37      	ldr	r2, [pc, #220]	; (8008bec <USB_SetTurnaroundTime+0x128>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d202      	bcs.n	8008b1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b14:	230d      	movs	r3, #13
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e04c      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a33      	ldr	r2, [pc, #204]	; (8008bec <USB_SetTurnaroundTime+0x128>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d306      	bcc.n	8008b30 <USB_SetTurnaroundTime+0x6c>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a32      	ldr	r2, [pc, #200]	; (8008bf0 <USB_SetTurnaroundTime+0x12c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d802      	bhi.n	8008b30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e041      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a2f      	ldr	r2, [pc, #188]	; (8008bf0 <USB_SetTurnaroundTime+0x12c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d906      	bls.n	8008b46 <USB_SetTurnaroundTime+0x82>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4a2e      	ldr	r2, [pc, #184]	; (8008bf4 <USB_SetTurnaroundTime+0x130>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d802      	bhi.n	8008b46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b40:	230b      	movs	r3, #11
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e036      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4a2a      	ldr	r2, [pc, #168]	; (8008bf4 <USB_SetTurnaroundTime+0x130>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d906      	bls.n	8008b5c <USB_SetTurnaroundTime+0x98>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4a29      	ldr	r2, [pc, #164]	; (8008bf8 <USB_SetTurnaroundTime+0x134>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d802      	bhi.n	8008b5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b56:	230a      	movs	r3, #10
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	e02b      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4a26      	ldr	r2, [pc, #152]	; (8008bf8 <USB_SetTurnaroundTime+0x134>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d906      	bls.n	8008b72 <USB_SetTurnaroundTime+0xae>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4a25      	ldr	r2, [pc, #148]	; (8008bfc <USB_SetTurnaroundTime+0x138>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d202      	bcs.n	8008b72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b6c:	2309      	movs	r3, #9
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e020      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <USB_SetTurnaroundTime+0x138>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d306      	bcc.n	8008b88 <USB_SetTurnaroundTime+0xc4>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4a20      	ldr	r2, [pc, #128]	; (8008c00 <USB_SetTurnaroundTime+0x13c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d802      	bhi.n	8008b88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b82:	2308      	movs	r3, #8
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e015      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4a1d      	ldr	r2, [pc, #116]	; (8008c00 <USB_SetTurnaroundTime+0x13c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d906      	bls.n	8008b9e <USB_SetTurnaroundTime+0xda>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4a1c      	ldr	r2, [pc, #112]	; (8008c04 <USB_SetTurnaroundTime+0x140>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d202      	bcs.n	8008b9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b98:	2307      	movs	r3, #7
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e00a      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b9e:	2306      	movs	r3, #6
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e007      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008baa:	2309      	movs	r3, #9
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e001      	b.n	8008bb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bb0:	2309      	movs	r3, #9
 8008bb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	029b      	lsls	r3, r3, #10
 8008bc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	00d8acbf 	.word	0x00d8acbf
 8008be4:	00e4e1c0 	.word	0x00e4e1c0
 8008be8:	00f42400 	.word	0x00f42400
 8008bec:	01067380 	.word	0x01067380
 8008bf0:	011a499f 	.word	0x011a499f
 8008bf4:	01312cff 	.word	0x01312cff
 8008bf8:	014ca43f 	.word	0x014ca43f
 8008bfc:	016e3600 	.word	0x016e3600
 8008c00:	01a6ab1f 	.word	0x01a6ab1f
 8008c04:	01e84800 	.word	0x01e84800

08008c08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f043 0201 	orr.w	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr

08008c28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f023 0201 	bic.w	r2, r3, #1
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr

08008c48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d115      	bne.n	8008c96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c76:	2001      	movs	r0, #1
 8008c78:	f7f8 fe66 	bl	8001948 <HAL_Delay>
      ms++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 f961 	bl	8009f4a <USB_GetMode>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d01e      	beq.n	8008ccc <USB_SetCurrentMode+0x84>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b31      	cmp	r3, #49	; 0x31
 8008c92:	d9f0      	bls.n	8008c76 <USB_SetCurrentMode+0x2e>
 8008c94:	e01a      	b.n	8008ccc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d115      	bne.n	8008cc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ca8:	2001      	movs	r0, #1
 8008caa:	f7f8 fe4d 	bl	8001948 <HAL_Delay>
      ms++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 f948 	bl	8009f4a <USB_GetMode>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <USB_SetCurrentMode+0x84>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b31      	cmp	r3, #49	; 0x31
 8008cc4:	d9f0      	bls.n	8008ca8 <USB_SetCurrentMode+0x60>
 8008cc6:	e001      	b.n	8008ccc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e005      	b.n	8008cd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b32      	cmp	r3, #50	; 0x32
 8008cd0:	d101      	bne.n	8008cd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	e009      	b.n	8008d14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3340      	adds	r3, #64	; 0x40
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	3301      	adds	r3, #1
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b0e      	cmp	r3, #14
 8008d18:	d9f2      	bls.n	8008d00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d11c      	bne.n	8008d5a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d2e:	f043 0302 	orr.w	r3, r3, #2
 8008d32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38
 8008d58:	e00b      	b.n	8008d72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d84:	4619      	mov	r1, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	680b      	ldr	r3, [r1, #0]
 8008d90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d10c      	bne.n	8008db2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d104      	bne.n	8008da8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d9e:	2100      	movs	r1, #0
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f945 	bl	8009030 <USB_SetDevSpeed>
 8008da6:	e008      	b.n	8008dba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008da8:	2101      	movs	r1, #1
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f940 	bl	8009030 <USB_SetDevSpeed>
 8008db0:	e003      	b.n	8008dba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008db2:	2103      	movs	r1, #3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f93b 	bl	8009030 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dba:	2110      	movs	r1, #16
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8f3 	bl	8008fa8 <USB_FlushTxFifo>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f90f 	bl	8008ff0 <USB_FlushRxFifo>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de2:	461a      	mov	r2, r3
 8008de4:	2300      	movs	r3, #0
 8008de6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dee:	461a      	mov	r2, r3
 8008df0:	2300      	movs	r3, #0
 8008df2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	613b      	str	r3, [r7, #16]
 8008e04:	e043      	b.n	8008e8e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e1c:	d118      	bne.n	8008e50 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	461a      	mov	r2, r3
 8008e32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	e013      	b.n	8008e62 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e46:	461a      	mov	r2, r3
 8008e48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e008      	b.n	8008e62 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6e:	461a      	mov	r2, r3
 8008e70:	2300      	movs	r3, #0
 8008e72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	461a      	mov	r2, r3
 8008e82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d3b7      	bcc.n	8008e06 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	e043      	b.n	8008f24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eb2:	d118      	bne.n	8008ee6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	e013      	b.n	8008ef8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008edc:	461a      	mov	r2, r3
 8008ede:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	e008      	b.n	8008ef8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	461a      	mov	r2, r3
 8008f06:	2300      	movs	r3, #0
 8008f08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	461a      	mov	r2, r3
 8008f18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	3301      	adds	r3, #1
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3b7      	bcc.n	8008e9c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f043 0210 	orr.w	r2, r3, #16
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <USB_DevInit+0x2c4>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d005      	beq.n	8008f7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f043 0208 	orr.w	r2, r3, #8
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d107      	bne.n	8008f94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f8c:	f043 0304 	orr.w	r3, r3, #4
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fa0:	b004      	add	sp, #16
 8008fa2:	4770      	bx	lr
 8008fa4:	803c3800 	.word	0x803c3800

08008fa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	019b      	lsls	r3, r3, #6
 8008fba:	f043 0220 	orr.w	r2, r3, #32
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4a08      	ldr	r2, [pc, #32]	; (8008fec <USB_FlushTxFifo+0x44>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d901      	bls.n	8008fd4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e006      	b.n	8008fe2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d0f0      	beq.n	8008fc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr
 8008fec:	00030d40 	.word	0x00030d40

08008ff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2210      	movs	r2, #16
 8009000:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3301      	adds	r3, #1
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4a08      	ldr	r2, [pc, #32]	; (800902c <USB_FlushRxFifo+0x3c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d901      	bls.n	8009014 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e006      	b.n	8009022 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b10      	cmp	r3, #16
 800901e:	d0f0      	beq.n	8009002 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	bc80      	pop	{r7}
 800902a:	4770      	bx	lr
 800902c:	00030d40 	.word	0x00030d40

08009030 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	68f9      	ldr	r1, [r7, #12]
 800904c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009050:	4313      	orrs	r3, r2
 8009052:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr

08009060 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0306 	and.w	r3, r3, #6
 8009078:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
 8009084:	e00a      	b.n	800909c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d002      	beq.n	8009092 <USB_GetDevSpeed+0x32>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b06      	cmp	r3, #6
 8009090:	d102      	bne.n	8009098 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009092:	2302      	movs	r3, #2
 8009094:	75fb      	strb	r3, [r7, #23]
 8009096:	e001      	b.n	800909c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009098:	230f      	movs	r3, #15
 800909a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr

080090a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d13a      	bne.n	800913a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	2101      	movs	r1, #1
 80090d6:	fa01 f303 	lsl.w	r3, r1, r3
 80090da:	b29b      	uxth	r3, r3
 80090dc:	68f9      	ldr	r1, [r7, #12]
 80090de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090e2:	4313      	orrs	r3, r2
 80090e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d155      	bne.n	80091a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009118:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	059b      	lsls	r3, r3, #22
 800911e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009120:	4313      	orrs	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	e036      	b.n	80091a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	69da      	ldr	r2, [r3, #28]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	2101      	movs	r1, #1
 800914c:	fa01 f303 	lsl.w	r3, r1, r3
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	68f9      	ldr	r1, [r7, #12]
 8009154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009158:	4313      	orrs	r3, r2
 800915a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11a      	bne.n	80091a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	78db      	ldrb	r3, [r3, #3]
 800918c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800918e:	430b      	orrs	r3, r1
 8009190:	4313      	orrs	r3, r2
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	0151      	lsls	r1, r2, #5
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	440a      	add	r2, r1
 800919a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d161      	bne.n	8009294 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e6:	d11f      	bne.n	8009228 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009206:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009226:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f003 030f 	and.w	r3, r3, #15
 8009238:	2101      	movs	r1, #1
 800923a:	fa01 f303 	lsl.w	r3, r1, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	43db      	mvns	r3, r3
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009248:	4013      	ands	r3, r2
 800924a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	69da      	ldr	r2, [r3, #28]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	2101      	movs	r1, #1
 800925e:	fa01 f303 	lsl.w	r3, r1, r3
 8009262:	b29b      	uxth	r3, r3
 8009264:	43db      	mvns	r3, r3
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800926c:	4013      	ands	r3, r2
 800926e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	0159      	lsls	r1, r3, #5
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	440b      	add	r3, r1
 8009286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928a:	4619      	mov	r1, r3
 800928c:	4b35      	ldr	r3, [pc, #212]	; (8009364 <USB_DeactivateEndpoint+0x1b0>)
 800928e:	4013      	ands	r3, r2
 8009290:	600b      	str	r3, [r1, #0]
 8009292:	e060      	b.n	8009356 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092aa:	d11f      	bne.n	80092ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	0151      	lsls	r1, r2, #5
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	440a      	add	r2, r1
 80092c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	0151      	lsls	r1, r2, #5
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	440a      	add	r2, r1
 80092e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	2101      	movs	r1, #1
 80092fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009302:	041b      	lsls	r3, r3, #16
 8009304:	43db      	mvns	r3, r3
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800930c:	4013      	ands	r3, r2
 800930e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	2101      	movs	r1, #1
 8009322:	fa01 f303 	lsl.w	r3, r1, r3
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	43db      	mvns	r3, r3
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009330:	4013      	ands	r3, r2
 8009332:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0159      	lsls	r1, r3, #5
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	440b      	add	r3, r1
 800934a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934e:	4619      	mov	r1, r3
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <USB_DeactivateEndpoint+0x1b4>)
 8009352:	4013      	ands	r3, r2
 8009354:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	ec337800 	.word	0xec337800
 8009368:	eff37800 	.word	0xeff37800

0800936c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08a      	sub	sp, #40	; 0x28
 8009370:	af02      	add	r7, sp, #8
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b01      	cmp	r3, #1
 800938a:	f040 815c 	bne.w	8009646 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d132      	bne.n	80093fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	69fa      	ldr	r2, [r7, #28]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f4:	0cdb      	lsrs	r3, r3, #19
 80093f6:	04db      	lsls	r3, r3, #19
 80093f8:	6113      	str	r3, [r2, #16]
 80093fa:	e074      	b.n	80094e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009416:	0cdb      	lsrs	r3, r3, #19
 8009418:	04db      	lsls	r3, r3, #19
 800941a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009436:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800943a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800943e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6959      	ldr	r1, [r3, #20]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	440b      	add	r3, r1
 8009458:	1e59      	subs	r1, r3, #1
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009462:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009464:	4b9d      	ldr	r3, [pc, #628]	; (80096dc <USB_EPStartXfer+0x370>)
 8009466:	400b      	ands	r3, r1
 8009468:	69b9      	ldr	r1, [r7, #24]
 800946a:	0148      	lsls	r0, r1, #5
 800946c:	69f9      	ldr	r1, [r7, #28]
 800946e:	4401      	add	r1, r0
 8009470:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009474:	4313      	orrs	r3, r2
 8009476:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800948e:	69b9      	ldr	r1, [r7, #24]
 8009490:	0148      	lsls	r0, r1, #5
 8009492:	69f9      	ldr	r1, [r7, #28]
 8009494:	4401      	add	r1, r0
 8009496:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800949a:	4313      	orrs	r3, r2
 800949c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	78db      	ldrb	r3, [r3, #3]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d11f      	bne.n	80094e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80094c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d14b      	bne.n	8009584 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d009      	beq.n	8009508 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	461a      	mov	r2, r3
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	78db      	ldrb	r3, [r3, #3]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d128      	bne.n	8009562 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951c:	2b00      	cmp	r3, #0
 800951e:	d110      	bne.n	8009542 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	0151      	lsls	r1, r2, #5
 8009532:	69fa      	ldr	r2, [r7, #28]
 8009534:	440a      	add	r2, r1
 8009536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	e00f      	b.n	8009562 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	0151      	lsls	r1, r2, #5
 8009554:	69fa      	ldr	r2, [r7, #28]
 8009556:	440a      	add	r2, r1
 8009558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800955c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009560:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	e12f      	b.n	80097e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	440a      	add	r2, r1
 800959a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	78db      	ldrb	r3, [r3, #3]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d015      	beq.n	80095d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8117 	beq.w	80097e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	2101      	movs	r1, #1
 80095c8:	fa01 f303 	lsl.w	r3, r1, r3
 80095cc:	69f9      	ldr	r1, [r7, #28]
 80095ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d2:	4313      	orrs	r3, r2
 80095d4:	634b      	str	r3, [r1, #52]	; 0x34
 80095d6:	e105      	b.n	80097e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d110      	bne.n	800960a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	0151      	lsls	r1, r2, #5
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	440a      	add	r2, r1
 80095fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	e00f      	b.n	800962a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	0151      	lsls	r1, r2, #5
 800961c:	69fa      	ldr	r2, [r7, #28]
 800961e:	440a      	add	r2, r1
 8009620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009628:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	68d9      	ldr	r1, [r3, #12]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	b298      	uxth	r0, r3
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	4603      	mov	r3, r0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 fa2a 	bl	8009a98 <USB_WritePacket>
 8009644:	e0ce      	b.n	80097e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	440a      	add	r2, r1
 800965c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009660:	0cdb      	lsrs	r3, r3, #19
 8009662:	04db      	lsls	r3, r3, #19
 8009664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009688:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d126      	bne.n	80096e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096a8:	69b9      	ldr	r1, [r7, #24]
 80096aa:	0148      	lsls	r0, r1, #5
 80096ac:	69f9      	ldr	r1, [r7, #28]
 80096ae:	4401      	add	r1, r0
 80096b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096b4:	4313      	orrs	r3, r2
 80096b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	69fa      	ldr	r2, [r7, #28]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d6:	6113      	str	r3, [r2, #16]
 80096d8:	e036      	b.n	8009748 <USB_EPStartXfer+0x3dc>
 80096da:	bf00      	nop
 80096dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	695a      	ldr	r2, [r3, #20]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	1e5a      	subs	r2, r3, #1
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	691a      	ldr	r2, [r3, #16]
 8009704:	8afb      	ldrh	r3, [r7, #22]
 8009706:	04d9      	lsls	r1, r3, #19
 8009708:	4b39      	ldr	r3, [pc, #228]	; (80097f0 <USB_EPStartXfer+0x484>)
 800970a:	400b      	ands	r3, r1
 800970c:	69b9      	ldr	r1, [r7, #24]
 800970e:	0148      	lsls	r0, r1, #5
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	4401      	add	r1, r0
 8009714:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009718:	4313      	orrs	r3, r2
 800971a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	8af9      	ldrh	r1, [r7, #22]
 8009730:	fb01 f303 	mul.w	r3, r1, r3
 8009734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009738:	69b9      	ldr	r1, [r7, #24]
 800973a:	0148      	lsls	r0, r1, #5
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	4401      	add	r1, r0
 8009740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009744:	4313      	orrs	r3, r2
 8009746:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d10d      	bne.n	800976a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	68d9      	ldr	r1, [r3, #12]
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009766:	460a      	mov	r2, r1
 8009768:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	78db      	ldrb	r3, [r3, #3]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d128      	bne.n	80097c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977e:	2b00      	cmp	r3, #0
 8009780:	d110      	bne.n	80097a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800979c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	e00f      	b.n	80097c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	0151      	lsls	r1, r2, #5
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	440a      	add	r2, r1
 80097ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	1ff80000 	.word	0x1ff80000

080097f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	785b      	ldrb	r3, [r3, #1]
 8009810:	2b01      	cmp	r3, #1
 8009812:	f040 80cd 	bne.w	80099b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d132      	bne.n	8009884 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	0151      	lsls	r1, r2, #5
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	440a      	add	r2, r1
 8009834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009838:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800983c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	440a      	add	r2, r1
 8009858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800985c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009860:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	0151      	lsls	r1, r2, #5
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	440a      	add	r2, r1
 8009878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987c:	0cdb      	lsrs	r3, r3, #19
 800987e:	04db      	lsls	r3, r3, #19
 8009880:	6113      	str	r3, [r2, #16]
 8009882:	e04e      	b.n	8009922 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	0151      	lsls	r1, r2, #5
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	440a      	add	r2, r1
 800989a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989e:	0cdb      	lsrs	r3, r3, #19
 80098a0:	04db      	lsls	r3, r3, #19
 80098a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	695a      	ldr	r2, [r3, #20]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d903      	bls.n	80098dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009912:	6939      	ldr	r1, [r7, #16]
 8009914:	0148      	lsls	r0, r1, #5
 8009916:	6979      	ldr	r1, [r7, #20]
 8009918:	4401      	add	r1, r0
 800991a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800991e:	4313      	orrs	r3, r2
 8009920:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d11e      	bne.n	8009966 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d009      	beq.n	8009944 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993c:	461a      	mov	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	440a      	add	r2, r1
 800995a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	e092      	b.n	8009a8c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009980:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009984:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d07e      	beq.n	8009a8c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	f003 030f 	and.w	r3, r3, #15
 800999e:	2101      	movs	r1, #1
 80099a0:	fa01 f303 	lsl.w	r3, r1, r3
 80099a4:	6979      	ldr	r1, [r7, #20]
 80099a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099aa:	4313      	orrs	r3, r2
 80099ac:	634b      	str	r3, [r1, #52]	; 0x34
 80099ae:	e06d      	b.n	8009a8c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	0151      	lsls	r1, r2, #5
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	440a      	add	r2, r1
 80099c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ca:	0cdb      	lsrs	r3, r3, #19
 80099cc:	04db      	lsls	r3, r3, #19
 80099ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	0151      	lsls	r1, r2, #5
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	440a      	add	r2, r1
 8009a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a3a:	6939      	ldr	r1, [r7, #16]
 8009a3c:	0148      	lsls	r0, r1, #5
 8009a3e:	6979      	ldr	r1, [r7, #20]
 8009a40:	4401      	add	r1, r0
 8009a42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a46:	4313      	orrs	r3, r2
 8009a48:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d10d      	bne.n	8009a6c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d009      	beq.n	8009a6c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	68d9      	ldr	r1, [r3, #12]
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a68:	460a      	mov	r2, r1
 8009a6a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	0151      	lsls	r1, r2, #5
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	440a      	add	r2, r1
 8009a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr

08009a98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	; 0x24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	71fb      	strb	r3, [r7, #7]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d123      	bne.n	8009b06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009abe:	88bb      	ldrh	r3, [r7, #4]
 8009ac0:	3303      	adds	r3, #3
 8009ac2:	089b      	lsrs	r3, r3, #2
 8009ac4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	e018      	b.n	8009afe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	031a      	lsls	r2, r3, #12
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad8:	461a      	mov	r2, r3
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	3301      	adds	r3, #1
 8009af0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	3301      	adds	r3, #1
 8009af6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	3301      	adds	r3, #1
 8009afc:	61bb      	str	r3, [r7, #24]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d3e2      	bcc.n	8009acc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3724      	adds	r7, #36	; 0x24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bc80      	pop	{r7}
 8009b10:	4770      	bx	lr

08009b12 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b08b      	sub	sp, #44	; 0x2c
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	f003 0303 	and.w	r3, r3, #3
 8009b36:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	623b      	str	r3, [r7, #32]
 8009b3c:	e014      	b.n	8009b68 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	3301      	adds	r3, #1
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	3301      	adds	r3, #1
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	3301      	adds	r3, #1
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	3301      	adds	r3, #1
 8009b66:	623b      	str	r3, [r7, #32]
 8009b68:	6a3a      	ldr	r2, [r7, #32]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d3e6      	bcc.n	8009b3e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b70:	8bfb      	ldrh	r3, [r7, #30]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01e      	beq.n	8009bb4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b80:	461a      	mov	r2, r3
 8009b82:	f107 0310 	add.w	r3, r7, #16
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	fa22 f303 	lsr.w	r3, r2, r3
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	701a      	strb	r2, [r3, #0]
      i++;
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009ba8:	8bfb      	ldrh	r3, [r7, #30]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bae:	8bfb      	ldrh	r3, [r7, #30]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1ea      	bne.n	8009b8a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	372c      	adds	r7, #44	; 0x2c
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bc80      	pop	{r7}
 8009bbe:	4770      	bx	lr

08009bc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	785b      	ldrb	r3, [r3, #1]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d12c      	bne.n	8009c36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	db12      	blt.n	8009c14 <USB_EPSetStall+0x54>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00f      	beq.n	8009c14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	0151      	lsls	r1, r2, #5
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	440a      	add	r2, r1
 8009c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	e02b      	b.n	8009c8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	db12      	blt.n	8009c6e <USB_EPSetStall+0xae>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	0151      	lsls	r1, r2, #5
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	440a      	add	r2, r1
 8009c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	0151      	lsls	r1, r2, #5
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	440a      	add	r2, r1
 8009c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bc80      	pop	{r7}
 8009c98:	4770      	bx	lr

08009c9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b085      	sub	sp, #20
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d128      	bne.n	8009d08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	0151      	lsls	r1, r2, #5
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	440a      	add	r2, r1
 8009ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	78db      	ldrb	r3, [r3, #3]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d003      	beq.n	8009ce6 <USB_EPClearStall+0x4c>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	78db      	ldrb	r3, [r3, #3]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d138      	bne.n	8009d58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	e027      	b.n	8009d58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	78db      	ldrb	r3, [r3, #3]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d003      	beq.n	8009d38 <USB_EPClearStall+0x9e>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	78db      	ldrb	r3, [r3, #3]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d10f      	bne.n	8009d58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bc80      	pop	{r7}
 8009d62:	4770      	bx	lr

08009d64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d98:	68f9      	ldr	r1, [r7, #12]
 8009d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr

08009dae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dc8:	f023 0303 	bic.w	r3, r3, #3
 8009dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ddc:	f023 0302 	bic.w	r3, r3, #2
 8009de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr

08009dee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e1c:	f043 0302 	orr.w	r3, r3, #2
 8009e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bc80      	pop	{r7}
 8009e2c:	4770      	bx	lr

08009e2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b085      	sub	sp, #20
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4013      	ands	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e46:	68fb      	ldr	r3, [r7, #12]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr

08009e52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	4013      	ands	r3, r2
 8009e74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	0c1b      	lsrs	r3, r3, #16
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr

08009e84 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	b29b      	uxth	r3, r3
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bc80      	pop	{r7}
 8009eb4:	4770      	bx	lr

08009eb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b085      	sub	sp, #20
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr

08009ef0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f12:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	f003 030f 	and.w	r3, r3, #15
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f20:	01db      	lsls	r3, r3, #7
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	371c      	adds	r7, #28
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr

08009f4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0301 	and.w	r3, r3, #1
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr

08009f64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f82:	f023 0307 	bic.w	r3, r3, #7
 8009f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bc80      	pop	{r7}
 8009fa6:	4770      	bx	lr

08009fa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	333c      	adds	r3, #60	; 0x3c
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4a25      	ldr	r2, [pc, #148]	; (800a05c <USB_EP0_OutStart+0xb4>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d90a      	bls.n	8009fe2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fdc:	d101      	bne.n	8009fe2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e037      	b.n	800a052 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe8:	461a      	mov	r2, r3
 8009fea:	2300      	movs	r3, #0
 8009fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a010:	f043 0318 	orr.w	r3, r3, #24
 800a014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a024:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a028:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d10f      	bne.n	800a050 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a04e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	bc80      	pop	{r7}
 800a05a:	4770      	bx	lr
 800a05c:	4f54300a 	.word	0x4f54300a

0800a060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3301      	adds	r3, #1
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4a12      	ldr	r2, [pc, #72]	; (800a0c0 <USB_CoreReset+0x60>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d901      	bls.n	800a07e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e01b      	b.n	800a0b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	daf2      	bge.n	800a06c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f043 0201 	orr.w	r2, r3, #1
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4a08      	ldr	r2, [pc, #32]	; (800a0c0 <USB_CoreReset+0x60>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d901      	bls.n	800a0a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e006      	b.n	800a0b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d0f0      	beq.n	800a096 <USB_CoreReset+0x36>

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bc80      	pop	{r7}
 800a0be:	4770      	bx	lr
 800a0c0:	00030d40 	.word	0x00030d40

0800a0c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0c8:	4904      	ldr	r1, [pc, #16]	; (800a0dc <MX_FATFS_Init+0x18>)
 800a0ca:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <MX_FATFS_Init+0x1c>)
 800a0cc:	f001 fc5e 	bl	800b98c <FATFS_LinkDriver>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <MX_FATFS_Init+0x20>)
 800a0d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0d8:	bf00      	nop
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000688 	.word	0x20000688
 800a0e0:	0800d18c 	.word	0x0800d18c
 800a0e4:	20000684 	.word	0x20000684

0800a0e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0f2:	f000 f879 	bl	800a1e8 <BSP_SD_IsDetected>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d001      	beq.n	800a100 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e012      	b.n	800a126 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a100:	480b      	ldr	r0, [pc, #44]	; (800a130 <BSP_SD_Init+0x48>)
 800a102:	f7fa ff58 	bl	8004fb6 <HAL_SD_Init>
 800a106:	4603      	mov	r3, r0
 800a108:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d109      	bne.n	800a124 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a114:	4806      	ldr	r0, [pc, #24]	; (800a130 <BSP_SD_Init+0x48>)
 800a116:	f7fb fd31 	bl	8005b7c <HAL_SD_ConfigWideBusOperation>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a124:	79fb      	ldrb	r3, [r7, #7]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000318 	.word	0x20000318

0800a134 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af02      	add	r7, sp, #8
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	4806      	ldr	r0, [pc, #24]	; (800a16c <BSP_SD_ReadBlocks+0x38>)
 800a152:	f7fa ffdf 	bl	8005114 <HAL_SD_ReadBlocks>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a160:	7dfb      	ldrb	r3, [r7, #23]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000318 	.word	0x20000318

0800a170 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	4806      	ldr	r0, [pc, #24]	; (800a1a8 <BSP_SD_WriteBlocks+0x38>)
 800a18e:	f7fb f99f 	bl	80054d0 <HAL_SD_WriteBlocks>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000318 	.word	0x20000318

0800a1ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1b0:	4805      	ldr	r0, [pc, #20]	; (800a1c8 <BSP_SD_GetCardState+0x1c>)
 800a1b2:	f7fb fd7d 	bl	8005cb0 <HAL_SD_GetCardState>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000318 	.word	0x20000318

0800a1cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4803      	ldr	r0, [pc, #12]	; (800a1e4 <BSP_SD_GetCardInfo+0x18>)
 800a1d8:	f7fb fca4 	bl	8005b24 <HAL_SD_GetCardInfo>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000318 	.word	0x20000318

0800a1e8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	b2db      	uxtb	r3, r3
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr

0800a200 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7c1b      	ldrb	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d115      	bne.n	800a244 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a21c:	2202      	movs	r2, #2
 800a21e:	2181      	movs	r1, #129	; 0x81
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f002 fcd4 	bl	800cbce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a230:	2202      	movs	r2, #2
 800a232:	2101      	movs	r1, #1
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f002 fcca 	bl	800cbce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a242:	e012      	b.n	800a26a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	2202      	movs	r2, #2
 800a248:	2181      	movs	r1, #129	; 0x81
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f002 fcbf 	bl	800cbce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a256:	2340      	movs	r3, #64	; 0x40
 800a258:	2202      	movs	r2, #2
 800a25a:	2101      	movs	r1, #1
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f002 fcb6 	bl	800cbce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a26a:	2308      	movs	r3, #8
 800a26c:	2203      	movs	r2, #3
 800a26e:	2182      	movs	r1, #130	; 0x82
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f002 fcac 	bl	800cbce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a27c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a280:	f002 fdf8 	bl	800ce74 <malloc>
 800a284:	4603      	mov	r3, r0
 800a286:	461a      	mov	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
 800a29c:	e026      	b.n	800a2ec <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7c1b      	ldrb	r3, [r3, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d109      	bne.n	800a2dc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f002 fd6a 	bl	800cdae <USBD_LL_PrepareReceive>
 800a2da:	e007      	b.n	800a2ec <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2e2:	2340      	movs	r3, #64	; 0x40
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f002 fd61 	bl	800cdae <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	460b      	mov	r3, r1
 800a300:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a306:	2181      	movs	r1, #129	; 0x81
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 fc86 	bl	800cc1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a314:	2101      	movs	r1, #1
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f002 fc7f 	bl	800cc1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a324:	2182      	movs	r1, #130	; 0x82
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f002 fc77 	bl	800cc1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00e      	beq.n	800a35a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34c:	4618      	mov	r0, r3
 800a34e:	f002 fd99 	bl	800ce84 <free>
    pdev->pClassData = NULL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a374:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d039      	beq.n	800a402 <USBD_CDC_Setup+0x9e>
 800a38e:	2b20      	cmp	r3, #32
 800a390:	d17f      	bne.n	800a492 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	88db      	ldrh	r3, [r3, #6]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d029      	beq.n	800a3ee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b25b      	sxtb	r3, r3
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	da11      	bge.n	800a3c8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a3b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	88d2      	ldrh	r2, [r2, #6]
 800a3b6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3b8:	6939      	ldr	r1, [r7, #16]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	88db      	ldrh	r3, [r3, #6]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 fa14 	bl	800b7ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a3c6:	e06b      	b.n	800a4a0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	785a      	ldrb	r2, [r3, #1]
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	88db      	ldrh	r3, [r3, #6]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3de:	6939      	ldr	r1, [r7, #16]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	88db      	ldrh	r3, [r3, #6]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f001 fa2f 	bl	800b84a <USBD_CtlPrepareRx>
      break;
 800a3ec:	e058      	b.n	800a4a0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	7850      	ldrb	r0, [r2, #1]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	4798      	blx	r3
      break;
 800a400:	e04e      	b.n	800a4a0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2b0b      	cmp	r3, #11
 800a408:	d02e      	beq.n	800a468 <USBD_CDC_Setup+0x104>
 800a40a:	2b0b      	cmp	r3, #11
 800a40c:	dc38      	bgt.n	800a480 <USBD_CDC_Setup+0x11c>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <USBD_CDC_Setup+0xb4>
 800a412:	2b0a      	cmp	r3, #10
 800a414:	d014      	beq.n	800a440 <USBD_CDC_Setup+0xdc>
 800a416:	e033      	b.n	800a480 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d107      	bne.n	800a432 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a422:	f107 030c 	add.w	r3, r7, #12
 800a426:	2202      	movs	r2, #2
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 f9df 	bl	800b7ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a430:	e02e      	b.n	800a490 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f970 	bl	800b71a <USBD_CtlError>
            ret = USBD_FAIL;
 800a43a:	2302      	movs	r3, #2
 800a43c:	75fb      	strb	r3, [r7, #23]
          break;
 800a43e:	e027      	b.n	800a490 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a446:	2b03      	cmp	r3, #3
 800a448:	d107      	bne.n	800a45a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a44a:	f107 030f 	add.w	r3, r7, #15
 800a44e:	2201      	movs	r2, #1
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 f9cb 	bl	800b7ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a458:	e01a      	b.n	800a490 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 f95c 	bl	800b71a <USBD_CtlError>
            ret = USBD_FAIL;
 800a462:	2302      	movs	r3, #2
 800a464:	75fb      	strb	r3, [r7, #23]
          break;
 800a466:	e013      	b.n	800a490 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d00d      	beq.n	800a48e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 f950 	bl	800b71a <USBD_CtlError>
            ret = USBD_FAIL;
 800a47a:	2302      	movs	r3, #2
 800a47c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a47e:	e006      	b.n	800a48e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 f949 	bl	800b71a <USBD_CtlError>
          ret = USBD_FAIL;
 800a488:	2302      	movs	r3, #2
 800a48a:	75fb      	strb	r3, [r7, #23]
          break;
 800a48c:	e000      	b.n	800a490 <USBD_CDC_Setup+0x12c>
          break;
 800a48e:	bf00      	nop
      }
      break;
 800a490:	e006      	b.n	800a4a0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f001 f940 	bl	800b71a <USBD_CtlError>
      ret = USBD_FAIL;
 800a49a:	2302      	movs	r3, #2
 800a49c:	75fb      	strb	r3, [r7, #23]
      break;
 800a49e:	bf00      	nop
  }

  return ret;
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d03a      	beq.n	800a546 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	331c      	adds	r3, #28
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d029      	beq.n	800a53a <USBD_CDC_DataIn+0x90>
 800a4e6:	78fa      	ldrb	r2, [r7, #3]
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	331c      	adds	r3, #28
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	78f9      	ldrb	r1, [r7, #3]
 800a4fa:	68b8      	ldr	r0, [r7, #8]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	1a5b      	subs	r3, r3, r1
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4403      	add	r3, r0
 800a506:	3344      	adds	r3, #68	; 0x44
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	fbb2 f1f3 	udiv	r1, r2, r3
 800a50e:	fb01 f303 	mul.w	r3, r1, r3
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d110      	bne.n	800a53a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a518:	78fa      	ldrb	r2, [r7, #3]
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	331c      	adds	r3, #28
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a52c:	78f9      	ldrb	r1, [r7, #3]
 800a52e:	2300      	movs	r3, #0
 800a530:	2200      	movs	r2, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f002 fc18 	bl	800cd68 <USBD_LL_Transmit>
 800a538:	e003      	b.n	800a542 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	e000      	b.n	800a548 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a546:	2302      	movs	r3, #2
  }
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a562:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f002 fc43 	bl	800cdf4 <USBD_LL_GetRxDataSize>
 800a56e:	4602      	mov	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00d      	beq.n	800a59c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a594:	4611      	mov	r1, r2
 800a596:	4798      	blx	r3

    return USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	e000      	b.n	800a59e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a59c:	2302      	movs	r3, #2
  }
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d015      	beq.n	800a5ec <USBD_CDC_EP0_RxReady+0x46>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5c6:	2bff      	cmp	r3, #255	; 0xff
 800a5c8:	d010      	beq.n	800a5ec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a5d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5e0:	b292      	uxth	r2, r2
 800a5e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	22ff      	movs	r2, #255	; 0xff
 800a5e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2243      	movs	r2, #67	; 0x43
 800a604:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a606:	4b03      	ldr	r3, [pc, #12]	; (800a614 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	200000d4 	.word	0x200000d4

0800a618 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2243      	movs	r2, #67	; 0x43
 800a624:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000090 	.word	0x20000090

0800a638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2243      	movs	r2, #67	; 0x43
 800a644:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a646:	4b03      	ldr	r3, [pc, #12]	; (800a654 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bc80      	pop	{r7}
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20000118 	.word	0x20000118

0800a658 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	220a      	movs	r2, #10
 800a664:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a666:	4b03      	ldr	r3, [pc, #12]	; (800a674 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	2000004c 	.word	0x2000004c

0800a678 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a682:	2302      	movs	r3, #2
 800a684:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d005      	beq.n	800a698 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a698:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bc80      	pop	{r7}
 800a6a2:	4770      	bx	lr

0800a6a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a6c2:	88fa      	ldrh	r2, [r7, #6]
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	371c      	adds	r7, #28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bc80      	pop	{r7}
 800a6d4:	4770      	bx	lr

0800a6d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b085      	sub	sp, #20
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a70a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d017      	beq.n	800a746 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7c1b      	ldrb	r3, [r3, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d109      	bne.n	800a732 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a724:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a728:	2101      	movs	r1, #1
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f002 fb3f 	bl	800cdae <USBD_LL_PrepareReceive>
 800a730:	e007      	b.n	800a742 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a738:	2340      	movs	r3, #64	; 0x40
 800a73a:	2101      	movs	r1, #1
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f002 fb36 	bl	800cdae <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	e000      	b.n	800a748 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a746:	2302      	movs	r3, #2
  }
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a764:	2302      	movs	r3, #2
 800a766:	e01a      	b.n	800a79e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	79fa      	ldrb	r2, [r7, #7]
 800a794:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f002 f9b4 	bl	800cb04 <USBD_LL_Init>

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b085      	sub	sp, #20
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]
 800a7c6:	e001      	b.n	800a7cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bc80      	pop	{r7}
 800a7d6:	4770      	bx	lr

0800a7d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f002 f9d9 	bl	800cb98 <USBD_LL_Start>

  return USBD_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bc80      	pop	{r7}
 800a802:	4770      	bx	lr

0800a804 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a810:	2302      	movs	r3, #2
 800a812:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	4611      	mov	r1, r2
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	4798      	blx	r3
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3

  return USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 ff11 	bl	800b6a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a88e:	461a      	mov	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a89c:	f003 031f 	and.w	r3, r3, #31
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d016      	beq.n	800a8d2 <USBD_LL_SetupStage+0x6a>
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d81c      	bhi.n	800a8e2 <USBD_LL_SetupStage+0x7a>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <USBD_LL_SetupStage+0x4a>
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d008      	beq.n	800a8c2 <USBD_LL_SetupStage+0x5a>
 800a8b0:	e017      	b.n	800a8e2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa04 	bl	800acc8 <USBD_StdDevReq>
      break;
 800a8c0:	e01a      	b.n	800a8f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa66 	bl	800ad9c <USBD_StdItfReq>
      break;
 800a8d0:	e012      	b.n	800a8f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 faa6 	bl	800ae2c <USBD_StdEPReq>
      break;
 800a8e0:	e00a      	b.n	800a8f8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a8e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f002 f9b1 	bl	800cc58 <USBD_LL_StallEP>
      break;
 800a8f6:	bf00      	nop
  }

  return USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b086      	sub	sp, #24
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	460b      	mov	r3, r1
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a910:	7afb      	ldrb	r3, [r7, #11]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d14b      	bne.n	800a9ae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a91c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a924:	2b03      	cmp	r3, #3
 800a926:	d134      	bne.n	800a992 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	68da      	ldr	r2, [r3, #12]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	429a      	cmp	r2, r3
 800a932:	d919      	bls.n	800a968 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	1ad2      	subs	r2, r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d203      	bcs.n	800a956 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a952:	b29b      	uxth	r3, r3
 800a954:	e002      	b.n	800a95c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	461a      	mov	r2, r3
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 ff90 	bl	800b886 <USBD_CtlContinueRx>
 800a966:	e038      	b.n	800a9da <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00a      	beq.n	800a98a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d105      	bne.n	800a98a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 ff8d 	bl	800b8aa <USBD_CtlSendStatus>
 800a990:	e023      	b.n	800a9da <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a998:	2b05      	cmp	r3, #5
 800a99a:	d11e      	bne.n	800a9da <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f002 f956 	bl	800cc58 <USBD_LL_StallEP>
 800a9ac:	e015      	b.n	800a9da <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00d      	beq.n	800a9d6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d108      	bne.n	800a9d6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	7afa      	ldrb	r2, [r7, #11]
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	4798      	blx	r3
 800a9d4:	e001      	b.n	800a9da <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e000      	b.n	800a9dc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a9f2:	7afb      	ldrb	r3, [r7, #11]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d17f      	bne.n	800aaf8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3314      	adds	r3, #20
 800a9fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d15c      	bne.n	800aac2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d915      	bls.n	800aa40 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	68da      	ldr	r2, [r3, #12]
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	1ad2      	subs	r2, r2, r3
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 fefa 	bl	800b826 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa32:	2300      	movs	r3, #0
 800aa34:	2200      	movs	r2, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f002 f9b8 	bl	800cdae <USBD_LL_PrepareReceive>
 800aa3e:	e04e      	b.n	800aade <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	6912      	ldr	r2, [r2, #16]
 800aa48:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa4c:	fb01 f202 	mul.w	r2, r1, r2
 800aa50:	1a9b      	subs	r3, r3, r2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d11c      	bne.n	800aa90 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	689a      	ldr	r2, [r3, #8]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d316      	bcc.n	800aa90 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d20f      	bcs.n	800aa90 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa70:	2200      	movs	r2, #0
 800aa72:	2100      	movs	r1, #0
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 fed6 	bl	800b826 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa82:	2300      	movs	r3, #0
 800aa84:	2200      	movs	r2, #0
 800aa86:	2100      	movs	r1, #0
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f002 f990 	bl	800cdae <USBD_LL_PrepareReceive>
 800aa8e:	e026      	b.n	800aade <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00a      	beq.n	800aab2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d105      	bne.n	800aab2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aab2:	2180      	movs	r1, #128	; 0x80
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f002 f8cf 	bl	800cc58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 ff08 	bl	800b8d0 <USBD_CtlReceiveStatus>
 800aac0:	e00d      	b.n	800aade <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d004      	beq.n	800aad6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d103      	bne.n	800aade <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aad6:	2180      	movs	r1, #128	; 0x80
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f002 f8bd 	bl	800cc58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d11d      	bne.n	800ab24 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fe81 	bl	800a7f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aaf6:	e015      	b.n	800ab24 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00d      	beq.n	800ab20 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d108      	bne.n	800ab20 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	7afa      	ldrb	r2, [r7, #11]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	4798      	blx	r3
 800ab1e:	e001      	b.n	800ab24 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab20:	2302      	movs	r3, #2
 800ab22:	e000      	b.n	800ab26 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f002 f846 	bl	800cbce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2240      	movs	r2, #64	; 0x40
 800ab4e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab52:	2340      	movs	r3, #64	; 0x40
 800ab54:	2200      	movs	r2, #0
 800ab56:	2180      	movs	r1, #128	; 0x80
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f002 f838 	bl	800cbce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2240      	movs	r2, #64	; 0x40
 800ab68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	6852      	ldr	r2, [r2, #4]
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	4611      	mov	r1, r2
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
  }

  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	78fa      	ldrb	r2, [r7, #3]
 800abc0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	bc80      	pop	{r7}
 800abcc:	4770      	bx	lr

0800abce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2204      	movs	r2, #4
 800abe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr

0800abf6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d105      	bne.n	800ac14 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr

0800ac20 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d10b      	bne.n	800ac4a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d005      	beq.n	800ac4a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr

0800ac6c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr

0800ac84 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bc80      	pop	{r7}
 800ac96:	4770      	bx	lr

0800ac98 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	6852      	ldr	r2, [r2, #4]
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	4611      	mov	r1, r2
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	4798      	blx	r3

  return USBD_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	d005      	beq.n	800acee <USBD_StdDevReq+0x26>
 800ace2:	2b40      	cmp	r3, #64	; 0x40
 800ace4:	d84f      	bhi.n	800ad86 <USBD_StdDevReq+0xbe>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <USBD_StdDevReq+0x36>
 800acea:	2b20      	cmp	r3, #32
 800acec:	d14b      	bne.n	800ad86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	4798      	blx	r3
      break;
 800acfc:	e048      	b.n	800ad90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	2b09      	cmp	r3, #9
 800ad04:	d839      	bhi.n	800ad7a <USBD_StdDevReq+0xb2>
 800ad06:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <USBD_StdDevReq+0x44>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800ad5d 	.word	0x0800ad5d
 800ad10:	0800ad71 	.word	0x0800ad71
 800ad14:	0800ad7b 	.word	0x0800ad7b
 800ad18:	0800ad67 	.word	0x0800ad67
 800ad1c:	0800ad7b 	.word	0x0800ad7b
 800ad20:	0800ad3f 	.word	0x0800ad3f
 800ad24:	0800ad35 	.word	0x0800ad35
 800ad28:	0800ad7b 	.word	0x0800ad7b
 800ad2c:	0800ad53 	.word	0x0800ad53
 800ad30:	0800ad49 	.word	0x0800ad49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f9dc 	bl	800b0f4 <USBD_GetDescriptor>
          break;
 800ad3c:	e022      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fb3f 	bl	800b3c4 <USBD_SetAddress>
          break;
 800ad46:	e01d      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fb7e 	bl	800b44c <USBD_SetConfig>
          break;
 800ad50:	e018      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fc07 	bl	800b568 <USBD_GetConfig>
          break;
 800ad5a:	e013      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fc37 	bl	800b5d2 <USBD_GetStatus>
          break;
 800ad64:	e00e      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fc65 	bl	800b638 <USBD_SetFeature>
          break;
 800ad6e:	e009      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fc74 	bl	800b660 <USBD_ClrFeature>
          break;
 800ad78:	e004      	b.n	800ad84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fccc 	bl	800b71a <USBD_CtlError>
          break;
 800ad82:	bf00      	nop
      }
      break;
 800ad84:	e004      	b.n	800ad90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fcc6 	bl	800b71a <USBD_CtlError>
      break;
 800ad8e:	bf00      	nop
  }

  return ret;
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop

0800ad9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adb2:	2b40      	cmp	r3, #64	; 0x40
 800adb4:	d005      	beq.n	800adc2 <USBD_StdItfReq+0x26>
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	d82e      	bhi.n	800ae18 <USBD_StdItfReq+0x7c>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <USBD_StdItfReq+0x26>
 800adbe:	2b20      	cmp	r3, #32
 800adc0:	d12a      	bne.n	800ae18 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc8:	3b01      	subs	r3, #1
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d81d      	bhi.n	800ae0a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	889b      	ldrh	r3, [r3, #4]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b01      	cmp	r3, #1
 800add6:	d813      	bhi.n	800ae00 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	4798      	blx	r3
 800ade6:	4603      	mov	r3, r0
 800ade8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d110      	bne.n	800ae14 <USBD_StdItfReq+0x78>
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10d      	bne.n	800ae14 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fd56 	bl	800b8aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adfe:	e009      	b.n	800ae14 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fc89 	bl	800b71a <USBD_CtlError>
          break;
 800ae08:	e004      	b.n	800ae14 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fc84 	bl	800b71a <USBD_CtlError>
          break;
 800ae12:	e000      	b.n	800ae16 <USBD_StdItfReq+0x7a>
          break;
 800ae14:	bf00      	nop
      }
      break;
 800ae16:	e004      	b.n	800ae22 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fc7d 	bl	800b71a <USBD_CtlError>
      break;
 800ae20:	bf00      	nop
  }

  return USBD_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	889b      	ldrh	r3, [r3, #4]
 800ae3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae48:	2b40      	cmp	r3, #64	; 0x40
 800ae4a:	d007      	beq.n	800ae5c <USBD_StdEPReq+0x30>
 800ae4c:	2b40      	cmp	r3, #64	; 0x40
 800ae4e:	f200 8146 	bhi.w	800b0de <USBD_StdEPReq+0x2b2>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <USBD_StdEPReq+0x40>
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	f040 8141 	bne.w	800b0de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	4798      	blx	r3
      break;
 800ae6a:	e13d      	b.n	800b0e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae74:	2b20      	cmp	r3, #32
 800ae76:	d10a      	bne.n	800ae8e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	e12d      	b.n	800b0ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	785b      	ldrb	r3, [r3, #1]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d007      	beq.n	800aea6 <USBD_StdEPReq+0x7a>
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	f300 811b 	bgt.w	800b0d2 <USBD_StdEPReq+0x2a6>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d072      	beq.n	800af86 <USBD_StdEPReq+0x15a>
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d03a      	beq.n	800af1a <USBD_StdEPReq+0xee>
 800aea4:	e115      	b.n	800b0d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d002      	beq.n	800aeb6 <USBD_StdEPReq+0x8a>
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d015      	beq.n	800aee0 <USBD_StdEPReq+0xb4>
 800aeb4:	e02b      	b.n	800af0e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00c      	beq.n	800aed6 <USBD_StdEPReq+0xaa>
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b80      	cmp	r3, #128	; 0x80
 800aec0:	d009      	beq.n	800aed6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fec6 	bl	800cc58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aecc:	2180      	movs	r1, #128	; 0x80
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f001 fec2 	bl	800cc58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aed4:	e020      	b.n	800af18 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fc1e 	bl	800b71a <USBD_CtlError>
              break;
 800aede:	e01b      	b.n	800af18 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	885b      	ldrh	r3, [r3, #2]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10e      	bne.n	800af06 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <USBD_StdEPReq+0xda>
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b80      	cmp	r3, #128	; 0x80
 800aef2:	d008      	beq.n	800af06 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	88db      	ldrh	r3, [r3, #6]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d104      	bne.n	800af06 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f001 fea9 	bl	800cc58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fccf 	bl	800b8aa <USBD_CtlSendStatus>

              break;
 800af0c:	e004      	b.n	800af18 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fc02 	bl	800b71a <USBD_CtlError>
              break;
 800af16:	bf00      	nop
          }
          break;
 800af18:	e0e0      	b.n	800b0dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af20:	2b02      	cmp	r3, #2
 800af22:	d002      	beq.n	800af2a <USBD_StdEPReq+0xfe>
 800af24:	2b03      	cmp	r3, #3
 800af26:	d015      	beq.n	800af54 <USBD_StdEPReq+0x128>
 800af28:	e026      	b.n	800af78 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00c      	beq.n	800af4a <USBD_StdEPReq+0x11e>
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	2b80      	cmp	r3, #128	; 0x80
 800af34:	d009      	beq.n	800af4a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fe8c 	bl	800cc58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800af40:	2180      	movs	r1, #128	; 0x80
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 fe88 	bl	800cc58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af48:	e01c      	b.n	800af84 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fbe4 	bl	800b71a <USBD_CtlError>
              break;
 800af52:	e017      	b.n	800af84 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	885b      	ldrh	r3, [r3, #2]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d112      	bne.n	800af82 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af62:	2b00      	cmp	r3, #0
 800af64:	d004      	beq.n	800af70 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f001 fe93 	bl	800cc96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc9a 	bl	800b8aa <USBD_CtlSendStatus>
              }
              break;
 800af76:	e004      	b.n	800af82 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fbcd 	bl	800b71a <USBD_CtlError>
              break;
 800af80:	e000      	b.n	800af84 <USBD_StdEPReq+0x158>
              break;
 800af82:	bf00      	nop
          }
          break;
 800af84:	e0aa      	b.n	800b0dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d002      	beq.n	800af96 <USBD_StdEPReq+0x16a>
 800af90:	2b03      	cmp	r3, #3
 800af92:	d032      	beq.n	800affa <USBD_StdEPReq+0x1ce>
 800af94:	e097      	b.n	800b0c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d007      	beq.n	800afac <USBD_StdEPReq+0x180>
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	2b80      	cmp	r3, #128	; 0x80
 800afa0:	d004      	beq.n	800afac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fbb8 	bl	800b71a <USBD_CtlError>
                break;
 800afaa:	e091      	b.n	800b0d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	da0b      	bge.n	800afcc <USBD_StdEPReq+0x1a0>
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afba:	4613      	mov	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	3310      	adds	r3, #16
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	4413      	add	r3, r2
 800afc8:	3304      	adds	r3, #4
 800afca:	e00b      	b.n	800afe4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afd2:	4613      	mov	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	4413      	add	r3, r2
 800afe2:	3304      	adds	r3, #4
 800afe4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2202      	movs	r2, #2
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fbfb 	bl	800b7ee <USBD_CtlSendData>
              break;
 800aff8:	e06a      	b.n	800b0d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800affa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800affe:	2b00      	cmp	r3, #0
 800b000:	da11      	bge.n	800b026 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b002:	7bbb      	ldrb	r3, [r7, #14]
 800b004:	f003 020f 	and.w	r2, r3, #15
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	440b      	add	r3, r1
 800b014:	3318      	adds	r3, #24
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d117      	bne.n	800b04c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb7b 	bl	800b71a <USBD_CtlError>
                  break;
 800b024:	e054      	b.n	800b0d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	f003 020f 	and.w	r2, r3, #15
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d104      	bne.n	800b04c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fb68 	bl	800b71a <USBD_CtlError>
                  break;
 800b04a:	e041      	b.n	800b0d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b04c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b050:	2b00      	cmp	r3, #0
 800b052:	da0b      	bge.n	800b06c <USBD_StdEPReq+0x240>
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b05a:	4613      	mov	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	3310      	adds	r3, #16
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	4413      	add	r3, r2
 800b068:	3304      	adds	r3, #4
 800b06a:	e00b      	b.n	800b084 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	4413      	add	r3, r2
 800b082:	3304      	adds	r3, #4
 800b084:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <USBD_StdEPReq+0x266>
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	2b80      	cmp	r3, #128	; 0x80
 800b090:	d103      	bne.n	800b09a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	e00e      	b.n	800b0b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 fe18 	bl	800ccd4 <USBD_LL_IsStallEP>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	e002      	b.n	800b0b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fb95 	bl	800b7ee <USBD_CtlSendData>
              break;
 800b0c4:	e004      	b.n	800b0d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fb26 	bl	800b71a <USBD_CtlError>
              break;
 800b0ce:	bf00      	nop
          }
          break;
 800b0d0:	e004      	b.n	800b0dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fb20 	bl	800b71a <USBD_CtlError>
          break;
 800b0da:	bf00      	nop
      }
      break;
 800b0dc:	e004      	b.n	800b0e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fb1a 	bl	800b71a <USBD_CtlError>
      break;
 800b0e6:	bf00      	nop
  }

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b102:	2300      	movs	r3, #0
 800b104:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	885b      	ldrh	r3, [r3, #2]
 800b10e:	0a1b      	lsrs	r3, r3, #8
 800b110:	b29b      	uxth	r3, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	2b06      	cmp	r3, #6
 800b116:	f200 8128 	bhi.w	800b36a <USBD_GetDescriptor+0x276>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBD_GetDescriptor+0x2c>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b13d 	.word	0x0800b13d
 800b124:	0800b155 	.word	0x0800b155
 800b128:	0800b195 	.word	0x0800b195
 800b12c:	0800b36b 	.word	0x0800b36b
 800b130:	0800b36b 	.word	0x0800b36b
 800b134:	0800b30b 	.word	0x0800b30b
 800b138:	0800b337 	.word	0x0800b337
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	7c12      	ldrb	r2, [r2, #16]
 800b148:	f107 0108 	add.w	r1, r7, #8
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	60f8      	str	r0, [r7, #12]
      break;
 800b152:	e112      	b.n	800b37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	7c1b      	ldrb	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10d      	bne.n	800b178 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	f107 0208 	add.w	r2, r7, #8
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	2202      	movs	r2, #2
 800b174:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b176:	e100      	b.n	800b37a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	f107 0208 	add.w	r2, r7, #8
 800b184:	4610      	mov	r0, r2
 800b186:	4798      	blx	r3
 800b188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3301      	adds	r3, #1
 800b18e:	2202      	movs	r2, #2
 800b190:	701a      	strb	r2, [r3, #0]
      break;
 800b192:	e0f2      	b.n	800b37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	885b      	ldrh	r3, [r3, #2]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b05      	cmp	r3, #5
 800b19c:	f200 80ac 	bhi.w	800b2f8 <USBD_GetDescriptor+0x204>
 800b1a0:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <USBD_GetDescriptor+0xb4>)
 800b1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b1c1 	.word	0x0800b1c1
 800b1ac:	0800b1f5 	.word	0x0800b1f5
 800b1b0:	0800b229 	.word	0x0800b229
 800b1b4:	0800b25d 	.word	0x0800b25d
 800b1b8:	0800b291 	.word	0x0800b291
 800b1bc:	0800b2c5 	.word	0x0800b2c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00b      	beq.n	800b1e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	7c12      	ldrb	r2, [r2, #16]
 800b1d8:	f107 0108 	add.w	r1, r7, #8
 800b1dc:	4610      	mov	r0, r2
 800b1de:	4798      	blx	r3
 800b1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1e2:	e091      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fa97 	bl	800b71a <USBD_CtlError>
            err++;
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1f2:	e089      	b.n	800b308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00b      	beq.n	800b218 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	7c12      	ldrb	r2, [r2, #16]
 800b20c:	f107 0108 	add.w	r1, r7, #8
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
 800b214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b216:	e077      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa7d 	bl	800b71a <USBD_CtlError>
            err++;
 800b220:	7afb      	ldrb	r3, [r7, #11]
 800b222:	3301      	adds	r3, #1
 800b224:	72fb      	strb	r3, [r7, #11]
          break;
 800b226:	e06f      	b.n	800b308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00b      	beq.n	800b24c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	7c12      	ldrb	r2, [r2, #16]
 800b240:	f107 0108 	add.w	r1, r7, #8
 800b244:	4610      	mov	r0, r2
 800b246:	4798      	blx	r3
 800b248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b24a:	e05d      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fa63 	bl	800b71a <USBD_CtlError>
            err++;
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	3301      	adds	r3, #1
 800b258:	72fb      	strb	r3, [r7, #11]
          break;
 800b25a:	e055      	b.n	800b308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	7c12      	ldrb	r2, [r2, #16]
 800b274:	f107 0108 	add.w	r1, r7, #8
 800b278:	4610      	mov	r0, r2
 800b27a:	4798      	blx	r3
 800b27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b27e:	e043      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fa49 	bl	800b71a <USBD_CtlError>
            err++;
 800b288:	7afb      	ldrb	r3, [r7, #11]
 800b28a:	3301      	adds	r3, #1
 800b28c:	72fb      	strb	r3, [r7, #11]
          break;
 800b28e:	e03b      	b.n	800b308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	7c12      	ldrb	r2, [r2, #16]
 800b2a8:	f107 0108 	add.w	r1, r7, #8
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
 800b2b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2b2:	e029      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa2f 	bl	800b71a <USBD_CtlError>
            err++;
 800b2bc:	7afb      	ldrb	r3, [r7, #11]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2c2:	e021      	b.n	800b308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00b      	beq.n	800b2e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	7c12      	ldrb	r2, [r2, #16]
 800b2dc:	f107 0108 	add.w	r1, r7, #8
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4798      	blx	r3
 800b2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2e6:	e00f      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa15 	bl	800b71a <USBD_CtlError>
            err++;
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2f6:	e007      	b.n	800b308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fa0d 	bl	800b71a <USBD_CtlError>
          err++;
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	3301      	adds	r3, #1
 800b304:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b306:	e038      	b.n	800b37a <USBD_GetDescriptor+0x286>
 800b308:	e037      	b.n	800b37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7c1b      	ldrb	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d109      	bne.n	800b326 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31a:	f107 0208 	add.w	r2, r7, #8
 800b31e:	4610      	mov	r0, r2
 800b320:	4798      	blx	r3
 800b322:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b324:	e029      	b.n	800b37a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f9f6 	bl	800b71a <USBD_CtlError>
        err++;
 800b32e:	7afb      	ldrb	r3, [r7, #11]
 800b330:	3301      	adds	r3, #1
 800b332:	72fb      	strb	r3, [r7, #11]
      break;
 800b334:	e021      	b.n	800b37a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	7c1b      	ldrb	r3, [r3, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10d      	bne.n	800b35a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b346:	f107 0208 	add.w	r2, r7, #8
 800b34a:	4610      	mov	r0, r2
 800b34c:	4798      	blx	r3
 800b34e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3301      	adds	r3, #1
 800b354:	2207      	movs	r2, #7
 800b356:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b358:	e00f      	b.n	800b37a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f9dc 	bl	800b71a <USBD_CtlError>
        err++;
 800b362:	7afb      	ldrb	r3, [r7, #11]
 800b364:	3301      	adds	r3, #1
 800b366:	72fb      	strb	r3, [r7, #11]
      break;
 800b368:	e007      	b.n	800b37a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f9d4 	bl	800b71a <USBD_CtlError>
      err++;
 800b372:	7afb      	ldrb	r3, [r7, #11]
 800b374:	3301      	adds	r3, #1
 800b376:	72fb      	strb	r3, [r7, #11]
      break;
 800b378:	bf00      	nop
  }

  if (err != 0U)
 800b37a:	7afb      	ldrb	r3, [r7, #11]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11c      	bne.n	800b3ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b380:	893b      	ldrh	r3, [r7, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d011      	beq.n	800b3aa <USBD_GetDescriptor+0x2b6>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	88db      	ldrh	r3, [r3, #6]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00d      	beq.n	800b3aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	88da      	ldrh	r2, [r3, #6]
 800b392:	893b      	ldrh	r3, [r7, #8]
 800b394:	4293      	cmp	r3, r2
 800b396:	bf28      	it	cs
 800b398:	4613      	movcs	r3, r2
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b39e:	893b      	ldrh	r3, [r7, #8]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	68f9      	ldr	r1, [r7, #12]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fa22 	bl	800b7ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	88db      	ldrh	r3, [r3, #6]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d104      	bne.n	800b3bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fa79 	bl	800b8aa <USBD_CtlSendStatus>
 800b3b8:	e000      	b.n	800b3bc <USBD_GetDescriptor+0x2c8>
    return;
 800b3ba:	bf00      	nop
    }
  }
}
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop

0800b3c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	889b      	ldrh	r3, [r3, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d130      	bne.n	800b438 <USBD_SetAddress+0x74>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	88db      	ldrh	r3, [r3, #6]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d12c      	bne.n	800b438 <USBD_SetAddress+0x74>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	885b      	ldrh	r3, [r3, #2]
 800b3e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b3e4:	d828      	bhi.n	800b438 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	885b      	ldrh	r3, [r3, #2]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f8:	2b03      	cmp	r3, #3
 800b3fa:	d104      	bne.n	800b406 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f98b 	bl	800b71a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b404:	e01d      	b.n	800b442 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7bfa      	ldrb	r2, [r7, #15]
 800b40a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fc89 	bl	800cd2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fa46 	bl	800b8aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d004      	beq.n	800b42e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42c:	e009      	b.n	800b442 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b436:	e004      	b.n	800b442 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f96d 	bl	800b71a <USBD_CtlError>
  }
}
 800b440:	bf00      	nop
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	885b      	ldrh	r3, [r3, #2]
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	4b41      	ldr	r3, [pc, #260]	; (800b564 <USBD_SetConfig+0x118>)
 800b45e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b460:	4b40      	ldr	r3, [pc, #256]	; (800b564 <USBD_SetConfig+0x118>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d904      	bls.n	800b472 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f955 	bl	800b71a <USBD_CtlError>
 800b470:	e075      	b.n	800b55e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d002      	beq.n	800b482 <USBD_SetConfig+0x36>
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d023      	beq.n	800b4c8 <USBD_SetConfig+0x7c>
 800b480:	e062      	b.n	800b548 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b482:	4b38      	ldr	r3, [pc, #224]	; (800b564 <USBD_SetConfig+0x118>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d01a      	beq.n	800b4c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b48a:	4b36      	ldr	r3, [pc, #216]	; (800b564 <USBD_SetConfig+0x118>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2203      	movs	r2, #3
 800b498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b49c:	4b31      	ldr	r3, [pc, #196]	; (800b564 <USBD_SetConfig+0x118>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff f9ae 	bl	800a804 <USBD_SetClassConfig>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d104      	bne.n	800b4b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f932 	bl	800b71a <USBD_CtlError>
            return;
 800b4b6:	e052      	b.n	800b55e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f9f6 	bl	800b8aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4be:	e04e      	b.n	800b55e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f9f2 	bl	800b8aa <USBD_CtlSendStatus>
        break;
 800b4c6:	e04a      	b.n	800b55e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b4c8:	4b26      	ldr	r3, [pc, #152]	; (800b564 <USBD_SetConfig+0x118>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d112      	bne.n	800b4f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b4d8:	4b22      	ldr	r3, [pc, #136]	; (800b564 <USBD_SetConfig+0x118>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b4e2:	4b20      	ldr	r3, [pc, #128]	; (800b564 <USBD_SetConfig+0x118>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff f9aa 	bl	800a842 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f9db 	bl	800b8aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b4f4:	e033      	b.n	800b55e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b4f6:	4b1b      	ldr	r3, [pc, #108]	; (800b564 <USBD_SetConfig+0x118>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	429a      	cmp	r2, r3
 800b502:	d01d      	beq.n	800b540 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff f998 	bl	800a842 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b512:	4b14      	ldr	r3, [pc, #80]	; (800b564 <USBD_SetConfig+0x118>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b51c:	4b11      	ldr	r3, [pc, #68]	; (800b564 <USBD_SetConfig+0x118>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7ff f96e 	bl	800a804 <USBD_SetClassConfig>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d104      	bne.n	800b538 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f8f2 	bl	800b71a <USBD_CtlError>
            return;
 800b536:	e012      	b.n	800b55e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f9b6 	bl	800b8aa <USBD_CtlSendStatus>
        break;
 800b53e:	e00e      	b.n	800b55e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f9b2 	bl	800b8aa <USBD_CtlSendStatus>
        break;
 800b546:	e00a      	b.n	800b55e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f8e5 	bl	800b71a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <USBD_SetConfig+0x118>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff f973 	bl	800a842 <USBD_ClrClassConfig>
        break;
 800b55c:	bf00      	nop
    }
  }
}
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	2000068c 	.word	0x2000068c

0800b568 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	88db      	ldrh	r3, [r3, #6]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d004      	beq.n	800b584 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f8cc 	bl	800b71a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b582:	e022      	b.n	800b5ca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	dc02      	bgt.n	800b594 <USBD_GetConfig+0x2c>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dc03      	bgt.n	800b59a <USBD_GetConfig+0x32>
 800b592:	e015      	b.n	800b5c0 <USBD_GetConfig+0x58>
 800b594:	2b03      	cmp	r3, #3
 800b596:	d00b      	beq.n	800b5b0 <USBD_GetConfig+0x48>
 800b598:	e012      	b.n	800b5c0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f920 	bl	800b7ee <USBD_CtlSendData>
        break;
 800b5ae:	e00c      	b.n	800b5ca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f918 	bl	800b7ee <USBD_CtlSendData>
        break;
 800b5be:	e004      	b.n	800b5ca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f8a9 	bl	800b71a <USBD_CtlError>
        break;
 800b5c8:	bf00      	nop
}
 800b5ca:	bf00      	nop
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d81e      	bhi.n	800b626 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	88db      	ldrh	r3, [r3, #6]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d004      	beq.n	800b5fa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f891 	bl	800b71a <USBD_CtlError>
        break;
 800b5f8:	e01a      	b.n	800b630 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f043 0202 	orr.w	r2, r3, #2
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	330c      	adds	r3, #12
 800b61a:	2202      	movs	r2, #2
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f8e5 	bl	800b7ee <USBD_CtlSendData>
      break;
 800b624:	e004      	b.n	800b630 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f876 	bl	800b71a <USBD_CtlError>
      break;
 800b62e:	bf00      	nop
  }
}
 800b630:	bf00      	nop
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	885b      	ldrh	r3, [r3, #2]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d106      	bne.n	800b658 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f929 	bl	800b8aa <USBD_CtlSendStatus>
  }
}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b670:	3b01      	subs	r3, #1
 800b672:	2b02      	cmp	r3, #2
 800b674:	d80b      	bhi.n	800b68e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	885b      	ldrh	r3, [r3, #2]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10c      	bne.n	800b698 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f90f 	bl	800b8aa <USBD_CtlSendStatus>
      }
      break;
 800b68c:	e004      	b.n	800b698 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f842 	bl	800b71a <USBD_CtlError>
      break;
 800b696:	e000      	b.n	800b69a <USBD_ClrFeature+0x3a>
      break;
 800b698:	bf00      	nop
  }
}
 800b69a:	bf00      	nop
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	785a      	ldrb	r2, [r3, #1]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	3302      	adds	r3, #2
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	3303      	adds	r3, #3
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	021b      	lsls	r3, r3, #8
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4413      	add	r3, r2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	3305      	adds	r3, #5
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4413      	add	r3, r2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	3306      	adds	r3, #6
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	3307      	adds	r3, #7
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	b29b      	uxth	r3, r3
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	b29b      	uxth	r3, r3
 800b708:	4413      	add	r3, r2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	80da      	strh	r2, [r3, #6]

}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr

0800b71a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b724:	2180      	movs	r1, #128	; 0x80
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f001 fa96 	bl	800cc58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b72c:	2100      	movs	r1, #0
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fa92 	bl	800cc58 <USBD_LL_StallEP>
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b748:	2300      	movs	r3, #0
 800b74a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d032      	beq.n	800b7b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f000 f834 	bl	800b7c0 <USBD_GetLen>
 800b758:	4603      	mov	r3, r0
 800b75a:	3301      	adds	r3, #1
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	75fa      	strb	r2, [r7, #23]
 800b76c:	461a      	mov	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4413      	add	r3, r2
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	7812      	ldrb	r2, [r2, #0]
 800b776:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	75fa      	strb	r2, [r7, #23]
 800b77e:	461a      	mov	r2, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4413      	add	r3, r2
 800b784:	2203      	movs	r2, #3
 800b786:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b788:	e012      	b.n	800b7b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	60fa      	str	r2, [r7, #12]
 800b790:	7dfa      	ldrb	r2, [r7, #23]
 800b792:	1c51      	adds	r1, r2, #1
 800b794:	75f9      	strb	r1, [r7, #23]
 800b796:	4611      	mov	r1, r2
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	440a      	add	r2, r1
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	75fa      	strb	r2, [r7, #23]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e8      	bne.n	800b78a <USBD_GetString+0x4e>
    }
  }
}
 800b7b8:	bf00      	nop
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b7cc:	e005      	b.n	800b7da <USBD_GetLen+0x1a>
  {
    len++;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1f5      	bne.n	800b7ce <USBD_GetLen+0xe>
  }

  return len;
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bc80      	pop	{r7}
 800b7ec:	4770      	bx	lr

0800b7ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b804:	88fa      	ldrh	r2, [r7, #6]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b80a:	88fa      	ldrh	r2, [r7, #6]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b810:	88fb      	ldrh	r3, [r7, #6]
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	2100      	movs	r1, #0
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f001 faa6 	bl	800cd68 <USBD_LL_Transmit>

  return USBD_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	4613      	mov	r3, r2
 800b832:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b834:	88fb      	ldrh	r3, [r7, #6]
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	2100      	movs	r1, #0
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f001 fa94 	bl	800cd68 <USBD_LL_Transmit>

  return USBD_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	4613      	mov	r3, r2
 800b856:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2203      	movs	r2, #3
 800b85c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b860:	88fa      	ldrh	r2, [r7, #6]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b868:	88fa      	ldrh	r2, [r7, #6]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b870:	88fb      	ldrh	r3, [r7, #6]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	2100      	movs	r1, #0
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f001 fa99 	bl	800cdae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60f8      	str	r0, [r7, #12]
 800b88e:	60b9      	str	r1, [r7, #8]
 800b890:	4613      	mov	r3, r2
 800b892:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b894:	88fb      	ldrh	r3, [r7, #6]
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	2100      	movs	r1, #0
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f001 fa87 	bl	800cdae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2204      	movs	r2, #4
 800b8b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2100      	movs	r1, #0
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f001 fa51 	bl	800cd68 <USBD_LL_Transmit>

  return USBD_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2205      	movs	r2, #5
 800b8dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f001 fa61 	bl	800cdae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	4613      	mov	r3, r2
 800b904:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b906:	2301      	movs	r3, #1
 800b908:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b90e:	4b1e      	ldr	r3, [pc, #120]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b910:	7a5b      	ldrb	r3, [r3, #9]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b01      	cmp	r3, #1
 800b916:	d831      	bhi.n	800b97c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b918:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b91a:	7a5b      	ldrb	r3, [r3, #9]
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	461a      	mov	r2, r3
 800b920:	4b19      	ldr	r3, [pc, #100]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b922:	2100      	movs	r1, #0
 800b924:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b928:	7a5b      	ldrb	r3, [r3, #9]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	4a16      	ldr	r2, [pc, #88]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b938:	7a5b      	ldrb	r3, [r3, #9]
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	461a      	mov	r2, r3
 800b93e:	4b12      	ldr	r3, [pc, #72]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b940:	4413      	add	r3, r2
 800b942:	79fa      	ldrb	r2, [r7, #7]
 800b944:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b946:	4b10      	ldr	r3, [pc, #64]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b948:	7a5b      	ldrb	r3, [r3, #9]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	b2d1      	uxtb	r1, r2
 800b950:	4a0d      	ldr	r2, [pc, #52]	; (800b988 <FATFS_LinkDriverEx+0x90>)
 800b952:	7251      	strb	r1, [r2, #9]
 800b954:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b956:	7dbb      	ldrb	r3, [r7, #22]
 800b958:	3330      	adds	r3, #48	; 0x30
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	3301      	adds	r3, #1
 800b964:	223a      	movs	r2, #58	; 0x3a
 800b966:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	3302      	adds	r3, #2
 800b96c:	222f      	movs	r2, #47	; 0x2f
 800b96e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	3303      	adds	r3, #3
 800b974:	2200      	movs	r2, #0
 800b976:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	bc80      	pop	{r7}
 800b986:	4770      	bx	lr
 800b988:	20000690 	.word	0x20000690

0800b98c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b996:	2200      	movs	r2, #0
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff ffac 	bl	800b8f8 <FATFS_LinkDriverEx>
 800b9a0:	4603      	mov	r3, r0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	; (800b9e4 <SD_initialize+0x38>)
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800b9bc:	f7fe fb94 	bl	800a0e8 <BSP_SD_Init>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d107      	bne.n	800b9d6 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b9c6:	4b07      	ldr	r3, [pc, #28]	; (800b9e4 <SD_initialize+0x38>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	f023 0301 	bic.w	r3, r3, #1
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	4b04      	ldr	r3, [pc, #16]	; (800b9e4 <SD_initialize+0x38>)
 800b9d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b9d6:	4b03      	ldr	r3, [pc, #12]	; (800b9e4 <SD_initialize+0x38>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b2db      	uxtb	r3, r3
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	2000015b 	.word	0x2000015b

0800b9e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <SD_status+0x38>)
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b9f8:	f7fe fbd8 	bl	800a1ac <BSP_SD_GetCardState>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d107      	bne.n	800ba12 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ba02:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <SD_status+0x38>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f023 0301 	bic.w	r3, r3, #1
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <SD_status+0x38>)
 800ba10:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800ba12:	4b03      	ldr	r3, [pc, #12]	; (800ba20 <SD_status+0x38>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	b2db      	uxtb	r3, r3
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	2000015b 	.word	0x2000015b

0800ba24 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800ba38:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <SD_read+0x54>)
 800ba3a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <SD_read+0x58>)
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	68b8      	ldr	r0, [r7, #8]
 800ba44:	f7fe fb76 	bl	800a134 <BSP_SD_ReadBlocks>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10e      	bne.n	800ba6c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ba4e:	e006      	b.n	800ba5e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	1e5a      	subs	r2, r3, #1
 800ba54:	613a      	str	r2, [r7, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <SD_read+0x3a>
      {
        return RES_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e007      	b.n	800ba6e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ba5e:	f7fe fba5 	bl	800a1ac <BSP_SD_GetCardState>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1f3      	bne.n	800ba50 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	000186a0 	.word	0x000186a0
 800ba7c:	05f5e100 	.word	0x05f5e100

0800ba80 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
 800ba8a:	603b      	str	r3, [r7, #0]
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <SD_write+0x54>)
 800ba96:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800ba98:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <SD_write+0x58>)
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	6879      	ldr	r1, [r7, #4]
 800ba9e:	68b8      	ldr	r0, [r7, #8]
 800baa0:	f7fe fb66 	bl	800a170 <BSP_SD_WriteBlocks>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10e      	bne.n	800bac8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800baaa:	e006      	b.n	800baba <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	1e5a      	subs	r2, r3, #1
 800bab0:	613a      	str	r2, [r7, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <SD_write+0x3a>
      {
        return RES_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e007      	b.n	800baca <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800baba:	f7fe fb77 	bl	800a1ac <BSP_SD_GetCardState>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1f3      	bne.n	800baac <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	000186a0 	.word	0x000186a0
 800bad8:	05f5e100 	.word	0x05f5e100

0800badc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	603a      	str	r2, [r7, #0]
 800bae6:	71fb      	strb	r3, [r7, #7]
 800bae8:	460b      	mov	r3, r1
 800baea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800baf2:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <SD_ioctl+0xa8>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	f003 0301 	and.w	r3, r3, #1
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <SD_ioctl+0x28>
 800bb00:	2303      	movs	r3, #3
 800bb02:	e03b      	b.n	800bb7c <SD_ioctl+0xa0>
  
  switch (cmd)
 800bb04:	79bb      	ldrb	r3, [r7, #6]
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d833      	bhi.n	800bb72 <SD_ioctl+0x96>
 800bb0a:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <SD_ioctl+0x34>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb29 	.word	0x0800bb29
 800bb18:	0800bb41 	.word	0x0800bb41
 800bb1c:	0800bb5b 	.word	0x0800bb5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb26:	e027      	b.n	800bb78 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb28:	f107 030c 	add.w	r3, r7, #12
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fb4d 	bl	800a1cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb3e:	e01b      	b.n	800bb78 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb40:	f107 030c 	add.w	r3, r7, #12
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fb41 	bl	800a1cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb58:	e00e      	b.n	800bb78 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb5a:	f107 030c 	add.w	r3, r7, #12
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe fb34 	bl	800a1cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800bb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb70:	e002      	b.n	800bb78 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800bb72:	2304      	movs	r3, #4
 800bb74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800bb78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3730      	adds	r7, #48	; 0x30
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	2000015b 	.word	0x2000015b

0800bb88 <Button_IncTick>:
} ;

struct Button_Struct Button[BUTTONS];


void Button_IncTick(void){
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
	static uint8_t inc_div;
	if (inc_div) {inc_div--;}	//Входной делитель частоты опроса
 800bb8e:	4bb9      	ldr	r3, [pc, #740]	; (800be74 <Button_IncTick+0x2ec>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d006      	beq.n	800bba4 <Button_IncTick+0x1c>
 800bb96:	4bb7      	ldr	r3, [pc, #732]	; (800be74 <Button_IncTick+0x2ec>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	4bb5      	ldr	r3, [pc, #724]	; (800be74 <Button_IncTick+0x2ec>)
 800bba0:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 800bba2:	e186      	b.n	800beb2 <Button_IncTick+0x32a>
		inc_div = DIVIDER;		//на 10
 800bba4:	4bb3      	ldr	r3, [pc, #716]	; (800be74 <Button_IncTick+0x2ec>)
 800bba6:	220a      	movs	r2, #10
 800bba8:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800bbaa:	2300      	movs	r3, #0
 800bbac:	71fb      	strb	r3, [r7, #7]
 800bbae:	e17c      	b.n	800beaa <Button_IncTick+0x322>
			uint8_t tmp = HAL_GPIO_ReadPin(Button[i].Port, Button[i].Pin);
 800bbb0:	79fa      	ldrb	r2, [r7, #7]
 800bbb2:	49b1      	ldr	r1, [pc, #708]	; (800be78 <Button_IncTick+0x2f0>)
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	6818      	ldr	r0, [r3, #0]
 800bbc0:	79fa      	ldrb	r2, [r7, #7]
 800bbc2:	49ad      	ldr	r1, [pc, #692]	; (800be78 <Button_IncTick+0x2f0>)
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	440b      	add	r3, r1
 800bbce:	3304      	adds	r3, #4
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	f7f6 fefe 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	71bb      	strb	r3, [r7, #6]
			if (tmp == Button[i].PinState) {
 800bbdc:	79fa      	ldrb	r2, [r7, #7]
 800bbde:	49a6      	ldr	r1, [pc, #664]	; (800be78 <Button_IncTick+0x2f0>)
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	005b      	lsls	r3, r3, #1
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	440b      	add	r3, r1
 800bbea:	3306      	adds	r3, #6
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	79ba      	ldrb	r2, [r7, #6]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d173      	bne.n	800bcdc <Button_IncTick+0x154>
				if (Button[i].Timer) {
 800bbf4:	79fa      	ldrb	r2, [r7, #7]
 800bbf6:	49a0      	ldr	r1, [pc, #640]	; (800be78 <Button_IncTick+0x2f0>)
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	440b      	add	r3, r1
 800bc02:	3308      	adds	r3, #8
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f000 814c 	beq.w	800bea4 <Button_IncTick+0x31c>
					Button[i].Timer++;
 800bc0c:	79fa      	ldrb	r2, [r7, #7]
 800bc0e:	499a      	ldr	r1, [pc, #616]	; (800be78 <Button_IncTick+0x2f0>)
 800bc10:	4613      	mov	r3, r2
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	440b      	add	r3, r1
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	b298      	uxth	r0, r3
 800bc22:	4995      	ldr	r1, [pc, #596]	; (800be78 <Button_IncTick+0x2f0>)
 800bc24:	4613      	mov	r3, r2
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	3308      	adds	r3, #8
 800bc30:	4602      	mov	r2, r0
 800bc32:	801a      	strh	r2, [r3, #0]
					if(Button[i].Timer == SHORT_TIME){
 800bc34:	79fa      	ldrb	r2, [r7, #7]
 800bc36:	4990      	ldr	r1, [pc, #576]	; (800be78 <Button_IncTick+0x2f0>)
 800bc38:	4613      	mov	r3, r2
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	440b      	add	r3, r1
 800bc42:	3308      	adds	r3, #8
 800bc44:	881b      	ldrh	r3, [r3, #0]
 800bc46:	2b1e      	cmp	r3, #30
 800bc48:	d123      	bne.n	800bc92 <Button_IncTick+0x10a>
						if ((Button[i].Event == SHORT_CLC)||(Button[i].Event == DOUBLE_CLC)){
 800bc4a:	79fa      	ldrb	r2, [r7, #7]
 800bc4c:	498a      	ldr	r1, [pc, #552]	; (800be78 <Button_IncTick+0x2f0>)
 800bc4e:	4613      	mov	r3, r2
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	440b      	add	r3, r1
 800bc58:	330a      	adds	r3, #10
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d00a      	beq.n	800bc76 <Button_IncTick+0xee>
 800bc60:	79fa      	ldrb	r2, [r7, #7]
 800bc62:	4985      	ldr	r1, [pc, #532]	; (800be78 <Button_IncTick+0x2f0>)
 800bc64:	4613      	mov	r3, r2
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	330a      	adds	r3, #10
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d10d      	bne.n	800bc92 <Button_IncTick+0x10a>
							Event_Button(i, Button[i].Event);					// отправка по таймеру
 800bc76:	79fa      	ldrb	r2, [r7, #7]
 800bc78:	497f      	ldr	r1, [pc, #508]	; (800be78 <Button_IncTick+0x2f0>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	330a      	adds	r3, #10
 800bc86:	781a      	ldrb	r2, [r3, #0]
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 f917 	bl	800bec0 <Event_Button>
					if(Button[i].Timer == LONG_TIME){							// Тут мы если вместо кнопки переключатель
 800bc92:	79fa      	ldrb	r2, [r7, #7]
 800bc94:	4978      	ldr	r1, [pc, #480]	; (800be78 <Button_IncTick+0x2f0>)
 800bc96:	4613      	mov	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3308      	adds	r3, #8
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	2b50      	cmp	r3, #80	; 0x50
 800bca6:	f040 80fd 	bne.w	800bea4 <Button_IncTick+0x31c>
						Button[i].Event = SWITCH;
 800bcaa:	79fa      	ldrb	r2, [r7, #7]
 800bcac:	4972      	ldr	r1, [pc, #456]	; (800be78 <Button_IncTick+0x2f0>)
 800bcae:	4613      	mov	r3, r2
 800bcb0:	005b      	lsls	r3, r3, #1
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	330a      	adds	r3, #10
 800bcba:	2205      	movs	r2, #5
 800bcbc:	701a      	strb	r2, [r3, #0]
						Event_Button(i, Button[i].Event);
 800bcbe:	79fa      	ldrb	r2, [r7, #7]
 800bcc0:	496d      	ldr	r1, [pc, #436]	; (800be78 <Button_IncTick+0x2f0>)
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	005b      	lsls	r3, r3, #1
 800bcc6:	4413      	add	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	440b      	add	r3, r1
 800bccc:	330a      	adds	r3, #10
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	79fb      	ldrb	r3, [r7, #7]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 f8f3 	bl	800bec0 <Event_Button>
 800bcda:	e0e3      	b.n	800bea4 <Button_IncTick+0x31c>
				Button[i].PinState = tmp;
 800bcdc:	79fa      	ldrb	r2, [r7, #7]
 800bcde:	4966      	ldr	r1, [pc, #408]	; (800be78 <Button_IncTick+0x2f0>)
 800bce0:	4613      	mov	r3, r2
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	440b      	add	r3, r1
 800bcea:	3306      	adds	r3, #6
 800bcec:	79ba      	ldrb	r2, [r7, #6]
 800bcee:	701a      	strb	r2, [r3, #0]
				if (Button[i].Timer > NOISE_TIME){								// если таймер больше 10 мс.
 800bcf0:	79fa      	ldrb	r2, [r7, #7]
 800bcf2:	4961      	ldr	r1, [pc, #388]	; (800be78 <Button_IncTick+0x2f0>)
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3308      	adds	r3, #8
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	f240 8096 	bls.w	800be34 <Button_IncTick+0x2ac>
					if(Button[i].Timer < SHORT_TIME){							// если это меньше 300 мс
 800bd08:	79fa      	ldrb	r2, [r7, #7]
 800bd0a:	495b      	ldr	r1, [pc, #364]	; (800be78 <Button_IncTick+0x2f0>)
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	440b      	add	r3, r1
 800bd16:	3308      	adds	r3, #8
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	2b1d      	cmp	r3, #29
 800bd1c:	d850      	bhi.n	800bdc0 <Button_IncTick+0x238>
						Button[i].Timer = 1;
 800bd1e:	79fa      	ldrb	r2, [r7, #7]
 800bd20:	4955      	ldr	r1, [pc, #340]	; (800be78 <Button_IncTick+0x2f0>)
 800bd22:	4613      	mov	r3, r2
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	440b      	add	r3, r1
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	2201      	movs	r2, #1
 800bd30:	801a      	strh	r2, [r3, #0]
						if(Button[i].Event == PRESS){							// если в событиях было пусто
 800bd32:	79fa      	ldrb	r2, [r7, #7]
 800bd34:	4950      	ldr	r1, [pc, #320]	; (800be78 <Button_IncTick+0x2f0>)
 800bd36:	4613      	mov	r3, r2
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	440b      	add	r3, r1
 800bd40:	330a      	adds	r3, #10
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d10a      	bne.n	800bd5e <Button_IncTick+0x1d6>
							Button[i].Event = SHORT_CLC;						// То фиксируем первое нажатие. Но не отправляем, а запускаем таймер снова
 800bd48:	79fa      	ldrb	r2, [r7, #7]
 800bd4a:	494b      	ldr	r1, [pc, #300]	; (800be78 <Button_IncTick+0x2f0>)
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	330a      	adds	r3, #10
 800bd58:	2202      	movs	r2, #2
 800bd5a:	701a      	strb	r2, [r3, #0]
 800bd5c:	e0a2      	b.n	800bea4 <Button_IncTick+0x31c>
						else if(Button[i].Event == SHORT_CLC){					// если нажатие уже было
 800bd5e:	79fa      	ldrb	r2, [r7, #7]
 800bd60:	4945      	ldr	r1, [pc, #276]	; (800be78 <Button_IncTick+0x2f0>)
 800bd62:	4613      	mov	r3, r2
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	440b      	add	r3, r1
 800bd6c:	330a      	adds	r3, #10
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d10a      	bne.n	800bd8a <Button_IncTick+0x202>
							Button[i].Event = DOUBLE_CLC; 						// Фиксируем двойное нажатие
 800bd74:	79fa      	ldrb	r2, [r7, #7]
 800bd76:	4940      	ldr	r1, [pc, #256]	; (800be78 <Button_IncTick+0x2f0>)
 800bd78:	4613      	mov	r3, r2
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	330a      	adds	r3, #10
 800bd84:	2203      	movs	r2, #3
 800bd86:	701a      	strb	r2, [r3, #0]
 800bd88:	e08c      	b.n	800bea4 <Button_IncTick+0x31c>
						else if(Button[i].Event == DOUBLE_CLC){					//
 800bd8a:	79fa      	ldrb	r2, [r7, #7]
 800bd8c:	493a      	ldr	r1, [pc, #232]	; (800be78 <Button_IncTick+0x2f0>)
 800bd8e:	4613      	mov	r3, r2
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	440b      	add	r3, r1
 800bd98:	330a      	adds	r3, #10
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	f040 8081 	bne.w	800bea4 <Button_IncTick+0x31c>
							Event_Button(i, Button[i].Event); 					// Двойное отправляем сразу или по таймеру.
 800bda2:	79fa      	ldrb	r2, [r7, #7]
 800bda4:	4934      	ldr	r1, [pc, #208]	; (800be78 <Button_IncTick+0x2f0>)
 800bda6:	4613      	mov	r3, r2
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	440b      	add	r3, r1
 800bdb0:	330a      	adds	r3, #10
 800bdb2:	781a      	ldrb	r2, [r3, #0]
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 f881 	bl	800bec0 <Event_Button>
 800bdbe:	e071      	b.n	800bea4 <Button_IncTick+0x31c>
					else if(Button[i].Timer < LONG_TIME){						// Если мы были в нажатом положении больше 200 мс
 800bdc0:	79fa      	ldrb	r2, [r7, #7]
 800bdc2:	492d      	ldr	r1, [pc, #180]	; (800be78 <Button_IncTick+0x2f0>)
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	440b      	add	r3, r1
 800bdce:	3308      	adds	r3, #8
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	2b4f      	cmp	r3, #79	; 0x4f
 800bdd4:	d823      	bhi.n	800be1e <Button_IncTick+0x296>
						if(Button[i].Event == PRESS){							//
 800bdd6:	79fa      	ldrb	r2, [r7, #7]
 800bdd8:	4927      	ldr	r1, [pc, #156]	; (800be78 <Button_IncTick+0x2f0>)
 800bdda:	4613      	mov	r3, r2
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	440b      	add	r3, r1
 800bde4:	330a      	adds	r3, #10
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d15b      	bne.n	800bea4 <Button_IncTick+0x31c>
							Button[i].Event = LONG_CLC; 						// Фиксируем длинное нажатие
 800bdec:	79fa      	ldrb	r2, [r7, #7]
 800bdee:	4922      	ldr	r1, [pc, #136]	; (800be78 <Button_IncTick+0x2f0>)
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	440b      	add	r3, r1
 800bdfa:	330a      	adds	r3, #10
 800bdfc:	2204      	movs	r2, #4
 800bdfe:	701a      	strb	r2, [r3, #0]
							Event_Button(i, Button[i].Event);
 800be00:	79fa      	ldrb	r2, [r7, #7]
 800be02:	491d      	ldr	r1, [pc, #116]	; (800be78 <Button_IncTick+0x2f0>)
 800be04:	4613      	mov	r3, r2
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	4413      	add	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	440b      	add	r3, r1
 800be0e:	330a      	adds	r3, #10
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	79fb      	ldrb	r3, [r7, #7]
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f852 	bl	800bec0 <Event_Button>
 800be1c:	e042      	b.n	800bea4 <Button_IncTick+0x31c>
						Button[i].Timer = 0;
 800be1e:	79fa      	ldrb	r2, [r7, #7]
 800be20:	4915      	ldr	r1, [pc, #84]	; (800be78 <Button_IncTick+0x2f0>)
 800be22:	4613      	mov	r3, r2
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3308      	adds	r3, #8
 800be2e:	2200      	movs	r2, #0
 800be30:	801a      	strh	r2, [r3, #0]
 800be32:	e037      	b.n	800bea4 <Button_IncTick+0x31c>
					if (Button[i].Timer) {										// если таймер меньше 10 мс.
 800be34:	79fa      	ldrb	r2, [r7, #7]
 800be36:	4910      	ldr	r1, [pc, #64]	; (800be78 <Button_IncTick+0x2f0>)
 800be38:	4613      	mov	r3, r2
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	440b      	add	r3, r1
 800be42:	3308      	adds	r3, #8
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d018      	beq.n	800be7c <Button_IncTick+0x2f4>
						Button[i].Timer = 0;
 800be4a:	79fa      	ldrb	r2, [r7, #7]
 800be4c:	490a      	ldr	r1, [pc, #40]	; (800be78 <Button_IncTick+0x2f0>)
 800be4e:	4613      	mov	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	3308      	adds	r3, #8
 800be5a:	2200      	movs	r2, #0
 800be5c:	801a      	strh	r2, [r3, #0]
						Button[i].Event = NONE;
 800be5e:	79fa      	ldrb	r2, [r7, #7]
 800be60:	4905      	ldr	r1, [pc, #20]	; (800be78 <Button_IncTick+0x2f0>)
 800be62:	4613      	mov	r3, r2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	330a      	adds	r3, #10
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	e017      	b.n	800bea4 <Button_IncTick+0x31c>
 800be74:	200006e4 	.word	0x200006e4
 800be78:	2000069c 	.word	0x2000069c
						Button[i].Event = PRESS;
 800be7c:	79fa      	ldrb	r2, [r7, #7]
 800be7e:	490f      	ldr	r1, [pc, #60]	; (800bebc <Button_IncTick+0x334>)
 800be80:	4613      	mov	r3, r2
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	440b      	add	r3, r1
 800be8a:	330a      	adds	r3, #10
 800be8c:	2201      	movs	r2, #1
 800be8e:	701a      	strb	r2, [r3, #0]
						Button[i].Timer = 1;									// Первре срабатывание.
 800be90:	79fa      	ldrb	r2, [r7, #7]
 800be92:	490a      	ldr	r1, [pc, #40]	; (800bebc <Button_IncTick+0x334>)
 800be94:	4613      	mov	r3, r2
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	440b      	add	r3, r1
 800be9e:	3308      	adds	r3, #8
 800bea0:	2201      	movs	r2, #1
 800bea2:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	3301      	adds	r3, #1
 800bea8:	71fb      	strb	r3, [r7, #7]
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	2b05      	cmp	r3, #5
 800beae:	f67f ae7f 	bls.w	800bbb0 <Button_IncTick+0x28>
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	2000069c 	.word	0x2000069c

0800bec0 <Event_Button>:
void Event_Button (uint8_t Butt, Button_events_TypeDef Event){
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	460a      	mov	r2, r1
 800beca:	71fb      	strb	r3, [r7, #7]
 800becc:	4613      	mov	r3, r2
 800bece:	71bb      	strb	r3, [r7, #6]


	Buttons_Handler(Butt, Event);
 800bed0:	79ba      	ldrb	r2, [r7, #6]
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	4611      	mov	r1, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f4 fda6 	bl	8000a28 <Buttons_Handler>
//	uint8_t Send_msg[25] = "Button [x] type [x]\r\n";
//	Send_msg[8] = Butt + 0x30;
//	Send_msg[17] = Event + 0x30;
//	Debug_UART( Send_msg, DBG_BTN,  21);

	Button[Butt].Event = NONE;
 800bedc:	79fa      	ldrb	r2, [r7, #7]
 800bede:	490b      	ldr	r1, [pc, #44]	; (800bf0c <Event_Button+0x4c>)
 800bee0:	4613      	mov	r3, r2
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	330a      	adds	r3, #10
 800beec:	2200      	movs	r2, #0
 800beee:	701a      	strb	r2, [r3, #0]
	Button[Butt].Timer = 0;
 800bef0:	79fa      	ldrb	r2, [r7, #7]
 800bef2:	4906      	ldr	r1, [pc, #24]	; (800bf0c <Event_Button+0x4c>)
 800bef4:	4613      	mov	r3, r2
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	440b      	add	r3, r1
 800befe:	3308      	adds	r3, #8
 800bf00:	2200      	movs	r2, #0
 800bf02:	801a      	strh	r2, [r3, #0]

}
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	2000069c 	.word	0x2000069c

0800bf10 <Buttons_Init>:


};


void Buttons_Init (void){
 800bf10:	b580      	push	{r7, lr}
 800bf12:	af00      	add	r7, sp, #0

	Button[0].Port = In1_GPIO_Port;
 800bf14:	4b45      	ldr	r3, [pc, #276]	; (800c02c <Buttons_Init+0x11c>)
 800bf16:	4a46      	ldr	r2, [pc, #280]	; (800c030 <Buttons_Init+0x120>)
 800bf18:	601a      	str	r2, [r3, #0]
	Button[1].Port = In2_GPIO_Port;
 800bf1a:	4b44      	ldr	r3, [pc, #272]	; (800c02c <Buttons_Init+0x11c>)
 800bf1c:	4a44      	ldr	r2, [pc, #272]	; (800c030 <Buttons_Init+0x120>)
 800bf1e:	60da      	str	r2, [r3, #12]
	Button[2].Port = In3_GPIO_Port;
 800bf20:	4b42      	ldr	r3, [pc, #264]	; (800c02c <Buttons_Init+0x11c>)
 800bf22:	4a44      	ldr	r2, [pc, #272]	; (800c034 <Buttons_Init+0x124>)
 800bf24:	619a      	str	r2, [r3, #24]
	Button[3].Port = In4_GPIO_Port;
 800bf26:	4b41      	ldr	r3, [pc, #260]	; (800c02c <Buttons_Init+0x11c>)
 800bf28:	4a42      	ldr	r2, [pc, #264]	; (800c034 <Buttons_Init+0x124>)
 800bf2a:	625a      	str	r2, [r3, #36]	; 0x24
	Button[4].Port = In5_GPIO_Port;
 800bf2c:	4b3f      	ldr	r3, [pc, #252]	; (800c02c <Buttons_Init+0x11c>)
 800bf2e:	4a41      	ldr	r2, [pc, #260]	; (800c034 <Buttons_Init+0x124>)
 800bf30:	631a      	str	r2, [r3, #48]	; 0x30
	Button[5].Port = In6_GPIO_Port;
 800bf32:	4b3e      	ldr	r3, [pc, #248]	; (800c02c <Buttons_Init+0x11c>)
 800bf34:	4a3f      	ldr	r2, [pc, #252]	; (800c034 <Buttons_Init+0x124>)
 800bf36:	63da      	str	r2, [r3, #60]	; 0x3c

	Button[0].Pin = In1_Pin;
 800bf38:	4b3c      	ldr	r3, [pc, #240]	; (800c02c <Buttons_Init+0x11c>)
 800bf3a:	2240      	movs	r2, #64	; 0x40
 800bf3c:	809a      	strh	r2, [r3, #4]
	Button[1].Pin = In2_Pin;
 800bf3e:	4b3b      	ldr	r3, [pc, #236]	; (800c02c <Buttons_Init+0x11c>)
 800bf40:	2280      	movs	r2, #128	; 0x80
 800bf42:	821a      	strh	r2, [r3, #16]
	Button[2].Pin = In3_Pin;
 800bf44:	4b39      	ldr	r3, [pc, #228]	; (800c02c <Buttons_Init+0x11c>)
 800bf46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bf4a:	839a      	strh	r2, [r3, #28]
	Button[3].Pin = In4_Pin;
 800bf4c:	4b37      	ldr	r3, [pc, #220]	; (800c02c <Buttons_Init+0x11c>)
 800bf4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bf52:	851a      	strh	r2, [r3, #40]	; 0x28
	Button[4].Pin = In5_Pin;
 800bf54:	4b35      	ldr	r3, [pc, #212]	; (800c02c <Buttons_Init+0x11c>)
 800bf56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf5a:	869a      	strh	r2, [r3, #52]	; 0x34
	Button[5].Pin = In6_Pin;
 800bf5c:	4b33      	ldr	r3, [pc, #204]	; (800c02c <Buttons_Init+0x11c>)
 800bf5e:	2204      	movs	r2, #4
 800bf60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	Button[0].PinState = HAL_GPIO_ReadPin(Button[0].Port, Button[0].Pin);
 800bf64:	4b31      	ldr	r3, [pc, #196]	; (800c02c <Buttons_Init+0x11c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a30      	ldr	r2, [pc, #192]	; (800c02c <Buttons_Init+0x11c>)
 800bf6a:	8892      	ldrh	r2, [r2, #4]
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7f6 fd30 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bf74:	4603      	mov	r3, r0
 800bf76:	461a      	mov	r2, r3
 800bf78:	4b2c      	ldr	r3, [pc, #176]	; (800c02c <Buttons_Init+0x11c>)
 800bf7a:	719a      	strb	r2, [r3, #6]
	Button[1].PinState = HAL_GPIO_ReadPin(Button[1].Port, Button[1].Pin);
 800bf7c:	4b2b      	ldr	r3, [pc, #172]	; (800c02c <Buttons_Init+0x11c>)
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	4a2a      	ldr	r2, [pc, #168]	; (800c02c <Buttons_Init+0x11c>)
 800bf82:	8a12      	ldrh	r2, [r2, #16]
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f6 fd24 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4b26      	ldr	r3, [pc, #152]	; (800c02c <Buttons_Init+0x11c>)
 800bf92:	749a      	strb	r2, [r3, #18]
	Button[2].PinState = HAL_GPIO_ReadPin(Button[2].Port, Button[2].Pin);
 800bf94:	4b25      	ldr	r3, [pc, #148]	; (800c02c <Buttons_Init+0x11c>)
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	4a24      	ldr	r2, [pc, #144]	; (800c02c <Buttons_Init+0x11c>)
 800bf9a:	8b92      	ldrh	r2, [r2, #28]
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7f6 fd18 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	4b20      	ldr	r3, [pc, #128]	; (800c02c <Buttons_Init+0x11c>)
 800bfaa:	779a      	strb	r2, [r3, #30]
	Button[3].PinState = HAL_GPIO_ReadPin(Button[3].Port, Button[3].Pin);
 800bfac:	4b1f      	ldr	r3, [pc, #124]	; (800c02c <Buttons_Init+0x11c>)
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	4a1e      	ldr	r2, [pc, #120]	; (800c02c <Buttons_Init+0x11c>)
 800bfb2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7f6 fd0c 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	4b1a      	ldr	r3, [pc, #104]	; (800c02c <Buttons_Init+0x11c>)
 800bfc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Button[4].PinState = HAL_GPIO_ReadPin(Button[4].Port, Button[4].Pin);
 800bfc6:	4b19      	ldr	r3, [pc, #100]	; (800c02c <Buttons_Init+0x11c>)
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfca:	4a18      	ldr	r2, [pc, #96]	; (800c02c <Buttons_Init+0x11c>)
 800bfcc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800bfce:	4611      	mov	r1, r2
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7f6 fcff 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	461a      	mov	r2, r3
 800bfda:	4b14      	ldr	r3, [pc, #80]	; (800c02c <Buttons_Init+0x11c>)
 800bfdc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Button[5].PinState = HAL_GPIO_ReadPin(Button[5].Port, Button[5].Pin);
 800bfe0:	4b12      	ldr	r3, [pc, #72]	; (800c02c <Buttons_Init+0x11c>)
 800bfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe4:	4a11      	ldr	r2, [pc, #68]	; (800c02c <Buttons_Init+0x11c>)
 800bfe6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7f6 fcf1 	bl	80029d4 <HAL_GPIO_ReadPin>
 800bff2:	4603      	mov	r3, r0
 800bff4:	461a      	mov	r2, r3
 800bff6:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <Buttons_Init+0x11c>)
 800bff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	Button[0].Event = NONE;
 800bffc:	4b0b      	ldr	r3, [pc, #44]	; (800c02c <Buttons_Init+0x11c>)
 800bffe:	2200      	movs	r2, #0
 800c000:	729a      	strb	r2, [r3, #10]
	Button[1].Event = NONE;
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <Buttons_Init+0x11c>)
 800c004:	2200      	movs	r2, #0
 800c006:	759a      	strb	r2, [r3, #22]
	Button[2].Event = NONE;
 800c008:	4b08      	ldr	r3, [pc, #32]	; (800c02c <Buttons_Init+0x11c>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Button[3].Event = NONE;
 800c010:	4b06      	ldr	r3, [pc, #24]	; (800c02c <Buttons_Init+0x11c>)
 800c012:	2200      	movs	r2, #0
 800c014:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Button[4].Event = NONE;
 800c018:	4b04      	ldr	r3, [pc, #16]	; (800c02c <Buttons_Init+0x11c>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Button[5].Event = NONE;
 800c020:	4b02      	ldr	r3, [pc, #8]	; (800c02c <Buttons_Init+0x11c>)
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

//	Debug_UART( "Button init\r\n", DBG_OK,  13);

}
 800c028:	bf00      	nop
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	2000069c 	.word	0x2000069c
 800c030:	40020800 	.word	0x40020800
 800c034:	40020400 	.word	0x40020400

0800c038 <Debug_LED_IncTic>:
#include "debug_LED.h"

LED_ColorTypeDef Debug_LED1;
LED_ColorTypeDef Debug_LED2;

void Debug_LED_IncTic(void){
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0

	static uint8_t switch_timer = 11;
	switch_timer--;
 800c03c:	4b63      	ldr	r3, [pc, #396]	; (800c1cc <Debug_LED_IncTic+0x194>)
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	3b01      	subs	r3, #1
 800c042:	b2da      	uxtb	r2, r3
 800c044:	4b61      	ldr	r3, [pc, #388]	; (800c1cc <Debug_LED_IncTic+0x194>)
 800c046:	701a      	strb	r2, [r3, #0]
	if (switch_timer == 5) {
 800c048:	4b60      	ldr	r3, [pc, #384]	; (800c1cc <Debug_LED_IncTic+0x194>)
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	2b05      	cmp	r3, #5
 800c04e:	d15a      	bne.n	800c106 <Debug_LED_IncTic+0xce>
		switch (Debug_LED1) {
 800c050:	4b5f      	ldr	r3, [pc, #380]	; (800c1d0 <Debug_LED_IncTic+0x198>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b03      	cmp	r3, #3
 800c056:	d855      	bhi.n	800c104 <Debug_LED_IncTic+0xcc>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <Debug_LED_IncTic+0x28>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c0eb 	.word	0x0800c0eb
 800c064:	0800c095 	.word	0x0800c095
 800c068:	0800c0bb 	.word	0x0800c0bb
 800c06c:	0800c071 	.word	0x0800c071
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c070:	4b58      	ldr	r3, [pc, #352]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a57      	ldr	r2, [pc, #348]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c076:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c07a:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0; 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;}
 800c07c:	4b55      	ldr	r3, [pc, #340]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a54      	ldr	r2, [pc, #336]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c086:	6013      	str	r3, [r2, #0]
 800c088:	2201      	movs	r2, #1
 800c08a:	2110      	movs	r1, #16
 800c08c:	4851      	ldr	r0, [pc, #324]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c08e:	f7f6 fcb8 	bl	8002a02 <HAL_GPIO_WritePin>
 800c092:	e038      	b.n	800c106 <Debug_LED_IncTic+0xce>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800c094:	4b4f      	ldr	r3, [pc, #316]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a4e      	ldr	r2, [pc, #312]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c09a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c09e:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800c0a0:	4b4c      	ldr	r3, [pc, #304]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a4b      	ldr	r2, [pc, #300]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0b2:	4848      	ldr	r0, [pc, #288]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0b4:	f7f6 fca5 	bl	8002a02 <HAL_GPIO_WritePin>
 800c0b8:	e025      	b.n	800c106 <Debug_LED_IncTic+0xce>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800c0ba:	4b46      	ldr	r3, [pc, #280]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a45      	ldr	r2, [pc, #276]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	2110      	movs	r1, #16
 800c0ca:	4842      	ldr	r0, [pc, #264]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0cc:	f7f6 fc99 	bl	8002a02 <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800c0d0:	4b40      	ldr	r3, [pc, #256]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a3f      	ldr	r2, [pc, #252]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0da:	6013      	str	r3, [r2, #0]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0e2:	483c      	ldr	r0, [pc, #240]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0e4:	f7f6 fc8d 	bl	8002a02 <HAL_GPIO_WritePin>
 800c0e8:	e00d      	b.n	800c106 <Debug_LED_IncTic+0xce>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c0ea:	4b3a      	ldr	r3, [pc, #232]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a39      	ldr	r2, [pc, #228]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0f0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c0f4:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800c0f6:	4b37      	ldr	r3, [pc, #220]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a36      	ldr	r2, [pc, #216]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c0fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	e000      	b.n	800c106 <Debug_LED_IncTic+0xce>
			default:		{break;}
 800c104:	bf00      	nop
		}
	}
	if (switch_timer == 0) {
 800c106:	4b31      	ldr	r3, [pc, #196]	; (800c1cc <Debug_LED_IncTic+0x194>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d15c      	bne.n	800c1c8 <Debug_LED_IncTic+0x190>
		switch (Debug_LED2) {
 800c10e:	4b32      	ldr	r3, [pc, #200]	; (800c1d8 <Debug_LED_IncTic+0x1a0>)
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b03      	cmp	r3, #3
 800c114:	d854      	bhi.n	800c1c0 <Debug_LED_IncTic+0x188>
 800c116:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <Debug_LED_IncTic+0xe4>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c1a7 	.word	0x0800c1a7
 800c120:	0800c153 	.word	0x0800c153
 800c124:	0800c177 	.word	0x0800c177
 800c128:	0800c12d 	.word	0x0800c12d
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800c12c:	4b29      	ldr	r3, [pc, #164]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a28      	ldr	r2, [pc, #160]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c136:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0; 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800c138:	4b26      	ldr	r3, [pc, #152]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a25      	ldr	r2, [pc, #148]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c13e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c142:	6013      	str	r3, [r2, #0]
 800c144:	2200      	movs	r2, #0
 800c146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c14a:	4822      	ldr	r0, [pc, #136]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c14c:	f7f6 fc59 	bl	8002a02 <HAL_GPIO_WritePin>
 800c150:	e037      	b.n	800c1c2 <Debug_LED_IncTic+0x18a>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c152:	4b20      	ldr	r3, [pc, #128]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a1f      	ldr	r2, [pc, #124]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c158:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c15c:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;}
 800c15e:	4b1d      	ldr	r3, [pc, #116]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a1c      	ldr	r2, [pc, #112]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c168:	6013      	str	r3, [r2, #0]
 800c16a:	2200      	movs	r2, #0
 800c16c:	2110      	movs	r1, #16
 800c16e:	4819      	ldr	r0, [pc, #100]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c170:	f7f6 fc47 	bl	8002a02 <HAL_GPIO_WritePin>
 800c174:	e025      	b.n	800c1c2 <Debug_LED_IncTic+0x18a>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800c176:	4b17      	ldr	r3, [pc, #92]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a16      	ldr	r2, [pc, #88]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c17c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	2110      	movs	r1, #16
 800c186:	4813      	ldr	r0, [pc, #76]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c188:	f7f6 fc3b 	bl	8002a02 <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800c18c:	4b11      	ldr	r3, [pc, #68]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a10      	ldr	r2, [pc, #64]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	2200      	movs	r2, #0
 800c19a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c19e:	480d      	ldr	r0, [pc, #52]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c1a0:	f7f6 fc2f 	bl	8002a02 <HAL_GPIO_WritePin>
 800c1a4:	e00d      	b.n	800c1c2 <Debug_LED_IncTic+0x18a>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c1a6:	4b0b      	ldr	r3, [pc, #44]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a0a      	ldr	r2, [pc, #40]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c1ac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c1b0:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800c1b2:	4b08      	ldr	r3, [pc, #32]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a07      	ldr	r2, [pc, #28]	; (800c1d4 <Debug_LED_IncTic+0x19c>)
 800c1b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	e000      	b.n	800c1c2 <Debug_LED_IncTic+0x18a>
			default:		{break;}
 800c1c0:	bf00      	nop
		}
		switch_timer = 11;
 800c1c2:	4b02      	ldr	r3, [pc, #8]	; (800c1cc <Debug_LED_IncTic+0x194>)
 800c1c4:	220b      	movs	r2, #11
 800c1c6:	701a      	strb	r2, [r3, #0]
	}

}
 800c1c8:	bf00      	nop
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	2000015c 	.word	0x2000015c
 800c1d0:	200006e5 	.word	0x200006e5
 800c1d4:	40020800 	.word	0x40020800
 800c1d8:	200006e6 	.word	0x200006e6

0800c1dc <Debug_LED_toggle>:
void Debug_LED_toggle(uint8_t led){
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	71fb      	strb	r3, [r7, #7]
	if (led == 1){
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d10f      	bne.n	800c20c <Debug_LED_toggle+0x30>
		static LED_ColorTypeDef old_Debug_LED1;
		if (Debug_LED1) {
 800c1ec:	4b13      	ldr	r3, [pc, #76]	; (800c23c <Debug_LED_toggle+0x60>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d007      	beq.n	800c204 <Debug_LED_toggle+0x28>
			old_Debug_LED1 = Debug_LED1;
 800c1f4:	4b11      	ldr	r3, [pc, #68]	; (800c23c <Debug_LED_toggle+0x60>)
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	4b11      	ldr	r3, [pc, #68]	; (800c240 <Debug_LED_toggle+0x64>)
 800c1fa:	701a      	strb	r2, [r3, #0]
			Debug_LED1 = BLACK;
 800c1fc:	4b0f      	ldr	r3, [pc, #60]	; (800c23c <Debug_LED_toggle+0x60>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	701a      	strb	r2, [r3, #0]
 800c202:	e003      	b.n	800c20c <Debug_LED_toggle+0x30>
		}
		else {
			Debug_LED1 = old_Debug_LED1;
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <Debug_LED_toggle+0x64>)
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	4b0c      	ldr	r3, [pc, #48]	; (800c23c <Debug_LED_toggle+0x60>)
 800c20a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (led == 2){
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d10f      	bne.n	800c232 <Debug_LED_toggle+0x56>
		static LED_ColorTypeDef old_Debug_LED2;
		if (Debug_LED2) {
 800c212:	4b0c      	ldr	r3, [pc, #48]	; (800c244 <Debug_LED_toggle+0x68>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <Debug_LED_toggle+0x4e>
			old_Debug_LED2 = Debug_LED2;
 800c21a:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <Debug_LED_toggle+0x68>)
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	4b0a      	ldr	r3, [pc, #40]	; (800c248 <Debug_LED_toggle+0x6c>)
 800c220:	701a      	strb	r2, [r3, #0]
			Debug_LED2 = BLACK;
 800c222:	4b08      	ldr	r3, [pc, #32]	; (800c244 <Debug_LED_toggle+0x68>)
 800c224:	2200      	movs	r2, #0
 800c226:	701a      	strb	r2, [r3, #0]
		else {
			Debug_LED2 = old_Debug_LED2;
		}
	}

}
 800c228:	e003      	b.n	800c232 <Debug_LED_toggle+0x56>
			Debug_LED2 = old_Debug_LED2;
 800c22a:	4b07      	ldr	r3, [pc, #28]	; (800c248 <Debug_LED_toggle+0x6c>)
 800c22c:	781a      	ldrb	r2, [r3, #0]
 800c22e:	4b05      	ldr	r3, [pc, #20]	; (800c244 <Debug_LED_toggle+0x68>)
 800c230:	701a      	strb	r2, [r3, #0]
}
 800c232:	bf00      	nop
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	bc80      	pop	{r7}
 800c23a:	4770      	bx	lr
 800c23c:	200006e5 	.word	0x200006e5
 800c240:	200006e7 	.word	0x200006e7
 800c244:	200006e6 	.word	0x200006e6
 800c248:	200006e8 	.word	0x200006e8

0800c24c <Debug_LED_Init>:



void Debug_LED_Init (void){
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0

	Debug_LED1 = BLACK;
 800c250:	4b04      	ldr	r3, [pc, #16]	; (800c264 <Debug_LED_Init+0x18>)
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
	Debug_LED2 = BLACK;
 800c256:	4b04      	ldr	r3, [pc, #16]	; (800c268 <Debug_LED_Init+0x1c>)
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
//	Debug_UART( "Debug_LED init\r\n", DBG_OK, 16);

}
 800c25c:	bf00      	nop
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr
 800c264:	200006e5 	.word	0x200006e5
 800c268:	200006e6 	.word	0x200006e6

0800c26c <MM_Init>:
//{
//	__RBIT(data);
//        return data;
//};

void MM_Init(void){
 800c26c:	b580      	push	{r7, lr}
 800c26e:	af00      	add	r7, sp, #0

	Spi_LED_Init();
 800c270:	f000 f896 	bl	800c3a0 <Spi_LED_Init>
	Buttons_Init();
 800c274:	f7ff fe4c 	bl	800bf10 <Buttons_Init>
	Debug_LED_Init();
 800c278:	f7ff ffe8 	bl	800c24c <Debug_LED_Init>
	Out_Init();
 800c27c:	f000 f820 	bl	800c2c0 <Out_Init>

//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\033[36mParametrica.ru\033[0m\r\n", 27, 5);
//	init_OK = 1;
}
 800c280:	bf00      	nop
 800c282:	bd80      	pop	{r7, pc}

0800c284 <HAL_IncTick>:


void HAL_IncTick(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <HAL_IncTick+0x30>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	461a      	mov	r2, r3
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <HAL_IncTick+0x34>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4413      	add	r3, r2
 800c294:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <HAL_IncTick+0x34>)
 800c296:	6013      	str	r3, [r2, #0]
  if (init_OK){
 800c298:	4b08      	ldr	r3, [pc, #32]	; (800c2bc <HAL_IncTick+0x38>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d007      	beq.n	800c2b0 <HAL_IncTick+0x2c>
	  Main_IncTic();
 800c2a0:	f7f4 fbbc 	bl	8000a1c <Main_IncTic>
	  Debug_LED_IncTic();
 800c2a4:	f7ff fec8 	bl	800c038 <Debug_LED_IncTic>
	  Button_IncTick();
 800c2a8:	f7ff fc6e 	bl	800bb88 <Button_IncTick>
	  Spi_LED_IncTick();
 800c2ac:	f000 f82c 	bl	800c308 <Spi_LED_IncTick>

  }
}
 800c2b0:	bf00      	nop
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20000048 	.word	0x20000048
 800c2b8:	20000680 	.word	0x20000680
 800c2bc:	200006e9 	.word	0x200006e9

0800c2c0 <Out_Init>:
	if (Channel == P_OUT_1234){TIM4->PSC = volume;}
	if (Channel == P_OUT_567){TIM3->PSC = volume;}


}
void Out_Init(void){
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim4);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	480e      	ldr	r0, [pc, #56]	; (800c300 <Out_Init+0x40>)
 800c2c8:	f7fa faf0 	bl	80068ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800c2cc:	2104      	movs	r1, #4
 800c2ce:	480c      	ldr	r0, [pc, #48]	; (800c300 <Out_Init+0x40>)
 800c2d0:	f7fa faec 	bl	80068ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800c2d4:	2108      	movs	r1, #8
 800c2d6:	480a      	ldr	r0, [pc, #40]	; (800c300 <Out_Init+0x40>)
 800c2d8:	f7fa fae8 	bl	80068ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800c2dc:	210c      	movs	r1, #12
 800c2de:	4808      	ldr	r0, [pc, #32]	; (800c300 <Out_Init+0x40>)
 800c2e0:	f7fa fae4 	bl	80068ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4807      	ldr	r0, [pc, #28]	; (800c304 <Out_Init+0x44>)
 800c2e8:	f7fa fae0 	bl	80068ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800c2ec:	2108      	movs	r1, #8
 800c2ee:	4805      	ldr	r0, [pc, #20]	; (800c304 <Out_Init+0x44>)
 800c2f0:	f7fa fadc 	bl	80068ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800c2f4:	210c      	movs	r1, #12
 800c2f6:	4803      	ldr	r0, [pc, #12]	; (800c304 <Out_Init+0x44>)
 800c2f8:	f7fa fad8 	bl	80068ac <HAL_TIM_PWM_Start>

//	Debug_UART((uint8_t *) "Out init\r\n", DBG_OK, 10);

}
 800c2fc:	bf00      	nop
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	200005b0 	.word	0x200005b0
 800c304:	20000568 	.word	0x20000568

0800c308 <Spi_LED_IncTick>:


//=========================================================================================================

void Spi_LED_IncTick(void)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0

//-------------------------------------------------------------
	Frame_Delay--;
 800c30c:	4b1e      	ldr	r3, [pc, #120]	; (800c388 <Spi_LED_IncTick+0x80>)
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	3b01      	subs	r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	4b1c      	ldr	r3, [pc, #112]	; (800c388 <Spi_LED_IncTick+0x80>)
 800c316:	801a      	strh	r2, [r3, #0]

	if (Frame_Delay == 2) {
 800c318:	4b1b      	ldr	r3, [pc, #108]	; (800c388 <Spi_LED_IncTick+0x80>)
 800c31a:	881b      	ldrh	r3, [r3, #0]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d112      	bne.n	800c346 <Spi_LED_IncTick+0x3e>
		if (Spi_LED_Cmplt_Frame_Flag & 0x01){
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <Spi_LED_IncTick+0x84>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00c      	beq.n	800c346 <Spi_LED_IncTick+0x3e>
			//HAL_SPI_Transmit(&hspi1, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi1, &OutputArray[0][0].Green , LED_MAX * 3);
 800c32c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c330:	4917      	ldr	r1, [pc, #92]	; (800c390 <Spi_LED_IncTick+0x88>)
 800c332:	4818      	ldr	r0, [pc, #96]	; (800c394 <Spi_LED_IncTick+0x8c>)
 800c334:	f7fa f87a 	bl	800642c <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x01;
 800c338:	4b14      	ldr	r3, [pc, #80]	; (800c38c <Spi_LED_IncTick+0x84>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	f023 0301 	bic.w	r3, r3, #1
 800c340:	b2da      	uxtb	r2, r3
 800c342:	4b12      	ldr	r3, [pc, #72]	; (800c38c <Spi_LED_IncTick+0x84>)
 800c344:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 1) {
 800c346:	4b10      	ldr	r3, [pc, #64]	; (800c388 <Spi_LED_IncTick+0x80>)
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d112      	bne.n	800c374 <Spi_LED_IncTick+0x6c>
		if (Spi_LED_Cmplt_Frame_Flag & 0x02){
 800c34e:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <Spi_LED_IncTick+0x84>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	f003 0302 	and.w	r3, r3, #2
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00c      	beq.n	800c374 <Spi_LED_IncTick+0x6c>
			//HAL_SPI_Transmit(&hspi2, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi2, &OutputArray[1][0].Green , LED_MAX * 3);
 800c35a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c35e:	490e      	ldr	r1, [pc, #56]	; (800c398 <Spi_LED_IncTick+0x90>)
 800c360:	480e      	ldr	r0, [pc, #56]	; (800c39c <Spi_LED_IncTick+0x94>)
 800c362:	f7fa f863 	bl	800642c <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x02;
 800c366:	4b09      	ldr	r3, [pc, #36]	; (800c38c <Spi_LED_IncTick+0x84>)
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	f023 0302 	bic.w	r3, r3, #2
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b06      	ldr	r3, [pc, #24]	; (800c38c <Spi_LED_IncTick+0x84>)
 800c372:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 0) {
 800c374:	4b04      	ldr	r3, [pc, #16]	; (800c388 <Spi_LED_IncTick+0x80>)
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <Spi_LED_IncTick+0x7a>
		Frame_Delay = 1000 / SPI_FREQ;
 800c37c:	4b02      	ldr	r3, [pc, #8]	; (800c388 <Spi_LED_IncTick+0x80>)
 800c37e:	2232      	movs	r2, #50	; 0x32
 800c380:	801a      	strh	r2, [r3, #0]
	}
}
 800c382:	bf00      	nop
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000015e 	.word	0x2000015e
 800c38c:	200006ea 	.word	0x200006ea
 800c390:	200006ec 	.word	0x200006ec
 800c394:	2000039c 	.word	0x2000039c
 800c398:	200012a4 	.word	0x200012a4
 800c39c:	200003f4 	.word	0x200003f4

0800c3a0 <Spi_LED_Init>:
//=========================================================================================================
void Spi_LED_Init(void){
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
	Spi_LED_Cmplt_Frame_Flag |= 0x01 | 0x02;
 800c3a6:	4b2f      	ldr	r3, [pc, #188]	; (800c464 <Spi_LED_Init+0xc4>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	f043 0303 	orr.w	r3, r3, #3
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	4b2c      	ldr	r3, [pc, #176]	; (800c464 <Spi_LED_Init+0xc4>)
 800c3b2:	701a      	strb	r2, [r3, #0]

	extern DMA_HandleTypeDef hdma_spi1_tx;
	extern DMA_HandleTypeDef hdma_spi2_tx;

	HAL_DMA_Init(&hdma_spi1_tx);
 800c3b4:	482c      	ldr	r0, [pc, #176]	; (800c468 <Spi_LED_Init+0xc8>)
 800c3b6:	f7f5 fc15 	bl	8001be4 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi2_tx);
 800c3ba:	482c      	ldr	r0, [pc, #176]	; (800c46c <Spi_LED_Init+0xcc>)
 800c3bc:	f7f5 fc12 	bl	8001be4 <HAL_DMA_Init>

	for (uint16_t i = 0; i < LED_MAX; i++){
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	80fb      	strh	r3, [r7, #6]
 800c3c4:	e01c      	b.n	800c400 <Spi_LED_Init+0x60>
		OutputArray[0][i].Green = g;
 800c3c6:	88fa      	ldrh	r2, [r7, #6]
 800c3c8:	4929      	ldr	r1, [pc, #164]	; (800c470 <Spi_LED_Init+0xd0>)
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	4413      	add	r3, r2
 800c3d0:	440b      	add	r3, r1
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Red 	= r;
 800c3d6:	88fa      	ldrh	r2, [r7, #6]
 800c3d8:	4925      	ldr	r1, [pc, #148]	; (800c470 <Spi_LED_Init+0xd0>)
 800c3da:	4613      	mov	r3, r2
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	440b      	add	r3, r1
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Blue 	= b;
 800c3e8:	88fa      	ldrh	r2, [r7, #6]
 800c3ea:	4921      	ldr	r1, [pc, #132]	; (800c470 <Spi_LED_Init+0xd0>)
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	4413      	add	r3, r2
 800c3f2:	440b      	add	r3, r1
 800c3f4:	3302      	adds	r3, #2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800c3fa:	88fb      	ldrh	r3, [r7, #6]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	80fb      	strh	r3, [r7, #6]
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c406:	d3de      	bcc.n	800c3c6 <Spi_LED_Init+0x26>
	}

	for (uint16_t i = 0; i < LED_MAX; i++){
 800c408:	2300      	movs	r3, #0
 800c40a:	80bb      	strh	r3, [r7, #4]
 800c40c:	e020      	b.n	800c450 <Spi_LED_Init+0xb0>
		OutputArray[1][i].Green =	g;
 800c40e:	88ba      	ldrh	r2, [r7, #4]
 800c410:	4917      	ldr	r1, [pc, #92]	; (800c470 <Spi_LED_Init+0xd0>)
 800c412:	4613      	mov	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4413      	add	r3, r2
 800c418:	440b      	add	r3, r1
 800c41a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800c41e:	2200      	movs	r2, #0
 800c420:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Red 	=	r;
 800c422:	88ba      	ldrh	r2, [r7, #4]
 800c424:	4912      	ldr	r1, [pc, #72]	; (800c470 <Spi_LED_Init+0xd0>)
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	440b      	add	r3, r1
 800c42e:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Blue 	=	b;
 800c436:	88ba      	ldrh	r2, [r7, #4]
 800c438:	490d      	ldr	r1, [pc, #52]	; (800c470 <Spi_LED_Init+0xd0>)
 800c43a:	4613      	mov	r3, r2
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	4413      	add	r3, r2
 800c440:	440b      	add	r3, r1
 800c442:	f603 33ba 	addw	r3, r3, #3002	; 0xbba
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800c44a:	88bb      	ldrh	r3, [r7, #4]
 800c44c:	3301      	adds	r3, #1
 800c44e:	80bb      	strh	r3, [r7, #4]
 800c450:	88bb      	ldrh	r3, [r7, #4]
 800c452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c456:	d3da      	bcc.n	800c40e <Spi_LED_Init+0x6e>


//	Debug_UART((uint8_t *) "SPI_LED init\r\n", DBG_OK, 14);


}
 800c458:	bf00      	nop
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	200006ea 	.word	0x200006ea
 800c468:	200004a4 	.word	0x200004a4
 800c46c:	20000504 	.word	0x20000504
 800c470:	200006ec 	.word	0x200006ec

0800c474 <HAL_SPI_TxCpltCallback>:
//=========================================================================================================
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1){Spi_LED_Cmplt_Frame_Flag |= 0x01;}
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a0d      	ldr	r2, [pc, #52]	; (800c4b8 <HAL_SPI_TxCpltCallback+0x44>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d106      	bne.n	800c494 <HAL_SPI_TxCpltCallback+0x20>
 800c486:	4b0d      	ldr	r3, [pc, #52]	; (800c4bc <HAL_SPI_TxCpltCallback+0x48>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <HAL_SPI_TxCpltCallback+0x48>)
 800c492:	701a      	strb	r2, [r3, #0]
	if (hspi->Instance == SPI2){Spi_LED_Cmplt_Frame_Flag |= 0x02;}
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a09      	ldr	r2, [pc, #36]	; (800c4c0 <HAL_SPI_TxCpltCallback+0x4c>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d106      	bne.n	800c4ac <HAL_SPI_TxCpltCallback+0x38>
 800c49e:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <HAL_SPI_TxCpltCallback+0x48>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	f043 0302 	orr.w	r3, r3, #2
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <HAL_SPI_TxCpltCallback+0x48>)
 800c4aa:	701a      	strb	r2, [r3, #0]
//	itoa(tmp, string + 2, 16);
//	string[14] = Spi_LED_Cmplt_Frame_Flag + 0x30;
//	if (string[15] == *" ") {string[15] = *".";} else {string[15] = *" ";}
//	HAL_UART_Transmit(&huart2, string, 16, 2);

}
 800c4ac:	bf00      	nop
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bc80      	pop	{r7}
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	40013000 	.word	0x40013000
 800c4bc:	200006ea 	.word	0x200006ea
 800c4c0:	40003800 	.word	0x40003800

0800c4c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4912      	ldr	r1, [pc, #72]	; (800c514 <MX_USB_DEVICE_Init+0x50>)
 800c4cc:	4812      	ldr	r0, [pc, #72]	; (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c4ce:	f7fe f93f 	bl	800a750 <USBD_Init>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4d8:	f7f4 fae6 	bl	8000aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4dc:	490f      	ldr	r1, [pc, #60]	; (800c51c <MX_USB_DEVICE_Init+0x58>)
 800c4de:	480e      	ldr	r0, [pc, #56]	; (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c4e0:	f7fe f961 	bl	800a7a6 <USBD_RegisterClass>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4ea:	f7f4 fadd 	bl	8000aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4ee:	490c      	ldr	r1, [pc, #48]	; (800c520 <MX_USB_DEVICE_Init+0x5c>)
 800c4f0:	4809      	ldr	r0, [pc, #36]	; (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c4f2:	f7fe f8c1 	bl	800a678 <USBD_CDC_RegisterInterface>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4fc:	f7f4 fad4 	bl	8000aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c500:	4805      	ldr	r0, [pc, #20]	; (800c518 <MX_USB_DEVICE_Init+0x54>)
 800c502:	f7fe f969 	bl	800a7d8 <USBD_Start>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c50c:	f7f4 facc 	bl	8000aa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c510:	bf00      	nop
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000170 	.word	0x20000170
 800c518:	20001e5c 	.word	0x20001e5c
 800c51c:	20000058 	.word	0x20000058
 800c520:	20000160 	.word	0x20000160

0800c524 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c528:	2200      	movs	r2, #0
 800c52a:	4905      	ldr	r1, [pc, #20]	; (800c540 <CDC_Init_FS+0x1c>)
 800c52c:	4805      	ldr	r0, [pc, #20]	; (800c544 <CDC_Init_FS+0x20>)
 800c52e:	f7fe f8b9 	bl	800a6a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c532:	4905      	ldr	r1, [pc, #20]	; (800c548 <CDC_Init_FS+0x24>)
 800c534:	4803      	ldr	r0, [pc, #12]	; (800c544 <CDC_Init_FS+0x20>)
 800c536:	f7fe f8ce 	bl	800a6d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c53a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20002920 	.word	0x20002920
 800c544:	20001e5c 	.word	0x20001e5c
 800c548:	20002120 	.word	0x20002120

0800c54c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c550:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c552:	4618      	mov	r0, r3
 800c554:	46bd      	mov	sp, r7
 800c556:	bc80      	pop	{r7}
 800c558:	4770      	bx	lr
	...

0800c55c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	6039      	str	r1, [r7, #0]
 800c566:	71fb      	strb	r3, [r7, #7]
 800c568:	4613      	mov	r3, r2
 800c56a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b23      	cmp	r3, #35	; 0x23
 800c570:	d84a      	bhi.n	800c608 <CDC_Control_FS+0xac>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <CDC_Control_FS+0x1c>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c609 	.word	0x0800c609
 800c57c:	0800c609 	.word	0x0800c609
 800c580:	0800c609 	.word	0x0800c609
 800c584:	0800c609 	.word	0x0800c609
 800c588:	0800c609 	.word	0x0800c609
 800c58c:	0800c609 	.word	0x0800c609
 800c590:	0800c609 	.word	0x0800c609
 800c594:	0800c609 	.word	0x0800c609
 800c598:	0800c609 	.word	0x0800c609
 800c59c:	0800c609 	.word	0x0800c609
 800c5a0:	0800c609 	.word	0x0800c609
 800c5a4:	0800c609 	.word	0x0800c609
 800c5a8:	0800c609 	.word	0x0800c609
 800c5ac:	0800c609 	.word	0x0800c609
 800c5b0:	0800c609 	.word	0x0800c609
 800c5b4:	0800c609 	.word	0x0800c609
 800c5b8:	0800c609 	.word	0x0800c609
 800c5bc:	0800c609 	.word	0x0800c609
 800c5c0:	0800c609 	.word	0x0800c609
 800c5c4:	0800c609 	.word	0x0800c609
 800c5c8:	0800c609 	.word	0x0800c609
 800c5cc:	0800c609 	.word	0x0800c609
 800c5d0:	0800c609 	.word	0x0800c609
 800c5d4:	0800c609 	.word	0x0800c609
 800c5d8:	0800c609 	.word	0x0800c609
 800c5dc:	0800c609 	.word	0x0800c609
 800c5e0:	0800c609 	.word	0x0800c609
 800c5e4:	0800c609 	.word	0x0800c609
 800c5e8:	0800c609 	.word	0x0800c609
 800c5ec:	0800c609 	.word	0x0800c609
 800c5f0:	0800c609 	.word	0x0800c609
 800c5f4:	0800c609 	.word	0x0800c609
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c609 	.word	0x0800c609
 800c600:	0800c609 	.word	0x0800c609
 800c604:	0800c609 	.word	0x0800c609
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c608:	bf00      	nop
  }

  return (USBD_OK);
 800c60a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	bc80      	pop	{r7}
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop

0800c618 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	4805      	ldr	r0, [pc, #20]	; (800c63c <CDC_Receive_FS+0x24>)
 800c626:	f7fe f856 	bl	800a6d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c62a:	4804      	ldr	r0, [pc, #16]	; (800c63c <CDC_Receive_FS+0x24>)
 800c62c:	f7fe f866 	bl	800a6fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c630:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c632:	4618      	mov	r0, r3
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20001e5c 	.word	0x20001e5c

0800c640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	6039      	str	r1, [r7, #0]
 800c64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2212      	movs	r2, #18
 800c650:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c652:	4b03      	ldr	r3, [pc, #12]	; (800c660 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c654:	4618      	mov	r0, r3
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	bc80      	pop	{r7}
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	2000018c 	.word	0x2000018c

0800c664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	6039      	str	r1, [r7, #0]
 800c66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2204      	movs	r2, #4
 800c674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c676:	4b03      	ldr	r3, [pc, #12]	; (800c684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c678:	4618      	mov	r0, r3
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bc80      	pop	{r7}
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	200001a0 	.word	0x200001a0

0800c688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	6039      	str	r1, [r7, #0]
 800c692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d105      	bne.n	800c6a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	4907      	ldr	r1, [pc, #28]	; (800c6bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c69e:	4808      	ldr	r0, [pc, #32]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6a0:	f7ff f84c 	bl	800b73c <USBD_GetString>
 800c6a4:	e004      	b.n	800c6b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	4904      	ldr	r1, [pc, #16]	; (800c6bc <USBD_FS_ProductStrDescriptor+0x34>)
 800c6aa:	4805      	ldr	r0, [pc, #20]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6ac:	f7ff f846 	bl	800b73c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b0:	4b02      	ldr	r3, [pc, #8]	; (800c6bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20003120 	.word	0x20003120
 800c6c0:	0800d128 	.word	0x0800d128

0800c6c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	6039      	str	r1, [r7, #0]
 800c6ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	4904      	ldr	r1, [pc, #16]	; (800c6e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c6d4:	4804      	ldr	r0, [pc, #16]	; (800c6e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6d6:	f7ff f831 	bl	800b73c <USBD_GetString>
  return USBD_StrDesc;
 800c6da:	4b02      	ldr	r3, [pc, #8]	; (800c6e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	20003120 	.word	0x20003120
 800c6e8:	0800d13c 	.word	0x0800d13c

0800c6ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	6039      	str	r1, [r7, #0]
 800c6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	221a      	movs	r2, #26
 800c6fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6fe:	f000 f843 	bl	800c788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c702:	4b02      	ldr	r3, [pc, #8]	; (800c70c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c704:	4618      	mov	r0, r3
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	200001a4 	.word	0x200001a4

0800c710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	6039      	str	r1, [r7, #0]
 800c71a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d105      	bne.n	800c72e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	4907      	ldr	r1, [pc, #28]	; (800c744 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c726:	4808      	ldr	r0, [pc, #32]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c728:	f7ff f808 	bl	800b73c <USBD_GetString>
 800c72c:	e004      	b.n	800c738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	4904      	ldr	r1, [pc, #16]	; (800c744 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c732:	4805      	ldr	r0, [pc, #20]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c734:	f7ff f802 	bl	800b73c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c738:	4b02      	ldr	r3, [pc, #8]	; (800c744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20003120 	.word	0x20003120
 800c748:	0800d150 	.word	0x0800d150

0800c74c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	6039      	str	r1, [r7, #0]
 800c756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c758:	79fb      	ldrb	r3, [r7, #7]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d105      	bne.n	800c76a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	4907      	ldr	r1, [pc, #28]	; (800c780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c762:	4808      	ldr	r0, [pc, #32]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c764:	f7fe ffea 	bl	800b73c <USBD_GetString>
 800c768:	e004      	b.n	800c774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	4904      	ldr	r1, [pc, #16]	; (800c780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c76e:	4805      	ldr	r0, [pc, #20]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c770:	f7fe ffe4 	bl	800b73c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c774:	4b02      	ldr	r3, [pc, #8]	; (800c780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c776:	4618      	mov	r0, r3
 800c778:	3708      	adds	r7, #8
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	20003120 	.word	0x20003120
 800c784:	0800d15c 	.word	0x0800d15c

0800c788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c78e:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <Get_SerialNum+0x44>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c794:	4b0e      	ldr	r3, [pc, #56]	; (800c7d0 <Get_SerialNum+0x48>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c79a:	4b0e      	ldr	r3, [pc, #56]	; (800c7d4 <Get_SerialNum+0x4c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d009      	beq.n	800c7c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7ae:	2208      	movs	r2, #8
 800c7b0:	4909      	ldr	r1, [pc, #36]	; (800c7d8 <Get_SerialNum+0x50>)
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f000 f814 	bl	800c7e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	4908      	ldr	r1, [pc, #32]	; (800c7dc <Get_SerialNum+0x54>)
 800c7bc:	68b8      	ldr	r0, [r7, #8]
 800c7be:	f000 f80f 	bl	800c7e0 <IntToUnicode>
  }
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	1fff7a10 	.word	0x1fff7a10
 800c7d0:	1fff7a14 	.word	0x1fff7a14
 800c7d4:	1fff7a18 	.word	0x1fff7a18
 800c7d8:	200001a6 	.word	0x200001a6
 800c7dc:	200001b6 	.word	0x200001b6

0800c7e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	75fb      	strb	r3, [r7, #23]
 800c7f6:	e027      	b.n	800c848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	0f1b      	lsrs	r3, r3, #28
 800c7fc:	2b09      	cmp	r3, #9
 800c7fe:	d80b      	bhi.n	800c818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	0f1b      	lsrs	r3, r3, #28
 800c804:	b2da      	uxtb	r2, r3
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	4619      	mov	r1, r3
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	440b      	add	r3, r1
 800c810:	3230      	adds	r2, #48	; 0x30
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	701a      	strb	r2, [r3, #0]
 800c816:	e00a      	b.n	800c82e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	0f1b      	lsrs	r3, r3, #28
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
 800c820:	005b      	lsls	r3, r3, #1
 800c822:	4619      	mov	r1, r3
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	440b      	add	r3, r1
 800c828:	3237      	adds	r2, #55	; 0x37
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	011b      	lsls	r3, r3, #4
 800c832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	005b      	lsls	r3, r3, #1
 800c838:	3301      	adds	r3, #1
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	4413      	add	r3, r2
 800c83e:	2200      	movs	r2, #0
 800c840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	3301      	adds	r3, #1
 800c846:	75fb      	strb	r3, [r7, #23]
 800c848:	7dfa      	ldrb	r2, [r7, #23]
 800c84a:	79fb      	ldrb	r3, [r7, #7]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d3d3      	bcc.n	800c7f8 <IntToUnicode+0x18>
  }
}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr

0800c85c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08a      	sub	sp, #40	; 0x28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c864:	f107 0314 	add.w	r3, r7, #20
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	605a      	str	r2, [r3, #4]
 800c86e:	609a      	str	r2, [r3, #8]
 800c870:	60da      	str	r2, [r3, #12]
 800c872:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c87c:	d147      	bne.n	800c90e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c87e:	2300      	movs	r3, #0
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	4b25      	ldr	r3, [pc, #148]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c886:	4a24      	ldr	r2, [pc, #144]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c888:	f043 0301 	orr.w	r3, r3, #1
 800c88c:	6313      	str	r3, [r2, #48]	; 0x30
 800c88e:	4b22      	ldr	r3, [pc, #136]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c892:	f003 0301 	and.w	r3, r3, #1
 800c896:	613b      	str	r3, [r7, #16]
 800c898:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c89e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8a8:	f107 0314 	add.w	r3, r7, #20
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	481b      	ldr	r0, [pc, #108]	; (800c91c <HAL_PCD_MspInit+0xc0>)
 800c8b0:	f7f5 fdf4 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c8b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c8b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8ba:	2302      	movs	r3, #2
 800c8bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8c6:	230a      	movs	r3, #10
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8ca:	f107 0314 	add.w	r3, r7, #20
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4812      	ldr	r0, [pc, #72]	; (800c91c <HAL_PCD_MspInit+0xc0>)
 800c8d2:	f7f5 fde3 	bl	800249c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8da:	4a0f      	ldr	r2, [pc, #60]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8e0:	6353      	str	r3, [r2, #52]	; 0x34
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ea:	4a0b      	ldr	r2, [pc, #44]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c8ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8f0:	6453      	str	r3, [r2, #68]	; 0x44
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <HAL_PCD_MspInit+0xbc>)
 800c8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c8fe:	2200      	movs	r2, #0
 800c900:	2100      	movs	r1, #0
 800c902:	2043      	movs	r0, #67	; 0x43
 800c904:	f7f5 f91b 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c908:	2043      	movs	r0, #67	; 0x43
 800c90a:	f7f5 f934 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c90e:	bf00      	nop
 800c910:	3728      	adds	r7, #40	; 0x28
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	40023800 	.word	0x40023800
 800c91c:	40020000 	.word	0x40020000

0800c920 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c934:	4619      	mov	r1, r3
 800c936:	4610      	mov	r0, r2
 800c938:	f7fd ff96 	bl	800a868 <USBD_LL_SetupStage>
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c956:	78fa      	ldrb	r2, [r7, #3]
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	4613      	mov	r3, r2
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	1a9b      	subs	r3, r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	440b      	add	r3, r1
 800c964:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	4619      	mov	r1, r3
 800c96e:	f7fd ffc8 	bl	800a902 <USBD_LL_DataOutStage>
}
 800c972:	bf00      	nop
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b082      	sub	sp, #8
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	460b      	mov	r3, r1
 800c984:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800c98c:	78fa      	ldrb	r2, [r7, #3]
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	4613      	mov	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	1a9b      	subs	r3, r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	440b      	add	r3, r1
 800c99a:	3348      	adds	r3, #72	; 0x48
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f7fe f81f 	bl	800a9e4 <USBD_LL_DataInStage>
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fe f92f 	bl	800ac20 <USBD_LL_SOF>
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d102      	bne.n	800c9e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73fb      	strb	r3, [r7, #15]
 800c9e2:	e008      	b.n	800c9f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d102      	bne.n	800c9f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	73fb      	strb	r3, [r7, #15]
 800c9f0:	e001      	b.n	800c9f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c9f2:	f7f4 f859 	bl	8000aa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c9fc:	7bfa      	ldrb	r2, [r7, #15]
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fe f8d5 	bl	800abb0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe f88e 	bl	800ab2e <USBD_LL_Reset>
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe f8cf 	bl	800abce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	6812      	ldr	r2, [r2, #0]
 800ca3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca50:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <HAL_PCD_SuspendCallback+0x48>)
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	4a03      	ldr	r2, [pc, #12]	; (800ca64 <HAL_PCD_SuspendCallback+0x48>)
 800ca56:	f043 0306 	orr.w	r3, r3, #6
 800ca5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	e000ed00 	.word	0xe000ed00

0800ca68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe f8bd 	bl	800abf6 <USBD_LL_Resume>
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ca96:	78fa      	ldrb	r2, [r7, #3]
 800ca98:	4611      	mov	r1, r2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe f8e6 	bl	800ac6c <USBD_LL_IsoOUTIncomplete>
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800caba:	78fa      	ldrb	r2, [r7, #3]
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe f8c8 	bl	800ac54 <USBD_LL_IsoINIncomplete>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe f8d2 	bl	800ac84 <USBD_LL_DevConnected>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe f8ce 	bl	800ac98 <USBD_LL_DevDisconnected>
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d139      	bne.n	800cb88 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb14:	4a1f      	ldr	r2, [pc, #124]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a1d      	ldr	r2, [pc, #116]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb24:	4b1b      	ldr	r3, [pc, #108]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cb2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb2c:	4b19      	ldr	r3, [pc, #100]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb2e:	2204      	movs	r2, #4
 800cb30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb32:	4b18      	ldr	r3, [pc, #96]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb34:	2202      	movs	r2, #2
 800cb36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb38:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb3e:	4b15      	ldr	r3, [pc, #84]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb40:	2202      	movs	r2, #2
 800cb42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb44:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb4a:	4b12      	ldr	r3, [pc, #72]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cb50:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb56:	4b0f      	ldr	r3, [pc, #60]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb5c:	480d      	ldr	r0, [pc, #52]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb5e:	f7f6 f8ad 	bl	8002cbc <HAL_PCD_Init>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800cb68:	f7f3 ff9e 	bl	8000aa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb6c:	2180      	movs	r1, #128	; 0x80
 800cb6e:	4809      	ldr	r0, [pc, #36]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb70:	f7f7 f9ea 	bl	8003f48 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb74:	2240      	movs	r2, #64	; 0x40
 800cb76:	2100      	movs	r1, #0
 800cb78:	4806      	ldr	r0, [pc, #24]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb7a:	f7f7 f99f 	bl	8003ebc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb7e:	2280      	movs	r2, #128	; 0x80
 800cb80:	2101      	movs	r1, #1
 800cb82:	4804      	ldr	r0, [pc, #16]	; (800cb94 <USBD_LL_Init+0x90>)
 800cb84:	f7f7 f99a 	bl	8003ebc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20003320 	.word	0x20003320

0800cb98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f6 f9a1 	bl	8002ef6 <HAL_PCD_Start>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f92e 	bl	800ce1c <USBD_Get_USB_Status>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	4608      	mov	r0, r1
 800cbd8:	4611      	mov	r1, r2
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4603      	mov	r3, r0
 800cbde:	70fb      	strb	r3, [r7, #3]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	70bb      	strb	r3, [r7, #2]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbf6:	78bb      	ldrb	r3, [r7, #2]
 800cbf8:	883a      	ldrh	r2, [r7, #0]
 800cbfa:	78f9      	ldrb	r1, [r7, #3]
 800cbfc:	f7f6 fd66 	bl	80036cc <HAL_PCD_EP_Open>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 f908 	bl	800ce1c <USBD_Get_USB_Status>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	460b      	mov	r3, r1
 800cc24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc26:	2300      	movs	r3, #0
 800cc28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc34:	78fa      	ldrb	r2, [r7, #3]
 800cc36:	4611      	mov	r1, r2
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7f6 fdaf 	bl	800379c <HAL_PCD_EP_Close>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f8e9 	bl	800ce1c <USBD_Get_USB_Status>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc72:	78fa      	ldrb	r2, [r7, #3]
 800cc74:	4611      	mov	r1, r2
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7f6 fe86 	bl	8003988 <HAL_PCD_EP_SetStall>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 f8ca 	bl	800ce1c <USBD_Get_USB_Status>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccb0:	78fa      	ldrb	r2, [r7, #3]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7f6 fecb 	bl	8003a50 <HAL_PCD_EP_ClrStall>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 f8ab 	bl	800ce1c <USBD_Get_USB_Status>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	da0b      	bge.n	800cd08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccf6:	68f9      	ldr	r1, [r7, #12]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	1a9b      	subs	r3, r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	440b      	add	r3, r1
 800cd02:	333e      	adds	r3, #62	; 0x3e
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	e00b      	b.n	800cd20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd0e:	68f9      	ldr	r1, [r7, #12]
 800cd10:	4613      	mov	r3, r2
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	1a9b      	subs	r3, r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	440b      	add	r3, r1
 800cd1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bc80      	pop	{r7}
 800cd28:	4770      	bx	lr

0800cd2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd44:	78fa      	ldrb	r2, [r7, #3]
 800cd46:	4611      	mov	r1, r2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7f6 fc9a 	bl	8003682 <HAL_PCD_SetAddress>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 f861 	bl	800ce1c <USBD_Get_USB_Status>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	607a      	str	r2, [r7, #4]
 800cd72:	461a      	mov	r2, r3
 800cd74:	460b      	mov	r3, r1
 800cd76:	72fb      	strb	r3, [r7, #11]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd8a:	893b      	ldrh	r3, [r7, #8]
 800cd8c:	7af9      	ldrb	r1, [r7, #11]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	f7f6 fdb0 	bl	80038f4 <HAL_PCD_EP_Transmit>
 800cd94:	4603      	mov	r3, r0
 800cd96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 f83e 	bl	800ce1c <USBD_Get_USB_Status>
 800cda0:	4603      	mov	r3, r0
 800cda2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cda4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b086      	sub	sp, #24
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	460b      	mov	r3, r1
 800cdbc:	72fb      	strb	r3, [r7, #11]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdd0:	893b      	ldrh	r3, [r7, #8]
 800cdd2:	7af9      	ldrb	r1, [r7, #11]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	f7f6 fd2b 	bl	8003830 <HAL_PCD_EP_Receive>
 800cdda:	4603      	mov	r3, r0
 800cddc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 f81b 	bl	800ce1c <USBD_Get_USB_Status>
 800cde6:	4603      	mov	r3, r0
 800cde8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdea:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	4611      	mov	r1, r2
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7f6 fd5b 	bl	80038c6 <HAL_PCD_EP_GetRxCount>
 800ce10:	4603      	mov	r3, r0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce2a:	79fb      	ldrb	r3, [r7, #7]
 800ce2c:	2b03      	cmp	r3, #3
 800ce2e:	d817      	bhi.n	800ce60 <USBD_Get_USB_Status+0x44>
 800ce30:	a201      	add	r2, pc, #4	; (adr r2, 800ce38 <USBD_Get_USB_Status+0x1c>)
 800ce32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce36:	bf00      	nop
 800ce38:	0800ce49 	.word	0x0800ce49
 800ce3c:	0800ce4f 	.word	0x0800ce4f
 800ce40:	0800ce55 	.word	0x0800ce55
 800ce44:	0800ce5b 	.word	0x0800ce5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4c:	e00b      	b.n	800ce66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce4e:	2302      	movs	r3, #2
 800ce50:	73fb      	strb	r3, [r7, #15]
    break;
 800ce52:	e008      	b.n	800ce66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce54:	2301      	movs	r3, #1
 800ce56:	73fb      	strb	r3, [r7, #15]
    break;
 800ce58:	e005      	b.n	800ce66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5e:	e002      	b.n	800ce66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce60:	2302      	movs	r3, #2
 800ce62:	73fb      	strb	r3, [r7, #15]
    break;
 800ce64:	bf00      	nop
  }
  return usb_status;
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bc80      	pop	{r7}
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop

0800ce74 <malloc>:
 800ce74:	4b02      	ldr	r3, [pc, #8]	; (800ce80 <malloc+0xc>)
 800ce76:	4601      	mov	r1, r0
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	f000 b82b 	b.w	800ced4 <_malloc_r>
 800ce7e:	bf00      	nop
 800ce80:	2000020c 	.word	0x2000020c

0800ce84 <free>:
 800ce84:	4b02      	ldr	r3, [pc, #8]	; (800ce90 <free+0xc>)
 800ce86:	4601      	mov	r1, r0
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	f000 b8f3 	b.w	800d074 <_free_r>
 800ce8e:	bf00      	nop
 800ce90:	2000020c 	.word	0x2000020c

0800ce94 <sbrk_aligned>:
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	4e0e      	ldr	r6, [pc, #56]	; (800ced0 <sbrk_aligned+0x3c>)
 800ce98:	460c      	mov	r4, r1
 800ce9a:	6831      	ldr	r1, [r6, #0]
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	b911      	cbnz	r1, 800cea6 <sbrk_aligned+0x12>
 800cea0:	f000 f8ac 	bl	800cffc <_sbrk_r>
 800cea4:	6030      	str	r0, [r6, #0]
 800cea6:	4621      	mov	r1, r4
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f000 f8a7 	bl	800cffc <_sbrk_r>
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	d00a      	beq.n	800cec8 <sbrk_aligned+0x34>
 800ceb2:	1cc4      	adds	r4, r0, #3
 800ceb4:	f024 0403 	bic.w	r4, r4, #3
 800ceb8:	42a0      	cmp	r0, r4
 800ceba:	d007      	beq.n	800cecc <sbrk_aligned+0x38>
 800cebc:	1a21      	subs	r1, r4, r0
 800cebe:	4628      	mov	r0, r5
 800cec0:	f000 f89c 	bl	800cffc <_sbrk_r>
 800cec4:	3001      	adds	r0, #1
 800cec6:	d101      	bne.n	800cecc <sbrk_aligned+0x38>
 800cec8:	f04f 34ff 	mov.w	r4, #4294967295
 800cecc:	4620      	mov	r0, r4
 800cece:	bd70      	pop	{r4, r5, r6, pc}
 800ced0:	20003724 	.word	0x20003724

0800ced4 <_malloc_r>:
 800ced4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced8:	1ccd      	adds	r5, r1, #3
 800ceda:	f025 0503 	bic.w	r5, r5, #3
 800cede:	3508      	adds	r5, #8
 800cee0:	2d0c      	cmp	r5, #12
 800cee2:	bf38      	it	cc
 800cee4:	250c      	movcc	r5, #12
 800cee6:	2d00      	cmp	r5, #0
 800cee8:	4607      	mov	r7, r0
 800ceea:	db01      	blt.n	800cef0 <_malloc_r+0x1c>
 800ceec:	42a9      	cmp	r1, r5
 800ceee:	d905      	bls.n	800cefc <_malloc_r+0x28>
 800cef0:	230c      	movs	r3, #12
 800cef2:	2600      	movs	r6, #0
 800cef4:	603b      	str	r3, [r7, #0]
 800cef6:	4630      	mov	r0, r6
 800cef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cefc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfd0 <_malloc_r+0xfc>
 800cf00:	f000 f868 	bl	800cfd4 <__malloc_lock>
 800cf04:	f8d8 3000 	ldr.w	r3, [r8]
 800cf08:	461c      	mov	r4, r3
 800cf0a:	bb5c      	cbnz	r4, 800cf64 <_malloc_r+0x90>
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f7ff ffc0 	bl	800ce94 <sbrk_aligned>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	4604      	mov	r4, r0
 800cf18:	d155      	bne.n	800cfc6 <_malloc_r+0xf2>
 800cf1a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf1e:	4626      	mov	r6, r4
 800cf20:	2e00      	cmp	r6, #0
 800cf22:	d145      	bne.n	800cfb0 <_malloc_r+0xdc>
 800cf24:	2c00      	cmp	r4, #0
 800cf26:	d048      	beq.n	800cfba <_malloc_r+0xe6>
 800cf28:	6823      	ldr	r3, [r4, #0]
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	eb04 0903 	add.w	r9, r4, r3
 800cf32:	f000 f863 	bl	800cffc <_sbrk_r>
 800cf36:	4581      	cmp	r9, r0
 800cf38:	d13f      	bne.n	800cfba <_malloc_r+0xe6>
 800cf3a:	6821      	ldr	r1, [r4, #0]
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	1a6d      	subs	r5, r5, r1
 800cf40:	4629      	mov	r1, r5
 800cf42:	f7ff ffa7 	bl	800ce94 <sbrk_aligned>
 800cf46:	3001      	adds	r0, #1
 800cf48:	d037      	beq.n	800cfba <_malloc_r+0xe6>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	442b      	add	r3, r5
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	f8d8 3000 	ldr.w	r3, [r8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d038      	beq.n	800cfca <_malloc_r+0xf6>
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	42a2      	cmp	r2, r4
 800cf5c:	d12b      	bne.n	800cfb6 <_malloc_r+0xe2>
 800cf5e:	2200      	movs	r2, #0
 800cf60:	605a      	str	r2, [r3, #4]
 800cf62:	e00f      	b.n	800cf84 <_malloc_r+0xb0>
 800cf64:	6822      	ldr	r2, [r4, #0]
 800cf66:	1b52      	subs	r2, r2, r5
 800cf68:	d41f      	bmi.n	800cfaa <_malloc_r+0xd6>
 800cf6a:	2a0b      	cmp	r2, #11
 800cf6c:	d917      	bls.n	800cf9e <_malloc_r+0xca>
 800cf6e:	1961      	adds	r1, r4, r5
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	6025      	str	r5, [r4, #0]
 800cf74:	bf18      	it	ne
 800cf76:	6059      	strne	r1, [r3, #4]
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	bf08      	it	eq
 800cf7c:	f8c8 1000 	streq.w	r1, [r8]
 800cf80:	5162      	str	r2, [r4, r5]
 800cf82:	604b      	str	r3, [r1, #4]
 800cf84:	4638      	mov	r0, r7
 800cf86:	f104 060b 	add.w	r6, r4, #11
 800cf8a:	f000 f829 	bl	800cfe0 <__malloc_unlock>
 800cf8e:	f026 0607 	bic.w	r6, r6, #7
 800cf92:	1d23      	adds	r3, r4, #4
 800cf94:	1af2      	subs	r2, r6, r3
 800cf96:	d0ae      	beq.n	800cef6 <_malloc_r+0x22>
 800cf98:	1b9b      	subs	r3, r3, r6
 800cf9a:	50a3      	str	r3, [r4, r2]
 800cf9c:	e7ab      	b.n	800cef6 <_malloc_r+0x22>
 800cf9e:	42a3      	cmp	r3, r4
 800cfa0:	6862      	ldr	r2, [r4, #4]
 800cfa2:	d1dd      	bne.n	800cf60 <_malloc_r+0x8c>
 800cfa4:	f8c8 2000 	str.w	r2, [r8]
 800cfa8:	e7ec      	b.n	800cf84 <_malloc_r+0xb0>
 800cfaa:	4623      	mov	r3, r4
 800cfac:	6864      	ldr	r4, [r4, #4]
 800cfae:	e7ac      	b.n	800cf0a <_malloc_r+0x36>
 800cfb0:	4634      	mov	r4, r6
 800cfb2:	6876      	ldr	r6, [r6, #4]
 800cfb4:	e7b4      	b.n	800cf20 <_malloc_r+0x4c>
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	e7cc      	b.n	800cf54 <_malloc_r+0x80>
 800cfba:	230c      	movs	r3, #12
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	603b      	str	r3, [r7, #0]
 800cfc0:	f000 f80e 	bl	800cfe0 <__malloc_unlock>
 800cfc4:	e797      	b.n	800cef6 <_malloc_r+0x22>
 800cfc6:	6025      	str	r5, [r4, #0]
 800cfc8:	e7dc      	b.n	800cf84 <_malloc_r+0xb0>
 800cfca:	605b      	str	r3, [r3, #4]
 800cfcc:	deff      	udf	#255	; 0xff
 800cfce:	bf00      	nop
 800cfd0:	20003720 	.word	0x20003720

0800cfd4 <__malloc_lock>:
 800cfd4:	4801      	ldr	r0, [pc, #4]	; (800cfdc <__malloc_lock+0x8>)
 800cfd6:	f000 b84b 	b.w	800d070 <__retarget_lock_acquire_recursive>
 800cfda:	bf00      	nop
 800cfdc:	20003864 	.word	0x20003864

0800cfe0 <__malloc_unlock>:
 800cfe0:	4801      	ldr	r0, [pc, #4]	; (800cfe8 <__malloc_unlock+0x8>)
 800cfe2:	f000 b846 	b.w	800d072 <__retarget_lock_release_recursive>
 800cfe6:	bf00      	nop
 800cfe8:	20003864 	.word	0x20003864

0800cfec <memset>:
 800cfec:	4603      	mov	r3, r0
 800cfee:	4402      	add	r2, r0
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d100      	bne.n	800cff6 <memset+0xa>
 800cff4:	4770      	bx	lr
 800cff6:	f803 1b01 	strb.w	r1, [r3], #1
 800cffa:	e7f9      	b.n	800cff0 <memset+0x4>

0800cffc <_sbrk_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	2300      	movs	r3, #0
 800d000:	4d05      	ldr	r5, [pc, #20]	; (800d018 <_sbrk_r+0x1c>)
 800d002:	4604      	mov	r4, r0
 800d004:	4608      	mov	r0, r1
 800d006:	602b      	str	r3, [r5, #0]
 800d008:	f7f4 f954 	bl	80012b4 <_sbrk>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d102      	bne.n	800d016 <_sbrk_r+0x1a>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	b103      	cbz	r3, 800d016 <_sbrk_r+0x1a>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	20003860 	.word	0x20003860

0800d01c <__errno>:
 800d01c:	4b01      	ldr	r3, [pc, #4]	; (800d024 <__errno+0x8>)
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	2000020c 	.word	0x2000020c

0800d028 <__libc_init_array>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	2600      	movs	r6, #0
 800d02c:	4d0c      	ldr	r5, [pc, #48]	; (800d060 <__libc_init_array+0x38>)
 800d02e:	4c0d      	ldr	r4, [pc, #52]	; (800d064 <__libc_init_array+0x3c>)
 800d030:	1b64      	subs	r4, r4, r5
 800d032:	10a4      	asrs	r4, r4, #2
 800d034:	42a6      	cmp	r6, r4
 800d036:	d109      	bne.n	800d04c <__libc_init_array+0x24>
 800d038:	f000 f864 	bl	800d104 <_init>
 800d03c:	2600      	movs	r6, #0
 800d03e:	4d0a      	ldr	r5, [pc, #40]	; (800d068 <__libc_init_array+0x40>)
 800d040:	4c0a      	ldr	r4, [pc, #40]	; (800d06c <__libc_init_array+0x44>)
 800d042:	1b64      	subs	r4, r4, r5
 800d044:	10a4      	asrs	r4, r4, #2
 800d046:	42a6      	cmp	r6, r4
 800d048:	d105      	bne.n	800d056 <__libc_init_array+0x2e>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d050:	4798      	blx	r3
 800d052:	3601      	adds	r6, #1
 800d054:	e7ee      	b.n	800d034 <__libc_init_array+0xc>
 800d056:	f855 3b04 	ldr.w	r3, [r5], #4
 800d05a:	4798      	blx	r3
 800d05c:	3601      	adds	r6, #1
 800d05e:	e7f2      	b.n	800d046 <__libc_init_array+0x1e>
 800d060:	0800d1a8 	.word	0x0800d1a8
 800d064:	0800d1a8 	.word	0x0800d1a8
 800d068:	0800d1a8 	.word	0x0800d1a8
 800d06c:	0800d1ac 	.word	0x0800d1ac

0800d070 <__retarget_lock_acquire_recursive>:
 800d070:	4770      	bx	lr

0800d072 <__retarget_lock_release_recursive>:
 800d072:	4770      	bx	lr

0800d074 <_free_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4605      	mov	r5, r0
 800d078:	2900      	cmp	r1, #0
 800d07a:	d040      	beq.n	800d0fe <_free_r+0x8a>
 800d07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d080:	1f0c      	subs	r4, r1, #4
 800d082:	2b00      	cmp	r3, #0
 800d084:	bfb8      	it	lt
 800d086:	18e4      	addlt	r4, r4, r3
 800d088:	f7ff ffa4 	bl	800cfd4 <__malloc_lock>
 800d08c:	4a1c      	ldr	r2, [pc, #112]	; (800d100 <_free_r+0x8c>)
 800d08e:	6813      	ldr	r3, [r2, #0]
 800d090:	b933      	cbnz	r3, 800d0a0 <_free_r+0x2c>
 800d092:	6063      	str	r3, [r4, #4]
 800d094:	6014      	str	r4, [r2, #0]
 800d096:	4628      	mov	r0, r5
 800d098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09c:	f7ff bfa0 	b.w	800cfe0 <__malloc_unlock>
 800d0a0:	42a3      	cmp	r3, r4
 800d0a2:	d908      	bls.n	800d0b6 <_free_r+0x42>
 800d0a4:	6820      	ldr	r0, [r4, #0]
 800d0a6:	1821      	adds	r1, r4, r0
 800d0a8:	428b      	cmp	r3, r1
 800d0aa:	bf01      	itttt	eq
 800d0ac:	6819      	ldreq	r1, [r3, #0]
 800d0ae:	685b      	ldreq	r3, [r3, #4]
 800d0b0:	1809      	addeq	r1, r1, r0
 800d0b2:	6021      	streq	r1, [r4, #0]
 800d0b4:	e7ed      	b.n	800d092 <_free_r+0x1e>
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	b10b      	cbz	r3, 800d0c0 <_free_r+0x4c>
 800d0bc:	42a3      	cmp	r3, r4
 800d0be:	d9fa      	bls.n	800d0b6 <_free_r+0x42>
 800d0c0:	6811      	ldr	r1, [r2, #0]
 800d0c2:	1850      	adds	r0, r2, r1
 800d0c4:	42a0      	cmp	r0, r4
 800d0c6:	d10b      	bne.n	800d0e0 <_free_r+0x6c>
 800d0c8:	6820      	ldr	r0, [r4, #0]
 800d0ca:	4401      	add	r1, r0
 800d0cc:	1850      	adds	r0, r2, r1
 800d0ce:	4283      	cmp	r3, r0
 800d0d0:	6011      	str	r1, [r2, #0]
 800d0d2:	d1e0      	bne.n	800d096 <_free_r+0x22>
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	4408      	add	r0, r1
 800d0da:	6010      	str	r0, [r2, #0]
 800d0dc:	6053      	str	r3, [r2, #4]
 800d0de:	e7da      	b.n	800d096 <_free_r+0x22>
 800d0e0:	d902      	bls.n	800d0e8 <_free_r+0x74>
 800d0e2:	230c      	movs	r3, #12
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	e7d6      	b.n	800d096 <_free_r+0x22>
 800d0e8:	6820      	ldr	r0, [r4, #0]
 800d0ea:	1821      	adds	r1, r4, r0
 800d0ec:	428b      	cmp	r3, r1
 800d0ee:	bf01      	itttt	eq
 800d0f0:	6819      	ldreq	r1, [r3, #0]
 800d0f2:	685b      	ldreq	r3, [r3, #4]
 800d0f4:	1809      	addeq	r1, r1, r0
 800d0f6:	6021      	streq	r1, [r4, #0]
 800d0f8:	6063      	str	r3, [r4, #4]
 800d0fa:	6054      	str	r4, [r2, #4]
 800d0fc:	e7cb      	b.n	800d096 <_free_r+0x22>
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	20003720 	.word	0x20003720

0800d104 <_init>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr

0800d110 <_fini>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	bf00      	nop
 800d114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d116:	bc08      	pop	{r3}
 800d118:	469e      	mov	lr, r3
 800d11a:	4770      	bx	lr
