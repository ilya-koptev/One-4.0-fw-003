
fw-002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d254  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d650  0800d650  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d658  0800d658  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d658  0800d658  0001d658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d65c  0800d65c  0001d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000369c  20000210  0800d870  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038ac  0800d870  000238ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023d7b  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a40  00000000  00000000  00043ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020d8  00000000  00000000  0004aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001944  00000000  00000000  0004cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a82  00000000  00000000  0004e454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f27c  00000000  00000000  00075ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd772  00000000  00000000  000a5152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008950  00000000  00000000  001728c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0017b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000210 	.word	0x20000210
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800d3c0 	.word	0x0800d3c0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000214 	.word	0x20000214
 80001c0:	0800d3c0 	.word	0x0800d3c0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_CRC_Init+0x20>)
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <MX_CRC_Init+0x24>)
 80004cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_CRC_Init+0x20>)
 80004d0:	f001 fd01 	bl	8001ed6 <HAL_CRC_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004da:	f000 fc7b 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000022c 	.word	0x2000022c
 80004e8:	40023000 	.word	0x40023000

080004ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_CRC_MspInit+0x38>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d10d      	bne.n	800051a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40023000 	.word	0x40023000
 8000528:	40023800 	.word	0x40023800

0800052c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <MX_DMA_Init+0xd8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a32      	ldr	r2, [pc, #200]	; (8000604 <MX_DMA_Init+0xd8>)
 800053c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_DMA_Init+0xd8>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_DMA_Init+0xd8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <MX_DMA_Init+0xd8>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_DMA_Init+0xd8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <MX_DMA_Init+0xdc>)
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <MX_DMA_Init+0xe0>)
 800056e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_DMA_Init+0xdc>)
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_DMA_Init+0xdc>)
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_DMA_Init+0xdc>)
 800057e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000582:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_DMA_Init+0xdc>)
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_DMA_Init+0xdc>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_DMA_Init+0xdc>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_DMA_Init+0xdc>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_DMA_Init+0xdc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_DMA_Init+0xdc>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_DMA_Init+0xdc>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_DMA_Init+0xdc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_DMA_Init+0xdc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <MX_DMA_Init+0xdc>)
 80005be:	f001 fca7 	bl	8001f10 <HAL_DMA_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 80005c8:	f000 fc04 	bl	8000dd4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	200f      	movs	r0, #15
 80005d2:	f001 fc4a 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f001 fc63 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2038      	movs	r0, #56	; 0x38
 80005e2:	f001 fc42 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005e6:	2038      	movs	r0, #56	; 0x38
 80005e8:	f001 fc5b 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	203b      	movs	r0, #59	; 0x3b
 80005f2:	f001 fc3a 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f6:	203b      	movs	r0, #59	; 0x3b
 80005f8:	f001 fc53 	bl	8001ea2 <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	20000234 	.word	0x20000234
 800060c:	40026410 	.word	0x40026410

08000610 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <MX_GPIO_Init+0x15c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4f      	ldr	r2, [pc, #316]	; (800076c <MX_GPIO_Init+0x15c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <MX_GPIO_Init+0x15c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <MX_GPIO_Init+0x15c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a48      	ldr	r2, [pc, #288]	; (800076c <MX_GPIO_Init+0x15c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <MX_GPIO_Init+0x15c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x15c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <MX_GPIO_Init+0x15c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <MX_GPIO_Init+0x15c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <MX_GPIO_Init+0x15c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a3a      	ldr	r2, [pc, #232]	; (800076c <MX_GPIO_Init+0x15c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <MX_GPIO_Init+0x15c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b34      	ldr	r3, [pc, #208]	; (800076c <MX_GPIO_Init+0x15c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a33      	ldr	r2, [pc, #204]	; (800076c <MX_GPIO_Init+0x15c>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_GPIO_Init+0x15c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80006b2:	2200      	movs	r2, #0
 80006b4:	f242 0127 	movw	r1, #8231	; 0x2027
 80006b8:	482d      	ldr	r0, [pc, #180]	; (8000770 <MX_GPIO_Init+0x160>)
 80006ba:	f002 fb38 	bl	8002d2e <HAL_GPIO_WritePin>
                          |Out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out1_Pin|Out6_Pin|Out5_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f248 4110 	movw	r1, #33808	; 0x8410
 80006c4:	482b      	ldr	r0, [pc, #172]	; (8000774 <MX_GPIO_Init+0x164>)
 80006c6:	f002 fb32 	bl	8002d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2110      	movs	r1, #16
 80006ce:	4828      	ldr	r0, [pc, #160]	; (8000770 <MX_GPIO_Init+0x160>)
 80006d0:	f002 fb2d 	bl	8002d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80006d4:	f242 0337 	movw	r3, #8247	; 0x2037
 80006d8:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|Out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <MX_GPIO_Init+0x160>)
 80006ee:	f002 f86b 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Out1_Pin|Out6_Pin|Out5_Pin;
 80006f2:	f248 4310 	movw	r3, #33808	; 0x8410
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <MX_GPIO_Init+0x164>)
 800070c:	f002 f85c 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = In6_Pin|In4_Pin|In3_Pin|In5_Pin;
 8000710:	f24d 0304 	movw	r3, #53252	; 0xd004
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_GPIO_Init+0x168>)
 8000726:	f002 f84f 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = In1_Pin|In2_Pin;
 800072a:	23c0      	movs	r3, #192	; 0xc0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0x160>)
 800073e:	f002 f843 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0x164>)
 8000760:	f002 f832 	bl	80027c8 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020800 	.word	0x40020800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400

0800077c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C2_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C2_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C2_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C2_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C2_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C2_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ba:	f002 fad1 	bl	8002d60 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fb06 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000294 	.word	0x20000294
 80007d0:	40005800 	.word	0x40005800
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_I2C_MspInit+0x84>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12c      	bne.n	8000854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000828:	2304      	movs	r3, #4
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_I2C_MspInit+0x8c>)
 8000834:	f001 ffc8 	bl	80027c8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005800 	.word	0x40005800
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f001 f9a5 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f865 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f7ff fecb 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f7ff fe57 	bl	800052c <MX_DMA_Init>
  MX_SPI1_Init();
 800087e:	f000 fbed 	bl	800105c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000882:	f000 fc21 	bl	80010c8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000886:	f009 fdb3 	bl	800a3f0 <MX_FATFS_Init>
  MX_TIM4_Init();
 800088a:	f000 ff55 	bl	8001738 <MX_TIM4_Init>
  MX_I2C2_Init();
 800088e:	f7ff ff75 	bl	800077c <MX_I2C2_Init>
  MX_RTC_Init();
 8000892:	f000 fadb 	bl	8000e4c <MX_RTC_Init>
  MX_SPI3_Init();
 8000896:	f000 fc4d 	bl	8001134 <MX_SPI3_Init>
  MX_UART4_Init();
 800089a:	f001 f88d 	bl	80019b8 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 800089e:	f00b ff6f 	bl	800c780 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80008a2:	f000 fed9 	bl	8001658 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008a6:	f001 f8b1 	bl	8001a0c <MX_USART2_UART_Init>
  MX_RNG_Init();
 80008aa:	f000 fa9b 	bl	8000de4 <MX_RNG_Init>
  MX_SDIO_SD_Init();
 80008ae:	f000 fb3b 	bl	8000f28 <MX_SDIO_SD_Init>
  MX_CRC_Init();
 80008b2:	f7ff fe07 	bl	80004c4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  	MM_Init();
 80008b6:	f00b fe37 	bl	800c528 <MM_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <main+0xbc>)
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <main+0xc0>)
 80008c0:	f007 f81f 	bl	8007902 <HAL_UART_Receive_IT>

#ifdef LORA
	HAL_SPI_DeInit(&hspi3);
 80008c4:	4819      	ldr	r0, [pc, #100]	; (800092c <main+0xc4>)
 80008c6:	f005 ff1f 	bl	8006708 <HAL_SPI_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008d8:	2338      	movs	r3, #56	; 0x38
 80008da:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <main+0xc8>)
 80008ea:	f001 ff6d 	bl	80027c8 <HAL_GPIO_Init>
	#define LORA_SET HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
	#define LORA_WORK HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	LORA_WORK
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <main+0xc8>)
 80008f4:	f002 fa1b 	bl	8002d2e <HAL_GPIO_WritePin>
#endif
  	init_OK = 1;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <main+0xcc>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  Debug_LED1 = 	RED;
	  Debug_LED1 = BLACK;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <main+0xd0>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	  Debug_LED2 = BLACK;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <main+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 800090a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090e:	f001 f9b1 	bl	8001c74 <HAL_Delay>
//	  Debug_LED1 = BLACK;

	  Debug_LED1 = GREEN;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <main+0xd0>)
 8000914:	2203      	movs	r2, #3
 8000916:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091c:	f001 f9aa 	bl	8001c74 <HAL_Delay>
	  Debug_LED1 = BLACK;
 8000920:	e7ed      	b.n	80008fe <main+0x96>
 8000922:	bf00      	nop
 8000924:	200002e8 	.word	0x200002e8
 8000928:	20000680 	.word	0x20000680
 800092c:	20000490 	.word	0x20000490
 8000930:	40020400 	.word	0x40020400
 8000934:	2000072b 	.word	0x2000072b
 8000938:	20000729 	.word	0x20000729
 800093c:	2000072a 	.word	0x2000072a

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b096      	sub	sp, #88	; 0x58
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f00c fcaa 	bl	800d2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000972:	2309      	movs	r3, #9
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800097a:	2301      	movs	r3, #1
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000988:	2319      	movs	r3, #25
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 800098c:	23c0      	movs	r3, #192	; 0xc0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fc79 	bl	8004294 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009a8:	f000 fa14 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2103      	movs	r1, #3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 feb0 	bl	8004730 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009d6:	f000 f9fd 	bl	8000dd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009da:	2304      	movs	r3, #4
 80009dc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 f90a 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009f2:	f000 f9ef 	bl	8000dd4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 ff83 	bl	8004908 <HAL_RCC_MCOConfig>
}
 8000a02:	bf00      	nop
 8000a04:	3758      	adds	r7, #88	; 0x58
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	static uint8_t reseive_msg[16] = {0};
	static uint8_t current_byte = 0;
	reseive_msg[current_byte] = rx_byte;
 8000a14:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <HAL_UART_RxCpltCallback+0x130>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <HAL_UART_RxCpltCallback+0x134>)
 8000a1c:	7819      	ldrb	r1, [r3, #0]
 8000a1e:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a20:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	4946      	ldr	r1, [pc, #280]	; (8000b40 <HAL_UART_RxCpltCallback+0x134>)
 8000a26:	4848      	ldr	r0, [pc, #288]	; (8000b48 <HAL_UART_RxCpltCallback+0x13c>)
 8000a28:	f006 ff6b 	bl	8007902 <HAL_UART_Receive_IT>


	if (current_byte < 7){
 8000a2c:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <HAL_UART_RxCpltCallback+0x130>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	d80f      	bhi.n	8000a54 <HAL_UART_RxCpltCallback+0x48>
		current_byte = (reseive_msg[0] == ModbusReg[0]) ? current_byte + 1 : 0;
 8000a34:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <HAL_UART_RxCpltCallback+0x140>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d104      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0x40>
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <HAL_UART_RxCpltCallback+0x130>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	e000      	b.n	8000a4e <HAL_UART_RxCpltCallback+0x42>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <HAL_UART_RxCpltCallback+0x130>)
 8000a50:	7013      	strb	r3, [r2, #0]
			}
			else {MRTU_Error(3, reseive_msg[1]);}
		}
		else {MRTU_Error(1, reseive_msg[1]);}
	}
}
 8000a52:	e06f      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x128>
		current_byte = 0;
 8000a54:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <HAL_UART_RxCpltCallback+0x130>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
		uint16_t tmp = MRTU_CRC(reseive_msg, 6);
 8000a5a:	2106      	movs	r1, #6
 8000a5c:	4839      	ldr	r0, [pc, #228]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a5e:	f000 f88b 	bl	8000b78 <MRTU_CRC>
 8000a62:	4603      	mov	r3, r0
 8000a64:	81fb      	strh	r3, [r7, #14]
		uint8_t CRC1 = (uint8_t)tmp;
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	737b      	strb	r3, [r7, #13]
		uint8_t CRC2 = (uint8_t)(tmp >> 8);
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	733b      	strb	r3, [r7, #12]
		if (reseive_msg[1] == 3){
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d127      	bne.n	8000aca <HAL_UART_RxCpltCallback+0xbe>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d11c      	bne.n	8000abc <HAL_UART_RxCpltCallback+0xb0>
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a84:	78db      	ldrb	r3, [r3, #3]
 8000a86:	2b1f      	cmp	r3, #31
 8000a88:	d818      	bhi.n	8000abc <HAL_UART_RxCpltCallback+0xb0>
					&& (reseive_msg[4] == 0) && (reseive_msg[5] == 1) \
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d114      	bne.n	8000abc <HAL_UART_RxCpltCallback+0xb0>
 8000a92:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d110      	bne.n	8000abc <HAL_UART_RxCpltCallback+0xb0>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000a9c:	799b      	ldrb	r3, [r3, #6]
 8000a9e:	7b7a      	ldrb	r2, [r7, #13]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d10b      	bne.n	8000abc <HAL_UART_RxCpltCallback+0xb0>
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000aa6:	79db      	ldrb	r3, [r3, #7]
 8000aa8:	7b3a      	ldrb	r2, [r7, #12]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d106      	bne.n	8000abc <HAL_UART_RxCpltCallback+0xb0>
				MRTU_Read(reseive_msg[3]);
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000ab0:	78db      	ldrb	r3, [r3, #3]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f893 	bl	8000be0 <MRTU_Read>
 8000aba:	e03b      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x128>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f93c 	bl	8000d40 <MRTU_Error>
}
 8000ac8:	e034      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x128>
		else if (reseive_msg[1] == 6){
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000acc:	785b      	ldrb	r3, [r3, #1]
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d129      	bne.n	8000b26 <HAL_UART_RxCpltCallback+0x11a>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d11e      	bne.n	8000b18 <HAL_UART_RxCpltCallback+0x10c>
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000adc:	78db      	ldrb	r3, [r3, #3]
 8000ade:	2b1f      	cmp	r3, #31
 8000ae0:	d81a      	bhi.n	8000b18 <HAL_UART_RxCpltCallback+0x10c>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000ae4:	799b      	ldrb	r3, [r3, #6]
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d115      	bne.n	8000b18 <HAL_UART_RxCpltCallback+0x10c>
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000aee:	79db      	ldrb	r3, [r3, #7]
 8000af0:	7b3a      	ldrb	r2, [r7, #12]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d110      	bne.n	8000b18 <HAL_UART_RxCpltCallback+0x10c>
				MRTU_Write(reseive_msg[3], (((uint16_t)reseive_msg[4]) | (uint16_t)(reseive_msg[5] << 8)));
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000af8:	78db      	ldrb	r3, [r3, #3]
 8000afa:	b298      	uxth	r0, r3
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	f000 f8b9 	bl	8000c88 <MRTU_Write>
 8000b16:	e00d      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x128>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f90e 	bl	8000d40 <MRTU_Error>
}
 8000b24:	e006      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x128>
		else {MRTU_Error(1, reseive_msg[1]);}
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x138>)
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f907 	bl	8000d40 <MRTU_Error>
}
 8000b32:	e7ff      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x128>
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200002e9 	.word	0x200002e9
 8000b40:	200002e8 	.word	0x200002e8
 8000b44:	200002ec 	.word	0x200002ec
 8000b48:	20000680 	.word	0x20000680
 8000b4c:	20000000 	.word	0x20000000

08000b50 <Main_IncTic>:



void Main_IncTic(void){
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <Buttons_Handler>:

void Buttons_Handler (uint8_t Butt, Button_events_TypeDef Event){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	460a      	mov	r2, r1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
	}
	if ((Butt == 0) && (Event == LONG_CLC)) {

	}

}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
	...

08000b78 <MRTU_CRC>:
uint16_t MRTU_CRC(uint8_t *data, uint8_t len){
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
    uint8_t uchCRCHi = 0xFF;
 8000b84:	23ff      	movs	r3, #255	; 0xff
 8000b86:	73fb      	strb	r3, [r7, #15]
    uint8_t uchCRCLo = 0xFF;
 8000b88:	23ff      	movs	r3, #255	; 0xff
 8000b8a:	73bb      	strb	r3, [r7, #14]
    uint16_t uIndex ;
    while(len--){
 8000b8c:	e011      	b.n	8000bb2 <MRTU_CRC+0x3a>
        uIndex = uchCRCHi ^ *data++ ;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	4053      	eors	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	81bb      	strh	r3, [r7, #12]
        uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
 8000b9e:	89bb      	ldrh	r3, [r7, #12]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <MRTU_CRC+0x60>)
 8000ba2:	5cd2      	ldrb	r2, [r2, r3]
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	4053      	eors	r3, r2
 8000ba8:	73fb      	strb	r3, [r7, #15]
        uchCRCLo = auchCRCLo[uIndex] ;
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <MRTU_CRC+0x64>)
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	73bb      	strb	r3, [r7, #14]
    while(len--){
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	1e5a      	subs	r2, r3, #1
 8000bb6:	70fa      	strb	r2, [r7, #3]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1e8      	bne.n	8000b8e <MRTU_CRC+0x16>
    }
    return (((uint16_t)(uchCRCLo) << 8) | (uint16_t)(uchCRCHi));
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b29b      	uxth	r3, r3
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	0800d41c 	.word	0x0800d41c
 8000bdc:	0800d51c 	.word	0x0800d51c

08000be0 <MRTU_Read>:
void MRTU_Read(uint16_t reg){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MRTU_Read+0x98>)
 8000bec:	89db      	ldrh	r3, [r3, #14]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MRTU_Read+0x9c>)
 8000bf6:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MRTU_Read+0x98>)
 8000bfa:	89db      	ldrh	r3, [r3, #14]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MRTU_Read+0x9c>)
 8000c00:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MRTU_Read+0x98>)
 8000c04:	8a1b      	ldrh	r3, [r3, #16]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MRTU_Read+0x9c>)
 8000c0a:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MRTU_Read+0x98>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MRTU_Read+0x9c>)
 8000c14:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = 0x03;								//код функции
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MRTU_Read+0x9c>)
 8000c18:	2203      	movs	r2, #3
 8000c1a:	711a      	strb	r2, [r3, #4]
	transmit_msg[5] = 2;								//длина пакета
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MRTU_Read+0x9c>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <MRTU_Read+0x98>)
 8000c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MRTU_Read+0x9c>)
 8000c32:	719a      	strb	r2, [r3, #6]
	transmit_msg[7] = (uint8_t)ModbusReg[reg];			//младший
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <MRTU_Read+0x98>)
 8000c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MRTU_Read+0x9c>)
 8000c40:	71da      	strb	r2, [r3, #7]
	uint16_t tmp = MRTU_CRC(&transmit_msg[3], 5);
 8000c42:	2105      	movs	r1, #5
 8000c44:	480e      	ldr	r0, [pc, #56]	; (8000c80 <MRTU_Read+0xa0>)
 8000c46:	f7ff ff97 	bl	8000b78 <MRTU_CRC>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	81fb      	strh	r3, [r7, #14]
	transmit_msg[8] = (uint8_t)tmp;						//CRC
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MRTU_Read+0x9c>)
 8000c54:	721a      	strb	r2, [r3, #8]
	transmit_msg[9] = (uint8_t)(tmp >> 8);				//
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MRTU_Read+0x9c>)
 8000c60:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(&huart2, transmit_msg, 10, 50);
 8000c62:	2332      	movs	r3, #50	; 0x32
 8000c64:	220a      	movs	r2, #10
 8000c66:	4905      	ldr	r1, [pc, #20]	; (8000c7c <MRTU_Read+0x9c>)
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MRTU_Read+0xa4>)
 8000c6a:	f006 fdb8 	bl	80077de <HAL_UART_Transmit>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	200002fc 	.word	0x200002fc
 8000c80:	200002ff 	.word	0x200002ff
 8000c84:	20000680 	.word	0x20000680

08000c88 <MRTU_Write>:
void MRTU_Write(uint16_t reg, uint16_t value){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	80fb      	strh	r3, [r7, #6]
 8000c94:	4613      	mov	r3, r2
 8000c96:	80bb      	strh	r3, [r7, #4]
	static uint8_t transmit_msg[16] = {0};
	ModbusReg[reg] = value;
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4925      	ldr	r1, [pc, #148]	; (8000d30 <MRTU_Write+0xa8>)
 8000c9c:	88ba      	ldrh	r2, [r7, #4]
 8000c9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MRTU_Write+0xa8>)
 8000ca4:	89db      	ldrh	r3, [r3, #14]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MRTU_Write+0xac>)
 8000cae:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MRTU_Write+0xa8>)
 8000cb2:	89db      	ldrh	r3, [r3, #14]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MRTU_Write+0xac>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MRTU_Write+0xa8>)
 8000cbc:	8a1b      	ldrh	r3, [r3, #16]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MRTU_Write+0xac>)
 8000cc2:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MRTU_Write+0xa8>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MRTU_Write+0xac>)
 8000ccc:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = 0x06;								//код функции
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MRTU_Write+0xac>)
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	711a      	strb	r2, [r3, #4]
	transmit_msg[5] = 2;								//длина пакета
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MRTU_Write+0xac>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <MRTU_Write+0xa8>)
 8000cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MRTU_Write+0xac>)
 8000cea:	719a      	strb	r2, [r3, #6]
	transmit_msg[7] = (uint8_t)ModbusReg[reg];			//младший
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <MRTU_Write+0xa8>)
 8000cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MRTU_Write+0xac>)
 8000cf8:	71da      	strb	r2, [r3, #7]
	uint16_t tmp = MRTU_CRC(&transmit_msg[3], 5);
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <MRTU_Write+0xb0>)
 8000cfe:	f7ff ff3b 	bl	8000b78 <MRTU_CRC>
 8000d02:	4603      	mov	r3, r0
 8000d04:	81fb      	strh	r3, [r7, #14]
	transmit_msg[8] = (uint8_t)tmp;						//CRC
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MRTU_Write+0xac>)
 8000d0c:	721a      	strb	r2, [r3, #8]
	transmit_msg[9] = (uint8_t)(tmp >> 8);				//
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MRTU_Write+0xac>)
 8000d18:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(&huart2, transmit_msg, 10, 50);
 8000d1a:	2332      	movs	r3, #50	; 0x32
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	4905      	ldr	r1, [pc, #20]	; (8000d34 <MRTU_Write+0xac>)
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MRTU_Write+0xb4>)
 8000d22:	f006 fd5c 	bl	80077de <HAL_UART_Transmit>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000
 8000d34:	2000030c 	.word	0x2000030c
 8000d38:	2000030f 	.word	0x2000030f
 8000d3c:	20000680 	.word	0x20000680

08000d40 <MRTU_Error>:
void MRTU_Error(uint8_t code, uint8_t func){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MRTU_Error+0x84>)
 8000d52:	89db      	ldrh	r3, [r3, #14]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MRTU_Error+0x88>)
 8000d5c:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MRTU_Error+0x84>)
 8000d60:	89db      	ldrh	r3, [r3, #14]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MRTU_Error+0x88>)
 8000d66:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MRTU_Error+0x84>)
 8000d6a:	8a1b      	ldrh	r3, [r3, #16]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MRTU_Error+0x88>)
 8000d70:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MRTU_Error+0x84>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MRTU_Error+0x88>)
 8000d7a:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = func | 0x80;								//код функции
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MRTU_Error+0x88>)
 8000d86:	711a      	strb	r2, [r3, #4]
	transmit_msg[5] = code;								//длина пакета
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <MRTU_Error+0x88>)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	7153      	strb	r3, [r2, #5]
	uint16_t tmp = MRTU_CRC(&transmit_msg[3], 3);
 8000d8e:	2103      	movs	r1, #3
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <MRTU_Error+0x8c>)
 8000d92:	f7ff fef1 	bl	8000b78 <MRTU_CRC>
 8000d96:	4603      	mov	r3, r0
 8000d98:	81fb      	strh	r3, [r7, #14]
	transmit_msg[6] = (uint8_t)tmp;						//CRC
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MRTU_Error+0x88>)
 8000da0:	719a      	strb	r2, [r3, #6]
	transmit_msg[7] = (uint8_t)(tmp >> 8);				//
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MRTU_Error+0x88>)
 8000dac:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000dae:	2332      	movs	r3, #50	; 0x32
 8000db0:	2208      	movs	r2, #8
 8000db2:	4905      	ldr	r1, [pc, #20]	; (8000dc8 <MRTU_Error+0x88>)
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MRTU_Error+0x90>)
 8000db6:	f006 fd12 	bl	80077de <HAL_UART_Transmit>
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000031c 	.word	0x2000031c
 8000dcc:	2000031f 	.word	0x2000031f
 8000dd0:	20000680 	.word	0x20000680

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Debug_LED2 = RED;
 8000dd8:	4b01      	ldr	r3, [pc, #4]	; (8000de0 <Error_Handler+0xc>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
//  __disable_irq();
  while (1)
 8000dde:	e7fe      	b.n	8000dde <Error_Handler+0xa>
 8000de0:	2000072a 	.word	0x2000072a

08000de4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_RNG_Init+0x20>)
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <MX_RNG_Init+0x24>)
 8000dec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_RNG_Init+0x20>)
 8000df0:	f003 fffc 	bl	8004dec <HAL_RNG_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000dfa:	f7ff ffeb 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000032c 	.word	0x2000032c
 8000e08:	50060800 	.word	0x50060800

08000e0c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_RNG_MspInit+0x38>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10d      	bne.n	8000e3a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_RNG_MspInit+0x3c>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_RNG_MspInit+0x3c>)
 8000e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_RNG_MspInit+0x3c>)
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	50060800 	.word	0x50060800
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e6e:	227f      	movs	r2, #127	; 0x7f
 8000e70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e74:	22ff      	movs	r2, #255	; 0xff
 8000e76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000e8c:	f003 ffd8 	bl	8004e40 <HAL_RTC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000e96:	f7ff ff9d 	bl	8000dd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000eb6:	f004 f84d 	bl	8004f54 <HAL_RTC_SetTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8000ec0:	f7ff ff88 	bl	8000dd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_RTC_Init+0xa8>)
 8000edc:	f004 f8f0 	bl	80050c0 <HAL_RTC_SetDate>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8000ee6:	f7ff ff75 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000033c 	.word	0x2000033c
 8000ef8:	40002800 	.word	0x40002800

08000efc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <HAL_RTC_MspInit+0x24>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d102      	bne.n	8000f14 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_RTC_MspInit+0x28>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40002800 	.word	0x40002800
 8000f24:	42470e3c 	.word	0x42470e3c

08000f28 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <MX_SDIO_SD_Init+0x3c>)
 8000f30:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 48;
 8000f52:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <MX_SDIO_SD_Init+0x38>)
 8000f54:	2230      	movs	r2, #48	; 0x30
 8000f56:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_SD_MspInit+0xe4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d15b      	bne.n	8001042 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a28      	ldr	r2, [pc, #160]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a21      	ldr	r2, [pc, #132]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_SD_MspInit+0xe8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fde:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4816      	ldr	r0, [pc, #88]	; (8001054 <HAL_SD_MspInit+0xec>)
 8000ffc:	f001 fbe4 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001012:	230c      	movs	r3, #12
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <HAL_SD_MspInit+0xec>)
 800101e:	f001 fbd3 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001022:	2304      	movs	r3, #4
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102a:	2301      	movs	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001032:	230c      	movs	r3, #12
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <HAL_SD_MspInit+0xf0>)
 800103e:	f001 fbc3 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40023800 	.word	0x40023800
 8001054:	40020800 	.word	0x40020800
 8001058:	40020c00 	.word	0x40020c00

0800105c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_SPI1_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001090:	2220      	movs	r2, #32
 8001092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010ae:	f005 faa2 	bl	80065f6 <HAL_SPI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010b8:	f7ff fe8c 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200003e0 	.word	0x200003e0
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_SPI2_Init+0x64>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_SPI2_Init+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI2_Init+0x64>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI2_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_SPI2_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI2_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI2_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI2_Init+0x64>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI2_Init+0x64>)
 80010fc:	2220      	movs	r2, #32
 80010fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI2_Init+0x64>)
 8001114:	220a      	movs	r2, #10
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_SPI2_Init+0x64>)
 800111a:	f005 fa6c 	bl	80065f6 <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001124:	f7ff fe56 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000438 	.word	0x20000438
 8001130:	40003800 	.word	0x40003800

08001134 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI3_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_SPI3_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI3_Init+0x64>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI3_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI3_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI3_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI3_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI3_Init+0x64>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI3_Init+0x64>)
 8001168:	2218      	movs	r2, #24
 800116a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI3_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI3_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI3_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI3_Init+0x64>)
 8001180:	220a      	movs	r2, #10
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI3_Init+0x64>)
 8001186:	f005 fa36 	bl	80065f6 <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001190:	f7ff fe20 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000490 	.word	0x20000490
 800119c:	40003c00 	.word	0x40003c00

080011a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <HAL_SPI_MspInit+0x244>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d15b      	bne.n	800127a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a87      	ldr	r2, [pc, #540]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80011cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b85      	ldr	r3, [pc, #532]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011da:	623b      	str	r3, [r7, #32]
 80011dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a80      	ldr	r2, [pc, #512]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120a:	2305      	movs	r3, #5
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	4875      	ldr	r0, [pc, #468]	; (80013ec <HAL_SPI_MspInit+0x24c>)
 8001216:	f001 fad7 	bl	80027c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800121a:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 800121c:	4a75      	ldr	r2, [pc, #468]	; (80013f4 <HAL_SPI_MspInit+0x254>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001222:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001226:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001228:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123c:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001248:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800124e:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001250:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001254:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001256:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800125c:	4864      	ldr	r0, [pc, #400]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 800125e:	f000 fe57 	bl	8001f10 <HAL_DMA_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001268:	f7ff fdb4 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001270:	649a      	str	r2, [r3, #72]	; 0x48
 8001272:	4a5f      	ldr	r2, [pc, #380]	; (80013f0 <HAL_SPI_MspInit+0x250>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001278:	e0af      	b.n	80013da <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a5e      	ldr	r2, [pc, #376]	; (80013f8 <HAL_SPI_MspInit+0x258>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d179      	bne.n	8001378 <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d8:	2308      	movs	r3, #8
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e8:	2305      	movs	r3, #5
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4842      	ldr	r0, [pc, #264]	; (80013fc <HAL_SPI_MspInit+0x25c>)
 80012f4:	f001 fa68 	bl	80027c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800130a:	2305      	movs	r3, #5
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	483a      	ldr	r0, [pc, #232]	; (8001400 <HAL_SPI_MspInit+0x260>)
 8001316:	f001 fa57 	bl	80027c8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_SPI_MspInit+0x264>)
 800131c:	4a3a      	ldr	r2, [pc, #232]	; (8001408 <HAL_SPI_MspInit+0x268>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001320:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001328:	2240      	movs	r2, #64	; 0x40
 800132a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_SPI_MspInit+0x264>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_SPI_MspInit+0x264>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_SPI_MspInit+0x264>)
 800134e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001352:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800135a:	482a      	ldr	r0, [pc, #168]	; (8001404 <HAL_SPI_MspInit+0x264>)
 800135c:	f000 fdd8 	bl	8001f10 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 8001366:	f7ff fd35 	bl	8000dd4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a25      	ldr	r2, [pc, #148]	; (8001404 <HAL_SPI_MspInit+0x264>)
 800136e:	649a      	str	r2, [r3, #72]	; 0x48
 8001370:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_SPI_MspInit+0x264>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001376:	e030      	b.n	80013da <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a23      	ldr	r2, [pc, #140]	; (800140c <HAL_SPI_MspInit+0x26c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 800138c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_SPI_MspInit+0x248>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013ba:	2338      	movs	r3, #56	; 0x38
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ca:	2306      	movs	r3, #6
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <HAL_SPI_MspInit+0x260>)
 80013d6:	f001 f9f7 	bl	80027c8 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	; 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40013000 	.word	0x40013000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	200004e8 	.word	0x200004e8
 80013f4:	40026458 	.word	0x40026458
 80013f8:	40003800 	.word	0x40003800
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020400 	.word	0x40020400
 8001404:	20000548 	.word	0x20000548
 8001408:	40026070 	.word	0x40026070
 800140c:	40003c00 	.word	0x40003c00

08001410 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_SPI_MspDeInit+0x8c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10f      	bne.n	8001442 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_SPI_MspDeInit+0x90>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <HAL_SPI_MspDeInit+0x90>)
 8001428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	481c      	ldr	r0, [pc, #112]	; (80014a4 <HAL_SPI_MspDeInit+0x94>)
 8001432:	f001 fb67 	bl	8002b04 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmatx);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fe16 	bl	800206c <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001440:	e028      	b.n	8001494 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_SPI_MspDeInit+0x98>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d114      	bne.n	8001476 <HAL_SPI_MspDeInit+0x66>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_SPI_MspDeInit+0x90>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_SPI_MspDeInit+0x90>)
 8001452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8001458:	2108      	movs	r1, #8
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <HAL_SPI_MspDeInit+0x9c>)
 800145c:	f001 fb52 	bl	8002b04 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	4812      	ldr	r0, [pc, #72]	; (80014b0 <HAL_SPI_MspDeInit+0xa0>)
 8001466:	f001 fb4d 	bl	8002b04 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fdfc 	bl	800206c <HAL_DMA_DeInit>
}
 8001474:	e00e      	b.n	8001494 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_SPI_MspDeInit+0xa4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d109      	bne.n	8001494 <HAL_SPI_MspDeInit+0x84>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_SPI_MspDeInit+0x90>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_SPI_MspDeInit+0x90>)
 8001486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 800148c:	2138      	movs	r1, #56	; 0x38
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <HAL_SPI_MspDeInit+0xa0>)
 8001490:	f001 fb38 	bl	8002b04 <HAL_GPIO_DeInit>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40013000 	.word	0x40013000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40003800 	.word	0x40003800
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40003c00 	.word	0x40003c00

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_MspInit+0x48>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_MspInit+0x48>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_MspInit+0x48>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_MspInit+0x48>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_MspInit+0x48>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_MspInit+0x48>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40023800 	.word	0x40023800

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f00a fff9 	bl	800c540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA1_Stream4_IRQHandler+0x10>)
 800155a:	f000 fecf 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000548 	.word	0x20000548

08001568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM3_IRQHandler+0x10>)
 800156e:	f005 fbfb 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200005ac 	.word	0x200005ac

0800157c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <TIM4_IRQHandler+0x10>)
 8001582:	f005 fbf1 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200005f4 	.word	0x200005f4

08001590 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <USART2_IRQHandler+0x10>)
 8001596:	f006 f9e5 	bl	8007964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000680 	.word	0x20000680

080015a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DMA2_Stream0_IRQHandler+0x10>)
 80015aa:	f000 fea7 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000234 	.word	0x20000234

080015b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA2_Stream3_IRQHandler+0x10>)
 80015be:	f000 fe9d 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200004e8 	.word	0x200004e8

080015cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <OTG_FS_IRQHandler+0x10>)
 80015d2:	f001 fe48 	bl	8003266 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20003364 	.word	0x20003364

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f00b fe62 	bl	800d2d8 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20020000 	.word	0x20020000
 8001640:	00000400 	.word	0x00000400
 8001644:	200005a8 	.word	0x200005a8
 8001648:	200038b0 	.word	0x200038b0

0800164c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <MX_TIM3_Init+0xd8>)
 800167c:	4a2d      	ldr	r2, [pc, #180]	; (8001734 <MX_TIM3_Init+0xdc>)
 800167e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001682:	2230      	movs	r2, #48	; 0x30
 8001684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <MX_TIM3_Init+0xd8>)
 800168e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <MX_TIM3_Init+0xd8>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016a0:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016a2:	f005 fa49 	bl	8006b38 <HAL_TIM_PWM_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016ac:	f7ff fb92 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4619      	mov	r1, r3
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016c0:	f005 ffb4 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016ca:	f7ff fb83 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ce:	2360      	movs	r3, #96	; 0x60
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016e6:	f005 fc47 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016f0:	f7ff fb70 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2208      	movs	r2, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016fc:	f005 fc3c 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001706:	f7ff fb65 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	220c      	movs	r2, #12
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001712:	f005 fc31 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800171c:	f7ff fb5a 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001722:	f000 f8c9 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200005ac 	.word	0x200005ac
 8001734:	40000400 	.word	0x40000400

08001738 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <MX_TIM4_Init+0xec>)
 800175c:	4a32      	ldr	r2, [pc, #200]	; (8001828 <MX_TIM4_Init+0xf0>)
 800175e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <MX_TIM4_Init+0xec>)
 8001762:	2230      	movs	r2, #48	; 0x30
 8001764:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <MX_TIM4_Init+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <MX_TIM4_Init+0xec>)
 800176e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001772:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <MX_TIM4_Init+0xec>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <MX_TIM4_Init+0xec>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001780:	4828      	ldr	r0, [pc, #160]	; (8001824 <MX_TIM4_Init+0xec>)
 8001782:	f005 f9d9 	bl	8006b38 <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800178c:	f7ff fb22 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	4619      	mov	r1, r3
 800179e:	4821      	ldr	r0, [pc, #132]	; (8001824 <MX_TIM4_Init+0xec>)
 80017a0:	f005 ff44 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017aa:	f7ff fb13 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4817      	ldr	r0, [pc, #92]	; (8001824 <MX_TIM4_Init+0xec>)
 80017c6:	f005 fbd7 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017d0:	f7ff fb00 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2204      	movs	r2, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <MX_TIM4_Init+0xec>)
 80017dc:	f005 fbcc 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017e6:	f7ff faf5 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2208      	movs	r2, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM4_Init+0xec>)
 80017f2:	f005 fbc1 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80017fc:	f7ff faea 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	220c      	movs	r2, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_TIM4_Init+0xec>)
 8001808:	f005 fbb6 	bl	8006f78 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001812:	f7ff fadf 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_TIM4_Init+0xec>)
 8001818:	f000 f84e 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200005f4 	.word	0x200005f4
 8001828:	40000800 	.word	0x40000800

0800182c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_TIM_PWM_MspInit+0x80>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d116      	bne.n	800186c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_TIM_PWM_MspInit+0x84>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <HAL_TIM_PWM_MspInit+0x84>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_TIM_PWM_MspInit+0x84>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	201d      	movs	r0, #29
 8001860:	f000 fb03 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001864:	201d      	movs	r0, #29
 8001866:	f000 fb1c 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800186a:	e01a      	b.n	80018a2 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM4)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_TIM_PWM_MspInit+0x88>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d115      	bne.n	80018a2 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_TIM_PWM_MspInit+0x84>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <HAL_TIM_PWM_MspInit+0x84>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_TIM_PWM_MspInit+0x84>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	201e      	movs	r0, #30
 8001898:	f000 fae7 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800189c:	201e      	movs	r0, #30
 800189e:	f000 fb00 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40000800 	.word	0x40000800

080018b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a33      	ldr	r2, [pc, #204]	; (80019a4 <HAL_TIM_MspPostInit+0xec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d13c      	bne.n	8001954 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Pout7_Pin;
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001922:	2302      	movs	r3, #2
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pout7_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	481f      	ldr	r0, [pc, #124]	; (80019ac <HAL_TIM_MspPostInit+0xf4>)
 800192e:	f000 ff4b 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pout5_Pin|Pout6_Pin;
 8001932:	2303      	movs	r3, #3
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001942:	2302      	movs	r3, #2
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4818      	ldr	r0, [pc, #96]	; (80019b0 <HAL_TIM_MspPostInit+0xf8>)
 800194e:	f000 ff3b 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001952:	e023      	b.n	800199c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_TIM_MspPostInit+0xfc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d11e      	bne.n	800199c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_TIM_MspPostInit+0xf0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Pout1_Pin|Pout2_Pin|Pout3_Pin|Pout4_Pin;
 800197a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800198c:	2302      	movs	r3, #2
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <HAL_TIM_MspPostInit+0xf8>)
 8001998:	f000 ff16 	bl	80027c8 <HAL_GPIO_Init>
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40000800 	.word	0x40000800

080019b8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_UART4_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_UART4_Init+0x4c>)
 80019f0:	f005 fea8 	bl	8007744 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80019fa:	f7ff f9eb 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000063c 	.word	0x2000063c
 8001a08:	40004c00 	.word	0x40004c00

08001a0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_USART2_UART_Init+0x50>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f005 fe7e 	bl	8007744 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a4e:	f7ff f9c1 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000680 	.word	0x20000680
 8001a5c:	40004400 	.word	0x40004400

08001a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a36      	ldr	r2, [pc, #216]	; (8001b58 <HAL_UART_MspInit+0xf8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d12c      	bne.n	8001adc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Tx_Pin|Rx_Pin;
 8001aba:	2303      	movs	r3, #3
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001aca:	2308      	movs	r3, #8
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4822      	ldr	r0, [pc, #136]	; (8001b60 <HAL_UART_MspInit+0x100>)
 8001ad6:	f000 fe77 	bl	80027c8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ada:	e038      	b.n	8001b4e <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_UART_MspInit+0x104>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d133      	bne.n	8001b4e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_UART_MspInit+0xfc>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b1e:	230c      	movs	r3, #12
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_UART_MspInit+0x100>)
 8001b3a:	f000 fe45 	bl	80027c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2026      	movs	r0, #38	; 0x26
 8001b44:	f000 f991 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b48:	2026      	movs	r0, #38	; 0x26
 8001b4a:	f000 f9aa 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40004c00 	.word	0x40004c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40004400 	.word	0x40004400

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b6e:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b84:	4c0b      	ldr	r4, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b92:	f7ff fd5b 	bl	800164c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f00b fba5 	bl	800d2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7fe fe65 	bl	8000868 <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001bac:	0800d660 	.word	0x0800d660
  ldr r2, =_sbss
 8001bb0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001bb4:	200038ac 	.word	0x200038ac

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_Init+0x40>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_Init+0x40>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_Init+0x40>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f935 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	2004      	movs	r0, #4
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fc62 	bl	80014b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f94d 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f915 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000040 	.word	0x20000040
 8001c58:	20000048 	.word	0x20000048
 8001c5c:	20000044 	.word	0x20000044

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	200006c4 	.word	0x200006c4

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffe0 	bl	8001c60 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000048 	.word	0x20000048

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <__NVIC_EnableIRQ+0x34>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff42 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff35 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e00e      	b.n	8001f06 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	795b      	ldrb	r3, [r3, #5]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7fe faf7 	bl	80004ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fea0 	bl	8001c60 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fe87 	bl	8001c60 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fb5d 	bl	80026d4 <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fb16 	bl	800266c <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e050      	b.n	8002120 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d101      	bne.n	800208e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e048      	b.n	8002120 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2221      	movs	r2, #33	; 0x21
 80020cc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 facc 	bl	800266c <DMA_CalcBaseAndBitshift>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	223f      	movs	r2, #63	; 0x3f
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_DMA_Start_IT+0x26>
 800214a:	2302      	movs	r3, #2
 800214c:	e040      	b.n	80021d0 <HAL_DMA_Start_IT+0xa8>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d12f      	bne.n	80021c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa4a 	bl	8002610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	223f      	movs	r2, #63	; 0x3f
 8002182:	409a      	lsls	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0216 	orr.w	r2, r2, #22
 8002196:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0208 	orr.w	r2, r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e005      	b.n	80021ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021e6:	f7ff fd3b 	bl	8001c60 <HAL_GetTick>
 80021ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e052      	b.n	80022b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0216 	bic.w	r2, r2, #22
 8002218:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002228:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <HAL_DMA_Abort+0x62>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0208 	bic.w	r2, r2, #8
 8002248:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225a:	e013      	b.n	8002284 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225c:	f7ff fd00 	bl	8001c60 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b05      	cmp	r3, #5
 8002268:	d90c      	bls.n	8002284 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2203      	movs	r2, #3
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e015      	b.n	80022b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1e4      	bne.n	800225c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	223f      	movs	r2, #63	; 0x3f
 8002298:	409a      	lsls	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00c      	b.n	80022f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002308:	4b8e      	ldr	r3, [pc, #568]	; (8002544 <HAL_DMA_IRQHandler+0x248>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a8e      	ldr	r2, [pc, #568]	; (8002548 <HAL_DMA_IRQHandler+0x24c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0204 	bic.w	r2, r2, #4
 800234e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	2208      	movs	r2, #8
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2201      	movs	r2, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2201      	movs	r2, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f043 0202 	orr.w	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2204      	movs	r2, #4
 80023a4:	409a      	lsls	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d012      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2204      	movs	r2, #4
 80023c2:	409a      	lsls	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2210      	movs	r2, #16
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d043      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d03c      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2210      	movs	r2, #16
 80023f8:	409a      	lsls	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d018      	beq.n	800243e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d024      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
 800242a:	e01f      	b.n	800246c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e016      	b.n	800246c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0208 	bic.w	r2, r2, #8
 800245a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2220      	movs	r2, #32
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 808f 	beq.w	800259c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8087 	beq.w	800259c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2220      	movs	r2, #32
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d136      	bne.n	8002514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0216 	bic.w	r2, r2, #22
 80024b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x1da>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	223f      	movs	r2, #63	; 0x3f
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	2b00      	cmp	r3, #0
 8002508:	d07e      	beq.n	8002608 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
        }
        return;
 8002512:	e079      	b.n	8002608 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01d      	beq.n	800255e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	2b00      	cmp	r3, #0
 8002536:	d031      	beq.n	800259c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e02c      	b.n	800259c <HAL_DMA_IRQHandler+0x2a0>
 8002542:	bf00      	nop
 8002544:	20000040 	.word	0x20000040
 8002548:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d023      	beq.n	800259c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
 800255c:	e01e      	b.n	800259c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0210 	bic.w	r2, r2, #16
 800257a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d032      	beq.n	800260a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d022      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2205      	movs	r2, #5
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d307      	bcc.n	80025e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f2      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x2cc>
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
 8002606:	e000      	b.n	800260a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002608:	bf00      	nop
    }
  }
}
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800262c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d108      	bne.n	8002650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800264e:	e007      	b.n	8002660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	60da      	str	r2, [r3, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	3b10      	subs	r3, #16
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <DMA_CalcBaseAndBitshift+0x60>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <DMA_CalcBaseAndBitshift+0x64>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d909      	bls.n	80026ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	1d1a      	adds	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	; 0x58
 80026ac:	e007      	b.n	80026be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	aaaaaaab 	.word	0xaaaaaaab
 80026d0:	0800d634 	.word	0x0800d634

080026d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11f      	bne.n	800272e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d856      	bhi.n	80027a2 <DMA_CheckFifoParam+0xce>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <DMA_CheckFifoParam+0x28>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	0800271f 	.word	0x0800271f
 8002704:	0800270d 	.word	0x0800270d
 8002708:	080027a3 	.word	0x080027a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d046      	beq.n	80027a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e043      	b.n	80027a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002726:	d140      	bne.n	80027aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272c:	e03d      	b.n	80027aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	d121      	bne.n	800277c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d837      	bhi.n	80027ae <DMA_CheckFifoParam+0xda>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <DMA_CheckFifoParam+0x70>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002755 	.word	0x08002755
 8002748:	0800275b 	.word	0x0800275b
 800274c:	08002755 	.word	0x08002755
 8002750:	0800276d 	.word	0x0800276d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e030      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d025      	beq.n	80027b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276a:	e022      	b.n	80027b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002774:	d11f      	bne.n	80027b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800277a:	e01c      	b.n	80027b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d903      	bls.n	800278a <DMA_CheckFifoParam+0xb6>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d003      	beq.n	8002790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002788:	e018      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      break;
 800278e:	e015      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e00b      	b.n	80027ba <DMA_CheckFifoParam+0xe6>
      break;
 80027a2:	bf00      	nop
 80027a4:	e00a      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e008      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e006      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
 80027b0:	e004      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027b2:	bf00      	nop
 80027b4:	e002      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;   
 80027b6:	bf00      	nop
 80027b8:	e000      	b.n	80027bc <DMA_CheckFifoParam+0xe8>
      break;
 80027ba:	bf00      	nop
    }
  } 
  
  return status; 
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d6:	e16f      	b.n	8002ab8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8161 	beq.w	8002ab2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d005      	beq.n	8002808 <HAL_GPIO_Init+0x40>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d130      	bne.n	800286a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283e:	2201      	movs	r2, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0201 	and.w	r2, r3, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b03      	cmp	r3, #3
 8002874:	d017      	beq.n	80028a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d123      	bne.n	80028fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	6939      	ldr	r1, [r7, #16]
 80028f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0203 	and.w	r2, r3, #3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80bb 	beq.w	8002ab2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	4a63      	ldr	r2, [pc, #396]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 8002946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294a:	6453      	str	r3, [r2, #68]	; 0x44
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002958:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x314>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d031      	beq.n	80029e8 <HAL_GPIO_Init+0x220>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_GPIO_Init+0x318>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d02b      	beq.n	80029e4 <HAL_GPIO_Init+0x21c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_GPIO_Init+0x31c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d025      	beq.n	80029e0 <HAL_GPIO_Init+0x218>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_GPIO_Init+0x320>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d01f      	beq.n	80029dc <HAL_GPIO_Init+0x214>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a53      	ldr	r2, [pc, #332]	; (8002aec <HAL_GPIO_Init+0x324>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d019      	beq.n	80029d8 <HAL_GPIO_Init+0x210>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_GPIO_Init+0x328>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <HAL_GPIO_Init+0x20c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_GPIO_Init+0x32c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00d      	beq.n	80029d0 <HAL_GPIO_Init+0x208>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_GPIO_Init+0x330>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <HAL_GPIO_Init+0x204>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a4f      	ldr	r2, [pc, #316]	; (8002afc <HAL_GPIO_Init+0x334>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_GPIO_Init+0x200>
 80029c4:	2308      	movs	r3, #8
 80029c6:	e010      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029c8:	2309      	movs	r3, #9
 80029ca:	e00e      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029cc:	2307      	movs	r3, #7
 80029ce:	e00c      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029d0:	2306      	movs	r3, #6
 80029d2:	e00a      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029d4:	2305      	movs	r3, #5
 80029d6:	e008      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029d8:	2304      	movs	r3, #4
 80029da:	e006      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029dc:	2303      	movs	r3, #3
 80029de:	e004      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e002      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_GPIO_Init+0x222>
 80029e8:	2300      	movs	r3, #0
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	f002 0203 	and.w	r2, r2, #3
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	4093      	lsls	r3, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029fc:	4936      	ldr	r1, [pc, #216]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_GPIO_Init+0x338>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f ae88 	bne.w	80027d8 <HAL_GPIO_Init+0x10>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40021400 	.word	0x40021400
 8002af4:	40021800 	.word	0x40021800
 8002af8:	40021c00 	.word	0x40021c00
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b12:	e0d1      	b.n	8002cb8 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b14:	2201      	movs	r2, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80c4 	beq.w	8002cb2 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b2a:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <HAL_GPIO_DeInit+0x1d0>)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	3302      	adds	r3, #2
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a62      	ldr	r2, [pc, #392]	; (8002cd8 <HAL_GPIO_DeInit+0x1d4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d031      	beq.n	8002bb8 <HAL_GPIO_DeInit+0xb4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a61      	ldr	r2, [pc, #388]	; (8002cdc <HAL_GPIO_DeInit+0x1d8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d02b      	beq.n	8002bb4 <HAL_GPIO_DeInit+0xb0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a60      	ldr	r2, [pc, #384]	; (8002ce0 <HAL_GPIO_DeInit+0x1dc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d025      	beq.n	8002bb0 <HAL_GPIO_DeInit+0xac>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a5f      	ldr	r2, [pc, #380]	; (8002ce4 <HAL_GPIO_DeInit+0x1e0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d01f      	beq.n	8002bac <HAL_GPIO_DeInit+0xa8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_GPIO_DeInit+0x1e4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d019      	beq.n	8002ba8 <HAL_GPIO_DeInit+0xa4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <HAL_GPIO_DeInit+0x1e8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d013      	beq.n	8002ba4 <HAL_GPIO_DeInit+0xa0>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <HAL_GPIO_DeInit+0x1ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00d      	beq.n	8002ba0 <HAL_GPIO_DeInit+0x9c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a5b      	ldr	r2, [pc, #364]	; (8002cf4 <HAL_GPIO_DeInit+0x1f0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <HAL_GPIO_DeInit+0x98>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_GPIO_DeInit+0x1f4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_GPIO_DeInit+0x94>
 8002b94:	2308      	movs	r3, #8
 8002b96:	e010      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002b98:	2309      	movs	r3, #9
 8002b9a:	e00e      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	e00c      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002ba0:	2306      	movs	r3, #6
 8002ba2:	e00a      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	e008      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e006      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002bac:	2303      	movs	r3, #3
 8002bae:	e004      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_GPIO_DeInit+0xb6>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	fa03 f202 	lsl.w	r2, r3, r2
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d132      	bne.n	8002c32 <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4949      	ldr	r1, [pc, #292]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bda:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4946      	ldr	r1, [pc, #280]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002be8:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4942      	ldr	r1, [pc, #264]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	493f      	ldr	r1, [pc, #252]	; (8002cfc <HAL_GPIO_DeInit+0x1f8>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <HAL_GPIO_DeInit+0x1d0>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	482b      	ldr	r0, [pc, #172]	; (8002cd4 <HAL_GPIO_DeInit+0x1d0>)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	08d2      	lsrs	r2, r2, #3
 8002c68:	4019      	ands	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af27 	bne.w	8002b14 <HAL_GPIO_DeInit+0x10>
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40021400 	.word	0x40021400
 8002cf0:	40021800 	.word	0x40021800
 8002cf4:	40021c00 	.word	0x40021c00
 8002cf8:	40022000 	.word	0x40022000
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e001      	b.n	8002d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3e:	787b      	ldrb	r3, [r7, #1]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d44:	887a      	ldrh	r2, [r7, #2]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d4a:	e003      	b.n	8002d54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	041a      	lsls	r2, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	619a      	str	r2, [r3, #24]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e12b      	b.n	8002fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fd26 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f001 fed8 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a81      	ldr	r2, [pc, #516]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d807      	bhi.n	8002de4 <HAL_I2C_Init+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a80      	ldr	r2, [pc, #512]	; (8002fd8 <HAL_I2C_Init+0x278>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e006      	b.n	8002df2 <HAL_I2C_Init+0x92>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a7d      	ldr	r2, [pc, #500]	; (8002fdc <HAL_I2C_Init+0x27c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0e7      	b.n	8002fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a78      	ldr	r2, [pc, #480]	; (8002fe0 <HAL_I2C_Init+0x280>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a6a      	ldr	r2, [pc, #424]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d802      	bhi.n	8002e34 <HAL_I2C_Init+0xd4>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e009      	b.n	8002e48 <HAL_I2C_Init+0xe8>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <HAL_I2C_Init+0x284>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	3301      	adds	r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	495c      	ldr	r1, [pc, #368]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d819      	bhi.n	8002e9c <HAL_I2C_Init+0x13c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e59      	subs	r1, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_I2C_Init+0x138>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1e59      	subs	r1, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e96:	e051      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e04f      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <HAL_I2C_Init+0x168>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e58      	subs	r0, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e012      	b.n	8002eee <HAL_I2C_Init+0x18e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	0099      	lsls	r1, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Init+0x196>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e022      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10e      	bne.n	8002f1c <HAL_I2C_Init+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e58      	subs	r0, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	440b      	add	r3, r1
 8002f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	e00f      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	6809      	ldr	r1, [r1, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6911      	ldr	r1, [r2, #16]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	000186a0 	.word	0x000186a0
 8002fd8:	001e847f 	.word	0x001e847f
 8002fdc:	003d08ff 	.word	0x003d08ff
 8002fe0:	431bde83 	.word	0x431bde83
 8002fe4:	10624dd3 	.word	0x10624dd3

08002fe8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fea:	b08f      	sub	sp, #60	; 0x3c
 8002fec:	af0a      	add	r7, sp, #40	; 0x28
 8002fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e10f      	b.n	800321a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f009 fd7f 	bl	800cb18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2203      	movs	r2, #3
 800301e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f005 ff8b 	bl	8008f54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	687e      	ldr	r6, [r7, #4]
 8003046:	466d      	mov	r5, sp
 8003048:	f106 0410 	add.w	r4, r6, #16
 800304c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003058:	e885 0003 	stmia.w	r5, {r0, r1}
 800305c:	1d33      	adds	r3, r6, #4
 800305e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f005 fe6d 	bl	8008d40 <USB_CoreInit>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0d0      	b.n	800321a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f005 ff78 	bl	8008f74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	e04a      	b.n	8003120 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	333d      	adds	r3, #61	; 0x3d
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	333c      	adds	r3, #60	; 0x3c
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	b298      	uxth	r0, r3
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3342      	adds	r3, #66	; 0x42
 80030c6:	4602      	mov	r2, r0
 80030c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	333f      	adds	r3, #63	; 0x3f
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3344      	adds	r3, #68	; 0x44
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3348      	adds	r3, #72	; 0x48
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3350      	adds	r3, #80	; 0x50
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	3301      	adds	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d3af      	bcc.n	800308a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e044      	b.n	80031ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3b5      	bcc.n	8003130 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	687e      	ldr	r6, [r7, #4]
 80031cc:	466d      	mov	r5, sp
 80031ce:	f106 0410 	add.w	r4, r6, #16
 80031d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031de:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e2:	1d33      	adds	r3, r6, #4
 80031e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	f005 ff10 	bl	800900c <USB_DevInit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00d      	b.n	800321a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f006 ff81 	bl	800a11a <USB_DevDisconnect>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003222 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_PCD_Start+0x16>
 8003234:	2302      	movs	r3, #2
 8003236:	e012      	b.n	800325e <HAL_PCD_Start+0x3c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f005 fe75 	bl	8008f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f006 ff43 	bl	800a0da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b08d      	sub	sp, #52	; 0x34
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f006 fffa 	bl	800a276 <USB_GetMode>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 838f 	bne.w	80039a8 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f006 ff63 	bl	800a15a <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8385 	beq.w	80039a6 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f006 ff5a 	bl	800a15a <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d107      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f002 0202 	and.w	r2, r2, #2
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f006 ff48 	bl	800a15a <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d161      	bne.n	8003398 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0210 	bic.w	r2, r2, #16
 80032e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	0c5b      	lsrs	r3, r3, #17
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	2b02      	cmp	r3, #2
 800330e:	d124      	bne.n	800335a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d035      	beq.n	8003388 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6a38      	ldr	r0, [r7, #32]
 8003330:	f006 fd85 	bl	8009e3e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003340:	441a      	add	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003352:	441a      	add	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	619a      	str	r2, [r3, #24]
 8003358:	e016      	b.n	8003388 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	0c5b      	lsrs	r3, r3, #17
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	2b06      	cmp	r3, #6
 8003364:	d110      	bne.n	8003388 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800336c:	2208      	movs	r2, #8
 800336e:	4619      	mov	r1, r3
 8003370:	6a38      	ldr	r0, [r7, #32]
 8003372:	f006 fd64 	bl	8009e3e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003382:	441a      	add	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0210 	orr.w	r2, r2, #16
 8003396:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f006 fedc 	bl	800a15a <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ac:	d16e      	bne.n	800348c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f006 fee1 	bl	800a17e <USB_ReadDevAllOutEpInterrupt>
 80033bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033be:	e062      	b.n	8003486 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d057      	beq.n	800347a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f006 ff04 	bl	800a1e2 <USB_ReadDevOutEPInterrupt>
 80033da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fda2 	bl	8003f44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	2308      	movs	r3, #8
 800341a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800341c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fe9c 	bl	800415c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	2310      	movs	r3, #16
 800343e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	2320      	movs	r3, #32
 800345a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003478:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	3301      	adds	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d199      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f006 fe62 	bl	800a15a <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a0:	f040 80c0 	bne.w	8003624 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f006 fe81 	bl	800a1b0 <USB_ReadDevAllInEpInterrupt>
 80034ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034b4:	e0b2      	b.n	800361c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a7 	beq.w	8003610 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f006 fea5 	bl	800a21c <USB_ReadDevInEPInterrupt>
 80034d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d057      	beq.n	800358e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69f9      	ldr	r1, [r7, #28]
 80034fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034fe:	4013      	ands	r3, r2
 8003500:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	461a      	mov	r2, r3
 8003510:	2301      	movs	r3, #1
 8003512:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d132      	bne.n	8003582 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3348      	adds	r3, #72	; 0x48
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4403      	add	r3, r0
 800353c:	3344      	adds	r3, #68	; 0x44
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4419      	add	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4403      	add	r3, r0
 8003550:	3348      	adds	r3, #72	; 0x48
 8003552:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d113      	bne.n	8003582 <HAL_PCD_IRQHandler+0x31c>
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3350      	adds	r3, #80	; 0x50
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800357a:	461a      	mov	r2, r3
 800357c:	2101      	movs	r1, #1
 800357e:	f006 fea9 	bl	800a2d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f009 fb54 	bl	800cc36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	461a      	mov	r2, r3
 80035a6:	2308      	movs	r3, #8
 80035a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c0:	461a      	mov	r2, r3
 80035c2:	2310      	movs	r3, #16
 80035c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	2340      	movs	r3, #64	; 0x40
 80035e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f8:	461a      	mov	r2, r3
 80035fa:	2302      	movs	r3, #2
 80035fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fc0c 	bl	8003e28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	3301      	adds	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	f47f af49 	bne.w	80034b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f006 fd96 	bl	800a15a <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003638:	d114      	bne.n	8003664 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f009 fb68 	bl	800cd24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f006 fd76 	bl	800a15a <USB_ReadInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003678:	d112      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d102      	bne.n	8003690 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f009 fb24 	bl	800ccd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800369e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f006 fd58 	bl	800a15a <USB_ReadInterrupts>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b4:	f040 80c7 	bne.w	8003846 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2110      	movs	r1, #16
 80036d2:	4618      	mov	r0, r3
 80036d4:	f005 fdfe 	bl	80092d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036dc:	e056      	b.n	800378c <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ea:	461a      	mov	r2, r3
 80036ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800370c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003710:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	440a      	add	r2, r1
 8003728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800372c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003730:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	461a      	mov	r2, r3
 8003740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003744:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003784:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	3301      	adds	r3, #1
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003792:	429a      	cmp	r2, r3
 8003794:	d3a3      	bcc.n	80036de <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c2:	f043 030b 	orr.w	r3, r3, #11
 80037c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d8:	f043 030b 	orr.w	r3, r3, #11
 80037dc:	6453      	str	r3, [r2, #68]	; 0x44
 80037de:	e015      	b.n	800380c <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003806:	f043 030b 	orr.w	r3, r3, #11
 800380a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800381e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003830:	461a      	mov	r2, r3
 8003832:	f006 fd4f 	bl	800a2d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f006 fc85 	bl	800a15a <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	d124      	bne.n	80038a6 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f006 fd15 	bl	800a290 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f005 fd8e 	bl	800938c <USB_GetDevSpeed>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681c      	ldr	r4, [r3, #0]
 800387c:	f001 f972 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8003880:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	4620      	mov	r0, r4
 800388c:	f005 fab0 	bl	8008df0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f009 f9f8 	bl	800cc86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f006 fc55 	bl	800a15a <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d10a      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f009 f9d5 	bl	800cc6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f002 0208 	and.w	r2, r2, #8
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f006 fc40 	bl	800a15a <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e4:	d10f      	bne.n	8003906 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f009 fa37 	bl	800cd64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f006 fc25 	bl	800a15a <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391a:	d10f      	bne.n	800393c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f009 fa0a 	bl	800cd40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f006 fc0a 	bl	800a15a <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d10a      	bne.n	8003968 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f009 fa18 	bl	800cd88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f006 fbf4 	bl	800a15a <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d115      	bne.n	80039a8 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f009 fa08 	bl	800cda4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	e000      	b.n	80039a8 <HAL_PCD_IRQHandler+0x742>
      return;
 80039a6:	bf00      	nop
    }
  }
}
 80039a8:	3734      	adds	r7, #52	; 0x34
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}

080039ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_PCD_SetAddress+0x1a>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e013      	b.n	80039f0 <HAL_PCD_SetAddress+0x42>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f006 fb55 	bl	800a090 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	70fb      	strb	r3, [r7, #3]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	803b      	strh	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da0f      	bge.n	8003a3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	3338      	adds	r3, #56	; 0x38
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	3304      	adds	r3, #4
 8003a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	705a      	strb	r2, [r3, #1]
 8003a3c:	e00f      	b.n	8003a5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	f003 020f 	and.w	r2, r3, #15
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a6a:	883a      	ldrh	r2, [r7, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	78ba      	ldrb	r2, [r7, #2]
 8003a74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	785b      	ldrb	r3, [r3, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d102      	bne.n	8003a94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_PCD_EP_Open+0xaa>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e00e      	b.n	8003ac0 <HAL_PCD_EP_Open+0xc8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f005 fc8f 	bl	80093d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003abe:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	da0f      	bge.n	8003afc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	3338      	adds	r3, #56	; 0x38
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	705a      	strb	r2, [r3, #1]
 8003afa:	e00f      	b.n	8003b1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	f003 020f 	and.w	r2, r3, #15
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_PCD_EP_Close+0x6e>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e00e      	b.n	8003b54 <HAL_PCD_EP_Close+0x8c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f005 fccb 	bl	80094e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6979      	ldr	r1, [r7, #20]
 8003bd0:	f005 ffa6 	bl	8009b20 <USB_EP0StartXfer>
 8003bd4:	e008      	b.n	8003be8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	f005 fd58 	bl	8009698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 020f 	and.w	r2, r3, #15
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c14:	681b      	ldr	r3, [r3, #0]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	f003 020f 	and.w	r2, r3, #15
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3338      	adds	r3, #56	; 0x38
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c60:	7afb      	ldrb	r3, [r7, #11]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	f005 ff45 	bl	8009b20 <USB_EP0StartXfer>
 8003c96:	e008      	b.n	8003caa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6979      	ldr	r1, [r7, #20]
 8003ca6:	f005 fcf7 	bl	8009698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	f003 020f 	and.w	r2, r3, #15
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d901      	bls.n	8003cd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e050      	b.n	8003d74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da0f      	bge.n	8003cfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3338      	adds	r3, #56	; 0x38
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
 8003cf8:	e00d      	b.n	8003d16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_PCD_EP_SetStall+0x82>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e01e      	b.n	8003d74 <HAL_PCD_EP_SetStall+0xc0>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f006 f8d1 	bl	8009eec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	b2d9      	uxtb	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d64:	461a      	mov	r2, r3
 8003d66:	f006 fab5 	bl	800a2d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 020f 	and.w	r2, r3, #15
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d901      	bls.n	8003d9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e042      	b.n	8003e20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	da0f      	bge.n	8003dc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 020f 	and.w	r2, r3, #15
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	3338      	adds	r3, #56	; 0x38
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	3304      	adds	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	705a      	strb	r2, [r3, #1]
 8003dc0:	e00f      	b.n	8003de2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	f003 020f 	and.w	r2, r3, #15
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_PCD_EP_ClrStall+0x86>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e00e      	b.n	8003e20 <HAL_PCD_EP_ClrStall+0xa4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f006 f8d8 	bl	8009fc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	3338      	adds	r3, #56	; 0x38
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d901      	bls.n	8003e60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e06c      	b.n	8003f3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d902      	bls.n	8003e7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3303      	adds	r3, #3
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e84:	e02b      	b.n	8003ede <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d902      	bls.n	8003ea2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3303      	adds	r3, #3
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68d9      	ldr	r1, [r3, #12]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6978      	ldr	r0, [r7, #20]
 8003ec2:	f005 ff7f 	bl	8009dc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	441a      	add	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	441a      	add	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d809      	bhi.n	8003f08 <PCD_WriteEmptyTxFifo+0xe0>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d203      	bcs.n	8003f08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1be      	bne.n	8003e86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d811      	bhi.n	8003f38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f34:	4013      	ands	r3, r2
 8003f36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	333c      	adds	r3, #60	; 0x3c
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	f040 80a0 	bne.w	80040bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a72      	ldr	r2, [pc, #456]	; (8004154 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f240 80dd 	bls.w	800414a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80d7 	beq.w	800414a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	6093      	str	r3, [r2, #8]
 8003fb0:	e0cb      	b.n	800414a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2320      	movs	r3, #32
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	e0bc      	b.n	800414a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 80b7 	bne.w	800414a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a5d      	ldr	r2, [pc, #372]	; (8004154 <PCD_EP_OutXfrComplete_int+0x210>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d90f      	bls.n	8004004 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004000:	6093      	str	r3, [r2, #8]
 8004002:	e0a2      	b.n	800414a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004016:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	440b      	add	r3, r1
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800402a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4403      	add	r3, r0
 800403a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800403e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4403      	add	r3, r0
 8004062:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4419      	add	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4403      	add	r3, r0
 8004078:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800407c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d114      	bne.n	80040ae <PCD_EP_OutXfrComplete_int+0x16a>
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040a6:	461a      	mov	r2, r3
 80040a8:	2101      	movs	r1, #1
 80040aa:	f006 f913 	bl	800a2d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f008 fda3 	bl	800cc00 <HAL_PCD_DataOutStageCallback>
 80040ba:	e046      	b.n	800414a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <PCD_EP_OutXfrComplete_int+0x214>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d124      	bne.n	800410e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e0:	6093      	str	r3, [r2, #8]
 80040e2:	e032      	b.n	800414a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	2320      	movs	r3, #32
 80040fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f008 fd7a 	bl	800cc00 <HAL_PCD_DataOutStageCallback>
 800410c:	e01d      	b.n	800414a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d114      	bne.n	800413e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d108      	bne.n	800413e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004136:	461a      	mov	r2, r3
 8004138:	2100      	movs	r1, #0
 800413a:	f006 f8cb 	bl	800a2d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f008 fd5b 	bl	800cc00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	4f54300a 	.word	0x4f54300a
 8004158:	4f54310a 	.word	0x4f54310a

0800415c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	333c      	adds	r3, #60	; 0x3c
 8004174:	3304      	adds	r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d90e      	bls.n	80041b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	461a      	mov	r2, r3
 80041aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f008 fd13 	bl	800cbdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d90c      	bls.n	80041d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d108      	bne.n	80041d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d0:	461a      	mov	r2, r3
 80041d2:	2101      	movs	r1, #1
 80041d4:	f006 f87e 	bl	800a2d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	4f54300a 	.word	0x4f54300a

080041e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
 80041f4:	4613      	mov	r3, r2
 80041f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004206:	883b      	ldrh	r3, [r7, #0]
 8004208:	0419      	lsls	r1, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	430a      	orrs	r2, r1
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
 8004214:	e028      	b.n	8004268 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e00d      	b.n	8004246 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	3340      	adds	r3, #64	; 0x40
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4413      	add	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	3301      	adds	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	3b01      	subs	r3, #1
 800424c:	429a      	cmp	r2, r3
 800424e:	d3ec      	bcc.n	800422a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004250:	883b      	ldrh	r3, [r7, #0]
 8004252:	0418      	lsls	r0, r3, #16
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	3b01      	subs	r3, #1
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	4302      	orrs	r2, r0
 8004260:	3340      	adds	r3, #64	; 0x40
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	887a      	ldrh	r2, [r7, #2]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e236      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d050      	beq.n	8004354 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b2:	4b9e      	ldr	r3, [pc, #632]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d00c      	beq.n	80042d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b9b      	ldr	r3, [pc, #620]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d112      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ca:	4b98      	ldr	r3, [pc, #608]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	4b94      	ldr	r3, [pc, #592]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d036      	beq.n	8004352 <HAL_RCC_OscConfig+0xbe>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d132      	bne.n	8004352 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e211      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_RCC_OscConfig+0x29c>)
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fd fcad 	bl	8001c60 <HAL_GetTick>
 8004306:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430a:	f7fd fca9 	bl	8001c60 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1fb      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431c:	4b83      	ldr	r3, [pc, #524]	; (800452c <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x76>
 8004328:	e014      	b.n	8004354 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fd fc99 	bl	8001c60 <HAL_GetTick>
 800432e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004332:	f7fd fc95 	bl	8001c60 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b64      	cmp	r3, #100	; 0x64
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e1e7      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004344:	4b79      	ldr	r3, [pc, #484]	; (800452c <HAL_RCC_OscConfig+0x298>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x9e>
 8004350:	e000      	b.n	8004354 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004352:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d077      	beq.n	8004450 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004360:	4b72      	ldr	r3, [pc, #456]	; (800452c <HAL_RCC_OscConfig+0x298>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436c:	4b6f      	ldr	r3, [pc, #444]	; (800452c <HAL_RCC_OscConfig+0x298>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004374:	2b08      	cmp	r3, #8
 8004376:	d126      	bne.n	80043c6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004378:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x298>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d120      	bne.n	80043c6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004384:	4b69      	ldr	r3, [pc, #420]	; (800452c <HAL_RCC_OscConfig+0x298>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x108>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e1bb      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b63      	ldr	r3, [pc, #396]	; (800452c <HAL_RCC_OscConfig+0x298>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	21f8      	movs	r1, #248	; 0xf8
 80043aa:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	69b9      	ldr	r1, [r7, #24]
 80043ae:	fa91 f1a1 	rbit	r1, r1
 80043b2:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	fab1 f181 	clz	r1, r1
 80043ba:	b2c9      	uxtb	r1, r1
 80043bc:	408b      	lsls	r3, r1
 80043be:	495b      	ldr	r1, [pc, #364]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c4:	e044      	b.n	8004450 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02a      	beq.n	8004424 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ce:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_OscConfig+0x2a0>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fc44 	bl	8001c60 <HAL_GetTick>
 80043d8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043dc:	f7fd fc40 	bl	8001c60 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e192      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b4f      	ldr	r3, [pc, #316]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	21f8      	movs	r1, #248	; 0xf8
 8004408:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	fa91 f1a1 	rbit	r1, r1
 8004410:	60f9      	str	r1, [r7, #12]
  return result;
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	fab1 f181 	clz	r1, r1
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	408b      	lsls	r3, r1
 800441c:	4943      	ldr	r1, [pc, #268]	; (800452c <HAL_RCC_OscConfig+0x298>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
 8004422:	e015      	b.n	8004450 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_OscConfig+0x2a0>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fd fc19 	bl	8001c60 <HAL_GetTick>
 800442e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004432:	f7fd fc15 	bl	8001c60 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e167      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004444:	4b39      	ldr	r3, [pc, #228]	; (800452c <HAL_RCC_OscConfig+0x298>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d030      	beq.n	80044be <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d016      	beq.n	8004492 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004464:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCC_OscConfig+0x2a4>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446a:	f7fd fbf9 	bl	8001c60 <HAL_GetTick>
 800446e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004472:	f7fd fbf5 	bl	8001c60 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e147      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004484:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCC_OscConfig+0x298>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x1de>
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCC_OscConfig+0x2a4>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004498:	f7fd fbe2 	bl	8001c60 <HAL_GetTick>
 800449c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fd fbde 	bl	8001c60 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e130      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8087 	beq.w	80045da <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d110      	bne.n	8004500 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4a11      	ldr	r2, [pc, #68]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ec:	6413      	str	r3, [r2, #64]	; 0x40
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCC_OscConfig+0x298>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_RCC_OscConfig+0x2a8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <HAL_RCC_OscConfig+0x2a8>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_OscConfig+0x2a8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d122      	bne.n	800455e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_RCC_OscConfig+0x2a8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <HAL_RCC_OscConfig+0x2a8>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004524:	f7fd fb9c 	bl	8001c60 <HAL_GetTick>
 8004528:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	e012      	b.n	8004552 <HAL_RCC_OscConfig+0x2be>
 800452c:	40023800 	.word	0x40023800
 8004530:	40023802 	.word	0x40023802
 8004534:	42470000 	.word	0x42470000
 8004538:	42470e80 	.word	0x42470e80
 800453c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004540:	f7fd fb8e 	bl	8001c60 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0e0      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_RCC_OscConfig+0x488>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCC_OscConfig+0x48c>)
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fd fb76 	bl	8001c60 <HAL_GetTick>
 8004574:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fd fb72 	bl	8001c60 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0c2      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	4b65      	ldr	r3, [pc, #404]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ee      	beq.n	8004578 <HAL_RCC_OscConfig+0x2e4>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fd fb60 	bl	8001c60 <HAL_GetTick>
 80045a0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fd fb5c 	bl	8001c60 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0ac      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ba:	4b5a      	ldr	r3, [pc, #360]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1ee      	bne.n	80045a4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	4a54      	ldr	r2, [pc, #336]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8097 	beq.w	8004712 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d061      	beq.n	80046b4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d146      	bne.n	8004686 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCC_OscConfig+0x494>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fd fb2f 	bl	8001c60 <HAL_GetTick>
 8004602:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004606:	f7fd fb2b 	bl	8001c60 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b64      	cmp	r3, #100	; 0x64
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e07d      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f0      	bne.n	8004606 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004624:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_RCC_OscConfig+0x498>)
 800462a:	4013      	ands	r3, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	69d1      	ldr	r1, [r2, #28]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6a12      	ldr	r2, [r2, #32]
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800463a:	0192      	lsls	r2, r2, #6
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004642:	0612      	lsls	r2, r2, #24
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800464a:	0852      	lsrs	r2, r2, #1
 800464c:	3a01      	subs	r2, #1
 800464e:	0412      	lsls	r2, r2, #16
 8004650:	430a      	orrs	r2, r1
 8004652:	4934      	ldr	r1, [pc, #208]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_RCC_OscConfig+0x494>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fd faff 	bl	8001c60 <HAL_GetTick>
 8004662:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fd fafb 	bl	8001c60 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b64      	cmp	r3, #100	; 0x64
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e04d      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x3d2>
 8004684:	e045      	b.n	8004712 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_RCC_OscConfig+0x494>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fd fae8 	bl	8001c60 <HAL_GetTick>
 8004690:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd fae4 	bl	8001c60 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e036      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x400>
 80046b2:	e02e      	b.n	8004712 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e029      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <HAL_RCC_OscConfig+0x490>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d11c      	bne.n	800470e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d115      	bne.n	800470e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	099b      	lsrs	r3, r3, #6
 80046e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10d      	bne.n	800470e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40007000 	.word	0x40007000
 8004720:	40023870 	.word	0x40023870
 8004724:	40023800 	.word	0x40023800
 8004728:	42470060 	.word	0x42470060
 800472c:	f0bc8000 	.word	0xf0bc8000

08004730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d2      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b6b      	ldr	r3, [pc, #428]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d90c      	bls.n	800476c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0be      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d020      	beq.n	80047ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004784:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a5b      	ldr	r2, [pc, #364]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 800478a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800478e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800479c:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4950      	ldr	r1, [pc, #320]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d040      	beq.n	8004848 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ce:	4b4a      	ldr	r3, [pc, #296]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d115      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e085      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	4b44      	ldr	r3, [pc, #272]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e079      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f6:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e071      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004806:	4b3c      	ldr	r3, [pc, #240]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 0203 	bic.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4939      	ldr	r1, [pc, #228]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004818:	f7fd fa22 	bl	8001c60 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	e00a      	b.n	8004836 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004820:	f7fd fa1e 	bl	8001c60 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e059      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 020c 	and.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	429a      	cmp	r2, r3
 8004846:	d1eb      	bne.n	8004820 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d20c      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e03c      	b.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	491b      	ldr	r1, [pc, #108]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4913      	ldr	r1, [pc, #76]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80048ae:	f000 f893 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 80048b2:	4601      	mov	r1, r0
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048bc:	22f0      	movs	r2, #240	; 0xf0
 80048be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	fa92 f2a2 	rbit	r2, r2
 80048c6:	60fa      	str	r2, [r7, #12]
  return result;
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	fab2 f282 	clz	r2, r2
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	40d3      	lsrs	r3, r2
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x1cc>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	fa21 f303 	lsr.w	r3, r1, r3
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1d0>)
 80048dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1d4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd f98c 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023c00 	.word	0x40023c00
 80048f8:	40023800 	.word	0x40023800
 80048fc:	0800d61c 	.word	0x0800d61c
 8004900:	20000040 	.word	0x20000040
 8004904:	20000044 	.word	0x20000044

08004908 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	; 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d129      	bne.n	800496e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493c:	2302      	movs	r3, #2
 800493e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004940:	2303      	movs	r3, #3
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800494c:	f107 031c 	add.w	r3, r7, #28
 8004950:	4619      	mov	r1, r3
 8004952:	481f      	ldr	r0, [pc, #124]	; (80049d0 <HAL_RCC_MCOConfig+0xc8>)
 8004954:	f7fd ff38 	bl	80027c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	430b      	orrs	r3, r1
 8004966:	4919      	ldr	r1, [pc, #100]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
  }
}
 800496c:	e029      	b.n	80049c2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	4b16      	ldr	r3, [pc, #88]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4a15      	ldr	r2, [pc, #84]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	6313      	str	r3, [r2, #48]	; 0x30
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800498a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004994:	2303      	movs	r3, #3
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80049a0:	f107 031c 	add.w	r3, r7, #28
 80049a4:	4619      	mov	r1, r3
 80049a6:	480b      	ldr	r0, [pc, #44]	; (80049d4 <HAL_RCC_MCOConfig+0xcc>)
 80049a8:	f7fd ff0e 	bl	80027c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	00d9      	lsls	r1, r3, #3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCC_MCOConfig+0xc4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
}
 80049c2:	bf00      	nop
 80049c4:	3730      	adds	r7, #48	; 0x30
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40020800 	.word	0x40020800

080049d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049dc:	b090      	sub	sp, #64	; 0x40
 80049de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	2300      	movs	r3, #0
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f0:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d00d      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x40>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	f200 80a2 	bhi.w	8004b46 <HAL_RCC_GetSysClockFreq+0x16e>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0x34>
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d003      	beq.n	8004a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a0a:	e09c      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a10:	e09c      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a12:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a16:	e099      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a18:	4b4f      	ldr	r3, [pc, #316]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a22:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d027      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	099b      	lsrs	r3, r3, #6
 8004a34:	2200      	movs	r2, #0
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	627a      	str	r2, [r7, #36]	; 0x24
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a40:	2100      	movs	r1, #0
 8004a42:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a44:	fb03 f201 	mul.w	r2, r3, r1
 8004a48:	2300      	movs	r3, #0
 8004a4a:	fb00 f303 	mul.w	r3, r0, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a43      	ldr	r2, [pc, #268]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a52:	fba0 2102 	umull	r2, r1, r0, r2
 8004a56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a58:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a5c:	4413      	add	r3, r2
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a62:	2200      	movs	r2, #0
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	61fa      	str	r2, [r7, #28]
 8004a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a70:	f7fb fba8 	bl	80001c4 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	e055      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	2200      	movs	r2, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	617a      	str	r2, [r7, #20]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a90:	f04f 0b00 	mov.w	fp, #0
 8004a94:	4652      	mov	r2, sl
 8004a96:	465b      	mov	r3, fp
 8004a98:	f04f 0000 	mov.w	r0, #0
 8004a9c:	f04f 0100 	mov.w	r1, #0
 8004aa0:	0159      	lsls	r1, r3, #5
 8004aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa6:	0150      	lsls	r0, r2, #5
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	ebb2 080a 	subs.w	r8, r2, sl
 8004ab0:	eb63 090b 	sbc.w	r9, r3, fp
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ac0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ac4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ac8:	ebb2 0408 	subs.w	r4, r2, r8
 8004acc:	eb63 0509 	sbc.w	r5, r3, r9
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	00eb      	lsls	r3, r5, #3
 8004ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ade:	00e2      	lsls	r2, r4, #3
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	eb14 030a 	adds.w	r3, r4, sl
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	eb45 030b 	adc.w	r3, r5, fp
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afc:	4629      	mov	r1, r5
 8004afe:	028b      	lsls	r3, r1, #10
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	4604      	mov	r4, r0
 8004b06:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	028a      	lsls	r2, r1, #10
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	2200      	movs	r2, #0
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	60fa      	str	r2, [r7, #12]
 8004b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b1e:	f7fb fb51 	bl	80001c4 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4613      	mov	r3, r2
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	3301      	adds	r3, #1
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3740      	adds	r7, #64	; 0x40
 8004b52:	46bd      	mov	sp, r7
 8004b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	017d7840 	.word	0x017d7840

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	20000040 	.word	0x20000040

08004b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004b7e:	f7ff fff1 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b82:	4601      	mov	r1, r0
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004b8c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004b90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	fa92 f2a2 	rbit	r2, r2
 8004b98:	603a      	str	r2, [r7, #0]
  return result;
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	fab2 f282 	clz	r2, r2
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	40d3      	lsrs	r3, r2
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	0800d62c 	.word	0x0800d62c

08004bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004bc2:	f7ff ffcf 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bd0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004bd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	fa92 f2a2 	rbit	r2, r2
 8004bdc:	603a      	str	r2, [r7, #0]
  return result;
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	fab2 f282 	clz	r2, r2
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	40d3      	lsrs	r3, r2
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	0800d62c 	.word	0x0800d62c

08004c00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d103      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d14c      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c24:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c2a:	f7fd f819 	bl	8001c60 <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c32:	f7fd f815 	bl	8001c60 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e0c7      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c44:	4b66      	ldr	r3, [pc, #408]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	fa92 f2a2 	rbit	r2, r2
 8004c60:	613a      	str	r2, [r7, #16]
  return result;
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	fab2 f282 	clz	r2, r2
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	fa03 f202 	lsl.w	r2, r3, r2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004c76:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	69f9      	ldr	r1, [r7, #28]
 8004c7a:	fa91 f1a1 	rbit	r1, r1
 8004c7e:	61b9      	str	r1, [r7, #24]
  return result;
 8004c80:	69b9      	ldr	r1, [r7, #24]
 8004c82:	fab1 f181 	clz	r1, r1
 8004c86:	b2c9      	uxtb	r1, r1
 8004c88:	408b      	lsls	r3, r1
 8004c8a:	4955      	ldr	r1, [pc, #340]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c92:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fc ffe2 	bl	8001c60 <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ca0:	f7fc ffde 	bl	8001c60 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e090      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb2:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8083 	beq.w	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	4a42      	ldr	r2, [pc, #264]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6413      	str	r3, [r2, #64]	; 0x40
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ce8:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3d      	ldr	r2, [pc, #244]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf2:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf4:	f7fc ffb4 	bl	8001c60 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fc ffb0 	bl	8001c60 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e062      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0e:	4b35      	ldr	r3, [pc, #212]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d22:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02f      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d028      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d38:	4b29      	ldr	r3, [pc, #164]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d40:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d48:	4b27      	ldr	r3, [pc, #156]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d4e:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d54:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d114      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fc ff7e 	bl	8001c60 <HAL_GetTick>
 8004d64:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fc ff7a 	bl	8001c60 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e02a      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d96:	d10d      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	490c      	ldr	r1, [pc, #48]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
 8004db2:	e005      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dbe:	6093      	str	r3, [r2, #8]
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dcc:	4904      	ldr	r1, [pc, #16]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	42470068 	.word	0x42470068
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470e40 	.word	0x42470e40

08004dec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01c      	b.n	8004e38 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	795b      	ldrb	r3, [r3, #5]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fb fffc 	bl	8000e0c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0204 	orr.w	r2, r2, #4
 8004e28:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07c      	b.n	8004f4c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7f5b      	ldrb	r3, [r3, #29]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc f84a 	bl	8000efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	22ca      	movs	r2, #202	; 0xca
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2253      	movs	r2, #83	; 0x53
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9e6 	bl	8005250 <RTC_EnterInitMode>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2204      	movs	r2, #4
 8004e96:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e057      	b.n	8004f4c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6899      	ldr	r1, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68d2      	ldr	r2, [r2, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6919      	ldr	r1, [r3, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	041a      	lsls	r2, r3, #16
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004efa:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f97f 	bl	8005200 <HAL_RTC_WaitForSynchro>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	22ff      	movs	r2, #255	; 0xff
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2204      	movs	r2, #4
 8004f14:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e018      	b.n	8004f4c <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	22ff      	movs	r2, #255	; 0xff
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
  }
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	7f1b      	ldrb	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RTC_SetTime+0x1c>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e0a3      	b.n	80050b8 <HAL_RTC_SetTime+0x164>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d126      	bne.n	8004fd0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2200      	movs	r2, #0
 8004f94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f984 	bl	80052a8 <RTC_ByteToBcd2>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f97d 	bl	80052a8 <RTC_ByteToBcd2>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004fb2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	789b      	ldrb	r3, [r3, #2]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f975 	bl	80052a8 <RTC_ByteToBcd2>
 8004fbe:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004fc0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	78db      	ldrb	r3, [r3, #3]
 8004fc8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e018      	b.n	8005002 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ff0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ff6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	22ca      	movs	r2, #202	; 0xca
 8005008:	625a      	str	r2, [r3, #36]	; 0x24
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2253      	movs	r2, #83	; 0x53
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f91c 	bl	8005250 <RTC_EnterInitMode>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	22ff      	movs	r2, #255	; 0xff
 8005024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2204      	movs	r2, #4
 800502a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e040      	b.n	80050b8 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005040:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005044:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005054:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6899      	ldr	r1, [r3, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800507c:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f8be 	bl	8005200 <HAL_RTC_WaitForSynchro>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2204      	movs	r2, #4
 8005096:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e00a      	b.n	80050b8 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	22ff      	movs	r2, #255	; 0xff
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}

080050c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	7f1b      	ldrb	r3, [r3, #28]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_RTC_SetDate+0x1c>
 80050d8:	2302      	movs	r3, #2
 80050da:	e08d      	b.n	80051f8 <HAL_RTC_SetDate+0x138>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2202      	movs	r2, #2
 80050e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10e      	bne.n	800510c <HAL_RTC_SetDate+0x4c>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	f023 0310 	bic.w	r3, r3, #16
 8005102:	b2db      	uxtb	r3, r3
 8005104:	330a      	adds	r3, #10
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11c      	bne.n	800514c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	78db      	ldrb	r3, [r3, #3]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f8c6 	bl	80052a8 <RTC_ByteToBcd2>
 800511c:	4603      	mov	r3, r0
 800511e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f8bf 	bl	80052a8 <RTC_ByteToBcd2>
 800512a:	4603      	mov	r3, r0
 800512c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800512e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	789b      	ldrb	r3, [r3, #2]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f8b7 	bl	80052a8 <RTC_ByteToBcd2>
 800513a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800513c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e00e      	b.n	800516a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005158:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800515e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	22ca      	movs	r2, #202	; 0xca
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2253      	movs	r2, #83	; 0x53
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f868 	bl	8005250 <RTC_EnterInitMode>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2204      	movs	r2, #4
 8005192:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e02c      	b.n	80051f8 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051bc:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f81e 	bl	8005200 <HAL_RTC_WaitForSynchro>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2204      	movs	r2, #4
 80051d6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00a      	b.n	80051f8 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	22ff      	movs	r2, #255	; 0xff
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80051f6:	2300      	movs	r3, #0
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}

08005200 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800521a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800521c:	f7fc fd20 	bl	8001c60 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005222:	e009      	b.n	8005238 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005224:	f7fc fd1c 	bl	8001c60 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005232:	d901      	bls.n	8005238 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e007      	b.n	8005248 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ee      	beq.n	8005224 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d119      	bne.n	800529e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005274:	f7fc fcf4 	bl	8001c60 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800527a:	e009      	b.n	8005290 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800527c:	f7fc fcf0 	bl	8001c60 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528a:	d901      	bls.n	8005290 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e007      	b.n	80052a0 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0ee      	beq.n	800527c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 80052b6:	e005      	b.n	80052c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	3b0a      	subs	r3, #10
 80052c2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d8f6      	bhi.n	80052b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b2db      	uxtb	r3, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e022      	b.n	800533a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fb fe2e 	bl	8000f68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2203      	movs	r2, #3
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f815 	bl	8005344 <HAL_SD_InitCard>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e00a      	b.n	800533a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af04      	add	r7, sp, #16
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005360:	2376      	movs	r3, #118	; 0x76
 8005362:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681d      	ldr	r5, [r3, #0]
 8005368:	466c      	mov	r4, sp
 800536a:	f107 0314 	add.w	r3, r7, #20
 800536e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800537c:	4628      	mov	r0, r5
 800537e:	f002 ff77 	bl	8008270 <SDIO_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e04c      	b.n	800542e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005394:	4b28      	ldr	r3, [pc, #160]	; (8005438 <HAL_SD_InitCard+0xf4>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f002 ffac 	bl	80082fc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80053a4:	4b24      	ldr	r3, [pc, #144]	; (8005438 <HAL_SD_InitCard+0xf4>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 ff04 	bl	80061b8 <SD_PowerON>
 80053b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e02e      	b.n	800542e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fe23 	bl	800601c <SD_InitCard>
 80053d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e01b      	b.n	800542e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053fe:	4618      	mov	r0, r3
 8005400:	f003 f80a 	bl	8008418 <SDMMC_CmdBlockLength>
 8005404:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00f      	beq.n	800542c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <HAL_SD_InitCard+0xf8>)
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3728      	adds	r7, #40	; 0x28
 8005432:	46bd      	mov	sp, r7
 8005434:	bdb0      	pop	{r4, r5, r7, pc}
 8005436:	bf00      	nop
 8005438:	422580a0 	.word	0x422580a0
 800543c:	004005ff 	.word	0x004005ff

08005440 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b092      	sub	sp, #72	; 0x48
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800544e:	f7fc fc07 	bl	8001c60 <HAL_GetTick>
 8005452:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1bd      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	f040 81b0 	bne.w	80057e0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	441a      	add	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	429a      	cmp	r2, r3
 8005492:	d907      	bls.n	80054a4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e1a4      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2203      	movs	r2, #3
 80054a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2200      	movs	r2, #0
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d002      	beq.n	80054c2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	025b      	lsls	r3, r3, #9
 80054c0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	025b      	lsls	r3, r3, #9
 80054cc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80054ce:	2390      	movs	r3, #144	; 0x90
 80054d0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80054d2:	2302      	movs	r3, #2
 80054d4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80054da:	2301      	movs	r3, #1
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f107 0214 	add.w	r2, r7, #20
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 ff6a 	bl	80083c2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d90a      	bls.n	800550a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2202      	movs	r2, #2
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005500:	4618      	mov	r0, r3
 8005502:	f002 ffcd 	bl	80084a0 <SDMMC_CmdReadMultiBlock>
 8005506:	6478      	str	r0, [r7, #68]	; 0x44
 8005508:	e009      	b.n	800551e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005516:	4618      	mov	r0, r3
 8005518:	f002 ffa0 	bl	800845c <SDMMC_CmdReadSingleBlock>
 800551c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800551e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a7a      	ldr	r2, [pc, #488]	; (8005714 <HAL_SD_ReadBlocks+0x2d4>)
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005532:	431a      	orrs	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e151      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800554e:	e061      	b.n	8005614 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d03c      	beq.n	80055d8 <HAL_SD_ReadBlocks+0x198>
 800555e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d039      	beq.n	80055d8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005564:	2300      	movs	r3, #0
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
 8005568:	e033      	b.n	80055d2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f002 fea8 	bl	80082c4 <SDIO_ReadFIFO>
 8005574:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	b2da      	uxtb	r2, r3
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	3301      	adds	r3, #1
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005586:	3b01      	subs	r3, #1
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	b2da      	uxtb	r2, r3
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	3301      	adds	r3, #1
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	3b01      	subs	r3, #1
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	0c1b      	lsrs	r3, r3, #16
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	3301      	adds	r3, #1
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	3b01      	subs	r3, #1
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	0e1b      	lsrs	r3, r3, #24
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80055c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c2:	3301      	adds	r3, #1
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80055c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c8:	3b01      	subs	r3, #1
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80055cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ce:	3301      	adds	r3, #1
 80055d0:	643b      	str	r3, [r7, #64]	; 0x40
 80055d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d4:	2b07      	cmp	r3, #7
 80055d6:	d9c8      	bls.n	800556a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80055d8:	f7fc fb42 	bl	8001c60 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d902      	bls.n	80055ee <HAL_SD_ReadBlocks+0x1ae>
 80055e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d112      	bne.n	8005614 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a48      	ldr	r2, [pc, #288]	; (8005714 <HAL_SD_ReadBlocks+0x2d4>)
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e0ec      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561a:	f240 332a 	movw	r3, #810	; 0x32a
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d095      	beq.n	8005550 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d022      	beq.n	8005678 <HAL_SD_ReadBlocks+0x238>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d91f      	bls.n	8005678 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	2b03      	cmp	r3, #3
 800563e:	d01b      	beq.n	8005678 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f002 ff91 	bl	800856c <SDMMC_CmdStopTransfer>
 800564a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800564c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564e:	2b00      	cmp	r3, #0
 8005650:	d012      	beq.n	8005678 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2f      	ldr	r2, [pc, #188]	; (8005714 <HAL_SD_ReadBlocks+0x2d4>)
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0ba      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d012      	beq.n	80056ac <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a22      	ldr	r2, [pc, #136]	; (8005714 <HAL_SD_ReadBlocks+0x2d4>)
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	f043 0208 	orr.w	r2, r3, #8
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a0      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d012      	beq.n	80056e0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	; (8005714 <HAL_SD_ReadBlocks+0x2d4>)
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e086      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d063      	beq.n	80057b6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <HAL_SD_ReadBlocks+0x2d4>)
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e06c      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
 8005714:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f002 fdd1 	bl	80082c4 <SDIO_ReadFIFO>
 8005722:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	b2da      	uxtb	r2, r3
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	3301      	adds	r3, #1
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005734:	3b01      	subs	r3, #1
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	3301      	adds	r3, #1
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	3b01      	subs	r3, #1
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	3301      	adds	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	3b01      	subs	r3, #1
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	0e1b      	lsrs	r3, r3, #24
 8005768:	b2da      	uxtb	r2, r3
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	3301      	adds	r3, #1
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	3b01      	subs	r3, #1
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800577a:	f7fc fa71 	bl	8001c60 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005786:	429a      	cmp	r2, r3
 8005788:	d902      	bls.n	8005790 <HAL_SD_ReadBlocks+0x350>
 800578a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d112      	bne.n	80057b6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_SD_ReadBlocks+0x3b8>)
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e01b      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_SD_ReadBlocks+0x38a>
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1a6      	bne.n	8005718 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e006      	b.n	80057ee <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3748      	adds	r7, #72	; 0x48
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	004005ff 	.word	0x004005ff

080057fc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b092      	sub	sp, #72	; 0x48
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800580a:	f7fc fa29 	bl	8001c60 <HAL_GetTick>
 800580e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d107      	bne.n	800582e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e166      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	f040 8159 	bne.w	8005aee <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	441a      	add	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	429a      	cmp	r2, r3
 800584e:	d907      	bls.n	8005860 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e14d      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2203      	movs	r2, #3
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2200      	movs	r2, #0
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	2b01      	cmp	r3, #1
 8005876:	d002      	beq.n	800587e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	025b      	lsls	r3, r3, #9
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	025b      	lsls	r3, r3, #9
 8005888:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800588a:	2390      	movs	r3, #144	; 0x90
 800588c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800588e:	2300      	movs	r3, #0
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005892:	2300      	movs	r3, #0
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005896:	2301      	movs	r3, #1
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f107 0218 	add.w	r2, r7, #24
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 fd8c 	bl	80083c2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d90a      	bls.n	80058c6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 fe33 	bl	8008528 <SDMMC_CmdWriteMultiBlock>
 80058c2:	6478      	str	r0, [r7, #68]	; 0x44
 80058c4:	e009      	b.n	80058da <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2210      	movs	r2, #16
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058d2:	4618      	mov	r0, r3
 80058d4:	f002 fe06 	bl	80084e4 <SDMMC_CmdWriteSingleBlock>
 80058d8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80058da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d012      	beq.n	8005906 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a87      	ldr	r2, [pc, #540]	; (8005b04 <HAL_SD_WriteBlocks+0x308>)
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0fa      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800590a:	e065      	b.n	80059d8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d040      	beq.n	800599c <HAL_SD_WriteBlocks+0x1a0>
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d03d      	beq.n	800599c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005920:	2300      	movs	r3, #0
 8005922:	643b      	str	r3, [r7, #64]	; 0x40
 8005924:	e037      	b.n	8005996 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	3301      	adds	r3, #1
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	3b01      	subs	r3, #1
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	021a      	lsls	r2, r3, #8
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	3301      	adds	r3, #1
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	3b01      	subs	r3, #1
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	041a      	lsls	r2, r3, #16
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	3301      	adds	r3, #1
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005964:	3b01      	subs	r3, #1
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	061a      	lsls	r2, r3, #24
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	3301      	adds	r3, #1
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	3b01      	subs	r3, #1
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f107 0214 	add.w	r2, r7, #20
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f002 fca6 	bl	80082dc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	3301      	adds	r3, #1
 8005994:	643b      	str	r3, [r7, #64]	; 0x40
 8005996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005998:	2b07      	cmp	r3, #7
 800599a:	d9c4      	bls.n	8005926 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800599c:	f7fc f960 	bl	8001c60 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d902      	bls.n	80059b2 <HAL_SD_WriteBlocks+0x1b6>
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d112      	bne.n	80059d8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a53      	ldr	r2, [pc, #332]	; (8005b04 <HAL_SD_WriteBlocks+0x308>)
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e091      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059de:	f240 331a 	movw	r3, #794	; 0x31a
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d091      	beq.n	800590c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d022      	beq.n	8005a3c <HAL_SD_WriteBlocks+0x240>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d91f      	bls.n	8005a3c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d01b      	beq.n	8005a3c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f002 fdaf 	bl	800856c <SDMMC_CmdStopTransfer>
 8005a0e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3a      	ldr	r2, [pc, #232]	; (8005b04 <HAL_SD_WriteBlocks+0x308>)
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e05f      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <HAL_SD_WriteBlocks+0x308>)
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	f043 0208 	orr.w	r2, r3, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e045      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d012      	beq.n	8005aa4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <HAL_SD_WriteBlocks+0x308>)
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	f043 0202 	orr.w	r2, r3, #2
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e02b      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d012      	beq.n	8005ad8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <HAL_SD_WriteBlocks+0x308>)
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e011      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e006      	b.n	8005afc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
  }
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3748      	adds	r7, #72	; 0x48
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	004005ff 	.word	0x004005ff

08005b08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b16:	0f9b      	lsrs	r3, r3, #30
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b22:	0e9b      	lsrs	r3, r3, #26
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b34:	0e1b      	lsrs	r3, r3, #24
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b68:	0d1b      	lsrs	r3, r3, #20
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b86:	0bdb      	lsrs	r3, r3, #15
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b98:	0b9b      	lsrs	r3, r3, #14
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005baa:	0b5b      	lsrs	r3, r3, #13
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbc:	0b1b      	lsrs	r3, r3, #12
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d163      	bne.n	8005ca0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bdc:	009a      	lsls	r2, r3, #2
 8005bde:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005be2:	4013      	ands	r3, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005be8:	0f92      	lsrs	r2, r2, #30
 8005bea:	431a      	orrs	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf4:	0edb      	lsrs	r3, r3, #27
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	0e1b      	lsrs	r3, r3, #24
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c18:	0d5b      	lsrs	r3, r3, #21
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	0c9b      	lsrs	r3, r3, #18
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3c:	0bdb      	lsrs	r3, r3, #15
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	7e1b      	ldrb	r3, [r3, #24]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	3302      	adds	r3, #2
 8005c60:	2201      	movs	r2, #1
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c6a:	fb03 f202 	mul.w	r2, r3, r2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	7a1b      	ldrb	r3, [r3, #8]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c8c:	0a52      	lsrs	r2, r2, #9
 8005c8e:	fb03 f202 	mul.w	r2, r3, r2
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
 8005c9e:	e031      	b.n	8005d04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d11d      	bne.n	8005ce4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	029a      	lsls	r2, r3, #10
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ce2:	e00f      	b.n	8005d04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	; (8005e4c <HAL_SD_GetCardCSD+0x344>)
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e09d      	b.n	8005e40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d08:	0b9b      	lsrs	r3, r3, #14
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1a:	09db      	lsrs	r3, r3, #7
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	0fdb      	lsrs	r3, r3, #31
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	0f5b      	lsrs	r3, r3, #29
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	0e9b      	lsrs	r3, r3, #26
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	0d9b      	lsrs	r3, r3, #22
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	0d5b      	lsrs	r3, r3, #21
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	0c1b      	lsrs	r3, r3, #16
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	0bdb      	lsrs	r3, r3, #15
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	0b9b      	lsrs	r3, r3, #14
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	0b5b      	lsrs	r3, r3, #13
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	0b1b      	lsrs	r3, r3, #12
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	0a9b      	lsrs	r3, r3, #10
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	004005ff 	.word	0x004005ff

08005e50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
	...

08005ea8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005ea8:	b5b0      	push	{r4, r5, r7, lr}
 8005eaa:	b08e      	sub	sp, #56	; 0x38
 8005eac:	af04      	add	r7, sp, #16
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d02e      	beq.n	8005f26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	d106      	bne.n	8005ede <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
 8005edc:	e029      	b.n	8005f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee4:	d10a      	bne.n	8005efc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa1c 	bl	8006324 <SD_WideBus_Enable>
 8005eec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8005efa:	e01a      	b.n	8005f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa59 	bl	80063ba <SD_WideBus_Disable>
 8005f08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
 8005f16:	e00c      	b.n	8005f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
 8005f24:	e005      	b.n	8005f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00b      	beq.n	8005f52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a26      	ldr	r2, [pc, #152]	; (8005fd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f50:	e01f      	b.n	8005f92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681d      	ldr	r5, [r3, #0]
 8005f78:	466c      	mov	r4, sp
 8005f7a:	f107 0314 	add.w	r3, r7, #20
 8005f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f86:	f107 0308 	add.w	r3, r7, #8
 8005f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f002 f96f 	bl	8008270 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 fa3c 	bl	8008418 <SDMMC_CmdBlockLength>
 8005fa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00c      	beq.n	8005fc2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3728      	adds	r7, #40	; 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	004005ff 	.word	0x004005ff

08005fdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f970 	bl	80062d4 <SD_SendStatus>
 8005ff4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0a5b      	lsrs	r3, r3, #9
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006012:	693b      	ldr	r3, [r7, #16]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800601c:	b5b0      	push	{r4, r5, r7, lr}
 800601e:	b094      	sub	sp, #80	; 0x50
 8006020:	af04      	add	r7, sp, #16
 8006022:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006024:	2301      	movs	r3, #1
 8006026:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f002 f974 	bl	800831a <SDIO_GetPowerState>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800603c:	e0b8      	b.n	80061b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006042:	2b03      	cmp	r3, #3
 8006044:	d02f      	beq.n	80060a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f002 fb98 	bl	8008780 <SDMMC_CmdSendCID>
 8006050:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <SD_InitCard+0x40>
    {
      return errorstate;
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	e0a9      	b.n	80061b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f002 f99b 	bl	800839e <SDIO_GetResponse>
 8006068:	4602      	mov	r2, r0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2104      	movs	r1, #4
 8006074:	4618      	mov	r0, r3
 8006076:	f002 f992 	bl	800839e <SDIO_GetResponse>
 800607a:	4602      	mov	r2, r0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2108      	movs	r1, #8
 8006086:	4618      	mov	r0, r3
 8006088:	f002 f989 	bl	800839e <SDIO_GetResponse>
 800608c:	4602      	mov	r2, r0
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	210c      	movs	r1, #12
 8006098:	4618      	mov	r0, r3
 800609a:	f002 f980 	bl	800839e <SDIO_GetResponse>
 800609e:	4602      	mov	r2, r0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d00d      	beq.n	80060ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f107 020e 	add.w	r2, r7, #14
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f002 fb9e 	bl	80087fa <SDMMC_CmdSetRelAdd>
 80060be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <SD_InitCard+0xae>
    {
      return errorstate;
 80060c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c8:	e072      	b.n	80061b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d036      	beq.n	8006140 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80060d2:	89fb      	ldrh	r3, [r7, #14]
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f002 fb68 	bl	80087bc <SDMMC_CmdSendCSD>
 80060ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80060f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f6:	e05b      	b.n	80061b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 f94d 	bl	800839e <SDIO_GetResponse>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2104      	movs	r1, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f002 f944 	bl	800839e <SDIO_GetResponse>
 8006116:	4602      	mov	r2, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2108      	movs	r1, #8
 8006122:	4618      	mov	r0, r3
 8006124:	f002 f93b 	bl	800839e <SDIO_GetResponse>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	210c      	movs	r1, #12
 8006134:	4618      	mov	r0, r3
 8006136:	f002 f932 	bl	800839e <SDIO_GetResponse>
 800613a:	4602      	mov	r2, r0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2104      	movs	r1, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f002 f929 	bl	800839e <SDIO_GetResponse>
 800614c:	4603      	mov	r3, r0
 800614e:	0d1a      	lsrs	r2, r3, #20
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006154:	f107 0310 	add.w	r3, r7, #16
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fcd4 	bl	8005b08 <HAL_SD_GetCardCSD>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800616a:	e021      	b.n	80061b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	2200      	movs	r2, #0
 8006178:	461c      	mov	r4, r3
 800617a:	4615      	mov	r5, r2
 800617c:	4622      	mov	r2, r4
 800617e:	462b      	mov	r3, r5
 8006180:	4608      	mov	r0, r1
 8006182:	f002 fa15 	bl	80085b0 <SDMMC_CmdSelDesel>
 8006186:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <SD_InitCard+0x176>
  {
    return errorstate;
 800618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006190:	e00e      	b.n	80061b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681d      	ldr	r5, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	466c      	mov	r4, sp
 800619a:	f103 0210 	add.w	r2, r3, #16
 800619e:	ca07      	ldmia	r2, {r0, r1, r2}
 80061a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061a4:	3304      	adds	r3, #4
 80061a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061a8:	4628      	mov	r0, r5
 80061aa:	f002 f861 	bl	8008270 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3740      	adds	r7, #64	; 0x40
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bdb0      	pop	{r4, r5, r7, pc}

080061b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	2300      	movs	r3, #0
 80061ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 fa10 	bl	80085f6 <SDMMC_CmdGoIdleState>
 80061d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	e072      	b.n	80062c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fa23 	bl	8008632 <SDMMC_CmdOperCond>
 80061ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 f9f9 	bl	80085f6 <SDMMC_CmdGoIdleState>
 8006204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <SD_PowerON+0x5e>
    {
      return errorstate;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	e05b      	b.n	80062c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621a:	2b01      	cmp	r3, #1
 800621c:	d137      	bne.n	800628e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fa23 	bl	8008670 <SDMMC_CmdAppCommand>
 800622a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d02d      	beq.n	800628e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006236:	e047      	b.n	80062c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f002 fa16 	bl	8008670 <SDMMC_CmdAppCommand>
 8006244:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <SD_PowerON+0x98>
    {
      return errorstate;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	e03b      	b.n	80062c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	491e      	ldr	r1, [pc, #120]	; (80062d0 <SD_PowerON+0x118>)
 8006256:	4618      	mov	r0, r3
 8006258:	f002 fa2c 	bl	80086b4 <SDMMC_CmdAppOperCommand>
 800625c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006268:	e02e      	b.n	80062c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f002 f894 	bl	800839e <SDIO_GetResponse>
 8006276:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	0fdb      	lsrs	r3, r3, #31
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <SD_PowerON+0xcc>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <SD_PowerON+0xce>
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]

    count++;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	3301      	adds	r3, #1
 800628c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006294:	4293      	cmp	r3, r2
 8006296:	d802      	bhi.n	800629e <SD_PowerON+0xe6>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0cc      	beq.n	8006238 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d902      	bls.n	80062ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80062a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ac:	e00c      	b.n	80062c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
 80062be:	e002      	b.n	80062c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	c1100000 	.word	0xc1100000

080062d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80062e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062e8:	e018      	b.n	800631c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f002 faa0 	bl	800883c <SDMMC_CmdSendStatus>
 80062fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	e009      	b.n	800631c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f002 f845 	bl	800839e <SDIO_GetResponse>
 8006314:	4602      	mov	r2, r0
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2100      	movs	r1, #0
 800633a:	4618      	mov	r0, r3
 800633c:	f002 f82f 	bl	800839e <SDIO_GetResponse>
 8006340:	4603      	mov	r3, r0
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800634a:	d102      	bne.n	8006352 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800634c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006350:	e02f      	b.n	80063b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006352:	f107 030c 	add.w	r3, r7, #12
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f879 	bl	8006450 <SD_FindSCR>
 800635e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	e023      	b.n	80063b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01c      	beq.n	80063ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f002 f975 	bl	8008670 <SDMMC_CmdAppCommand>
 8006386:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	e00f      	b.n	80063b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2102      	movs	r1, #2
 8006398:	4618      	mov	r0, r3
 800639a:	f002 f9ae 	bl	80086fa <SDMMC_CmdBusWidth>
 800639e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	e003      	b.n	80063b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e001      	b.n	80063b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 ffe4 	bl	800839e <SDIO_GetResponse>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063e0:	d102      	bne.n	80063e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063e6:	e02f      	b.n	8006448 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063e8:	f107 030c 	add.w	r3, r7, #12
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f82e 	bl	8006450 <SD_FindSCR>
 80063f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	e023      	b.n	8006448 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01c      	beq.n	8006444 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f002 f92a 	bl	8008670 <SDMMC_CmdAppCommand>
 800641c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	e00f      	b.n	8006448 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f002 f963 	bl	80086fa <SDMMC_CmdBusWidth>
 8006434:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	e003      	b.n	8006448 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006440:	2300      	movs	r3, #0
 8006442:	e001      	b.n	8006448 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006444:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b08f      	sub	sp, #60	; 0x3c
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800645a:	f7fb fc01 	bl	8001c60 <HAL_GetTick>
 800645e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006464:	2300      	movs	r3, #0
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2108      	movs	r1, #8
 8006476:	4618      	mov	r0, r3
 8006478:	f001 ffce 	bl	8008418 <SDMMC_CmdBlockLength>
 800647c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	e0b2      	b.n	80065ee <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f002 f8eb 	bl	8008670 <SDMMC_CmdAppCommand>
 800649a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	e0a3      	b.n	80065ee <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80064ac:	2308      	movs	r3, #8
 80064ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80064b0:	2330      	movs	r3, #48	; 0x30
 80064b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80064b4:	2302      	movs	r3, #2
 80064b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80064bc:	2301      	movs	r3, #1
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f107 0210 	add.w	r2, r7, #16
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 ff79 	bl	80083c2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f002 f932 	bl	800873e <SDMMC_CmdSendSCR>
 80064da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d02a      	beq.n	8006538 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	e083      	b.n	80065ee <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00f      	beq.n	8006514 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	f107 0208 	add.w	r2, r7, #8
 8006500:	18d4      	adds	r4, r2, r3
 8006502:	4608      	mov	r0, r1
 8006504:	f001 fede 	bl	80082c4 <SDIO_ReadFIFO>
 8006508:	4603      	mov	r3, r0
 800650a:	6023      	str	r3, [r4, #0]
      index++;
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	3301      	adds	r3, #1
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
 8006512:	e006      	b.n	8006522 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006522:	f7fb fb9d 	bl	8001c60 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d102      	bne.n	8006538 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006532:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006536:	e05a      	b.n	80065ee <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0cf      	beq.n	80064e6 <SD_FindSCR+0x96>
 8006546:	e000      	b.n	800654a <SD_FindSCR+0xfa>
      break;
 8006548:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2208      	movs	r2, #8
 800655e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006560:	2308      	movs	r3, #8
 8006562:	e044      	b.n	80065ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2202      	movs	r2, #2
 8006578:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800657a:	2302      	movs	r3, #2
 800657c:	e037      	b.n	80065ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2220      	movs	r2, #32
 8006592:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006594:	2320      	movs	r3, #32
 8006596:	e02a      	b.n	80065ee <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f240 523a 	movw	r2, #1338	; 0x53a
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	061a      	lsls	r2, r3, #24
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	0e1b      	lsrs	r3, r3, #24
 80065be:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	601a      	str	r2, [r3, #0]
    scr++;
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	3304      	adds	r3, #4
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	061a      	lsls	r2, r3, #24
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	0e1b      	lsrs	r3, r3, #24
 80065e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	373c      	adds	r7, #60	; 0x3c
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd90      	pop	{r4, r7, pc}

080065f6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e07b      	b.n	8006700 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d108      	bne.n	8006622 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006618:	d009      	beq.n	800662e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	61da      	str	r2, [r3, #28]
 8006620:	e005      	b.n	800662e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fa fda9 	bl	80011a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006664:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	ea42 0103 	orr.w	r1, r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	f003 0104 	and.w	r1, r3, #4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	f003 0210 	and.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e01a      	b.n	8006750 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006730:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fa fe6c 	bl	8001410 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_SPI_Transmit_DMA+0x20>
 8006774:	2302      	movs	r3, #2
 8006776:	e09b      	b.n	80068b0 <HAL_SPI_Transmit_DMA+0x158>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d002      	beq.n	8006792 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800678c:	2302      	movs	r3, #2
 800678e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006790:	e089      	b.n	80068a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_SPI_Transmit_DMA+0x46>
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067a2:	e080      	b.n	80068a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2203      	movs	r2, #3
 80067a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ea:	d10f      	bne.n	800680c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800680a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006810:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <HAL_SPI_Transmit_DMA+0x160>)
 8006812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006818:	4a28      	ldr	r2, [pc, #160]	; (80068bc <HAL_SPI_Transmit_DMA+0x164>)
 800681a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006820:	4a27      	ldr	r2, [pc, #156]	; (80068c0 <HAL_SPI_Transmit_DMA+0x168>)
 8006822:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006828:	2200      	movs	r2, #0
 800682a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	4619      	mov	r1, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006844:	f7fb fc70 	bl	8002128 <HAL_DMA_Start_IT>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	f043 0210 	orr.w	r2, r3, #16
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006866:	e01e      	b.n	80068a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d007      	beq.n	8006886 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006884:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0220 	orr.w	r2, r2, #32
 8006894:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0202 	orr.w	r2, r2, #2
 80068a4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	08006991 	.word	0x08006991
 80068bc:	080068e9 	.word	0x080068e9
 80068c0:	080069ad 	.word	0x080069ad

080068c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068f6:	f7fb f9b3 	bl	8001c60 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690a:	d03b      	beq.n	8006984 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0220 	bic.w	r2, r2, #32
 800691a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0202 	bic.w	r2, r2, #2
 800692a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	6978      	ldr	r0, [r7, #20]
 8006932:	f000 f8e3 	bl	8006afc <SPI_EndRxTxTransaction>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	f043 0220 	orr.w	r2, r3, #32
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2200      	movs	r2, #0
 800696a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800697c:	6978      	ldr	r0, [r7, #20]
 800697e:	f7ff ffaa 	bl	80068d6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006982:	e002      	b.n	800698a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	f005 fed3 	bl	800c730 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ff90 	bl	80068c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0203 	bic.w	r2, r2, #3
 80069c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	f043 0210 	orr.w	r2, r3, #16
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff ff79 	bl	80068d6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069fc:	f7fb f930 	bl	8001c60 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4413      	add	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a0c:	f7fb f928 	bl	8001c60 <HAL_GetTick>
 8006a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a12:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	015b      	lsls	r3, r3, #5
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a22:	e054      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d050      	beq.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a2c:	f7fb f918 	bl	8001c60 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d902      	bls.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d13d      	bne.n	8006abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5a:	d111      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a64:	d004      	beq.n	8006a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6e:	d107      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d10f      	bne.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e017      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	bf0c      	ite	eq
 8006ade:	2301      	moveq	r3, #1
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d19b      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000040 	.word	0x20000040

08006afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff ff6a 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e000      	b.n	8006b30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e041      	b.n	8006bce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa fe64 	bl	800182c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f000 faea 	bl	8007150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <HAL_TIM_PWM_Start+0x24>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	bf14      	ite	ne
 8006bf4:	2301      	movne	r3, #1
 8006bf6:	2300      	moveq	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	e022      	b.n	8006c42 <HAL_TIM_PWM_Start+0x6a>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d109      	bne.n	8006c16 <HAL_TIM_PWM_Start+0x3e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	bf14      	ite	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	2300      	moveq	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	e015      	b.n	8006c42 <HAL_TIM_PWM_Start+0x6a>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d109      	bne.n	8006c30 <HAL_TIM_PWM_Start+0x58>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	e008      	b.n	8006c42 <HAL_TIM_PWM_Start+0x6a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e07c      	b.n	8006d44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x82>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	e013      	b.n	8006c82 <HAL_TIM_PWM_Start+0xaa>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Start+0x92>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c68:	e00b      	b.n	8006c82 <HAL_TIM_PWM_Start+0xaa>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_Start+0xa2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c78:	e003      	b.n	8006c82 <HAL_TIM_PWM_Start+0xaa>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2201      	movs	r2, #1
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fcaa 	bl	80075e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2d      	ldr	r2, [pc, #180]	; (8006d4c <HAL_TIM_PWM_Start+0x174>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_TIM_PWM_Start+0xcc>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2c      	ldr	r2, [pc, #176]	; (8006d50 <HAL_TIM_PWM_Start+0x178>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_PWM_Start+0xd0>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <HAL_TIM_PWM_Start+0xd2>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <HAL_TIM_PWM_Start+0x174>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d022      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d01d      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1f      	ldr	r2, [pc, #124]	; (8006d54 <HAL_TIM_PWM_Start+0x17c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d018      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <HAL_TIM_PWM_Start+0x180>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <HAL_TIM_PWM_Start+0x184>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00e      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <HAL_TIM_PWM_Start+0x178>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <HAL_TIM_PWM_Start+0x188>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x136>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_TIM_PWM_Start+0x18c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d111      	bne.n	8006d32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b06      	cmp	r3, #6
 8006d1e:	d010      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	e007      	b.n	8006d42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40010400 	.word	0x40010400
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800
 8006d5c:	40000c00 	.word	0x40000c00
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40001800 	.word	0x40001800

08006d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d122      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0202 	mvn.w	r2, #2
 8006d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9b4 	bl	8007118 <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f9a7 	bl	8007106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f9b6 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0204 	mvn.w	r2, #4
 8006de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2202      	movs	r2, #2
 8006dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f98a 	bl	8007118 <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f97d 	bl	8007106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f98c 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0208 	mvn.w	r2, #8
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2204      	movs	r2, #4
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f960 	bl	8007118 <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f953 	bl	8007106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f962 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0210 	mvn.w	r2, #16
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2208      	movs	r2, #8
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f936 	bl	8007118 <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f929 	bl	8007106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f938 	bl	800712a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10e      	bne.n	8006eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d107      	bne.n	8006eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0201 	mvn.w	r2, #1
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f904 	bl	80070f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d10e      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d107      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fc0d 	bl	8007732 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d10e      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d107      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8fc 	bl	800713c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d10e      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d107      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0220 	mvn.w	r2, #32
 8006f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fbd8 	bl	8007720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e0ac      	b.n	80070ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	f200 809f 	bhi.w	80070e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fdd 	.word	0x08006fdd
 8006fac:	080070e1 	.word	0x080070e1
 8006fb0:	080070e1 	.word	0x080070e1
 8006fb4:	080070e1 	.word	0x080070e1
 8006fb8:	0800701d 	.word	0x0800701d
 8006fbc:	080070e1 	.word	0x080070e1
 8006fc0:	080070e1 	.word	0x080070e1
 8006fc4:	080070e1 	.word	0x080070e1
 8006fc8:	0800705f 	.word	0x0800705f
 8006fcc:	080070e1 	.word	0x080070e1
 8006fd0:	080070e1 	.word	0x080070e1
 8006fd4:	080070e1 	.word	0x080070e1
 8006fd8:	0800709f 	.word	0x0800709f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f952 	bl	800728c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0208 	orr.w	r2, r2, #8
 8006ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0204 	bic.w	r2, r2, #4
 8007006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6999      	ldr	r1, [r3, #24]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	619a      	str	r2, [r3, #24]
      break;
 800701a:	e062      	b.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f9a2 	bl	800736c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6999      	ldr	r1, [r3, #24]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	021a      	lsls	r2, r3, #8
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	619a      	str	r2, [r3, #24]
      break;
 800705c:	e041      	b.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f9f5 	bl	8007454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0208 	orr.w	r2, r2, #8
 8007078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0204 	bic.w	r2, r2, #4
 8007088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	61da      	str	r2, [r3, #28]
      break;
 800709c:	e021      	b.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fa49 	bl	800753c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69d9      	ldr	r1, [r3, #28]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	021a      	lsls	r2, r3, #8
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	61da      	str	r2, [r3, #28]
      break;
 80070de:	e000      	b.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80070e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr
	...

08007150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a3f      	ldr	r2, [pc, #252]	; (8007260 <TIM_Base_SetConfig+0x110>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d013      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716e:	d00f      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <TIM_Base_SetConfig+0x114>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00b      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <TIM_Base_SetConfig+0x118>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d007      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a3a      	ldr	r2, [pc, #232]	; (800726c <TIM_Base_SetConfig+0x11c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a39      	ldr	r2, [pc, #228]	; (8007270 <TIM_Base_SetConfig+0x120>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d108      	bne.n	80071a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2e      	ldr	r2, [pc, #184]	; (8007260 <TIM_Base_SetConfig+0x110>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d02b      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b0:	d027      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2b      	ldr	r2, [pc, #172]	; (8007264 <TIM_Base_SetConfig+0x114>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d023      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <TIM_Base_SetConfig+0x118>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01f      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a29      	ldr	r2, [pc, #164]	; (800726c <TIM_Base_SetConfig+0x11c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01b      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a28      	ldr	r2, [pc, #160]	; (8007270 <TIM_Base_SetConfig+0x120>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d017      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a27      	ldr	r2, [pc, #156]	; (8007274 <TIM_Base_SetConfig+0x124>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a26      	ldr	r2, [pc, #152]	; (8007278 <TIM_Base_SetConfig+0x128>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00f      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a25      	ldr	r2, [pc, #148]	; (800727c <TIM_Base_SetConfig+0x12c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00b      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a24      	ldr	r2, [pc, #144]	; (8007280 <TIM_Base_SetConfig+0x130>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a23      	ldr	r2, [pc, #140]	; (8007284 <TIM_Base_SetConfig+0x134>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a22      	ldr	r2, [pc, #136]	; (8007288 <TIM_Base_SetConfig+0x138>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a09      	ldr	r2, [pc, #36]	; (8007260 <TIM_Base_SetConfig+0x110>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_Base_SetConfig+0xf8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a0b      	ldr	r2, [pc, #44]	; (8007270 <TIM_Base_SetConfig+0x120>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d103      	bne.n	8007250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	615a      	str	r2, [r3, #20]
}
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	40010000 	.word	0x40010000
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40010400 	.word	0x40010400
 8007274:	40014000 	.word	0x40014000
 8007278:	40014400 	.word	0x40014400
 800727c:	40014800 	.word	0x40014800
 8007280:	40001800 	.word	0x40001800
 8007284:	40001c00 	.word	0x40001c00
 8007288:	40002000 	.word	0x40002000

0800728c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0201 	bic.w	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 0302 	bic.w	r3, r3, #2
 80072d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a20      	ldr	r2, [pc, #128]	; (8007364 <TIM_OC1_SetConfig+0xd8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_OC1_SetConfig+0x64>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <TIM_OC1_SetConfig+0xdc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10c      	bne.n	800730a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0308 	bic.w	r3, r3, #8
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <TIM_OC1_SetConfig+0xd8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_OC1_SetConfig+0x8e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a14      	ldr	r2, [pc, #80]	; (8007368 <TIM_OC1_SetConfig+0xdc>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d111      	bne.n	800733e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	621a      	str	r2, [r3, #32]
}
 8007358:	bf00      	nop
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000
 8007368:	40010400 	.word	0x40010400

0800736c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f023 0210 	bic.w	r2, r3, #16
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0320 	bic.w	r3, r3, #32
 80073b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <TIM_OC2_SetConfig+0xe0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_OC2_SetConfig+0x68>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a20      	ldr	r2, [pc, #128]	; (8007450 <TIM_OC2_SetConfig+0xe4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10d      	bne.n	80073f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <TIM_OC2_SetConfig+0xe0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC2_SetConfig+0x94>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a15      	ldr	r2, [pc, #84]	; (8007450 <TIM_OC2_SetConfig+0xe4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d113      	bne.n	8007428 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800749c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a21      	ldr	r2, [pc, #132]	; (8007534 <TIM_OC3_SetConfig+0xe0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d003      	beq.n	80074ba <TIM_OC3_SetConfig+0x66>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a20      	ldr	r2, [pc, #128]	; (8007538 <TIM_OC3_SetConfig+0xe4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10d      	bne.n	80074d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <TIM_OC3_SetConfig+0xe0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_OC3_SetConfig+0x92>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a15      	ldr	r2, [pc, #84]	; (8007538 <TIM_OC3_SetConfig+0xe4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d113      	bne.n	800750e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	621a      	str	r2, [r3, #32]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40010000 	.word	0x40010000
 8007538:	40010400 	.word	0x40010400

0800753c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a11      	ldr	r2, [pc, #68]	; (80075dc <TIM_OC4_SetConfig+0xa0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_OC4_SetConfig+0x68>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a10      	ldr	r2, [pc, #64]	; (80075e0 <TIM_OC4_SetConfig+0xa4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d109      	bne.n	80075b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	019b      	lsls	r3, r3, #6
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40010400 	.word	0x40010400

080075e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2201      	movs	r2, #1
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1a      	ldr	r2, [r3, #32]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	43db      	mvns	r3, r3
 8007606:	401a      	ands	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007640:	2302      	movs	r3, #2
 8007642:	e05a      	b.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a20      	ldr	r2, [pc, #128]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007690:	d01d      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1c      	ldr	r2, [pc, #112]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d018      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1a      	ldr	r2, [pc, #104]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a19      	ldr	r2, [pc, #100]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a17      	ldr	r2, [pc, #92]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a14      	ldr	r2, [pc, #80]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d10c      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr
 8007704:	40010000 	.word	0x40010000
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
 8007710:	40000c00 	.word	0x40000c00
 8007714:	40010400 	.word	0x40010400
 8007718:	40014000 	.word	0x40014000
 800771c:	40001800 	.word	0x40001800

08007720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr

08007732 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e03f      	b.n	80077d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa f978 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2224      	movs	r2, #36	; 0x24
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fc87 	bl	800809c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800779c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b08a      	sub	sp, #40	; 0x28
 80077e2:	af02      	add	r7, sp, #8
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d17c      	bne.n	80078f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_UART_Transmit+0x2c>
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e075      	b.n	80078fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_UART_Transmit+0x3e>
 8007818:	2302      	movs	r3, #2
 800781a:	e06e      	b.n	80078fa <HAL_UART_Transmit+0x11c>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2221      	movs	r2, #33	; 0x21
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007832:	f7fa fa15 	bl	8001c60 <HAL_GetTick>
 8007836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784c:	d108      	bne.n	8007860 <HAL_UART_Transmit+0x82>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e003      	b.n	8007868 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007870:	e02a      	b.n	80078c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fa3a 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e036      	b.n	80078fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	3302      	adds	r3, #2
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e007      	b.n	80078ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1cf      	bne.n	8007872 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	2140      	movs	r1, #64	; 0x40
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fa0a 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4613      	mov	r3, r2
 800790e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b20      	cmp	r3, #32
 800791a:	d11d      	bne.n	8007958 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_UART_Receive_IT+0x26>
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e016      	b.n	800795a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_UART_Receive_IT+0x38>
 8007936:	2302      	movs	r3, #2
 8007938:	e00f      	b.n	800795a <HAL_UART_Receive_IT+0x58>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	461a      	mov	r2, r3
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fa1b 	bl	8007d8a <UART_Start_Receive_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	e000      	b.n	800795a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007958:	2302      	movs	r3, #2
  }
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007984:	2300      	movs	r3, #0
 8007986:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10d      	bne.n	80079b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_UART_IRQHandler+0x52>
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 facb 	bl	8007f4a <UART_Receive_IT>
      return;
 80079b4:	e17c      	b.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80b1 	beq.w	8007b20 <HAL_UART_IRQHandler+0x1bc>
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_UART_IRQHandler+0x70>
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80a6 	beq.w	8007b20 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <HAL_UART_IRQHandler+0x90>
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	f043 0201 	orr.w	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	f003 0304 	and.w	r3, r3, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <HAL_UART_IRQHandler+0xb0>
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	f043 0202 	orr.w	r2, r3, #2
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <HAL_UART_IRQHandler+0xd0>
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	f043 0204 	orr.w	r2, r3, #4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00f      	beq.n	8007a5e <HAL_UART_IRQHandler+0xfa>
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <HAL_UART_IRQHandler+0xee>
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f043 0208 	orr.w	r2, r3, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 811f 	beq.w	8007ca6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_UART_IRQHandler+0x11e>
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa64 	bl	8007f4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <HAL_UART_IRQHandler+0x146>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d031      	beq.n	8007b0e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9a6 	bl	8007dfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d123      	bne.n	8007b06 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695a      	ldr	r2, [r3, #20]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007acc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d013      	beq.n	8007afe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	4a77      	ldr	r2, [pc, #476]	; (8007cb8 <HAL_UART_IRQHandler+0x354>)
 8007adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fa fbe8 	bl	80022b8 <HAL_DMA_Abort_IT>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d016      	beq.n	8007b1c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	e00e      	b.n	8007b1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f8e5 	bl	8007cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	e00a      	b.n	8007b1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f8e1 	bl	8007cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	e006      	b.n	8007b1c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f8dd 	bl	8007cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b1a:	e0c4      	b.n	8007ca6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	bf00      	nop
    return;
 8007b1e:	e0c2      	b.n	8007ca6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f040 80a2 	bne.w	8007c6e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 809c 	beq.w	8007c6e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8096 	beq.w	8007c6e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d14f      	bne.n	8007c06 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007b70:	8a3b      	ldrh	r3, [r7, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8099 	beq.w	8007caa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b7c:	8a3a      	ldrh	r2, [r7, #16]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	f080 8093 	bcs.w	8007caa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8a3a      	ldrh	r2, [r7, #16]
 8007b88:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b94:	d02b      	beq.n	8007bee <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ba4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695a      	ldr	r2, [r3, #20]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0201 	bic.w	r2, r2, #1
 8007bb4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0210 	bic.w	r2, r2, #16
 8007be2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fa faf5 	bl	80021d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f86e 	bl	8007ce0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c04:	e051      	b.n	8007caa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d047      	beq.n	8007cae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007c1e:	8a7b      	ldrh	r3, [r7, #18]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d044      	beq.n	8007cae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c32:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695a      	ldr	r2, [r3, #20]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0210 	bic.w	r2, r2, #16
 8007c60:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c62:	8a7b      	ldrh	r3, [r7, #18]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f83a 	bl	8007ce0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c6c:	e01f      	b.n	8007cae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <HAL_UART_IRQHandler+0x326>
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8fa 	bl	8007e7c <UART_Transmit_IT>
    return;
 8007c88:	e012      	b.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00d      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d008      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f93b 	bl	8007f1a <UART_EndTransmit_IT>
    return;
 8007ca4:	e004      	b.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
    return;
 8007ca6:	bf00      	nop
 8007ca8:	e002      	b.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007caa:	bf00      	nop
 8007cac:	e000      	b.n	8007cb0 <HAL_UART_IRQHandler+0x34c>
      return;
 8007cae:	bf00      	nop
  }
}
 8007cb0:	3728      	adds	r7, #40	; 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08007e55 	.word	0x08007e55

08007cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d06:	e02c      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d028      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d16:	f7f9 ffa3 	bl	8001c60 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d21d      	bcs.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	695a      	ldr	r2, [r3, #20]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e00f      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	bf0c      	ite	eq
 8007d72:	2301      	moveq	r3, #1
 8007d74:	2300      	movne	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d0c3      	beq.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	4613      	mov	r3, r2
 8007d96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	88fa      	ldrh	r2, [r7, #6]
 8007da8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2222      	movs	r2, #34	; 0x22
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695a      	ldr	r2, [r3, #20]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0201 	orr.w	r2, r2, #1
 8007dde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0220 	orr.w	r2, r2, #32
 8007dee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d107      	bne.n	8007e3c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0210 	bic.w	r2, r2, #16
 8007e3a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7ff ff2d 	bl	8007cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b21      	cmp	r3, #33	; 0x21
 8007e8e:	d13e      	bne.n	8007f0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e98:	d114      	bne.n	8007ec4 <UART_Transmit_IT+0x48>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d110      	bne.n	8007ec4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	1c9a      	adds	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	621a      	str	r2, [r3, #32]
 8007ec2:	e008      	b.n	8007ed6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6211      	str	r1, [r2, #32]
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10f      	bne.n	8007f0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff febe 	bl	8007cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b086      	sub	sp, #24
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	f040 8099 	bne.w	8008092 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f68:	d117      	bne.n	8007f9a <UART_Receive_IT+0x50>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d113      	bne.n	8007f9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	1c9a      	adds	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28
 8007f98:	e026      	b.n	8007fe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fac:	d007      	beq.n	8007fbe <UART_Receive_IT+0x74>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <UART_Receive_IT+0x82>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e008      	b.n	8007fde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d148      	bne.n	800808e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0220 	bic.w	r2, r2, #32
 800800a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695a      	ldr	r2, [r3, #20]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0201 	bic.w	r2, r2, #1
 800802a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	2b01      	cmp	r3, #1
 800803a:	d123      	bne.n	8008084 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0210 	bic.w	r2, r2, #16
 8008050:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b10      	cmp	r3, #16
 800805e:	d10a      	bne.n	8008076 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fe2f 	bl	8007ce0 <HAL_UARTEx_RxEventCallback>
 8008082:	e002      	b.n	800808a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7f8 fcc1 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	e002      	b.n	8008094 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e000      	b.n	8008094 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008092:	2302      	movs	r3, #2
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80080dc:	f023 030c 	bic.w	r3, r3, #12
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	430b      	orrs	r3, r1
 80080e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699a      	ldr	r2, [r3, #24]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a57      	ldr	r2, [pc, #348]	; (8008264 <UART_SetConfig+0x1c8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <UART_SetConfig+0x78>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a56      	ldr	r2, [pc, #344]	; (8008268 <UART_SetConfig+0x1cc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d103      	bne.n	800811c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008114:	f7fc fd52 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	e002      	b.n	8008122 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800811c:	f7fc fd2c 	bl	8004b78 <HAL_RCC_GetPCLK1Freq>
 8008120:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812a:	d14c      	bne.n	80081c6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009a      	lsls	r2, r3, #2
 8008136:	441a      	add	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008142:	4a4a      	ldr	r2, [pc, #296]	; (800826c <UART_SetConfig+0x1d0>)
 8008144:	fba2 2303 	umull	r2, r3, r2, r3
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	0119      	lsls	r1, r3, #4
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009a      	lsls	r2, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008162:	4b42      	ldr	r3, [pc, #264]	; (800826c <UART_SetConfig+0x1d0>)
 8008164:	fba3 0302 	umull	r0, r3, r3, r2
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	2064      	movs	r0, #100	; 0x64
 800816c:	fb00 f303 	mul.w	r3, r0, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	3332      	adds	r3, #50	; 0x32
 8008176:	4a3d      	ldr	r2, [pc, #244]	; (800826c <UART_SetConfig+0x1d0>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	095b      	lsrs	r3, r3, #5
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008184:	4419      	add	r1, r3
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009a      	lsls	r2, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	fbb2 f2f3 	udiv	r2, r2, r3
 800819c:	4b33      	ldr	r3, [pc, #204]	; (800826c <UART_SetConfig+0x1d0>)
 800819e:	fba3 0302 	umull	r0, r3, r3, r2
 80081a2:	095b      	lsrs	r3, r3, #5
 80081a4:	2064      	movs	r0, #100	; 0x64
 80081a6:	fb00 f303 	mul.w	r3, r0, r3
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	3332      	adds	r3, #50	; 0x32
 80081b0:	4a2e      	ldr	r2, [pc, #184]	; (800826c <UART_SetConfig+0x1d0>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	f003 0207 	and.w	r2, r3, #7
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	440a      	add	r2, r1
 80081c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081c4:	e04a      	b.n	800825c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009a      	lsls	r2, r3, #2
 80081d0:	441a      	add	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	4a23      	ldr	r2, [pc, #140]	; (800826c <UART_SetConfig+0x1d0>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	0119      	lsls	r1, r3, #4
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009a      	lsls	r2, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081fc:	4b1b      	ldr	r3, [pc, #108]	; (800826c <UART_SetConfig+0x1d0>)
 80081fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2064      	movs	r0, #100	; 0x64
 8008206:	fb00 f303 	mul.w	r3, r0, r3
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	3332      	adds	r3, #50	; 0x32
 8008210:	4a16      	ldr	r2, [pc, #88]	; (800826c <UART_SetConfig+0x1d0>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800821c:	4419      	add	r1, r3
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009a      	lsls	r2, r3, #2
 8008228:	441a      	add	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	fbb2 f2f3 	udiv	r2, r2, r3
 8008234:	4b0d      	ldr	r3, [pc, #52]	; (800826c <UART_SetConfig+0x1d0>)
 8008236:	fba3 0302 	umull	r0, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	2064      	movs	r0, #100	; 0x64
 800823e:	fb00 f303 	mul.w	r3, r0, r3
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	3332      	adds	r3, #50	; 0x32
 8008248:	4a08      	ldr	r2, [pc, #32]	; (800826c <UART_SetConfig+0x1d0>)
 800824a:	fba2 2303 	umull	r2, r3, r2, r3
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	440a      	add	r2, r1
 800825a:	609a      	str	r2, [r3, #8]
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40011000 	.word	0x40011000
 8008268:	40011400 	.word	0x40011400
 800826c:	51eb851f 	.word	0x51eb851f

08008270 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008270:	b084      	sub	sp, #16
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	f107 001c 	add.w	r0, r7, #28
 800827e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008286:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008288:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800828a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800828e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008292:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008296:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800829a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80082aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	b004      	add	sp, #16
 80082c2:	4770      	bx	lr

080082c4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr

080082dc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr

080082fc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2203      	movs	r2, #3
 8008308:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800830a:	2002      	movs	r0, #2
 800830c:	f7f9 fcb2 	bl	8001c74 <HAL_Delay>
  
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0303 	and.w	r3, r3, #3
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008352:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008358:	431a      	orrs	r2, r3
                       Command->CPSM);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800835e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800836e:	f023 030f 	bic.w	r3, r3, #15
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr

08008386 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	b2db      	uxtb	r3, r3
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr

0800839e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3314      	adds	r3, #20
 80083ac:	461a      	mov	r2, r3
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	4413      	add	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
}  
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr

080083c2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80083e8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80083ee:	431a      	orrs	r2, r3
                       Data->DPSM);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80083f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800840c:	2300      	movs	r3, #0

}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008426:	2310      	movs	r3, #16
 8008428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800842a:	2340      	movs	r3, #64	; 0x40
 800842c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008438:	f107 0308 	add.w	r3, r7, #8
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff ff78 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008444:	f241 3288 	movw	r2, #5000	; 0x1388
 8008448:	2110      	movs	r1, #16
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa42 	bl	80088d4 <SDMMC_GetCmdResp1>
 8008450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008452:	69fb      	ldr	r3, [r7, #28]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3720      	adds	r7, #32
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800846a:	2311      	movs	r3, #17
 800846c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800846e:	2340      	movs	r3, #64	; 0x40
 8008470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800847c:	f107 0308 	add.w	r3, r7, #8
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ff56 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008488:	f241 3288 	movw	r2, #5000	; 0x1388
 800848c:	2111      	movs	r1, #17
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa20 	bl	80088d4 <SDMMC_GetCmdResp1>
 8008494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008496:	69fb      	ldr	r3, [r7, #28]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3720      	adds	r7, #32
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80084ae:	2312      	movs	r3, #18
 80084b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084b2:	2340      	movs	r3, #64	; 0x40
 80084b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084c0:	f107 0308 	add.w	r3, r7, #8
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff ff34 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80084cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d0:	2112      	movs	r1, #18
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9fe 	bl	80088d4 <SDMMC_GetCmdResp1>
 80084d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084da:	69fb      	ldr	r3, [r7, #28]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3720      	adds	r7, #32
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80084f2:	2318      	movs	r3, #24
 80084f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084f6:	2340      	movs	r3, #64	; 0x40
 80084f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008502:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008504:	f107 0308 	add.w	r3, r7, #8
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff ff12 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008510:	f241 3288 	movw	r2, #5000	; 0x1388
 8008514:	2118      	movs	r1, #24
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9dc 	bl	80088d4 <SDMMC_GetCmdResp1>
 800851c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800851e:	69fb      	ldr	r3, [r7, #28]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008536:	2319      	movs	r3, #25
 8008538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800853a:	2340      	movs	r3, #64	; 0x40
 800853c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008546:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008548:	f107 0308 	add.w	r3, r7, #8
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fef0 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008554:	f241 3288 	movw	r2, #5000	; 0x1388
 8008558:	2119      	movs	r1, #25
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f9ba 	bl	80088d4 <SDMMC_GetCmdResp1>
 8008560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008562:	69fb      	ldr	r3, [r7, #28]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008578:	230c      	movs	r3, #12
 800857a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800857c:	2340      	movs	r3, #64	; 0x40
 800857e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008588:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fecf 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008596:	4a05      	ldr	r2, [pc, #20]	; (80085ac <SDMMC_CmdStopTransfer+0x40>)
 8008598:	210c      	movs	r1, #12
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f99a 	bl	80088d4 <SDMMC_GetCmdResp1>
 80085a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a2:	69fb      	ldr	r3, [r7, #28]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	05f5e100 	.word	0x05f5e100

080085b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08a      	sub	sp, #40	; 0x28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80085c0:	2307      	movs	r3, #7
 80085c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085d2:	f107 0310 	add.w	r3, r7, #16
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff feab 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80085de:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e2:	2107      	movs	r1, #7
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f975 	bl	80088d4 <SDMMC_GetCmdResp1>
 80085ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3728      	adds	r7, #40	; 0x28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b088      	sub	sp, #32
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008606:	2300      	movs	r3, #0
 8008608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800860e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008612:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008614:	f107 0308 	add.w	r3, r7, #8
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff fe8a 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f92d 	bl	8008880 <SDMMC_GetCmdError>
 8008626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008628:	69fb      	ldr	r3, [r7, #28]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b088      	sub	sp, #32
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800863a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800863e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008640:	2308      	movs	r3, #8
 8008642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008644:	2340      	movs	r3, #64	; 0x40
 8008646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800864c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fe6b 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fb20 	bl	8008ca4 <SDMMC_GetCmdResp7>
 8008664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008666:	69fb      	ldr	r3, [r7, #28]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800867e:	2337      	movs	r3, #55	; 0x37
 8008680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008682:	2340      	movs	r3, #64	; 0x40
 8008684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800868a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fe4c 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800869c:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a0:	2137      	movs	r1, #55	; 0x37
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f916 	bl	80088d4 <SDMMC_GetCmdResp1>
 80086a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086aa:	69fb      	ldr	r3, [r7, #28]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80086ca:	2329      	movs	r3, #41	; 0x29
 80086cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086ce:	2340      	movs	r3, #64	; 0x40
 80086d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff fe26 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa29 	bl	8008b40 <SDMMC_GetCmdResp3>
 80086ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086f0:	69fb      	ldr	r3, [r7, #28]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3720      	adds	r7, #32
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b088      	sub	sp, #32
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008708:	2306      	movs	r3, #6
 800870a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008718:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fe07 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008726:	f241 3288 	movw	r2, #5000	; 0x1388
 800872a:	2106      	movs	r1, #6
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f8d1 	bl	80088d4 <SDMMC_GetCmdResp1>
 8008732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008734:	69fb      	ldr	r3, [r7, #28]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b088      	sub	sp, #32
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800874a:	2333      	movs	r3, #51	; 0x33
 800874c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800874e:	2340      	movs	r3, #64	; 0x40
 8008750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800875a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fde6 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008768:	f241 3288 	movw	r2, #5000	; 0x1388
 800876c:	2133      	movs	r1, #51	; 0x33
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8b0 	bl	80088d4 <SDMMC_GetCmdResp1>
 8008774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008776:	69fb      	ldr	r3, [r7, #28]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3720      	adds	r7, #32
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800878c:	2302      	movs	r3, #2
 800878e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008790:	23c0      	movs	r3, #192	; 0xc0
 8008792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800879e:	f107 0308 	add.w	r3, r7, #8
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff fdc5 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f980 	bl	8008ab0 <SDMMC_GetCmdResp2>
 80087b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b2:	69fb      	ldr	r3, [r7, #28]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087ca:	2309      	movs	r3, #9
 80087cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087ce:	23c0      	movs	r3, #192	; 0xc0
 80087d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087dc:	f107 0308 	add.w	r3, r7, #8
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fda6 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f961 	bl	8008ab0 <SDMMC_GetCmdResp2>
 80087ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f0:	69fb      	ldr	r3, [r7, #28]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b088      	sub	sp, #32
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008808:	2303      	movs	r3, #3
 800880a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fd87 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	2103      	movs	r1, #3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f9c4 	bl	8008bb8 <SDMMC_GetCmdResp6>
 8008830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008832:	69fb      	ldr	r3, [r7, #28]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800884a:	230d      	movs	r3, #13
 800884c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800884e:	2340      	movs	r3, #64	; 0x40
 8008850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800885a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800885c:	f107 0308 	add.w	r3, r7, #8
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fd66 	bl	8008334 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008868:	f241 3288 	movw	r2, #5000	; 0x1388
 800886c:	210d      	movs	r1, #13
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f830 	bl	80088d4 <SDMMC_GetCmdResp1>
 8008874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008876:	69fb      	ldr	r3, [r7, #28]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3720      	adds	r7, #32
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008888:	4b10      	ldr	r3, [pc, #64]	; (80088cc <SDMMC_GetCmdError+0x4c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <SDMMC_GetCmdError+0x50>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	0a5b      	lsrs	r3, r3, #9
 8008894:	f241 3288 	movw	r2, #5000	; 0x1388
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1e5a      	subs	r2, r3, #1
 80088a2:	60fa      	str	r2, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d102      	bne.n	80088ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ac:	e009      	b.n	80088c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f1      	beq.n	800889e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	22c5      	movs	r2, #197	; 0xc5
 80088be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	20000040 	.word	0x20000040
 80088d0:	10624dd3 	.word	0x10624dd3

080088d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	460b      	mov	r3, r1
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80088e2:	4b70      	ldr	r3, [pc, #448]	; (8008aa4 <SDMMC_GetCmdResp1+0x1d0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a70      	ldr	r2, [pc, #448]	; (8008aa8 <SDMMC_GetCmdResp1+0x1d4>)
 80088e8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ec:	0a5a      	lsrs	r2, r3, #9
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	1e5a      	subs	r2, r3, #1
 80088fa:	61fa      	str	r2, [r7, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008904:	e0c9      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0ef      	beq.n	80088f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1ea      	bne.n	80088f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d004      	beq.n	8008936 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2204      	movs	r2, #4
 8008930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008932:	2304      	movs	r3, #4
 8008934:	e0b1      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008948:	2301      	movs	r3, #1
 800894a:	e0a6      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	22c5      	movs	r2, #197	; 0xc5
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fd17 	bl	8008386 <SDIO_GetCommandResponse>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	4293      	cmp	r3, r2
 8008960:	d001      	beq.n	8008966 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008962:	2301      	movs	r3, #1
 8008964:	e099      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008966:	2100      	movs	r1, #0
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7ff fd18 	bl	800839e <SDIO_GetResponse>
 800896e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4b4e      	ldr	r3, [pc, #312]	; (8008aac <SDMMC_GetCmdResp1+0x1d8>)
 8008974:	4013      	ands	r3, r2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800897a:	2300      	movs	r3, #0
 800897c:	e08d      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	da02      	bge.n	800898a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008988:	e087      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	e080      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80089a2:	2380      	movs	r3, #128	; 0x80
 80089a4:	e079      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80089b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089b4:	e071      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80089c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c4:	e069      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089d4:	e061      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089e4:	e059      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089f4:	e051      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a04:	e049      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a14:	e041      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a24:	e039      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a34:	e031      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a44:	e029      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a54:	e021      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a64:	e019      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a74:	e011      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a84:	e009      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f003 0308 	and.w	r3, r3, #8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a94:	e001      	b.n	8008a9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000040 	.word	0x20000040
 8008aa8:	10624dd3 	.word	0x10624dd3
 8008aac:	fdffe008 	.word	0xfdffe008

08008ab0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ab8:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <SDMMC_GetCmdResp2+0x88>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <SDMMC_GetCmdResp2+0x8c>)
 8008abe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac2:	0a5b      	lsrs	r3, r3, #9
 8008ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac8:	fb02 f303 	mul.w	r3, r2, r3
 8008acc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	60fa      	str	r2, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d102      	bne.n	8008ade <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008adc:	e026      	b.n	8008b2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0ef      	beq.n	8008ace <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1ea      	bne.n	8008ace <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2204      	movs	r2, #4
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b0a:	2304      	movs	r3, #4
 8008b0c:	e00e      	b.n	8008b2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e003      	b.n	8008b2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	22c5      	movs	r2, #197	; 0xc5
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000040 	.word	0x20000040
 8008b3c:	10624dd3 	.word	0x10624dd3

08008b40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <SDMMC_GetCmdResp3+0x70>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a19      	ldr	r2, [pc, #100]	; (8008bb4 <SDMMC_GetCmdResp3+0x74>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	0a5b      	lsrs	r3, r3, #9
 8008b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b58:	fb02 f303 	mul.w	r3, r2, r3
 8008b5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1e5a      	subs	r2, r3, #1
 8008b62:	60fa      	str	r2, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b6c:	e01b      	b.n	8008ba6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0ef      	beq.n	8008b5e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1ea      	bne.n	8008b5e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2204      	movs	r2, #4
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	e003      	b.n	8008ba6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	22c5      	movs	r2, #197	; 0xc5
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr
 8008bb0:	20000040 	.word	0x20000040
 8008bb4:	10624dd3 	.word	0x10624dd3

08008bb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bc6:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <SDMMC_GetCmdResp6+0xe4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a35      	ldr	r2, [pc, #212]	; (8008ca0 <SDMMC_GetCmdResp6+0xe8>)
 8008bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd0:	0a5b      	lsrs	r3, r3, #9
 8008bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
 8008bda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	1e5a      	subs	r2, r3, #1
 8008be0:	61fa      	str	r2, [r7, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bea:	e052      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0ef      	beq.n	8008bdc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1ea      	bne.n	8008bdc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d004      	beq.n	8008c1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2204      	movs	r2, #4
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c18:	2304      	movs	r3, #4
 8008c1a:	e03a      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d004      	beq.n	8008c32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e02f      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff fba7 	bl	8008386 <SDIO_GetCommandResponse>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d001      	beq.n	8008c46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e025      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	22c5      	movs	r2, #197	; 0xc5
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff fba5 	bl	800839e <SDIO_GetResponse>
 8008c54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d106      	bne.n	8008c6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	0c1b      	lsrs	r3, r3, #16
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e011      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c7c:	e009      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c8c:	e001      	b.n	8008c92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000040 	.word	0x20000040
 8008ca0:	10624dd3 	.word	0x10624dd3

08008ca4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cac:	4b22      	ldr	r3, [pc, #136]	; (8008d38 <SDMMC_GetCmdResp7+0x94>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a22      	ldr	r2, [pc, #136]	; (8008d3c <SDMMC_GetCmdResp7+0x98>)
 8008cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb6:	0a5b      	lsrs	r3, r3, #9
 8008cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbc:	fb02 f303 	mul.w	r3, r2, r3
 8008cc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	60fa      	str	r2, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cd0:	e02c      	b.n	8008d2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0ef      	beq.n	8008cc2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1ea      	bne.n	8008cc2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cfe:	2304      	movs	r3, #4
 8008d00:	e014      	b.n	8008d2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e009      	b.n	8008d2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2240      	movs	r2, #64	; 0x40
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d2a:	2300      	movs	r3, #0
  
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	20000040 	.word	0x20000040
 8008d3c:	10624dd3 	.word	0x10624dd3

08008d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d40:	b084      	sub	sp, #16
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	f107 001c 	add.w	r0, r7, #28
 8008d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d122      	bne.n	8008d9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d105      	bne.n	8008d92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fafa 	bl	800a38c <USB_CoreReset>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
 8008d9c:	e010      	b.n	8008dc0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 faee 	bl	800a38c <USB_CoreReset>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10b      	bne.n	8008dde <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f043 0206 	orr.w	r2, r3, #6
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f043 0220 	orr.w	r2, r3, #32
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dea:	b004      	add	sp, #16
 8008dec:	4770      	bx	lr
	...

08008df0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d165      	bne.n	8008ed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4a41      	ldr	r2, [pc, #260]	; (8008f0c <USB_SetTurnaroundTime+0x11c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d906      	bls.n	8008e1a <USB_SetTurnaroundTime+0x2a>
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <USB_SetTurnaroundTime+0x120>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d202      	bcs.n	8008e1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e14:	230f      	movs	r3, #15
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	e062      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	4a3c      	ldr	r2, [pc, #240]	; (8008f10 <USB_SetTurnaroundTime+0x120>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d306      	bcc.n	8008e30 <USB_SetTurnaroundTime+0x40>
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <USB_SetTurnaroundTime+0x124>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d202      	bcs.n	8008e30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e2a:	230e      	movs	r3, #14
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	e057      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4a38      	ldr	r2, [pc, #224]	; (8008f14 <USB_SetTurnaroundTime+0x124>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d306      	bcc.n	8008e46 <USB_SetTurnaroundTime+0x56>
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4a37      	ldr	r2, [pc, #220]	; (8008f18 <USB_SetTurnaroundTime+0x128>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d202      	bcs.n	8008e46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e40:	230d      	movs	r3, #13
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e04c      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4a33      	ldr	r2, [pc, #204]	; (8008f18 <USB_SetTurnaroundTime+0x128>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d306      	bcc.n	8008e5c <USB_SetTurnaroundTime+0x6c>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	4a32      	ldr	r2, [pc, #200]	; (8008f1c <USB_SetTurnaroundTime+0x12c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d802      	bhi.n	8008e5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e56:	230c      	movs	r3, #12
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	e041      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4a2f      	ldr	r2, [pc, #188]	; (8008f1c <USB_SetTurnaroundTime+0x12c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d906      	bls.n	8008e72 <USB_SetTurnaroundTime+0x82>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4a2e      	ldr	r2, [pc, #184]	; (8008f20 <USB_SetTurnaroundTime+0x130>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d802      	bhi.n	8008e72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e6c:	230b      	movs	r3, #11
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	e036      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a2a      	ldr	r2, [pc, #168]	; (8008f20 <USB_SetTurnaroundTime+0x130>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d906      	bls.n	8008e88 <USB_SetTurnaroundTime+0x98>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4a29      	ldr	r2, [pc, #164]	; (8008f24 <USB_SetTurnaroundTime+0x134>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d802      	bhi.n	8008e88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e82:	230a      	movs	r3, #10
 8008e84:	617b      	str	r3, [r7, #20]
 8008e86:	e02b      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4a26      	ldr	r2, [pc, #152]	; (8008f24 <USB_SetTurnaroundTime+0x134>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d906      	bls.n	8008e9e <USB_SetTurnaroundTime+0xae>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4a25      	ldr	r2, [pc, #148]	; (8008f28 <USB_SetTurnaroundTime+0x138>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d202      	bcs.n	8008e9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e98:	2309      	movs	r3, #9
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	e020      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4a21      	ldr	r2, [pc, #132]	; (8008f28 <USB_SetTurnaroundTime+0x138>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d306      	bcc.n	8008eb4 <USB_SetTurnaroundTime+0xc4>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <USB_SetTurnaroundTime+0x13c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d802      	bhi.n	8008eb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008eae:	2308      	movs	r3, #8
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	e015      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <USB_SetTurnaroundTime+0x13c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d906      	bls.n	8008eca <USB_SetTurnaroundTime+0xda>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4a1c      	ldr	r2, [pc, #112]	; (8008f30 <USB_SetTurnaroundTime+0x140>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d202      	bcs.n	8008eca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ec4:	2307      	movs	r3, #7
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e00a      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eca:	2306      	movs	r3, #6
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	e007      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008ed6:	2309      	movs	r3, #9
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e001      	b.n	8008ee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008edc:	2309      	movs	r3, #9
 8008ede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	00d8acbf 	.word	0x00d8acbf
 8008f10:	00e4e1c0 	.word	0x00e4e1c0
 8008f14:	00f42400 	.word	0x00f42400
 8008f18:	01067380 	.word	0x01067380
 8008f1c:	011a499f 	.word	0x011a499f
 8008f20:	01312cff 	.word	0x01312cff
 8008f24:	014ca43f 	.word	0x014ca43f
 8008f28:	016e3600 	.word	0x016e3600
 8008f2c:	01a6ab1f 	.word	0x01a6ab1f
 8008f30:	01e84800 	.word	0x01e84800

08008f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f043 0201 	orr.w	r2, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f023 0201 	bic.w	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr

08008f74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d115      	bne.n	8008fc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f7f8 fe66 	bl	8001c74 <HAL_Delay>
      ms++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 f961 	bl	800a276 <USB_GetMode>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d01e      	beq.n	8008ff8 <USB_SetCurrentMode+0x84>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b31      	cmp	r3, #49	; 0x31
 8008fbe:	d9f0      	bls.n	8008fa2 <USB_SetCurrentMode+0x2e>
 8008fc0:	e01a      	b.n	8008ff8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d115      	bne.n	8008ff4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	f7f8 fe4d 	bl	8001c74 <HAL_Delay>
      ms++;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f948 	bl	800a276 <USB_GetMode>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <USB_SetCurrentMode+0x84>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b31      	cmp	r3, #49	; 0x31
 8008ff0:	d9f0      	bls.n	8008fd4 <USB_SetCurrentMode+0x60>
 8008ff2:	e001      	b.n	8008ff8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e005      	b.n	8009004 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b32      	cmp	r3, #50	; 0x32
 8008ffc:	d101      	bne.n	8009002 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800900c:	b084      	sub	sp, #16
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800901a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009026:	2300      	movs	r3, #0
 8009028:	613b      	str	r3, [r7, #16]
 800902a:	e009      	b.n	8009040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3340      	adds	r3, #64	; 0x40
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	2200      	movs	r2, #0
 8009038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3301      	adds	r3, #1
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2b0e      	cmp	r3, #14
 8009044:	d9f2      	bls.n	800902c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d11c      	bne.n	8009086 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905a:	f043 0302 	orr.w	r3, r3, #2
 800905e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	639a      	str	r2, [r3, #56]	; 0x38
 8009084:	e00b      	b.n	800909e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009096:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a4:	461a      	mov	r2, r3
 80090a6:	2300      	movs	r3, #0
 80090a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b0:	4619      	mov	r1, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	461a      	mov	r2, r3
 80090ba:	680b      	ldr	r3, [r1, #0]
 80090bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d10c      	bne.n	80090de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80090ca:	2100      	movs	r1, #0
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f945 	bl	800935c <USB_SetDevSpeed>
 80090d2:	e008      	b.n	80090e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090d4:	2101      	movs	r1, #1
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f940 	bl	800935c <USB_SetDevSpeed>
 80090dc:	e003      	b.n	80090e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090de:	2103      	movs	r1, #3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f93b 	bl	800935c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090e6:	2110      	movs	r1, #16
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f8f3 	bl	80092d4 <USB_FlushTxFifo>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f90f 	bl	800931c <USB_FlushRxFifo>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	461a      	mov	r2, r3
 8009110:	2300      	movs	r3, #0
 8009112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911a:	461a      	mov	r2, r3
 800911c:	2300      	movs	r3, #0
 800911e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	461a      	mov	r2, r3
 8009128:	2300      	movs	r3, #0
 800912a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800912c:	2300      	movs	r3, #0
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	e043      	b.n	80091ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009148:	d118      	bne.n	800917c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915c:	461a      	mov	r2, r3
 800915e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	e013      	b.n	800918e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009172:	461a      	mov	r2, r3
 8009174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	e008      	b.n	800918e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	461a      	mov	r2, r3
 800918a:	2300      	movs	r3, #0
 800918c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919a:	461a      	mov	r2, r3
 800919c:	2300      	movs	r3, #0
 800919e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ac:	461a      	mov	r2, r3
 80091ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	3301      	adds	r3, #1
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d3b7      	bcc.n	8009132 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	e043      	b.n	8009250 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091de:	d118      	bne.n	8009212 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f2:	461a      	mov	r2, r3
 80091f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e013      	b.n	8009224 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	461a      	mov	r2, r3
 800920a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e008      	b.n	8009224 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	461a      	mov	r2, r3
 8009220:	2300      	movs	r3, #0
 8009222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	461a      	mov	r2, r3
 8009232:	2300      	movs	r3, #0
 8009234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009242:	461a      	mov	r2, r3
 8009244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	3301      	adds	r3, #1
 800924e:	613b      	str	r3, [r7, #16]
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	429a      	cmp	r2, r3
 8009256:	d3b7      	bcc.n	80091c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800926a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009278:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	d105      	bne.n	800928c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f043 0210 	orr.w	r2, r3, #16
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	4b0f      	ldr	r3, [pc, #60]	; (80092d0 <USB_DevInit+0x2c4>)
 8009292:	4313      	orrs	r3, r2
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d005      	beq.n	80092aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	f043 0208 	orr.w	r2, r3, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d107      	bne.n	80092c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092b8:	f043 0304 	orr.w	r3, r3, #4
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092cc:	b004      	add	sp, #16
 80092ce:	4770      	bx	lr
 80092d0:	803c3800 	.word	0x803c3800

080092d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	019b      	lsls	r3, r3, #6
 80092e6:	f043 0220 	orr.w	r2, r3, #32
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4a08      	ldr	r2, [pc, #32]	; (8009318 <USB_FlushTxFifo+0x44>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e006      	b.n	800930e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b20      	cmp	r3, #32
 800930a:	d0f0      	beq.n	80092ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr
 8009318:	00030d40 	.word	0x00030d40

0800931c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2210      	movs	r2, #16
 800932c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a08      	ldr	r2, [pc, #32]	; (8009358 <USB_FlushRxFifo+0x3c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d901      	bls.n	8009340 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e006      	b.n	800934e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	2b10      	cmp	r3, #16
 800934a:	d0f0      	beq.n	800932e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr
 8009358:	00030d40 	.word	0x00030d40

0800935c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800937c:	4313      	orrs	r3, r2
 800937e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr

0800938c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 0306 	and.w	r3, r3, #6
 80093a4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80093ac:	2300      	movs	r3, #0
 80093ae:	75fb      	strb	r3, [r7, #23]
 80093b0:	e00a      	b.n	80093c8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d002      	beq.n	80093be <USB_GetDevSpeed+0x32>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b06      	cmp	r3, #6
 80093bc:	d102      	bne.n	80093c4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80093be:	2302      	movs	r3, #2
 80093c0:	75fb      	strb	r3, [r7, #23]
 80093c2:	e001      	b.n	80093c8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80093c4:	230f      	movs	r3, #15
 80093c6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	785b      	ldrb	r3, [r3, #1]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d13a      	bne.n	8009466 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f6:	69da      	ldr	r2, [r3, #28]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	2101      	movs	r1, #1
 8009402:	fa01 f303 	lsl.w	r3, r1, r3
 8009406:	b29b      	uxth	r3, r3
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800940e:	4313      	orrs	r3, r2
 8009410:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d155      	bne.n	80094d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	78db      	ldrb	r3, [r3, #3]
 8009442:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009444:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	059b      	lsls	r3, r3, #22
 800944a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800944c:	4313      	orrs	r3, r2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800945e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	e036      	b.n	80094d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946c:	69da      	ldr	r2, [r3, #28]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	2101      	movs	r1, #1
 8009478:	fa01 f303 	lsl.w	r3, r1, r3
 800947c:	041b      	lsls	r3, r3, #16
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009484:	4313      	orrs	r3, r2
 8009486:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d11a      	bne.n	80094d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	78db      	ldrb	r3, [r3, #3]
 80094b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094ba:	430b      	orrs	r3, r1
 80094bc:	4313      	orrs	r3, r2
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	bc80      	pop	{r7}
 80094de:	4770      	bx	lr

080094e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	785b      	ldrb	r3, [r3, #1]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d161      	bne.n	80095c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800950e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009512:	d11f      	bne.n	8009554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800954e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 030f 	and.w	r3, r3, #15
 8009564:	2101      	movs	r1, #1
 8009566:	fa01 f303 	lsl.w	r3, r1, r3
 800956a:	b29b      	uxth	r3, r3
 800956c:	43db      	mvns	r3, r3
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009574:	4013      	ands	r3, r2
 8009576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957e:	69da      	ldr	r2, [r3, #28]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	43db      	mvns	r3, r3
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009598:	4013      	ands	r3, r2
 800959a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	0159      	lsls	r1, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	440b      	add	r3, r1
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	4619      	mov	r1, r3
 80095b8:	4b35      	ldr	r3, [pc, #212]	; (8009690 <USB_DeactivateEndpoint+0x1b0>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	600b      	str	r3, [r1, #0]
 80095be:	e060      	b.n	8009682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d6:	d11f      	bne.n	8009618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	0151      	lsls	r1, r2, #5
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	440a      	add	r2, r1
 80095ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	0151      	lsls	r1, r2, #5
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	440a      	add	r2, r1
 800960e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	2101      	movs	r1, #1
 800962a:	fa01 f303 	lsl.w	r3, r1, r3
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	43db      	mvns	r3, r3
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009638:	4013      	ands	r3, r2
 800963a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009642:	69da      	ldr	r2, [r3, #28]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 030f 	and.w	r3, r3, #15
 800964c:	2101      	movs	r1, #1
 800964e:	fa01 f303 	lsl.w	r3, r1, r3
 8009652:	041b      	lsls	r3, r3, #16
 8009654:	43db      	mvns	r3, r3
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800965c:	4013      	ands	r3, r2
 800965e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	0159      	lsls	r1, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	440b      	add	r3, r1
 8009676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967a:	4619      	mov	r1, r3
 800967c:	4b05      	ldr	r3, [pc, #20]	; (8009694 <USB_DeactivateEndpoint+0x1b4>)
 800967e:	4013      	ands	r3, r2
 8009680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	ec337800 	.word	0xec337800
 8009694:	eff37800 	.word	0xeff37800

08009698 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af02      	add	r7, sp, #8
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	f040 815c 	bne.w	8009972 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d132      	bne.n	8009728 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	0151      	lsls	r1, r2, #5
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	440a      	add	r2, r1
 80096fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	440a      	add	r2, r1
 800971c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009720:	0cdb      	lsrs	r3, r3, #19
 8009722:	04db      	lsls	r3, r3, #19
 8009724:	6113      	str	r3, [r2, #16]
 8009726:	e074      	b.n	8009812 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	440a      	add	r2, r1
 800973e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009742:	0cdb      	lsrs	r3, r3, #19
 8009744:	04db      	lsls	r3, r3, #19
 8009746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800976a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009778:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	6959      	ldr	r1, [r3, #20]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	440b      	add	r3, r1
 8009784:	1e59      	subs	r1, r3, #1
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	fbb1 f3f3 	udiv	r3, r1, r3
 800978e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009790:	4b9d      	ldr	r3, [pc, #628]	; (8009a08 <USB_EPStartXfer+0x370>)
 8009792:	400b      	ands	r3, r1
 8009794:	69b9      	ldr	r1, [r7, #24]
 8009796:	0148      	lsls	r0, r1, #5
 8009798:	69f9      	ldr	r1, [r7, #28]
 800979a:	4401      	add	r1, r0
 800979c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097a0:	4313      	orrs	r3, r2
 80097a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b0:	691a      	ldr	r2, [r3, #16]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097ba:	69b9      	ldr	r1, [r7, #24]
 80097bc:	0148      	lsls	r0, r1, #5
 80097be:	69f9      	ldr	r1, [r7, #28]
 80097c0:	4401      	add	r1, r0
 80097c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097c6:	4313      	orrs	r3, r2
 80097c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	78db      	ldrb	r3, [r3, #3]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d11f      	bne.n	8009812 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80097f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009810:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d14b      	bne.n	80098b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d009      	beq.n	8009834 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982c:	461a      	mov	r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	78db      	ldrb	r3, [r3, #3]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d128      	bne.n	800988e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009848:	2b00      	cmp	r3, #0
 800984a:	d110      	bne.n	800986e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	e00f      	b.n	800988e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800988c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	e12f      	b.n	8009b10 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	78db      	ldrb	r3, [r3, #3]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d015      	beq.n	8009904 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8117 	beq.w	8009b10 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f003 030f 	and.w	r3, r3, #15
 80098f2:	2101      	movs	r1, #1
 80098f4:	fa01 f303 	lsl.w	r3, r1, r3
 80098f8:	69f9      	ldr	r1, [r7, #28]
 80098fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098fe:	4313      	orrs	r3, r2
 8009900:	634b      	str	r3, [r1, #52]	; 0x34
 8009902:	e105      	b.n	8009b10 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009910:	2b00      	cmp	r3, #0
 8009912:	d110      	bne.n	8009936 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	0151      	lsls	r1, r2, #5
 8009926:	69fa      	ldr	r2, [r7, #28]
 8009928:	440a      	add	r2, r1
 800992a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	e00f      	b.n	8009956 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	0151      	lsls	r1, r2, #5
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	440a      	add	r2, r1
 800994c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009954:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	68d9      	ldr	r1, [r3, #12]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	781a      	ldrb	r2, [r3, #0]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	b298      	uxth	r0, r3
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4603      	mov	r3, r0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fa2a 	bl	8009dc4 <USB_WritePacket>
 8009970:	e0ce      	b.n	8009b10 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	0151      	lsls	r1, r2, #5
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	440a      	add	r2, r1
 8009988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800998c:	0cdb      	lsrs	r3, r3, #19
 800998e:	04db      	lsls	r3, r3, #19
 8009990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d126      	bne.n	8009a0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d4:	69b9      	ldr	r1, [r7, #24]
 80099d6:	0148      	lsls	r0, r1, #5
 80099d8:	69f9      	ldr	r1, [r7, #28]
 80099da:	4401      	add	r1, r0
 80099dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099e0:	4313      	orrs	r3, r2
 80099e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a02:	6113      	str	r3, [r2, #16]
 8009a04:	e036      	b.n	8009a74 <USB_EPStartXfer+0x3dc>
 8009a06:	bf00      	nop
 8009a08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	695a      	ldr	r2, [r3, #20]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	4413      	add	r3, r2
 8009a16:	1e5a      	subs	r2, r3, #1
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2e:	691a      	ldr	r2, [r3, #16]
 8009a30:	8afb      	ldrh	r3, [r7, #22]
 8009a32:	04d9      	lsls	r1, r3, #19
 8009a34:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <USB_EPStartXfer+0x484>)
 8009a36:	400b      	ands	r3, r1
 8009a38:	69b9      	ldr	r1, [r7, #24]
 8009a3a:	0148      	lsls	r0, r1, #5
 8009a3c:	69f9      	ldr	r1, [r7, #28]
 8009a3e:	4401      	add	r1, r0
 8009a40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a44:	4313      	orrs	r3, r2
 8009a46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	8af9      	ldrh	r1, [r7, #22]
 8009a5c:	fb01 f303 	mul.w	r3, r1, r3
 8009a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a64:	69b9      	ldr	r1, [r7, #24]
 8009a66:	0148      	lsls	r0, r1, #5
 8009a68:	69f9      	ldr	r1, [r7, #28]
 8009a6a:	4401      	add	r1, r0
 8009a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a70:	4313      	orrs	r3, r2
 8009a72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d10d      	bne.n	8009a96 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d009      	beq.n	8009a96 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	68d9      	ldr	r1, [r3, #12]
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a92:	460a      	mov	r2, r1
 8009a94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	78db      	ldrb	r3, [r3, #3]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d128      	bne.n	8009af0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d110      	bne.n	8009ad0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69ba      	ldr	r2, [r7, #24]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	e00f      	b.n	8009af0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	0151      	lsls	r1, r2, #5
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	440a      	add	r2, r1
 8009ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	0151      	lsls	r1, r2, #5
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	440a      	add	r2, r1
 8009b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	1ff80000 	.word	0x1ff80000

08009b20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	f040 80cd 	bne.w	8009cdc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d132      	bne.n	8009bb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	0151      	lsls	r1, r2, #5
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	440a      	add	r2, r1
 8009b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	0151      	lsls	r1, r2, #5
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	440a      	add	r2, r1
 8009b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba8:	0cdb      	lsrs	r3, r3, #19
 8009baa:	04db      	lsls	r3, r3, #19
 8009bac:	6113      	str	r3, [r2, #16]
 8009bae:	e04e      	b.n	8009c4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bca:	0cdb      	lsrs	r3, r3, #19
 8009bcc:	04db      	lsls	r3, r3, #19
 8009bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bf2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	695a      	ldr	r2, [r3, #20]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d903      	bls.n	8009c08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	0151      	lsls	r1, r2, #5
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	440a      	add	r2, r1
 8009c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c34:	691a      	ldr	r2, [r3, #16]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c3e:	6939      	ldr	r1, [r7, #16]
 8009c40:	0148      	lsls	r0, r1, #5
 8009c42:	6979      	ldr	r1, [r7, #20]
 8009c44:	4401      	add	r1, r0
 8009c46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d11e      	bne.n	8009c92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c68:	461a      	mov	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	e092      	b.n	8009db8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	0151      	lsls	r1, r2, #5
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	440a      	add	r2, r1
 8009ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d07e      	beq.n	8009db8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	2101      	movs	r1, #1
 8009ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd0:	6979      	ldr	r1, [r7, #20]
 8009cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	634b      	str	r3, [r1, #52]	; 0x34
 8009cda:	e06d      	b.n	8009db8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	0151      	lsls	r1, r2, #5
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cf6:	0cdb      	lsrs	r3, r3, #19
 8009cf8:	04db      	lsls	r3, r3, #19
 8009cfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d1e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d66:	6939      	ldr	r1, [r7, #16]
 8009d68:	0148      	lsls	r0, r1, #5
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	4401      	add	r1, r0
 8009d6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d72:	4313      	orrs	r3, r2
 8009d74:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009d76:	79fb      	ldrb	r3, [r7, #7]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d10d      	bne.n	8009d98 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	68d9      	ldr	r1, [r3, #12]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d94:	460a      	mov	r2, r1
 8009d96:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009db6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr

08009dc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b089      	sub	sp, #36	; 0x24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	71fb      	strb	r3, [r7, #7]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d123      	bne.n	8009e32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009dea:	88bb      	ldrh	r3, [r7, #4]
 8009dec:	3303      	adds	r3, #3
 8009dee:	089b      	lsrs	r3, r3, #2
 8009df0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009df2:	2300      	movs	r3, #0
 8009df4:	61bb      	str	r3, [r7, #24]
 8009df6:	e018      	b.n	8009e2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	031a      	lsls	r2, r3, #12
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	461a      	mov	r2, r3
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	3301      	adds	r3, #1
 8009e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	3301      	adds	r3, #1
 8009e22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	3301      	adds	r3, #1
 8009e28:	61bb      	str	r3, [r7, #24]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d3e2      	bcc.n	8009df8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3724      	adds	r7, #36	; 0x24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr

08009e3e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b08b      	sub	sp, #44	; 0x2c
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	60f8      	str	r0, [r7, #12]
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	089b      	lsrs	r3, r3, #2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e5c:	88fb      	ldrh	r3, [r7, #6]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e64:	2300      	movs	r3, #0
 8009e66:	623b      	str	r3, [r7, #32]
 8009e68:	e014      	b.n	8009e94 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	3301      	adds	r3, #1
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	3301      	adds	r3, #1
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	3301      	adds	r3, #1
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	3301      	adds	r3, #1
 8009e92:	623b      	str	r3, [r7, #32]
 8009e94:	6a3a      	ldr	r2, [r7, #32]
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d3e6      	bcc.n	8009e6a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e9c:	8bfb      	ldrh	r3, [r7, #30]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01e      	beq.n	8009ee0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eac:	461a      	mov	r2, r3
 8009eae:	f107 0310 	add.w	r3, r7, #16
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	00db      	lsls	r3, r3, #3
 8009ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	701a      	strb	r2, [r3, #0]
      i++;
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009ed4:	8bfb      	ldrh	r3, [r7, #30]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009eda:	8bfb      	ldrh	r3, [r7, #30]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1ea      	bne.n	8009eb6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	372c      	adds	r7, #44	; 0x2c
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bc80      	pop	{r7}
 8009eea:	4770      	bx	lr

08009eec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d12c      	bne.n	8009f62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	db12      	blt.n	8009f40 <USB_EPSetStall+0x54>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00f      	beq.n	8009f40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	0151      	lsls	r1, r2, #5
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	440a      	add	r2, r1
 8009f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	0151      	lsls	r1, r2, #5
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	440a      	add	r2, r1
 8009f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	e02b      	b.n	8009fba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	db12      	blt.n	8009f9a <USB_EPSetStall+0xae>
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00f      	beq.n	8009f9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	0151      	lsls	r1, r2, #5
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	440a      	add	r2, r1
 8009f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	0151      	lsls	r1, r2, #5
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	440a      	add	r2, r1
 8009fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bc80      	pop	{r7}
 8009fc4:	4770      	bx	lr

08009fc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	785b      	ldrb	r3, [r3, #1]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d128      	bne.n	800a034 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	78db      	ldrb	r3, [r3, #3]
 800a006:	2b03      	cmp	r3, #3
 800a008:	d003      	beq.n	800a012 <USB_EPClearStall+0x4c>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d138      	bne.n	800a084 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	440a      	add	r2, r1
 800a028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a030:	6013      	str	r3, [r2, #0]
 800a032:	e027      	b.n	800a084 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a04e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a052:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	78db      	ldrb	r3, [r3, #3]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d003      	beq.n	800a064 <USB_EPClearStall+0x9e>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	78db      	ldrb	r3, [r3, #3]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d10f      	bne.n	800a084 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a07e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a082:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bc80      	pop	{r7}
 800a08e:	4770      	bx	lr

0800a090 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	011b      	lsls	r3, r3, #4
 800a0c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bc80      	pop	{r7}
 800a0d8:	4770      	bx	lr

0800a0da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0f4:	f023 0303 	bic.w	r3, r3, #3
 800a0f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a108:	f023 0302 	bic.w	r3, r3, #2
 800a10c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	bc80      	pop	{r7}
 800a118:	4770      	bx	lr

0800a11a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a134:	f023 0303 	bic.w	r3, r3, #3
 800a138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a148:	f043 0302 	orr.w	r3, r3, #2
 800a14c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr

0800a15a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b085      	sub	sp, #20
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4013      	ands	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a172:	68fb      	ldr	r3, [r7, #12]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr

0800a17e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4013      	ands	r3, r2
 800a1a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bc80      	pop	{r7}
 800a1ae:	4770      	bx	lr

0800a1b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	b29b      	uxth	r3, r3
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr

0800a1e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	4013      	ands	r3, r2
 800a20e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a210:	68bb      	ldr	r3, [r7, #8]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	bc80      	pop	{r7}
 800a21a:	4770      	bx	lr

0800a21c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	fa22 f303 	lsr.w	r3, r2, r3
 800a24c:	01db      	lsls	r3, r3, #7
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	4313      	orrs	r3, r2
 800a254:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4013      	ands	r3, r2
 800a268:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a26a:	68bb      	ldr	r3, [r7, #8]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr

0800a276 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	f003 0301 	and.w	r3, r3, #1
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bc80      	pop	{r7}
 800a28e:	4770      	bx	lr

0800a290 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2ae:	f023 0307 	bic.w	r3, r3, #7
 800a2b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bc80      	pop	{r7}
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b087      	sub	sp, #28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	333c      	adds	r3, #60	; 0x3c
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	4a25      	ldr	r2, [pc, #148]	; (800a388 <USB_EP0_OutStart+0xb4>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d90a      	bls.n	800a30e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a308:	d101      	bne.n	800a30e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	e037      	b.n	800a37e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a314:	461a      	mov	r2, r3
 800a316:	2300      	movs	r3, #0
 800a318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a32c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a33c:	f043 0318 	orr.w	r3, r3, #24
 800a340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a350:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a354:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a356:	7afb      	ldrb	r3, [r7, #11]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d10f      	bne.n	800a37c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a376:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a37a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	bc80      	pop	{r7}
 800a386:	4770      	bx	lr
 800a388:	4f54300a 	.word	0x4f54300a

0800a38c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4a12      	ldr	r2, [pc, #72]	; (800a3ec <USB_CoreReset+0x60>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d901      	bls.n	800a3aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e01b      	b.n	800a3e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	daf2      	bge.n	800a398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	f043 0201 	orr.w	r2, r3, #1
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4a08      	ldr	r2, [pc, #32]	; (800a3ec <USB_CoreReset+0x60>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d901      	bls.n	800a3d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e006      	b.n	800a3e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d0f0      	beq.n	800a3c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bc80      	pop	{r7}
 800a3ea:	4770      	bx	lr
 800a3ec:	00030d40 	.word	0x00030d40

0800a3f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a3f4:	4904      	ldr	r1, [pc, #16]	; (800a408 <MX_FATFS_Init+0x18>)
 800a3f6:	4805      	ldr	r0, [pc, #20]	; (800a40c <MX_FATFS_Init+0x1c>)
 800a3f8:	f001 fc5e 	bl	800bcb8 <FATFS_LinkDriver>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461a      	mov	r2, r3
 800a400:	4b03      	ldr	r3, [pc, #12]	; (800a410 <MX_FATFS_Init+0x20>)
 800a402:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a404:	bf00      	nop
 800a406:	bd80      	pop	{r7, pc}
 800a408:	200006cc 	.word	0x200006cc
 800a40c:	0800d63c 	.word	0x0800d63c
 800a410:	200006c8 	.word	0x200006c8

0800a414 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a41e:	f000 f879 	bl	800a514 <BSP_SD_IsDetected>
 800a422:	4603      	mov	r3, r0
 800a424:	2b01      	cmp	r3, #1
 800a426:	d001      	beq.n	800a42c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e012      	b.n	800a452 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a42c:	480b      	ldr	r0, [pc, #44]	; (800a45c <BSP_SD_Init+0x48>)
 800a42e:	f7fa ff58 	bl	80052e2 <HAL_SD_Init>
 800a432:	4603      	mov	r3, r0
 800a434:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d109      	bne.n	800a450 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a43c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a440:	4806      	ldr	r0, [pc, #24]	; (800a45c <BSP_SD_Init+0x48>)
 800a442:	f7fb fd31 	bl	8005ea8 <HAL_SD_ConfigWideBusOperation>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a450:	79fb      	ldrb	r3, [r7, #7]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	2000035c 	.word	0x2000035c

0800a460 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	4806      	ldr	r0, [pc, #24]	; (800a498 <BSP_SD_ReadBlocks+0x38>)
 800a47e:	f7fa ffdf 	bl	8005440 <HAL_SD_ReadBlocks>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	2000035c 	.word	0x2000035c

0800a49c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	4806      	ldr	r0, [pc, #24]	; (800a4d4 <BSP_SD_WriteBlocks+0x38>)
 800a4ba:	f7fb f99f 	bl	80057fc <HAL_SD_WriteBlocks>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	2000035c 	.word	0x2000035c

0800a4d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <BSP_SD_GetCardState+0x1c>)
 800a4de:	f7fb fd7d 	bl	8005fdc <HAL_SD_GetCardState>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	bf14      	ite	ne
 800a4e8:	2301      	movne	r3, #1
 800a4ea:	2300      	moveq	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	2000035c 	.word	0x2000035c

0800a4f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	4803      	ldr	r0, [pc, #12]	; (800a510 <BSP_SD_GetCardInfo+0x18>)
 800a504:	f7fb fca4 	bl	8005e50 <HAL_SD_GetCardInfo>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	2000035c 	.word	0x2000035c

0800a514 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a51a:	2301      	movs	r3, #1
 800a51c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	b2db      	uxtb	r3, r3
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	bc80      	pop	{r7}
 800a52a:	4770      	bx	lr

0800a52c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7c1b      	ldrb	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d115      	bne.n	800a570 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a544:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a548:	2202      	movs	r2, #2
 800a54a:	2181      	movs	r1, #129	; 0x81
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f002 fc9c 	bl	800ce8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a55c:	2202      	movs	r2, #2
 800a55e:	2101      	movs	r1, #1
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f002 fc92 	bl	800ce8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a56e:	e012      	b.n	800a596 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a570:	2340      	movs	r3, #64	; 0x40
 800a572:	2202      	movs	r2, #2
 800a574:	2181      	movs	r1, #129	; 0x81
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f002 fc87 	bl	800ce8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a582:	2340      	movs	r3, #64	; 0x40
 800a584:	2202      	movs	r2, #2
 800a586:	2101      	movs	r1, #1
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f002 fc7e 	bl	800ce8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a596:	2308      	movs	r3, #8
 800a598:	2203      	movs	r2, #3
 800a59a:	2182      	movs	r1, #130	; 0x82
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f002 fc74 	bl	800ce8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a5ac:	f002 fdc0 	bl	800d130 <malloc>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
 800a5c8:	e026      	b.n	800a618 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7c1b      	ldrb	r3, [r3, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5fe:	2101      	movs	r1, #1
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f002 fd32 	bl	800d06a <USBD_LL_PrepareReceive>
 800a606:	e007      	b.n	800a618 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a60e:	2340      	movs	r3, #64	; 0x40
 800a610:	2101      	movs	r1, #1
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f002 fd29 	bl	800d06a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a632:	2181      	movs	r1, #129	; 0x81
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f002 fc4e 	bl	800ced6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a640:	2101      	movs	r1, #1
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f002 fc47 	bl	800ced6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a650:	2182      	movs	r1, #130	; 0x82
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f002 fc3f 	bl	800ced6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00e      	beq.n	800a686 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a678:	4618      	mov	r0, r3
 800a67a:	f002 fd61 	bl	800d140 <free>
    pdev->pClassData = NULL;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a686:	7bfb      	ldrb	r3, [r7, #15]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d039      	beq.n	800a72e <USBD_CDC_Setup+0x9e>
 800a6ba:	2b20      	cmp	r3, #32
 800a6bc:	d17f      	bne.n	800a7be <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	88db      	ldrh	r3, [r3, #6]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d029      	beq.n	800a71a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	da11      	bge.n	800a6f4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a6dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	88d2      	ldrh	r2, [r2, #6]
 800a6e2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6e4:	6939      	ldr	r1, [r7, #16]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	88db      	ldrh	r3, [r3, #6]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 fa14 	bl	800bb1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a6f2:	e06b      	b.n	800a7cc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	785a      	ldrb	r2, [r3, #1]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	88db      	ldrh	r3, [r3, #6]
 800a702:	b2da      	uxtb	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a70a:	6939      	ldr	r1, [r7, #16]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	88db      	ldrh	r3, [r3, #6]
 800a710:	461a      	mov	r2, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 fa2f 	bl	800bb76 <USBD_CtlPrepareRx>
      break;
 800a718:	e058      	b.n	800a7cc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	7850      	ldrb	r0, [r2, #1]
 800a726:	2200      	movs	r2, #0
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	4798      	blx	r3
      break;
 800a72c:	e04e      	b.n	800a7cc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2b0b      	cmp	r3, #11
 800a734:	d02e      	beq.n	800a794 <USBD_CDC_Setup+0x104>
 800a736:	2b0b      	cmp	r3, #11
 800a738:	dc38      	bgt.n	800a7ac <USBD_CDC_Setup+0x11c>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <USBD_CDC_Setup+0xb4>
 800a73e:	2b0a      	cmp	r3, #10
 800a740:	d014      	beq.n	800a76c <USBD_CDC_Setup+0xdc>
 800a742:	e033      	b.n	800a7ac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d107      	bne.n	800a75e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a74e:	f107 030c 	add.w	r3, r7, #12
 800a752:	2202      	movs	r2, #2
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f001 f9df 	bl	800bb1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a75c:	e02e      	b.n	800a7bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f970 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a766:	2302      	movs	r3, #2
 800a768:	75fb      	strb	r3, [r7, #23]
          break;
 800a76a:	e027      	b.n	800a7bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a772:	2b03      	cmp	r3, #3
 800a774:	d107      	bne.n	800a786 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a776:	f107 030f 	add.w	r3, r7, #15
 800a77a:	2201      	movs	r2, #1
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f001 f9cb 	bl	800bb1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a784:	e01a      	b.n	800a7bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f001 f95c 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a78e:	2302      	movs	r3, #2
 800a790:	75fb      	strb	r3, [r7, #23]
          break;
 800a792:	e013      	b.n	800a7bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d00d      	beq.n	800a7ba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 f950 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7aa:	e006      	b.n	800a7ba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 f949 	bl	800ba46 <USBD_CtlError>
          ret = USBD_FAIL;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	75fb      	strb	r3, [r7, #23]
          break;
 800a7b8:	e000      	b.n	800a7bc <USBD_CDC_Setup+0x12c>
          break;
 800a7ba:	bf00      	nop
      }
      break;
 800a7bc:	e006      	b.n	800a7cc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f001 f940 	bl	800ba46 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ca:	bf00      	nop
  }

  return ret;
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d03a      	beq.n	800a872 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7fc:	78fa      	ldrb	r2, [r7, #3]
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	331c      	adds	r3, #28
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d029      	beq.n	800a866 <USBD_CDC_DataIn+0x90>
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	440b      	add	r3, r1
 800a820:	331c      	adds	r3, #28
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	78f9      	ldrb	r1, [r7, #3]
 800a826:	68b8      	ldr	r0, [r7, #8]
 800a828:	460b      	mov	r3, r1
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	1a5b      	subs	r3, r3, r1
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4403      	add	r3, r0
 800a832:	3344      	adds	r3, #68	; 0x44
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	fbb2 f1f3 	udiv	r1, r2, r3
 800a83a:	fb01 f303 	mul.w	r3, r1, r3
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d110      	bne.n	800a866 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a844:	78fa      	ldrb	r2, [r7, #3]
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	331c      	adds	r3, #28
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a858:	78f9      	ldrb	r1, [r7, #3]
 800a85a:	2300      	movs	r3, #0
 800a85c:	2200      	movs	r2, #0
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f002 fbe0 	bl	800d024 <USBD_LL_Transmit>
 800a864:	e003      	b.n	800a86e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	e000      	b.n	800a874 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a872:	2302      	movs	r3, #2
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f002 fc0b 	bl	800d0b0 <USBD_LL_GetRxDataSize>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00d      	beq.n	800a8c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4798      	blx	r3

    return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e000      	b.n	800a8ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a8c8:	2302      	movs	r3, #2
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d015      	beq.n	800a918 <USBD_CDC_EP0_RxReady+0x46>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8f2:	2bff      	cmp	r3, #255	; 0xff
 800a8f4:	d010      	beq.n	800a918 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a904:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a90c:	b292      	uxth	r2, r2
 800a90e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	22ff      	movs	r2, #255	; 0xff
 800a914:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2243      	movs	r2, #67	; 0x43
 800a930:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a932:	4b03      	ldr	r3, [pc, #12]	; (800a940 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200000d4 	.word	0x200000d4

0800a944 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2243      	movs	r2, #67	; 0x43
 800a950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a952:	4b03      	ldr	r3, [pc, #12]	; (800a960 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	bc80      	pop	{r7}
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	20000090 	.word	0x20000090

0800a964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2243      	movs	r2, #67	; 0x43
 800a970:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a972:	4b03      	ldr	r3, [pc, #12]	; (800a980 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20000118 	.word	0x20000118

0800a984 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	220a      	movs	r2, #10
 800a990:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a992:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	bc80      	pop	{r7}
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	2000004c 	.word	0x2000004c

0800a9a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bc80      	pop	{r7}
 800a9ce:	4770      	bx	lr

0800a9d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a9ee:	88fa      	ldrh	r2, [r7, #6]
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	371c      	adds	r7, #28
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc80      	pop	{r7}
 800aa00:	4770      	bx	lr

0800aa02 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa12:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bc80      	pop	{r7}
 800aa26:	4770      	bx	lr

0800aa28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d017      	beq.n	800aa72 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	7c1b      	ldrb	r3, [r3, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d109      	bne.n	800aa5e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa54:	2101      	movs	r1, #1
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f002 fb07 	bl	800d06a <USBD_LL_PrepareReceive>
 800aa5c:	e007      	b.n	800aa6e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa64:	2340      	movs	r3, #64	; 0x40
 800aa66:	2101      	movs	r1, #1
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f002 fafe 	bl	800d06a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e000      	b.n	800aa74 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aa72:	2302      	movs	r3, #2
  }
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa90:	2302      	movs	r3, #2
 800aa92:	e01a      	b.n	800aaca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	79fa      	ldrb	r2, [r7, #7]
 800aac0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f002 f97c 	bl	800cdc0 <USBD_LL_Init>

  return USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d006      	beq.n	800aaf4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
 800aaf2:	e001      	b.n	800aaf8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bc80      	pop	{r7}
 800ab02:	4770      	bx	lr

0800ab04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f002 f9a1 	bl	800ce54 <USBD_LL_Start>

  return USBD_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bc80      	pop	{r7}
 800ab2e:	4770      	bx	lr

0800ab30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00c      	beq.n	800ab64 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	4611      	mov	r1, r2
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	4798      	blx	r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	460b      	mov	r3, r1
 800ab78:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	78fa      	ldrb	r2, [r7, #3]
 800ab84:	4611      	mov	r1, r2
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 ff11 	bl	800b9ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abba:	461a      	mov	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800abc8:	f003 031f 	and.w	r3, r3, #31
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d016      	beq.n	800abfe <USBD_LL_SetupStage+0x6a>
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d81c      	bhi.n	800ac0e <USBD_LL_SetupStage+0x7a>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <USBD_LL_SetupStage+0x4a>
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d008      	beq.n	800abee <USBD_LL_SetupStage+0x5a>
 800abdc:	e017      	b.n	800ac0e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abe4:	4619      	mov	r1, r3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa04 	bl	800aff4 <USBD_StdDevReq>
      break;
 800abec:	e01a      	b.n	800ac24 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa66 	bl	800b0c8 <USBD_StdItfReq>
      break;
 800abfc:	e012      	b.n	800ac24 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 faa6 	bl	800b158 <USBD_StdEPReq>
      break;
 800ac0c:	e00a      	b.n	800ac24 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f002 f979 	bl	800cf14 <USBD_LL_StallEP>
      break;
 800ac22:	bf00      	nop
  }

  return USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b086      	sub	sp, #24
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	460b      	mov	r3, r1
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac3c:	7afb      	ldrb	r3, [r7, #11]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d14b      	bne.n	800acda <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d134      	bne.n	800acbe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	68da      	ldr	r2, [r3, #12]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d919      	bls.n	800ac94 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	68da      	ldr	r2, [r3, #12]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	1ad2      	subs	r2, r2, r3
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	68da      	ldr	r2, [r3, #12]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d203      	bcs.n	800ac82 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	e002      	b.n	800ac88 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6879      	ldr	r1, [r7, #4]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 ff90 	bl	800bbb2 <USBD_CtlContinueRx>
 800ac92:	e038      	b.n	800ad06 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00a      	beq.n	800acb6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d105      	bne.n	800acb6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 ff8d 	bl	800bbd6 <USBD_CtlSendStatus>
 800acbc:	e023      	b.n	800ad06 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acc4:	2b05      	cmp	r3, #5
 800acc6:	d11e      	bne.n	800ad06 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800acd0:	2100      	movs	r1, #0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f002 f91e 	bl	800cf14 <USBD_LL_StallEP>
 800acd8:	e015      	b.n	800ad06 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00d      	beq.n	800ad02 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800acec:	2b03      	cmp	r3, #3
 800acee:	d108      	bne.n	800ad02 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	7afa      	ldrb	r2, [r7, #11]
 800acfa:	4611      	mov	r1, r2
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	4798      	blx	r3
 800ad00:	e001      	b.n	800ad06 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad02:	2302      	movs	r3, #2
 800ad04:	e000      	b.n	800ad08 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad1e:	7afb      	ldrb	r3, [r7, #11]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d17f      	bne.n	800ae24 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3314      	adds	r3, #20
 800ad28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d15c      	bne.n	800adee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d915      	bls.n	800ad6c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	68da      	ldr	r2, [r3, #12]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	1ad2      	subs	r2, r2, r3
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	461a      	mov	r2, r3
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 fefa 	bl	800bb52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2200      	movs	r2, #0
 800ad62:	2100      	movs	r1, #0
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f002 f980 	bl	800d06a <USBD_LL_PrepareReceive>
 800ad6a:	e04e      	b.n	800ae0a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	6912      	ldr	r2, [r2, #16]
 800ad74:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad78:	fb01 f202 	mul.w	r2, r1, r2
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d11c      	bne.n	800adbc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d316      	bcc.n	800adbc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	689a      	ldr	r2, [r3, #8]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d20f      	bcs.n	800adbc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2100      	movs	r1, #0
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 fed6 	bl	800bb52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adae:	2300      	movs	r3, #0
 800adb0:	2200      	movs	r2, #0
 800adb2:	2100      	movs	r1, #0
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f002 f958 	bl	800d06a <USBD_LL_PrepareReceive>
 800adba:	e026      	b.n	800ae0a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800adce:	2b03      	cmp	r3, #3
 800add0:	d105      	bne.n	800adde <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800adde:	2180      	movs	r1, #128	; 0x80
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f002 f897 	bl	800cf14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 ff08 	bl	800bbfc <USBD_CtlReceiveStatus>
 800adec:	e00d      	b.n	800ae0a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d004      	beq.n	800ae02 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d103      	bne.n	800ae0a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ae02:	2180      	movs	r1, #128	; 0x80
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f002 f885 	bl	800cf14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d11d      	bne.n	800ae50 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7ff fe81 	bl	800ab1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae22:	e015      	b.n	800ae50 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d108      	bne.n	800ae4c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	7afa      	ldrb	r2, [r7, #11]
 800ae44:	4611      	mov	r1, r2
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	4798      	blx	r3
 800ae4a:	e001      	b.n	800ae50 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	e000      	b.n	800ae52 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b082      	sub	sp, #8
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae62:	2340      	movs	r3, #64	; 0x40
 800ae64:	2200      	movs	r2, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f002 f80e 	bl	800ce8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2240      	movs	r2, #64	; 0x40
 800ae7a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae7e:	2340      	movs	r3, #64	; 0x40
 800ae80:	2200      	movs	r2, #0
 800ae82:	2180      	movs	r1, #128	; 0x80
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f002 f800 	bl	800ce8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2240      	movs	r2, #64	; 0x40
 800ae94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6852      	ldr	r2, [r2, #4]
 800aeca:	b2d2      	uxtb	r2, r2
 800aecc:	4611      	mov	r1, r2
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
  }

  return USBD_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr

0800aefa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b083      	sub	sp, #12
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2204      	movs	r2, #4
 800af12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bc80      	pop	{r7}
 800af20:	4770      	bx	lr

0800af22 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af30:	2b04      	cmp	r3, #4
 800af32:	d105      	bne.n	800af40 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	bc80      	pop	{r7}
 800af4a:	4770      	bx	lr

0800af4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d10b      	bne.n	800af76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d005      	beq.n	800af76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr

0800af98 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr

0800afb0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr

0800afc4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6852      	ldr	r2, [r2, #4]
 800afe0:	b2d2      	uxtb	r2, r2
 800afe2:	4611      	mov	r1, r2
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	4798      	blx	r3

  return USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b00a:	2b40      	cmp	r3, #64	; 0x40
 800b00c:	d005      	beq.n	800b01a <USBD_StdDevReq+0x26>
 800b00e:	2b40      	cmp	r3, #64	; 0x40
 800b010:	d84f      	bhi.n	800b0b2 <USBD_StdDevReq+0xbe>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d009      	beq.n	800b02a <USBD_StdDevReq+0x36>
 800b016:	2b20      	cmp	r3, #32
 800b018:	d14b      	bne.n	800b0b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	4798      	blx	r3
      break;
 800b028:	e048      	b.n	800b0bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b09      	cmp	r3, #9
 800b030:	d839      	bhi.n	800b0a6 <USBD_StdDevReq+0xb2>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <USBD_StdDevReq+0x44>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b089 	.word	0x0800b089
 800b03c:	0800b09d 	.word	0x0800b09d
 800b040:	0800b0a7 	.word	0x0800b0a7
 800b044:	0800b093 	.word	0x0800b093
 800b048:	0800b0a7 	.word	0x0800b0a7
 800b04c:	0800b06b 	.word	0x0800b06b
 800b050:	0800b061 	.word	0x0800b061
 800b054:	0800b0a7 	.word	0x0800b0a7
 800b058:	0800b07f 	.word	0x0800b07f
 800b05c:	0800b075 	.word	0x0800b075
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f9dc 	bl	800b420 <USBD_GetDescriptor>
          break;
 800b068:	e022      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fb3f 	bl	800b6f0 <USBD_SetAddress>
          break;
 800b072:	e01d      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fb7e 	bl	800b778 <USBD_SetConfig>
          break;
 800b07c:	e018      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fc07 	bl	800b894 <USBD_GetConfig>
          break;
 800b086:	e013      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fc37 	bl	800b8fe <USBD_GetStatus>
          break;
 800b090:	e00e      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fc65 	bl	800b964 <USBD_SetFeature>
          break;
 800b09a:	e009      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fc74 	bl	800b98c <USBD_ClrFeature>
          break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fccc 	bl	800ba46 <USBD_CtlError>
          break;
 800b0ae:	bf00      	nop
      }
      break;
 800b0b0:	e004      	b.n	800b0bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fcc6 	bl	800ba46 <USBD_CtlError>
      break;
 800b0ba:	bf00      	nop
  }

  return ret;
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop

0800b0c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0de:	2b40      	cmp	r3, #64	; 0x40
 800b0e0:	d005      	beq.n	800b0ee <USBD_StdItfReq+0x26>
 800b0e2:	2b40      	cmp	r3, #64	; 0x40
 800b0e4:	d82e      	bhi.n	800b144 <USBD_StdItfReq+0x7c>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <USBD_StdItfReq+0x26>
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	d12a      	bne.n	800b144 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d81d      	bhi.n	800b136 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	889b      	ldrh	r3, [r3, #4]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b01      	cmp	r3, #1
 800b102:	d813      	bhi.n	800b12c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	88db      	ldrh	r3, [r3, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d110      	bne.n	800b140 <USBD_StdItfReq+0x78>
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10d      	bne.n	800b140 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fd56 	bl	800bbd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b12a:	e009      	b.n	800b140 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fc89 	bl	800ba46 <USBD_CtlError>
          break;
 800b134:	e004      	b.n	800b140 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fc84 	bl	800ba46 <USBD_CtlError>
          break;
 800b13e:	e000      	b.n	800b142 <USBD_StdItfReq+0x7a>
          break;
 800b140:	bf00      	nop
      }
      break;
 800b142:	e004      	b.n	800b14e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fc7d 	bl	800ba46 <USBD_CtlError>
      break;
 800b14c:	bf00      	nop
  }

  return USBD_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	889b      	ldrh	r3, [r3, #4]
 800b16a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b174:	2b40      	cmp	r3, #64	; 0x40
 800b176:	d007      	beq.n	800b188 <USBD_StdEPReq+0x30>
 800b178:	2b40      	cmp	r3, #64	; 0x40
 800b17a:	f200 8146 	bhi.w	800b40a <USBD_StdEPReq+0x2b2>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00a      	beq.n	800b198 <USBD_StdEPReq+0x40>
 800b182:	2b20      	cmp	r3, #32
 800b184:	f040 8141 	bne.w	800b40a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
      break;
 800b196:	e13d      	b.n	800b414 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d10a      	bne.n	800b1ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	4798      	blx	r3
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	e12d      	b.n	800b416 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	785b      	ldrb	r3, [r3, #1]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d007      	beq.n	800b1d2 <USBD_StdEPReq+0x7a>
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	f300 811b 	bgt.w	800b3fe <USBD_StdEPReq+0x2a6>
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d072      	beq.n	800b2b2 <USBD_StdEPReq+0x15a>
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d03a      	beq.n	800b246 <USBD_StdEPReq+0xee>
 800b1d0:	e115      	b.n	800b3fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d002      	beq.n	800b1e2 <USBD_StdEPReq+0x8a>
 800b1dc:	2b03      	cmp	r3, #3
 800b1de:	d015      	beq.n	800b20c <USBD_StdEPReq+0xb4>
 800b1e0:	e02b      	b.n	800b23a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00c      	beq.n	800b202 <USBD_StdEPReq+0xaa>
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	2b80      	cmp	r3, #128	; 0x80
 800b1ec:	d009      	beq.n	800b202 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f001 fe8e 	bl	800cf14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1f8:	2180      	movs	r1, #128	; 0x80
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f001 fe8a 	bl	800cf14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b200:	e020      	b.n	800b244 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fc1e 	bl	800ba46 <USBD_CtlError>
              break;
 800b20a:	e01b      	b.n	800b244 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	885b      	ldrh	r3, [r3, #2]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10e      	bne.n	800b232 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00b      	beq.n	800b232 <USBD_StdEPReq+0xda>
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
 800b21c:	2b80      	cmp	r3, #128	; 0x80
 800b21e:	d008      	beq.n	800b232 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	88db      	ldrh	r3, [r3, #6]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d104      	bne.n	800b232 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fe71 	bl	800cf14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fccf 	bl	800bbd6 <USBD_CtlSendStatus>

              break;
 800b238:	e004      	b.n	800b244 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fc02 	bl	800ba46 <USBD_CtlError>
              break;
 800b242:	bf00      	nop
          }
          break;
 800b244:	e0e0      	b.n	800b408 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d002      	beq.n	800b256 <USBD_StdEPReq+0xfe>
 800b250:	2b03      	cmp	r3, #3
 800b252:	d015      	beq.n	800b280 <USBD_StdEPReq+0x128>
 800b254:	e026      	b.n	800b2a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00c      	beq.n	800b276 <USBD_StdEPReq+0x11e>
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	2b80      	cmp	r3, #128	; 0x80
 800b260:	d009      	beq.n	800b276 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f001 fe54 	bl	800cf14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b26c:	2180      	movs	r1, #128	; 0x80
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 fe50 	bl	800cf14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b274:	e01c      	b.n	800b2b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fbe4 	bl	800ba46 <USBD_CtlError>
              break;
 800b27e:	e017      	b.n	800b2b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	885b      	ldrh	r3, [r3, #2]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d112      	bne.n	800b2ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b292:	7bbb      	ldrb	r3, [r7, #14]
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 fe5b 	bl	800cf52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fc9a 	bl	800bbd6 <USBD_CtlSendStatus>
              }
              break;
 800b2a2:	e004      	b.n	800b2ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fbcd 	bl	800ba46 <USBD_CtlError>
              break;
 800b2ac:	e000      	b.n	800b2b0 <USBD_StdEPReq+0x158>
              break;
 800b2ae:	bf00      	nop
          }
          break;
 800b2b0:	e0aa      	b.n	800b408 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d002      	beq.n	800b2c2 <USBD_StdEPReq+0x16a>
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d032      	beq.n	800b326 <USBD_StdEPReq+0x1ce>
 800b2c0:	e097      	b.n	800b3f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d007      	beq.n	800b2d8 <USBD_StdEPReq+0x180>
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ca:	2b80      	cmp	r3, #128	; 0x80
 800b2cc:	d004      	beq.n	800b2d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fbb8 	bl	800ba46 <USBD_CtlError>
                break;
 800b2d6:	e091      	b.n	800b3fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da0b      	bge.n	800b2f8 <USBD_StdEPReq+0x1a0>
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	3310      	adds	r3, #16
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	e00b      	b.n	800b310 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	3304      	adds	r3, #4
 800b310:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2202      	movs	r2, #2
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fbfb 	bl	800bb1a <USBD_CtlSendData>
              break;
 800b324:	e06a      	b.n	800b3fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	da11      	bge.n	800b352 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
 800b330:	f003 020f 	and.w	r2, r3, #15
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	4613      	mov	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	440b      	add	r3, r1
 800b340:	3318      	adds	r3, #24
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d117      	bne.n	800b378 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 fb7b 	bl	800ba46 <USBD_CtlError>
                  break;
 800b350:	e054      	b.n	800b3fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b352:	7bbb      	ldrb	r3, [r7, #14]
 800b354:	f003 020f 	and.w	r2, r3, #15
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	4613      	mov	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	440b      	add	r3, r1
 800b364:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d104      	bne.n	800b378 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fb68 	bl	800ba46 <USBD_CtlError>
                  break;
 800b376:	e041      	b.n	800b3fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	da0b      	bge.n	800b398 <USBD_StdEPReq+0x240>
 800b380:	7bbb      	ldrb	r3, [r7, #14]
 800b382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b386:	4613      	mov	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	3310      	adds	r3, #16
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	4413      	add	r3, r2
 800b394:	3304      	adds	r3, #4
 800b396:	e00b      	b.n	800b3b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b398:	7bbb      	ldrb	r3, [r7, #14]
 800b39a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b39e:	4613      	mov	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <USBD_StdEPReq+0x266>
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	2b80      	cmp	r3, #128	; 0x80
 800b3bc:	d103      	bne.n	800b3c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e00e      	b.n	800b3e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 fde0 	bl	800cf90 <USBD_LL_IsStallEP>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	e002      	b.n	800b3e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fb95 	bl	800bb1a <USBD_CtlSendData>
              break;
 800b3f0:	e004      	b.n	800b3fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fb26 	bl	800ba46 <USBD_CtlError>
              break;
 800b3fa:	bf00      	nop
          }
          break;
 800b3fc:	e004      	b.n	800b408 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fb20 	bl	800ba46 <USBD_CtlError>
          break;
 800b406:	bf00      	nop
      }
      break;
 800b408:	e004      	b.n	800b414 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fb1a 	bl	800ba46 <USBD_CtlError>
      break;
 800b412:	bf00      	nop
  }

  return ret;
 800b414:	7bfb      	ldrb	r3, [r7, #15]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	885b      	ldrh	r3, [r3, #2]
 800b43a:	0a1b      	lsrs	r3, r3, #8
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	3b01      	subs	r3, #1
 800b440:	2b06      	cmp	r3, #6
 800b442:	f200 8128 	bhi.w	800b696 <USBD_GetDescriptor+0x276>
 800b446:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <USBD_GetDescriptor+0x2c>)
 800b448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44c:	0800b469 	.word	0x0800b469
 800b450:	0800b481 	.word	0x0800b481
 800b454:	0800b4c1 	.word	0x0800b4c1
 800b458:	0800b697 	.word	0x0800b697
 800b45c:	0800b697 	.word	0x0800b697
 800b460:	0800b637 	.word	0x0800b637
 800b464:	0800b663 	.word	0x0800b663
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	7c12      	ldrb	r2, [r2, #16]
 800b474:	f107 0108 	add.w	r1, r7, #8
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	60f8      	str	r0, [r7, #12]
      break;
 800b47e:	e112      	b.n	800b6a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7c1b      	ldrb	r3, [r3, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10d      	bne.n	800b4a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	f107 0208 	add.w	r2, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	2202      	movs	r2, #2
 800b4a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4a2:	e100      	b.n	800b6a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	f107 0208 	add.w	r2, r7, #8
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	701a      	strb	r2, [r3, #0]
      break;
 800b4be:	e0f2      	b.n	800b6a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	885b      	ldrh	r3, [r3, #2]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b05      	cmp	r3, #5
 800b4c8:	f200 80ac 	bhi.w	800b624 <USBD_GetDescriptor+0x204>
 800b4cc:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <USBD_GetDescriptor+0xb4>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b4ed 	.word	0x0800b4ed
 800b4d8:	0800b521 	.word	0x0800b521
 800b4dc:	0800b555 	.word	0x0800b555
 800b4e0:	0800b589 	.word	0x0800b589
 800b4e4:	0800b5bd 	.word	0x0800b5bd
 800b4e8:	0800b5f1 	.word	0x0800b5f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50e:	e091      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa97 	bl	800ba46 <USBD_CtlError>
            err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
          break;
 800b51e:	e089      	b.n	800b634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b542:	e077      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa7d 	bl	800ba46 <USBD_CtlError>
            err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
          break;
 800b552:	e06f      	b.n	800b634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b576:	e05d      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa63 	bl	800ba46 <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e055      	b.n	800b634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5aa:	e043      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa49 	bl	800ba46 <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e03b      	b.n	800b634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5de:	e029      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa2f 	bl	800ba46 <USBD_CtlError>
            err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ee:	e021      	b.n	800b634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7c12      	ldrb	r2, [r2, #16]
 800b608:	f107 0108 	add.w	r1, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b612:	e00f      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa15 	bl	800ba46 <USBD_CtlError>
            err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
          break;
 800b622:	e007      	b.n	800b634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fa0d 	bl	800ba46 <USBD_CtlError>
          err++;
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	3301      	adds	r3, #1
 800b630:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b632:	e038      	b.n	800b6a6 <USBD_GetDescriptor+0x286>
 800b634:	e037      	b.n	800b6a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7c1b      	ldrb	r3, [r3, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d109      	bne.n	800b652 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b646:	f107 0208 	add.w	r2, r7, #8
 800b64a:	4610      	mov	r0, r2
 800b64c:	4798      	blx	r3
 800b64e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b650:	e029      	b.n	800b6a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f9f6 	bl	800ba46 <USBD_CtlError>
        err++;
 800b65a:	7afb      	ldrb	r3, [r7, #11]
 800b65c:	3301      	adds	r3, #1
 800b65e:	72fb      	strb	r3, [r7, #11]
      break;
 800b660:	e021      	b.n	800b6a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7c1b      	ldrb	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10d      	bne.n	800b686 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	f107 0208 	add.w	r2, r7, #8
 800b676:	4610      	mov	r0, r2
 800b678:	4798      	blx	r3
 800b67a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	2207      	movs	r2, #7
 800b682:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b684:	e00f      	b.n	800b6a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9dc 	bl	800ba46 <USBD_CtlError>
        err++;
 800b68e:	7afb      	ldrb	r3, [r7, #11]
 800b690:	3301      	adds	r3, #1
 800b692:	72fb      	strb	r3, [r7, #11]
      break;
 800b694:	e007      	b.n	800b6a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f9d4 	bl	800ba46 <USBD_CtlError>
      err++;
 800b69e:	7afb      	ldrb	r3, [r7, #11]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6a4:	bf00      	nop
  }

  if (err != 0U)
 800b6a6:	7afb      	ldrb	r3, [r7, #11]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d11c      	bne.n	800b6e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b6ac:	893b      	ldrh	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d011      	beq.n	800b6d6 <USBD_GetDescriptor+0x2b6>
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	88db      	ldrh	r3, [r3, #6]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00d      	beq.n	800b6d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	88da      	ldrh	r2, [r3, #6]
 800b6be:	893b      	ldrh	r3, [r7, #8]
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	bf28      	it	cs
 800b6c4:	4613      	movcs	r3, r2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6ca:	893b      	ldrh	r3, [r7, #8]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	68f9      	ldr	r1, [r7, #12]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fa22 	bl	800bb1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	88db      	ldrh	r3, [r3, #6]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d104      	bne.n	800b6e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fa79 	bl	800bbd6 <USBD_CtlSendStatus>
 800b6e4:	e000      	b.n	800b6e8 <USBD_GetDescriptor+0x2c8>
    return;
 800b6e6:	bf00      	nop
    }
  }
}
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop

0800b6f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	889b      	ldrh	r3, [r3, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d130      	bne.n	800b764 <USBD_SetAddress+0x74>
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	88db      	ldrh	r3, [r3, #6]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d12c      	bne.n	800b764 <USBD_SetAddress+0x74>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	885b      	ldrh	r3, [r3, #2]
 800b70e:	2b7f      	cmp	r3, #127	; 0x7f
 800b710:	d828      	bhi.n	800b764 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	885b      	ldrh	r3, [r3, #2]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b71c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b724:	2b03      	cmp	r3, #3
 800b726:	d104      	bne.n	800b732 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f98b 	bl	800ba46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b730:	e01d      	b.n	800b76e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	7bfa      	ldrb	r2, [r7, #15]
 800b736:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f001 fc51 	bl	800cfe6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fa46 	bl	800bbd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2202      	movs	r2, #2
 800b754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b758:	e009      	b.n	800b76e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b762:	e004      	b.n	800b76e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f96d 	bl	800ba46 <USBD_CtlError>
  }
}
 800b76c:	bf00      	nop
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	b2da      	uxtb	r2, r3
 800b788:	4b41      	ldr	r3, [pc, #260]	; (800b890 <USBD_SetConfig+0x118>)
 800b78a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b78c:	4b40      	ldr	r3, [pc, #256]	; (800b890 <USBD_SetConfig+0x118>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d904      	bls.n	800b79e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f955 	bl	800ba46 <USBD_CtlError>
 800b79c:	e075      	b.n	800b88a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d002      	beq.n	800b7ae <USBD_SetConfig+0x36>
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d023      	beq.n	800b7f4 <USBD_SetConfig+0x7c>
 800b7ac:	e062      	b.n	800b874 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b7ae:	4b38      	ldr	r3, [pc, #224]	; (800b890 <USBD_SetConfig+0x118>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d01a      	beq.n	800b7ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b7b6:	4b36      	ldr	r3, [pc, #216]	; (800b890 <USBD_SetConfig+0x118>)
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2203      	movs	r2, #3
 800b7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b7c8:	4b31      	ldr	r3, [pc, #196]	; (800b890 <USBD_SetConfig+0x118>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff f9ae 	bl	800ab30 <USBD_SetClassConfig>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d104      	bne.n	800b7e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f932 	bl	800ba46 <USBD_CtlError>
            return;
 800b7e2:	e052      	b.n	800b88a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f9f6 	bl	800bbd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b7ea:	e04e      	b.n	800b88a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f9f2 	bl	800bbd6 <USBD_CtlSendStatus>
        break;
 800b7f2:	e04a      	b.n	800b88a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b7f4:	4b26      	ldr	r3, [pc, #152]	; (800b890 <USBD_SetConfig+0x118>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d112      	bne.n	800b822 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b804:	4b22      	ldr	r3, [pc, #136]	; (800b890 <USBD_SetConfig+0x118>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b80e:	4b20      	ldr	r3, [pc, #128]	; (800b890 <USBD_SetConfig+0x118>)
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff f9aa 	bl	800ab6e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f9db 	bl	800bbd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b820:	e033      	b.n	800b88a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b822:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <USBD_SetConfig+0x118>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d01d      	beq.n	800b86c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff f998 	bl	800ab6e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b83e:	4b14      	ldr	r3, [pc, #80]	; (800b890 <USBD_SetConfig+0x118>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b848:	4b11      	ldr	r3, [pc, #68]	; (800b890 <USBD_SetConfig+0x118>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff f96e 	bl	800ab30 <USBD_SetClassConfig>
 800b854:	4603      	mov	r3, r0
 800b856:	2b02      	cmp	r3, #2
 800b858:	d104      	bne.n	800b864 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f8f2 	bl	800ba46 <USBD_CtlError>
            return;
 800b862:	e012      	b.n	800b88a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f9b6 	bl	800bbd6 <USBD_CtlSendStatus>
        break;
 800b86a:	e00e      	b.n	800b88a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9b2 	bl	800bbd6 <USBD_CtlSendStatus>
        break;
 800b872:	e00a      	b.n	800b88a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f8e5 	bl	800ba46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b87c:	4b04      	ldr	r3, [pc, #16]	; (800b890 <USBD_SetConfig+0x118>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7ff f973 	bl	800ab6e <USBD_ClrClassConfig>
        break;
 800b888:	bf00      	nop
    }
  }
}
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	200006d0 	.word	0x200006d0

0800b894 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	88db      	ldrh	r3, [r3, #6]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d004      	beq.n	800b8b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f8cc 	bl	800ba46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8ae:	e022      	b.n	800b8f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	dc02      	bgt.n	800b8c0 <USBD_GetConfig+0x2c>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	dc03      	bgt.n	800b8c6 <USBD_GetConfig+0x32>
 800b8be:	e015      	b.n	800b8ec <USBD_GetConfig+0x58>
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d00b      	beq.n	800b8dc <USBD_GetConfig+0x48>
 800b8c4:	e012      	b.n	800b8ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f920 	bl	800bb1a <USBD_CtlSendData>
        break;
 800b8da:	e00c      	b.n	800b8f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f918 	bl	800bb1a <USBD_CtlSendData>
        break;
 800b8ea:	e004      	b.n	800b8f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f8a9 	bl	800ba46 <USBD_CtlError>
        break;
 800b8f4:	bf00      	nop
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b90e:	3b01      	subs	r3, #1
 800b910:	2b02      	cmp	r3, #2
 800b912:	d81e      	bhi.n	800b952 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	88db      	ldrh	r3, [r3, #6]
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d004      	beq.n	800b926 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f891 	bl	800ba46 <USBD_CtlError>
        break;
 800b924:	e01a      	b.n	800b95c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b932:	2b00      	cmp	r3, #0
 800b934:	d005      	beq.n	800b942 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	f043 0202 	orr.w	r2, r3, #2
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	330c      	adds	r3, #12
 800b946:	2202      	movs	r2, #2
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f8e5 	bl	800bb1a <USBD_CtlSendData>
      break;
 800b950:	e004      	b.n	800b95c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f876 	bl	800ba46 <USBD_CtlError>
      break;
 800b95a:	bf00      	nop
  }
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	885b      	ldrh	r3, [r3, #2]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d106      	bne.n	800b984 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f929 	bl	800bbd6 <USBD_CtlSendStatus>
  }
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b99c:	3b01      	subs	r3, #1
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d80b      	bhi.n	800b9ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	885b      	ldrh	r3, [r3, #2]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d10c      	bne.n	800b9c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f90f 	bl	800bbd6 <USBD_CtlSendStatus>
      }
      break;
 800b9b8:	e004      	b.n	800b9c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f842 	bl	800ba46 <USBD_CtlError>
      break;
 800b9c2:	e000      	b.n	800b9c6 <USBD_ClrFeature+0x3a>
      break;
 800b9c4:	bf00      	nop
  }
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b083      	sub	sp, #12
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	781a      	ldrb	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	785a      	ldrb	r2, [r3, #1]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	3302      	adds	r3, #2
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	3303      	adds	r3, #3
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	3304      	adds	r3, #4
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	3305      	adds	r3, #5
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	4413      	add	r3, r2
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	3306      	adds	r3, #6
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	3307      	adds	r3, #7
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	021b      	lsls	r3, r3, #8
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	4413      	add	r3, r2
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	80da      	strh	r2, [r3, #6]

}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bc80      	pop	{r7}
 800ba44:	4770      	bx	lr

0800ba46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba50:	2180      	movs	r1, #128	; 0x80
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 fa5e 	bl	800cf14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f001 fa5a 	bl	800cf14 <USBD_LL_StallEP>
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d032      	beq.n	800bae4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 f834 	bl	800baec <USBD_GetLen>
 800ba84:	4603      	mov	r3, r0
 800ba86:	3301      	adds	r3, #1
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	005b      	lsls	r3, r3, #1
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	1c5a      	adds	r2, r3, #1
 800ba96:	75fa      	strb	r2, [r7, #23]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	7812      	ldrb	r2, [r2, #0]
 800baa2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	75fa      	strb	r2, [r7, #23]
 800baaa:	461a      	mov	r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	4413      	add	r3, r2
 800bab0:	2203      	movs	r2, #3
 800bab2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bab4:	e012      	b.n	800badc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	60fa      	str	r2, [r7, #12]
 800babc:	7dfa      	ldrb	r2, [r7, #23]
 800babe:	1c51      	adds	r1, r2, #1
 800bac0:	75f9      	strb	r1, [r7, #23]
 800bac2:	4611      	mov	r1, r2
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	440a      	add	r2, r1
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	75fa      	strb	r2, [r7, #23]
 800bad2:	461a      	mov	r2, r3
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	4413      	add	r3, r2
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e8      	bne.n	800bab6 <USBD_GetString+0x4e>
    }
  }
}
 800bae4:	bf00      	nop
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800baf8:	e005      	b.n	800bb06 <USBD_GetLen+0x1a>
  {
    len++;
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	3301      	adds	r3, #1
 800bafe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3301      	adds	r3, #1
 800bb04:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f5      	bne.n	800bafa <USBD_GetLen+0xe>
  }

  return len;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bc80      	pop	{r7}
 800bb18:	4770      	bx	lr

0800bb1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4613      	mov	r3, r2
 800bb26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb30:	88fa      	ldrh	r2, [r7, #6]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bb36:	88fa      	ldrh	r2, [r7, #6]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb3c:	88fb      	ldrh	r3, [r7, #6]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	2100      	movs	r1, #0
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f001 fa6e 	bl	800d024 <USBD_LL_Transmit>

  return USBD_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	60f8      	str	r0, [r7, #12]
 800bb5a:	60b9      	str	r1, [r7, #8]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb60:	88fb      	ldrh	r3, [r7, #6]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	2100      	movs	r1, #0
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f001 fa5c 	bl	800d024 <USBD_LL_Transmit>

  return USBD_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
 800bb80:	4613      	mov	r3, r2
 800bb82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2203      	movs	r2, #3
 800bb88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb8c:	88fa      	ldrh	r2, [r7, #6]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bb94:	88fa      	ldrh	r2, [r7, #6]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb9c:	88fb      	ldrh	r3, [r7, #6]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	2100      	movs	r1, #0
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f001 fa61 	bl	800d06a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbc0:	88fb      	ldrh	r3, [r7, #6]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f001 fa4f 	bl	800d06a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b082      	sub	sp, #8
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2204      	movs	r2, #4
 800bbe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	2200      	movs	r2, #0
 800bbea:	2100      	movs	r1, #0
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f001 fa19 	bl	800d024 <USBD_LL_Transmit>

  return USBD_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2205      	movs	r2, #5
 800bc08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2100      	movs	r1, #0
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f001 fa29 	bl	800d06a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
	...

0800bc24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bc32:	2301      	movs	r3, #1
 800bc34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800bc3a:	4b1e      	ldr	r3, [pc, #120]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc3c:	7a5b      	ldrb	r3, [r3, #9]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d831      	bhi.n	800bca8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bc44:	4b1b      	ldr	r3, [pc, #108]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc46:	7a5b      	ldrb	r3, [r3, #9]
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4b19      	ldr	r3, [pc, #100]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc4e:	2100      	movs	r1, #0
 800bc50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800bc52:	4b18      	ldr	r3, [pc, #96]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc54:	7a5b      	ldrb	r3, [r3, #9]
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	4a16      	ldr	r2, [pc, #88]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800bc62:	4b14      	ldr	r3, [pc, #80]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc64:	7a5b      	ldrb	r3, [r3, #9]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4b12      	ldr	r3, [pc, #72]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc6c:	4413      	add	r3, r2
 800bc6e:	79fa      	ldrb	r2, [r7, #7]
 800bc70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bc72:	4b10      	ldr	r3, [pc, #64]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc74:	7a5b      	ldrb	r3, [r3, #9]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	b2d1      	uxtb	r1, r2
 800bc7c:	4a0d      	ldr	r2, [pc, #52]	; (800bcb4 <FATFS_LinkDriverEx+0x90>)
 800bc7e:	7251      	strb	r1, [r2, #9]
 800bc80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc82:	7dbb      	ldrb	r3, [r7, #22]
 800bc84:	3330      	adds	r3, #48	; 0x30
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	223a      	movs	r2, #58	; 0x3a
 800bc92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	3302      	adds	r3, #2
 800bc98:	222f      	movs	r2, #47	; 0x2f
 800bc9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	3303      	adds	r3, #3
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800bca8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bc80      	pop	{r7}
 800bcb2:	4770      	bx	lr
 800bcb4:	200006d4 	.word	0x200006d4

0800bcb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff ffac 	bl	800bc24 <FATFS_LinkDriverEx>
 800bccc:	4603      	mov	r3, r0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bce2:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <SD_initialize+0x38>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800bce8:	f7fe fb94 	bl	800a414 <BSP_SD_Init>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d107      	bne.n	800bd02 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <SD_initialize+0x38>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f023 0301 	bic.w	r3, r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <SD_initialize+0x38>)
 800bd00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd02:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <SD_initialize+0x38>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	b2db      	uxtb	r3, r3
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	2000015b 	.word	0x2000015b

0800bd14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <SD_status+0x38>)
 800bd20:	2201      	movs	r2, #1
 800bd22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bd24:	f7fe fbd8 	bl	800a4d8 <BSP_SD_GetCardState>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d107      	bne.n	800bd3e <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd2e:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <SD_status+0x38>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f023 0301 	bic.w	r3, r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <SD_status+0x38>)
 800bd3c:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800bd3e:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <SD_status+0x38>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b2db      	uxtb	r3, r3
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	2000015b 	.word	0x2000015b

0800bd50 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800bd64:	4b0f      	ldr	r3, [pc, #60]	; (800bda4 <SD_read+0x54>)
 800bd66:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800bd68:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <SD_read+0x58>)
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f7fe fb76 	bl	800a460 <BSP_SD_ReadBlocks>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10e      	bne.n	800bd98 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bd7a:	e006      	b.n	800bd8a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	1e5a      	subs	r2, r3, #1
 800bd80:	613a      	str	r2, [r7, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <SD_read+0x3a>
      {
        return RES_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e007      	b.n	800bd9a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bd8a:	f7fe fba5 	bl	800a4d8 <BSP_SD_GetCardState>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1f3      	bne.n	800bd7c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	000186a0 	.word	0x000186a0
 800bda8:	05f5e100 	.word	0x05f5e100

0800bdac <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800bdc0:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <SD_write+0x54>)
 800bdc2:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800bdc4:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <SD_write+0x58>)
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	68b8      	ldr	r0, [r7, #8]
 800bdcc:	f7fe fb66 	bl	800a49c <BSP_SD_WriteBlocks>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10e      	bne.n	800bdf4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bdd6:	e006      	b.n	800bde6 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	1e5a      	subs	r2, r3, #1
 800bddc:	613a      	str	r2, [r7, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <SD_write+0x3a>
      {
        return RES_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e007      	b.n	800bdf6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bde6:	f7fe fb77 	bl	800a4d8 <BSP_SD_GetCardState>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f3      	bne.n	800bdd8 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	000186a0 	.word	0x000186a0
 800be04:	05f5e100 	.word	0x05f5e100

0800be08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08c      	sub	sp, #48	; 0x30
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	4603      	mov	r3, r0
 800be10:	603a      	str	r2, [r7, #0]
 800be12:	71fb      	strb	r3, [r7, #7]
 800be14:	460b      	mov	r3, r1
 800be16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be1e:	4b24      	ldr	r3, [pc, #144]	; (800beb0 <SD_ioctl+0xa8>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <SD_ioctl+0x28>
 800be2c:	2303      	movs	r3, #3
 800be2e:	e03b      	b.n	800bea8 <SD_ioctl+0xa0>
  
  switch (cmd)
 800be30:	79bb      	ldrb	r3, [r7, #6]
 800be32:	2b03      	cmp	r3, #3
 800be34:	d833      	bhi.n	800be9e <SD_ioctl+0x96>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <SD_ioctl+0x34>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be4d 	.word	0x0800be4d
 800be40:	0800be55 	.word	0x0800be55
 800be44:	0800be6d 	.word	0x0800be6d
 800be48:	0800be87 	.word	0x0800be87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be52:	e027      	b.n	800bea4 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe fb4d 	bl	800a4f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800be5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be64:	2300      	movs	r3, #0
 800be66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be6a:	e01b      	b.n	800bea4 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be6c:	f107 030c 	add.w	r3, r7, #12
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe fb41 	bl	800a4f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	b29a      	uxth	r2, r3
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be84:	e00e      	b.n	800bea4 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be86:	f107 030c 	add.w	r3, r7, #12
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe fb34 	bl	800a4f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800be90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be9c:	e002      	b.n	800bea4 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800be9e:	2304      	movs	r3, #4
 800bea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800bea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3730      	adds	r7, #48	; 0x30
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	2000015b 	.word	0x2000015b

0800beb4 <Button_IncTick>:
} ;

struct Button_Struct Button[BUTTONS];


void Button_IncTick(void){
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
	static uint8_t inc_div;
	if (inc_div) {inc_div--;}	//Входной делитель частоты опроса
 800beba:	4bb9      	ldr	r3, [pc, #740]	; (800c1a0 <Button_IncTick+0x2ec>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d006      	beq.n	800bed0 <Button_IncTick+0x1c>
 800bec2:	4bb7      	ldr	r3, [pc, #732]	; (800c1a0 <Button_IncTick+0x2ec>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	4bb5      	ldr	r3, [pc, #724]	; (800c1a0 <Button_IncTick+0x2ec>)
 800becc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 800bece:	e186      	b.n	800c1de <Button_IncTick+0x32a>
		inc_div = DIVIDER;		//на 10
 800bed0:	4bb3      	ldr	r3, [pc, #716]	; (800c1a0 <Button_IncTick+0x2ec>)
 800bed2:	220a      	movs	r2, #10
 800bed4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800bed6:	2300      	movs	r3, #0
 800bed8:	71fb      	strb	r3, [r7, #7]
 800beda:	e17c      	b.n	800c1d6 <Button_IncTick+0x322>
			uint8_t tmp = HAL_GPIO_ReadPin(Button[i].Port, Button[i].Pin);
 800bedc:	79fa      	ldrb	r2, [r7, #7]
 800bede:	49b1      	ldr	r1, [pc, #708]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bee0:	4613      	mov	r3, r2
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	79fa      	ldrb	r2, [r7, #7]
 800beee:	49ad      	ldr	r1, [pc, #692]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bef0:	4613      	mov	r3, r2
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	4413      	add	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	440b      	add	r3, r1
 800befa:	3304      	adds	r3, #4
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	4619      	mov	r1, r3
 800bf00:	f7f6 fefe 	bl	8002d00 <HAL_GPIO_ReadPin>
 800bf04:	4603      	mov	r3, r0
 800bf06:	71bb      	strb	r3, [r7, #6]
			if (tmp == Button[i].PinState) {
 800bf08:	79fa      	ldrb	r2, [r7, #7]
 800bf0a:	49a6      	ldr	r1, [pc, #664]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	440b      	add	r3, r1
 800bf16:	3306      	adds	r3, #6
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	79ba      	ldrb	r2, [r7, #6]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d173      	bne.n	800c008 <Button_IncTick+0x154>
				if (Button[i].Timer) {
 800bf20:	79fa      	ldrb	r2, [r7, #7]
 800bf22:	49a0      	ldr	r1, [pc, #640]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf24:	4613      	mov	r3, r2
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	3308      	adds	r3, #8
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 814c 	beq.w	800c1d0 <Button_IncTick+0x31c>
					Button[i].Timer++;
 800bf38:	79fa      	ldrb	r2, [r7, #7]
 800bf3a:	499a      	ldr	r1, [pc, #616]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	3308      	adds	r3, #8
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	b298      	uxth	r0, r3
 800bf4e:	4995      	ldr	r1, [pc, #596]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf50:	4613      	mov	r3, r2
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	440b      	add	r3, r1
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	801a      	strh	r2, [r3, #0]
					if(Button[i].Timer == SHORT_TIME){
 800bf60:	79fa      	ldrb	r2, [r7, #7]
 800bf62:	4990      	ldr	r1, [pc, #576]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf64:	4613      	mov	r3, r2
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	4413      	add	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	440b      	add	r3, r1
 800bf6e:	3308      	adds	r3, #8
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	2b1e      	cmp	r3, #30
 800bf74:	d123      	bne.n	800bfbe <Button_IncTick+0x10a>
						if ((Button[i].Event == SHORT_CLC)||(Button[i].Event == DOUBLE_CLC)){
 800bf76:	79fa      	ldrb	r2, [r7, #7]
 800bf78:	498a      	ldr	r1, [pc, #552]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	440b      	add	r3, r1
 800bf84:	330a      	adds	r3, #10
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d00a      	beq.n	800bfa2 <Button_IncTick+0xee>
 800bf8c:	79fa      	ldrb	r2, [r7, #7]
 800bf8e:	4985      	ldr	r1, [pc, #532]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bf90:	4613      	mov	r3, r2
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	330a      	adds	r3, #10
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d10d      	bne.n	800bfbe <Button_IncTick+0x10a>
							Event_Button(i, Button[i].Event);					// отправка по таймеру
 800bfa2:	79fa      	ldrb	r2, [r7, #7]
 800bfa4:	497f      	ldr	r1, [pc, #508]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	440b      	add	r3, r1
 800bfb0:	330a      	adds	r3, #10
 800bfb2:	781a      	ldrb	r2, [r3, #0]
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 f917 	bl	800c1ec <Event_Button>
					if(Button[i].Timer == LONG_TIME){							// Тут мы если вместо кнопки переключатель
 800bfbe:	79fa      	ldrb	r2, [r7, #7]
 800bfc0:	4978      	ldr	r1, [pc, #480]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	440b      	add	r3, r1
 800bfcc:	3308      	adds	r3, #8
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	2b50      	cmp	r3, #80	; 0x50
 800bfd2:	f040 80fd 	bne.w	800c1d0 <Button_IncTick+0x31c>
						Button[i].Event = SWITCH;
 800bfd6:	79fa      	ldrb	r2, [r7, #7]
 800bfd8:	4972      	ldr	r1, [pc, #456]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bfda:	4613      	mov	r3, r2
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	4413      	add	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	330a      	adds	r3, #10
 800bfe6:	2205      	movs	r2, #5
 800bfe8:	701a      	strb	r2, [r3, #0]
						Event_Button(i, Button[i].Event);
 800bfea:	79fa      	ldrb	r2, [r7, #7]
 800bfec:	496d      	ldr	r1, [pc, #436]	; (800c1a4 <Button_IncTick+0x2f0>)
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	440b      	add	r3, r1
 800bff8:	330a      	adds	r3, #10
 800bffa:	781a      	ldrb	r2, [r3, #0]
 800bffc:	79fb      	ldrb	r3, [r7, #7]
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f000 f8f3 	bl	800c1ec <Event_Button>
 800c006:	e0e3      	b.n	800c1d0 <Button_IncTick+0x31c>
				Button[i].PinState = tmp;
 800c008:	79fa      	ldrb	r2, [r7, #7]
 800c00a:	4966      	ldr	r1, [pc, #408]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c00c:	4613      	mov	r3, r2
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	440b      	add	r3, r1
 800c016:	3306      	adds	r3, #6
 800c018:	79ba      	ldrb	r2, [r7, #6]
 800c01a:	701a      	strb	r2, [r3, #0]
				if (Button[i].Timer > NOISE_TIME){								// если таймер больше 10 мс.
 800c01c:	79fa      	ldrb	r2, [r7, #7]
 800c01e:	4961      	ldr	r1, [pc, #388]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c020:	4613      	mov	r3, r2
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	3308      	adds	r3, #8
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	f240 8096 	bls.w	800c160 <Button_IncTick+0x2ac>
					if(Button[i].Timer < SHORT_TIME){							// если это меньше 300 мс
 800c034:	79fa      	ldrb	r2, [r7, #7]
 800c036:	495b      	ldr	r1, [pc, #364]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c038:	4613      	mov	r3, r2
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	3308      	adds	r3, #8
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	2b1d      	cmp	r3, #29
 800c048:	d850      	bhi.n	800c0ec <Button_IncTick+0x238>
						Button[i].Timer = 1;
 800c04a:	79fa      	ldrb	r2, [r7, #7]
 800c04c:	4955      	ldr	r1, [pc, #340]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c04e:	4613      	mov	r3, r2
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	440b      	add	r3, r1
 800c058:	3308      	adds	r3, #8
 800c05a:	2201      	movs	r2, #1
 800c05c:	801a      	strh	r2, [r3, #0]
						if(Button[i].Event == PRESS){							// если в событиях было пусто
 800c05e:	79fa      	ldrb	r2, [r7, #7]
 800c060:	4950      	ldr	r1, [pc, #320]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c062:	4613      	mov	r3, r2
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	330a      	adds	r3, #10
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d10a      	bne.n	800c08a <Button_IncTick+0x1d6>
							Button[i].Event = SHORT_CLC;						// То фиксируем первое нажатие. Но не отправляем, а запускаем таймер снова
 800c074:	79fa      	ldrb	r2, [r7, #7]
 800c076:	494b      	ldr	r1, [pc, #300]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c078:	4613      	mov	r3, r2
 800c07a:	005b      	lsls	r3, r3, #1
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	330a      	adds	r3, #10
 800c084:	2202      	movs	r2, #2
 800c086:	701a      	strb	r2, [r3, #0]
 800c088:	e0a2      	b.n	800c1d0 <Button_IncTick+0x31c>
						else if(Button[i].Event == SHORT_CLC){					// если нажатие уже было
 800c08a:	79fa      	ldrb	r2, [r7, #7]
 800c08c:	4945      	ldr	r1, [pc, #276]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c08e:	4613      	mov	r3, r2
 800c090:	005b      	lsls	r3, r3, #1
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	330a      	adds	r3, #10
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d10a      	bne.n	800c0b6 <Button_IncTick+0x202>
							Button[i].Event = DOUBLE_CLC; 						// Фиксируем двойное нажатие
 800c0a0:	79fa      	ldrb	r2, [r7, #7]
 800c0a2:	4940      	ldr	r1, [pc, #256]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	330a      	adds	r3, #10
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	e08c      	b.n	800c1d0 <Button_IncTick+0x31c>
						else if(Button[i].Event == DOUBLE_CLC){					//
 800c0b6:	79fa      	ldrb	r2, [r7, #7]
 800c0b8:	493a      	ldr	r1, [pc, #232]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	330a      	adds	r3, #10
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	f040 8081 	bne.w	800c1d0 <Button_IncTick+0x31c>
							Event_Button(i, Button[i].Event); 					// Двойное отправляем сразу или по таймеру.
 800c0ce:	79fa      	ldrb	r2, [r7, #7]
 800c0d0:	4934      	ldr	r1, [pc, #208]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	4413      	add	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	440b      	add	r3, r1
 800c0dc:	330a      	adds	r3, #10
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 f881 	bl	800c1ec <Event_Button>
 800c0ea:	e071      	b.n	800c1d0 <Button_IncTick+0x31c>
					else if(Button[i].Timer < LONG_TIME){						// Если мы были в нажатом положении больше 200 мс
 800c0ec:	79fa      	ldrb	r2, [r7, #7]
 800c0ee:	492d      	ldr	r1, [pc, #180]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	2b4f      	cmp	r3, #79	; 0x4f
 800c100:	d823      	bhi.n	800c14a <Button_IncTick+0x296>
						if(Button[i].Event == PRESS){							//
 800c102:	79fa      	ldrb	r2, [r7, #7]
 800c104:	4927      	ldr	r1, [pc, #156]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c106:	4613      	mov	r3, r2
 800c108:	005b      	lsls	r3, r3, #1
 800c10a:	4413      	add	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	440b      	add	r3, r1
 800c110:	330a      	adds	r3, #10
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d15b      	bne.n	800c1d0 <Button_IncTick+0x31c>
							Button[i].Event = LONG_CLC; 						// Фиксируем длинное нажатие
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	4922      	ldr	r1, [pc, #136]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c11c:	4613      	mov	r3, r2
 800c11e:	005b      	lsls	r3, r3, #1
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	440b      	add	r3, r1
 800c126:	330a      	adds	r3, #10
 800c128:	2204      	movs	r2, #4
 800c12a:	701a      	strb	r2, [r3, #0]
							Event_Button(i, Button[i].Event);
 800c12c:	79fa      	ldrb	r2, [r7, #7]
 800c12e:	491d      	ldr	r1, [pc, #116]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c130:	4613      	mov	r3, r2
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	4413      	add	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	440b      	add	r3, r1
 800c13a:	330a      	adds	r3, #10
 800c13c:	781a      	ldrb	r2, [r3, #0]
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	4611      	mov	r1, r2
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f852 	bl	800c1ec <Event_Button>
 800c148:	e042      	b.n	800c1d0 <Button_IncTick+0x31c>
						Button[i].Timer = 0;
 800c14a:	79fa      	ldrb	r2, [r7, #7]
 800c14c:	4915      	ldr	r1, [pc, #84]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c14e:	4613      	mov	r3, r2
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	440b      	add	r3, r1
 800c158:	3308      	adds	r3, #8
 800c15a:	2200      	movs	r2, #0
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	e037      	b.n	800c1d0 <Button_IncTick+0x31c>
					if (Button[i].Timer) {										// если таймер меньше 10 мс.
 800c160:	79fa      	ldrb	r2, [r7, #7]
 800c162:	4910      	ldr	r1, [pc, #64]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c164:	4613      	mov	r3, r2
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	440b      	add	r3, r1
 800c16e:	3308      	adds	r3, #8
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d018      	beq.n	800c1a8 <Button_IncTick+0x2f4>
						Button[i].Timer = 0;
 800c176:	79fa      	ldrb	r2, [r7, #7]
 800c178:	490a      	ldr	r1, [pc, #40]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c17a:	4613      	mov	r3, r2
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	3308      	adds	r3, #8
 800c186:	2200      	movs	r2, #0
 800c188:	801a      	strh	r2, [r3, #0]
						Button[i].Event = NONE;
 800c18a:	79fa      	ldrb	r2, [r7, #7]
 800c18c:	4905      	ldr	r1, [pc, #20]	; (800c1a4 <Button_IncTick+0x2f0>)
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	330a      	adds	r3, #10
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e017      	b.n	800c1d0 <Button_IncTick+0x31c>
 800c1a0:	20000728 	.word	0x20000728
 800c1a4:	200006e0 	.word	0x200006e0
						Button[i].Event = PRESS;
 800c1a8:	79fa      	ldrb	r2, [r7, #7]
 800c1aa:	490f      	ldr	r1, [pc, #60]	; (800c1e8 <Button_IncTick+0x334>)
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	440b      	add	r3, r1
 800c1b6:	330a      	adds	r3, #10
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	701a      	strb	r2, [r3, #0]
						Button[i].Timer = 1;									// Первре срабатывание.
 800c1bc:	79fa      	ldrb	r2, [r7, #7]
 800c1be:	490a      	ldr	r1, [pc, #40]	; (800c1e8 <Button_IncTick+0x334>)
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	3308      	adds	r3, #8
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	71fb      	strb	r3, [r7, #7]
 800c1d6:	79fb      	ldrb	r3, [r7, #7]
 800c1d8:	2b05      	cmp	r3, #5
 800c1da:	f67f ae7f 	bls.w	800bedc <Button_IncTick+0x28>
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200006e0 	.word	0x200006e0

0800c1ec <Event_Button>:
void Event_Button (uint8_t Butt, Button_events_TypeDef Event){
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	460a      	mov	r2, r1
 800c1f6:	71fb      	strb	r3, [r7, #7]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	71bb      	strb	r3, [r7, #6]


	Buttons_Handler(Butt, Event);
 800c1fc:	79ba      	ldrb	r2, [r7, #6]
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7f4 fcaa 	bl	8000b5c <Buttons_Handler>
//	uint8_t Send_msg[25] = "Button [x] type [x]\r\n";
//	Send_msg[8] = Butt + 0x30;
//	Send_msg[17] = Event + 0x30;
//	Debug_UART( Send_msg, DBG_BTN,  21);

	Button[Butt].Event = NONE;
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	490b      	ldr	r1, [pc, #44]	; (800c238 <Event_Button+0x4c>)
 800c20c:	4613      	mov	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	330a      	adds	r3, #10
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
	Button[Butt].Timer = 0;
 800c21c:	79fa      	ldrb	r2, [r7, #7]
 800c21e:	4906      	ldr	r1, [pc, #24]	; (800c238 <Event_Button+0x4c>)
 800c220:	4613      	mov	r3, r2
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	3308      	adds	r3, #8
 800c22c:	2200      	movs	r2, #0
 800c22e:	801a      	strh	r2, [r3, #0]

}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	200006e0 	.word	0x200006e0

0800c23c <Buttons_Init>:


};


void Buttons_Init (void){
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0

	Button[0].Port = In1_GPIO_Port;
 800c240:	4b45      	ldr	r3, [pc, #276]	; (800c358 <Buttons_Init+0x11c>)
 800c242:	4a46      	ldr	r2, [pc, #280]	; (800c35c <Buttons_Init+0x120>)
 800c244:	601a      	str	r2, [r3, #0]
	Button[1].Port = In2_GPIO_Port;
 800c246:	4b44      	ldr	r3, [pc, #272]	; (800c358 <Buttons_Init+0x11c>)
 800c248:	4a44      	ldr	r2, [pc, #272]	; (800c35c <Buttons_Init+0x120>)
 800c24a:	60da      	str	r2, [r3, #12]
	Button[2].Port = In3_GPIO_Port;
 800c24c:	4b42      	ldr	r3, [pc, #264]	; (800c358 <Buttons_Init+0x11c>)
 800c24e:	4a44      	ldr	r2, [pc, #272]	; (800c360 <Buttons_Init+0x124>)
 800c250:	619a      	str	r2, [r3, #24]
	Button[3].Port = In4_GPIO_Port;
 800c252:	4b41      	ldr	r3, [pc, #260]	; (800c358 <Buttons_Init+0x11c>)
 800c254:	4a42      	ldr	r2, [pc, #264]	; (800c360 <Buttons_Init+0x124>)
 800c256:	625a      	str	r2, [r3, #36]	; 0x24
	Button[4].Port = In5_GPIO_Port;
 800c258:	4b3f      	ldr	r3, [pc, #252]	; (800c358 <Buttons_Init+0x11c>)
 800c25a:	4a41      	ldr	r2, [pc, #260]	; (800c360 <Buttons_Init+0x124>)
 800c25c:	631a      	str	r2, [r3, #48]	; 0x30
	Button[5].Port = In6_GPIO_Port;
 800c25e:	4b3e      	ldr	r3, [pc, #248]	; (800c358 <Buttons_Init+0x11c>)
 800c260:	4a3f      	ldr	r2, [pc, #252]	; (800c360 <Buttons_Init+0x124>)
 800c262:	63da      	str	r2, [r3, #60]	; 0x3c

	Button[0].Pin = In1_Pin;
 800c264:	4b3c      	ldr	r3, [pc, #240]	; (800c358 <Buttons_Init+0x11c>)
 800c266:	2240      	movs	r2, #64	; 0x40
 800c268:	809a      	strh	r2, [r3, #4]
	Button[1].Pin = In2_Pin;
 800c26a:	4b3b      	ldr	r3, [pc, #236]	; (800c358 <Buttons_Init+0x11c>)
 800c26c:	2280      	movs	r2, #128	; 0x80
 800c26e:	821a      	strh	r2, [r3, #16]
	Button[2].Pin = In3_Pin;
 800c270:	4b39      	ldr	r3, [pc, #228]	; (800c358 <Buttons_Init+0x11c>)
 800c272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c276:	839a      	strh	r2, [r3, #28]
	Button[3].Pin = In4_Pin;
 800c278:	4b37      	ldr	r3, [pc, #220]	; (800c358 <Buttons_Init+0x11c>)
 800c27a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c27e:	851a      	strh	r2, [r3, #40]	; 0x28
	Button[4].Pin = In5_Pin;
 800c280:	4b35      	ldr	r3, [pc, #212]	; (800c358 <Buttons_Init+0x11c>)
 800c282:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c286:	869a      	strh	r2, [r3, #52]	; 0x34
	Button[5].Pin = In6_Pin;
 800c288:	4b33      	ldr	r3, [pc, #204]	; (800c358 <Buttons_Init+0x11c>)
 800c28a:	2204      	movs	r2, #4
 800c28c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	Button[0].PinState = HAL_GPIO_ReadPin(Button[0].Port, Button[0].Pin);
 800c290:	4b31      	ldr	r3, [pc, #196]	; (800c358 <Buttons_Init+0x11c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a30      	ldr	r2, [pc, #192]	; (800c358 <Buttons_Init+0x11c>)
 800c296:	8892      	ldrh	r2, [r2, #4]
 800c298:	4611      	mov	r1, r2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f6 fd30 	bl	8002d00 <HAL_GPIO_ReadPin>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b2c      	ldr	r3, [pc, #176]	; (800c358 <Buttons_Init+0x11c>)
 800c2a6:	719a      	strb	r2, [r3, #6]
	Button[1].PinState = HAL_GPIO_ReadPin(Button[1].Port, Button[1].Pin);
 800c2a8:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <Buttons_Init+0x11c>)
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	4a2a      	ldr	r2, [pc, #168]	; (800c358 <Buttons_Init+0x11c>)
 800c2ae:	8a12      	ldrh	r2, [r2, #16]
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f6 fd24 	bl	8002d00 <HAL_GPIO_ReadPin>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	4b26      	ldr	r3, [pc, #152]	; (800c358 <Buttons_Init+0x11c>)
 800c2be:	749a      	strb	r2, [r3, #18]
	Button[2].PinState = HAL_GPIO_ReadPin(Button[2].Port, Button[2].Pin);
 800c2c0:	4b25      	ldr	r3, [pc, #148]	; (800c358 <Buttons_Init+0x11c>)
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	4a24      	ldr	r2, [pc, #144]	; (800c358 <Buttons_Init+0x11c>)
 800c2c6:	8b92      	ldrh	r2, [r2, #28]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f6 fd18 	bl	8002d00 <HAL_GPIO_ReadPin>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4b20      	ldr	r3, [pc, #128]	; (800c358 <Buttons_Init+0x11c>)
 800c2d6:	779a      	strb	r2, [r3, #30]
	Button[3].PinState = HAL_GPIO_ReadPin(Button[3].Port, Button[3].Pin);
 800c2d8:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <Buttons_Init+0x11c>)
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	4a1e      	ldr	r2, [pc, #120]	; (800c358 <Buttons_Init+0x11c>)
 800c2de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f6 fd0c 	bl	8002d00 <HAL_GPIO_ReadPin>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	4b1a      	ldr	r3, [pc, #104]	; (800c358 <Buttons_Init+0x11c>)
 800c2ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Button[4].PinState = HAL_GPIO_ReadPin(Button[4].Port, Button[4].Pin);
 800c2f2:	4b19      	ldr	r3, [pc, #100]	; (800c358 <Buttons_Init+0x11c>)
 800c2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f6:	4a18      	ldr	r2, [pc, #96]	; (800c358 <Buttons_Init+0x11c>)
 800c2f8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7f6 fcff 	bl	8002d00 <HAL_GPIO_ReadPin>
 800c302:	4603      	mov	r3, r0
 800c304:	461a      	mov	r2, r3
 800c306:	4b14      	ldr	r3, [pc, #80]	; (800c358 <Buttons_Init+0x11c>)
 800c308:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Button[5].PinState = HAL_GPIO_ReadPin(Button[5].Port, Button[5].Pin);
 800c30c:	4b12      	ldr	r3, [pc, #72]	; (800c358 <Buttons_Init+0x11c>)
 800c30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c310:	4a11      	ldr	r2, [pc, #68]	; (800c358 <Buttons_Init+0x11c>)
 800c312:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f7f6 fcf1 	bl	8002d00 <HAL_GPIO_ReadPin>
 800c31e:	4603      	mov	r3, r0
 800c320:	461a      	mov	r2, r3
 800c322:	4b0d      	ldr	r3, [pc, #52]	; (800c358 <Buttons_Init+0x11c>)
 800c324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	Button[0].Event = NONE;
 800c328:	4b0b      	ldr	r3, [pc, #44]	; (800c358 <Buttons_Init+0x11c>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	729a      	strb	r2, [r3, #10]
	Button[1].Event = NONE;
 800c32e:	4b0a      	ldr	r3, [pc, #40]	; (800c358 <Buttons_Init+0x11c>)
 800c330:	2200      	movs	r2, #0
 800c332:	759a      	strb	r2, [r3, #22]
	Button[2].Event = NONE;
 800c334:	4b08      	ldr	r3, [pc, #32]	; (800c358 <Buttons_Init+0x11c>)
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Button[3].Event = NONE;
 800c33c:	4b06      	ldr	r3, [pc, #24]	; (800c358 <Buttons_Init+0x11c>)
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Button[4].Event = NONE;
 800c344:	4b04      	ldr	r3, [pc, #16]	; (800c358 <Buttons_Init+0x11c>)
 800c346:	2200      	movs	r2, #0
 800c348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Button[5].Event = NONE;
 800c34c:	4b02      	ldr	r3, [pc, #8]	; (800c358 <Buttons_Init+0x11c>)
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

//	Debug_UART( "Button init\r\n", DBG_OK,  13);

}
 800c354:	bf00      	nop
 800c356:	bd80      	pop	{r7, pc}
 800c358:	200006e0 	.word	0x200006e0
 800c35c:	40020800 	.word	0x40020800
 800c360:	40020400 	.word	0x40020400

0800c364 <Debug_LED_IncTic>:
#include "debug_LED.h"

LED_ColorTypeDef Debug_LED1;
LED_ColorTypeDef Debug_LED2;

void Debug_LED_IncTic(void){
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0

	static uint8_t switch_timer = 22;
	switch_timer--;
 800c368:	4b63      	ldr	r3, [pc, #396]	; (800c4f8 <Debug_LED_IncTic+0x194>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b61      	ldr	r3, [pc, #388]	; (800c4f8 <Debug_LED_IncTic+0x194>)
 800c372:	701a      	strb	r2, [r3, #0]
	if (switch_timer == 11) {
 800c374:	4b60      	ldr	r3, [pc, #384]	; (800c4f8 <Debug_LED_IncTic+0x194>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b0b      	cmp	r3, #11
 800c37a:	d15a      	bne.n	800c432 <Debug_LED_IncTic+0xce>
		switch (Debug_LED1) {
 800c37c:	4b5f      	ldr	r3, [pc, #380]	; (800c4fc <Debug_LED_IncTic+0x198>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	2b03      	cmp	r3, #3
 800c382:	d855      	bhi.n	800c430 <Debug_LED_IncTic+0xcc>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <Debug_LED_IncTic+0x28>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c417 	.word	0x0800c417
 800c390:	0800c3c1 	.word	0x0800c3c1
 800c394:	0800c3e7 	.word	0x0800c3e7
 800c398:	0800c39d 	.word	0x0800c39d
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c39c:	4b58      	ldr	r3, [pc, #352]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a57      	ldr	r2, [pc, #348]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c3a6:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0; 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;}
 800c3a8:	4b55      	ldr	r3, [pc, #340]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a54      	ldr	r2, [pc, #336]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	2110      	movs	r1, #16
 800c3b8:	4851      	ldr	r0, [pc, #324]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3ba:	f7f6 fcb8 	bl	8002d2e <HAL_GPIO_WritePin>
 800c3be:	e038      	b.n	800c432 <Debug_LED_IncTic+0xce>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800c3c0:	4b4f      	ldr	r3, [pc, #316]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a4e      	ldr	r2, [pc, #312]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ca:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800c3cc:	4b4c      	ldr	r3, [pc, #304]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a4b      	ldr	r2, [pc, #300]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3de:	4848      	ldr	r0, [pc, #288]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3e0:	f7f6 fca5 	bl	8002d2e <HAL_GPIO_WritePin>
 800c3e4:	e025      	b.n	800c432 <Debug_LED_IncTic+0xce>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800c3e6:	4b46      	ldr	r3, [pc, #280]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a45      	ldr	r2, [pc, #276]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	2110      	movs	r1, #16
 800c3f6:	4842      	ldr	r0, [pc, #264]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3f8:	f7f6 fc99 	bl	8002d2e <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800c3fc:	4b40      	ldr	r3, [pc, #256]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a3f      	ldr	r2, [pc, #252]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	2201      	movs	r2, #1
 800c40a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c40e:	483c      	ldr	r0, [pc, #240]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c410:	f7f6 fc8d 	bl	8002d2e <HAL_GPIO_WritePin>
 800c414:	e00d      	b.n	800c432 <Debug_LED_IncTic+0xce>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c416:	4b3a      	ldr	r3, [pc, #232]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a39      	ldr	r2, [pc, #228]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c41c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c420:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800c422:	4b37      	ldr	r3, [pc, #220]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a36      	ldr	r2, [pc, #216]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	e000      	b.n	800c432 <Debug_LED_IncTic+0xce>
			default:		{break;}
 800c430:	bf00      	nop
		}
	}
	if (switch_timer == 0) {
 800c432:	4b31      	ldr	r3, [pc, #196]	; (800c4f8 <Debug_LED_IncTic+0x194>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d15c      	bne.n	800c4f4 <Debug_LED_IncTic+0x190>
		switch (Debug_LED2) {
 800c43a:	4b32      	ldr	r3, [pc, #200]	; (800c504 <Debug_LED_IncTic+0x1a0>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d854      	bhi.n	800c4ec <Debug_LED_IncTic+0x188>
 800c442:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <Debug_LED_IncTic+0xe4>)
 800c444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c448:	0800c4d3 	.word	0x0800c4d3
 800c44c:	0800c47f 	.word	0x0800c47f
 800c450:	0800c4a3 	.word	0x0800c4a3
 800c454:	0800c459 	.word	0x0800c459
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800c458:	4b29      	ldr	r3, [pc, #164]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a28      	ldr	r2, [pc, #160]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c45e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c462:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0; 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800c464:	4b26      	ldr	r3, [pc, #152]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a25      	ldr	r2, [pc, #148]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c46a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c46e:	6013      	str	r3, [r2, #0]
 800c470:	2200      	movs	r2, #0
 800c472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c476:	4822      	ldr	r0, [pc, #136]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c478:	f7f6 fc59 	bl	8002d2e <HAL_GPIO_WritePin>
 800c47c:	e037      	b.n	800c4ee <Debug_LED_IncTic+0x18a>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c47e:	4b20      	ldr	r3, [pc, #128]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1f      	ldr	r2, [pc, #124]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c484:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c488:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;}
 800c48a:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a1c      	ldr	r2, [pc, #112]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	2200      	movs	r2, #0
 800c498:	2110      	movs	r1, #16
 800c49a:	4819      	ldr	r0, [pc, #100]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c49c:	f7f6 fc47 	bl	8002d2e <HAL_GPIO_WritePin>
 800c4a0:	e025      	b.n	800c4ee <Debug_LED_IncTic+0x18a>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800c4a2:	4b17      	ldr	r3, [pc, #92]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a16      	ldr	r2, [pc, #88]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2110      	movs	r1, #16
 800c4b2:	4813      	ldr	r0, [pc, #76]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4b4:	f7f6 fc3b 	bl	8002d2e <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800c4b8:	4b11      	ldr	r3, [pc, #68]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a10      	ldr	r2, [pc, #64]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c4ca:	480d      	ldr	r0, [pc, #52]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4cc:	f7f6 fc2f 	bl	8002d2e <HAL_GPIO_WritePin>
 800c4d0:	e00d      	b.n	800c4ee <Debug_LED_IncTic+0x18a>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a0a      	ldr	r2, [pc, #40]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c4dc:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800c4de:	4b08      	ldr	r3, [pc, #32]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a07      	ldr	r2, [pc, #28]	; (800c500 <Debug_LED_IncTic+0x19c>)
 800c4e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4e8:	6013      	str	r3, [r2, #0]
 800c4ea:	e000      	b.n	800c4ee <Debug_LED_IncTic+0x18a>
			default:		{break;}
 800c4ec:	bf00      	nop
		}
		switch_timer = 22;
 800c4ee:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <Debug_LED_IncTic+0x194>)
 800c4f0:	2216      	movs	r2, #22
 800c4f2:	701a      	strb	r2, [r3, #0]
	}

}
 800c4f4:	bf00      	nop
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	2000015c 	.word	0x2000015c
 800c4fc:	20000729 	.word	0x20000729
 800c500:	40020800 	.word	0x40020800
 800c504:	2000072a 	.word	0x2000072a

0800c508 <Debug_LED_Init>:

}



void Debug_LED_Init (void){
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0

	Debug_LED1 = BLACK;
 800c50c:	4b04      	ldr	r3, [pc, #16]	; (800c520 <Debug_LED_Init+0x18>)
 800c50e:	2200      	movs	r2, #0
 800c510:	701a      	strb	r2, [r3, #0]
	Debug_LED2 = BLACK;
 800c512:	4b04      	ldr	r3, [pc, #16]	; (800c524 <Debug_LED_Init+0x1c>)
 800c514:	2200      	movs	r2, #0
 800c516:	701a      	strb	r2, [r3, #0]
//	Debug_UART( "Debug_LED init\r\n", DBG_OK, 16);

}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bc80      	pop	{r7}
 800c51e:	4770      	bx	lr
 800c520:	20000729 	.word	0x20000729
 800c524:	2000072a 	.word	0x2000072a

0800c528 <MM_Init>:
//{
//	__RBIT(data);
//        return data;
//};

void MM_Init(void){
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0

	Spi_LED_Init();
 800c52c:	f000 f896 	bl	800c65c <Spi_LED_Init>
	Buttons_Init();
 800c530:	f7ff fe84 	bl	800c23c <Buttons_Init>
	Debug_LED_Init();
 800c534:	f7ff ffe8 	bl	800c508 <Debug_LED_Init>
	Out_Init();
 800c538:	f000 f820 	bl	800c57c <Out_Init>

//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\033[36mParametrica.ru\033[0m\r\n", 27, 5);
//	init_OK = 1;
}
 800c53c:	bf00      	nop
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_IncTick>:


void HAL_IncTick(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c544:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <HAL_IncTick+0x30>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	461a      	mov	r2, r3
 800c54a:	4b0a      	ldr	r3, [pc, #40]	; (800c574 <HAL_IncTick+0x34>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4413      	add	r3, r2
 800c550:	4a08      	ldr	r2, [pc, #32]	; (800c574 <HAL_IncTick+0x34>)
 800c552:	6013      	str	r3, [r2, #0]
  if (init_OK){
 800c554:	4b08      	ldr	r3, [pc, #32]	; (800c578 <HAL_IncTick+0x38>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d007      	beq.n	800c56c <HAL_IncTick+0x2c>
	  Main_IncTic();
 800c55c:	f7f4 faf8 	bl	8000b50 <Main_IncTic>
	  Debug_LED_IncTic();
 800c560:	f7ff ff00 	bl	800c364 <Debug_LED_IncTic>
	  Button_IncTick();
 800c564:	f7ff fca6 	bl	800beb4 <Button_IncTick>
	  Spi_LED_IncTick();
 800c568:	f000 f82c 	bl	800c5c4 <Spi_LED_IncTick>

  }
}
 800c56c:	bf00      	nop
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20000048 	.word	0x20000048
 800c574:	200006c4 	.word	0x200006c4
 800c578:	2000072b 	.word	0x2000072b

0800c57c <Out_Init>:
	if (Channel == P_OUT_1234){TIM4->PSC = volume;}
	if (Channel == P_OUT_567){TIM3->PSC = volume;}


}
void Out_Init(void){
 800c57c:	b580      	push	{r7, lr}
 800c57e:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim4);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800c580:	2100      	movs	r1, #0
 800c582:	480e      	ldr	r0, [pc, #56]	; (800c5bc <Out_Init+0x40>)
 800c584:	f7fa fb28 	bl	8006bd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800c588:	2104      	movs	r1, #4
 800c58a:	480c      	ldr	r0, [pc, #48]	; (800c5bc <Out_Init+0x40>)
 800c58c:	f7fa fb24 	bl	8006bd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800c590:	2108      	movs	r1, #8
 800c592:	480a      	ldr	r0, [pc, #40]	; (800c5bc <Out_Init+0x40>)
 800c594:	f7fa fb20 	bl	8006bd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800c598:	210c      	movs	r1, #12
 800c59a:	4808      	ldr	r0, [pc, #32]	; (800c5bc <Out_Init+0x40>)
 800c59c:	f7fa fb1c 	bl	8006bd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	4807      	ldr	r0, [pc, #28]	; (800c5c0 <Out_Init+0x44>)
 800c5a4:	f7fa fb18 	bl	8006bd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800c5a8:	2108      	movs	r1, #8
 800c5aa:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <Out_Init+0x44>)
 800c5ac:	f7fa fb14 	bl	8006bd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800c5b0:	210c      	movs	r1, #12
 800c5b2:	4803      	ldr	r0, [pc, #12]	; (800c5c0 <Out_Init+0x44>)
 800c5b4:	f7fa fb10 	bl	8006bd8 <HAL_TIM_PWM_Start>

//	Debug_UART((uint8_t *) "Out init\r\n", DBG_OK, 10);

}
 800c5b8:	bf00      	nop
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	200005f4 	.word	0x200005f4
 800c5c0:	200005ac 	.word	0x200005ac

0800c5c4 <Spi_LED_IncTick>:


//=========================================================================================================

void Spi_LED_IncTick(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0

//-------------------------------------------------------------
	Frame_Delay--;
 800c5c8:	4b1e      	ldr	r3, [pc, #120]	; (800c644 <Spi_LED_IncTick+0x80>)
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	4b1c      	ldr	r3, [pc, #112]	; (800c644 <Spi_LED_IncTick+0x80>)
 800c5d2:	801a      	strh	r2, [r3, #0]

	if (Frame_Delay == 2) {
 800c5d4:	4b1b      	ldr	r3, [pc, #108]	; (800c644 <Spi_LED_IncTick+0x80>)
 800c5d6:	881b      	ldrh	r3, [r3, #0]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d112      	bne.n	800c602 <Spi_LED_IncTick+0x3e>
		if (Spi_LED_Cmplt_Frame_Flag & 0x01){
 800c5dc:	4b1a      	ldr	r3, [pc, #104]	; (800c648 <Spi_LED_IncTick+0x84>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00c      	beq.n	800c602 <Spi_LED_IncTick+0x3e>
			//HAL_SPI_Transmit(&hspi1, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi1, &OutputArray[0][0].Green , LED_MAX * 3);
 800c5e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c5ec:	4917      	ldr	r1, [pc, #92]	; (800c64c <Spi_LED_IncTick+0x88>)
 800c5ee:	4818      	ldr	r0, [pc, #96]	; (800c650 <Spi_LED_IncTick+0x8c>)
 800c5f0:	f7fa f8b2 	bl	8006758 <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x01;
 800c5f4:	4b14      	ldr	r3, [pc, #80]	; (800c648 <Spi_LED_IncTick+0x84>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	4b12      	ldr	r3, [pc, #72]	; (800c648 <Spi_LED_IncTick+0x84>)
 800c600:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 1) {
 800c602:	4b10      	ldr	r3, [pc, #64]	; (800c644 <Spi_LED_IncTick+0x80>)
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d112      	bne.n	800c630 <Spi_LED_IncTick+0x6c>
		if (Spi_LED_Cmplt_Frame_Flag & 0x02){
 800c60a:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <Spi_LED_IncTick+0x84>)
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00c      	beq.n	800c630 <Spi_LED_IncTick+0x6c>
			//HAL_SPI_Transmit(&hspi2, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi2, &OutputArray[1][0].Green , LED_MAX * 3);
 800c616:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c61a:	490e      	ldr	r1, [pc, #56]	; (800c654 <Spi_LED_IncTick+0x90>)
 800c61c:	480e      	ldr	r0, [pc, #56]	; (800c658 <Spi_LED_IncTick+0x94>)
 800c61e:	f7fa f89b 	bl	8006758 <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x02;
 800c622:	4b09      	ldr	r3, [pc, #36]	; (800c648 <Spi_LED_IncTick+0x84>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f023 0302 	bic.w	r3, r3, #2
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	4b06      	ldr	r3, [pc, #24]	; (800c648 <Spi_LED_IncTick+0x84>)
 800c62e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 0) {
 800c630:	4b04      	ldr	r3, [pc, #16]	; (800c644 <Spi_LED_IncTick+0x80>)
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <Spi_LED_IncTick+0x7a>
		Frame_Delay = 1000 / SPI_FREQ;
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <Spi_LED_IncTick+0x80>)
 800c63a:	2232      	movs	r2, #50	; 0x32
 800c63c:	801a      	strh	r2, [r3, #0]
	}
}
 800c63e:	bf00      	nop
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	2000015e 	.word	0x2000015e
 800c648:	2000072c 	.word	0x2000072c
 800c64c:	20000730 	.word	0x20000730
 800c650:	200003e0 	.word	0x200003e0
 800c654:	200012e8 	.word	0x200012e8
 800c658:	20000438 	.word	0x20000438

0800c65c <Spi_LED_Init>:
//=========================================================================================================
void Spi_LED_Init(void){
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
	Spi_LED_Cmplt_Frame_Flag |= 0x01 | 0x02;
 800c662:	4b2f      	ldr	r3, [pc, #188]	; (800c720 <Spi_LED_Init+0xc4>)
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	f043 0303 	orr.w	r3, r3, #3
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	4b2c      	ldr	r3, [pc, #176]	; (800c720 <Spi_LED_Init+0xc4>)
 800c66e:	701a      	strb	r2, [r3, #0]

	extern DMA_HandleTypeDef hdma_spi1_tx;
	extern DMA_HandleTypeDef hdma_spi2_tx;

	HAL_DMA_Init(&hdma_spi1_tx);
 800c670:	482c      	ldr	r0, [pc, #176]	; (800c724 <Spi_LED_Init+0xc8>)
 800c672:	f7f5 fc4d 	bl	8001f10 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi2_tx);
 800c676:	482c      	ldr	r0, [pc, #176]	; (800c728 <Spi_LED_Init+0xcc>)
 800c678:	f7f5 fc4a 	bl	8001f10 <HAL_DMA_Init>

	for (uint16_t i = 0; i < LED_MAX; i++){
 800c67c:	2300      	movs	r3, #0
 800c67e:	80fb      	strh	r3, [r7, #6]
 800c680:	e01c      	b.n	800c6bc <Spi_LED_Init+0x60>
		OutputArray[0][i].Green = g;
 800c682:	88fa      	ldrh	r2, [r7, #6]
 800c684:	4929      	ldr	r1, [pc, #164]	; (800c72c <Spi_LED_Init+0xd0>)
 800c686:	4613      	mov	r3, r2
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	4413      	add	r3, r2
 800c68c:	440b      	add	r3, r1
 800c68e:	2200      	movs	r2, #0
 800c690:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Red 	= r;
 800c692:	88fa      	ldrh	r2, [r7, #6]
 800c694:	4925      	ldr	r1, [pc, #148]	; (800c72c <Spi_LED_Init+0xd0>)
 800c696:	4613      	mov	r3, r2
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4413      	add	r3, r2
 800c69c:	440b      	add	r3, r1
 800c69e:	3301      	adds	r3, #1
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Blue 	= b;
 800c6a4:	88fa      	ldrh	r2, [r7, #6]
 800c6a6:	4921      	ldr	r1, [pc, #132]	; (800c72c <Spi_LED_Init+0xd0>)
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	4413      	add	r3, r2
 800c6ae:	440b      	add	r3, r1
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800c6b6:	88fb      	ldrh	r3, [r7, #6]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	80fb      	strh	r3, [r7, #6]
 800c6bc:	88fb      	ldrh	r3, [r7, #6]
 800c6be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6c2:	d3de      	bcc.n	800c682 <Spi_LED_Init+0x26>
	}

	for (uint16_t i = 0; i < LED_MAX; i++){
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	80bb      	strh	r3, [r7, #4]
 800c6c8:	e020      	b.n	800c70c <Spi_LED_Init+0xb0>
		OutputArray[1][i].Green =	g;
 800c6ca:	88ba      	ldrh	r2, [r7, #4]
 800c6cc:	4917      	ldr	r1, [pc, #92]	; (800c72c <Spi_LED_Init+0xd0>)
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800c6da:	2200      	movs	r2, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Red 	=	r;
 800c6de:	88ba      	ldrh	r2, [r7, #4]
 800c6e0:	4912      	ldr	r1, [pc, #72]	; (800c72c <Spi_LED_Init+0xd0>)
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	4413      	add	r3, r2
 800c6e8:	440b      	add	r3, r1
 800c6ea:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Blue 	=	b;
 800c6f2:	88ba      	ldrh	r2, [r7, #4]
 800c6f4:	490d      	ldr	r1, [pc, #52]	; (800c72c <Spi_LED_Init+0xd0>)
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	4413      	add	r3, r2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	f603 33ba 	addw	r3, r3, #3002	; 0xbba
 800c702:	2200      	movs	r2, #0
 800c704:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800c706:	88bb      	ldrh	r3, [r7, #4]
 800c708:	3301      	adds	r3, #1
 800c70a:	80bb      	strh	r3, [r7, #4]
 800c70c:	88bb      	ldrh	r3, [r7, #4]
 800c70e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c712:	d3da      	bcc.n	800c6ca <Spi_LED_Init+0x6e>


//	Debug_UART((uint8_t *) "SPI_LED init\r\n", DBG_OK, 14);


}
 800c714:	bf00      	nop
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	2000072c 	.word	0x2000072c
 800c724:	200004e8 	.word	0x200004e8
 800c728:	20000548 	.word	0x20000548
 800c72c:	20000730 	.word	0x20000730

0800c730 <HAL_SPI_TxCpltCallback>:
//=========================================================================================================
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1){Spi_LED_Cmplt_Frame_Flag |= 0x01;}
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a0d      	ldr	r2, [pc, #52]	; (800c774 <HAL_SPI_TxCpltCallback+0x44>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d106      	bne.n	800c750 <HAL_SPI_TxCpltCallback+0x20>
 800c742:	4b0d      	ldr	r3, [pc, #52]	; (800c778 <HAL_SPI_TxCpltCallback+0x48>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <HAL_SPI_TxCpltCallback+0x48>)
 800c74e:	701a      	strb	r2, [r3, #0]
	if (hspi->Instance == SPI2){Spi_LED_Cmplt_Frame_Flag |= 0x02;}
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a09      	ldr	r2, [pc, #36]	; (800c77c <HAL_SPI_TxCpltCallback+0x4c>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d106      	bne.n	800c768 <HAL_SPI_TxCpltCallback+0x38>
 800c75a:	4b07      	ldr	r3, [pc, #28]	; (800c778 <HAL_SPI_TxCpltCallback+0x48>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	f043 0302 	orr.w	r3, r3, #2
 800c762:	b2da      	uxtb	r2, r3
 800c764:	4b04      	ldr	r3, [pc, #16]	; (800c778 <HAL_SPI_TxCpltCallback+0x48>)
 800c766:	701a      	strb	r2, [r3, #0]
//	itoa(tmp, string + 2, 16);
//	string[14] = Spi_LED_Cmplt_Frame_Flag + 0x30;
//	if (string[15] == *" ") {string[15] = *".";} else {string[15] = *" ";}
//	HAL_UART_Transmit(&huart2, string, 16, 2);

}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	40013000 	.word	0x40013000
 800c778:	2000072c 	.word	0x2000072c
 800c77c:	40003800 	.word	0x40003800

0800c780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c784:	2200      	movs	r2, #0
 800c786:	4912      	ldr	r1, [pc, #72]	; (800c7d0 <MX_USB_DEVICE_Init+0x50>)
 800c788:	4812      	ldr	r0, [pc, #72]	; (800c7d4 <MX_USB_DEVICE_Init+0x54>)
 800c78a:	f7fe f977 	bl	800aa7c <USBD_Init>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c794:	f7f4 fb1e 	bl	8000dd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c798:	490f      	ldr	r1, [pc, #60]	; (800c7d8 <MX_USB_DEVICE_Init+0x58>)
 800c79a:	480e      	ldr	r0, [pc, #56]	; (800c7d4 <MX_USB_DEVICE_Init+0x54>)
 800c79c:	f7fe f999 	bl	800aad2 <USBD_RegisterClass>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d001      	beq.n	800c7aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7a6:	f7f4 fb15 	bl	8000dd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c7aa:	490c      	ldr	r1, [pc, #48]	; (800c7dc <MX_USB_DEVICE_Init+0x5c>)
 800c7ac:	4809      	ldr	r0, [pc, #36]	; (800c7d4 <MX_USB_DEVICE_Init+0x54>)
 800c7ae:	f7fe f8f9 	bl	800a9a4 <USBD_CDC_RegisterInterface>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7b8:	f7f4 fb0c 	bl	8000dd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7bc:	4805      	ldr	r0, [pc, #20]	; (800c7d4 <MX_USB_DEVICE_Init+0x54>)
 800c7be:	f7fe f9a1 	bl	800ab04 <USBD_Start>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c7c8:	f7f4 fb04 	bl	8000dd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c7cc:	bf00      	nop
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	20000170 	.word	0x20000170
 800c7d4:	20001ea0 	.word	0x20001ea0
 800c7d8:	20000058 	.word	0x20000058
 800c7dc:	20000160 	.word	0x20000160

0800c7e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	4905      	ldr	r1, [pc, #20]	; (800c7fc <CDC_Init_FS+0x1c>)
 800c7e8:	4805      	ldr	r0, [pc, #20]	; (800c800 <CDC_Init_FS+0x20>)
 800c7ea:	f7fe f8f1 	bl	800a9d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c7ee:	4905      	ldr	r1, [pc, #20]	; (800c804 <CDC_Init_FS+0x24>)
 800c7f0:	4803      	ldr	r0, [pc, #12]	; (800c800 <CDC_Init_FS+0x20>)
 800c7f2:	f7fe f906 	bl	800aa02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c7f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20002964 	.word	0x20002964
 800c800:	20001ea0 	.word	0x20001ea0
 800c804:	20002164 	.word	0x20002164

0800c808 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c80c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c80e:	4618      	mov	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	bc80      	pop	{r7}
 800c814:	4770      	bx	lr
	...

0800c818 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	6039      	str	r1, [r7, #0]
 800c822:	71fb      	strb	r3, [r7, #7]
 800c824:	4613      	mov	r3, r2
 800c826:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	2b23      	cmp	r3, #35	; 0x23
 800c82c:	d84a      	bhi.n	800c8c4 <CDC_Control_FS+0xac>
 800c82e:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <CDC_Control_FS+0x1c>)
 800c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c834:	0800c8c5 	.word	0x0800c8c5
 800c838:	0800c8c5 	.word	0x0800c8c5
 800c83c:	0800c8c5 	.word	0x0800c8c5
 800c840:	0800c8c5 	.word	0x0800c8c5
 800c844:	0800c8c5 	.word	0x0800c8c5
 800c848:	0800c8c5 	.word	0x0800c8c5
 800c84c:	0800c8c5 	.word	0x0800c8c5
 800c850:	0800c8c5 	.word	0x0800c8c5
 800c854:	0800c8c5 	.word	0x0800c8c5
 800c858:	0800c8c5 	.word	0x0800c8c5
 800c85c:	0800c8c5 	.word	0x0800c8c5
 800c860:	0800c8c5 	.word	0x0800c8c5
 800c864:	0800c8c5 	.word	0x0800c8c5
 800c868:	0800c8c5 	.word	0x0800c8c5
 800c86c:	0800c8c5 	.word	0x0800c8c5
 800c870:	0800c8c5 	.word	0x0800c8c5
 800c874:	0800c8c5 	.word	0x0800c8c5
 800c878:	0800c8c5 	.word	0x0800c8c5
 800c87c:	0800c8c5 	.word	0x0800c8c5
 800c880:	0800c8c5 	.word	0x0800c8c5
 800c884:	0800c8c5 	.word	0x0800c8c5
 800c888:	0800c8c5 	.word	0x0800c8c5
 800c88c:	0800c8c5 	.word	0x0800c8c5
 800c890:	0800c8c5 	.word	0x0800c8c5
 800c894:	0800c8c5 	.word	0x0800c8c5
 800c898:	0800c8c5 	.word	0x0800c8c5
 800c89c:	0800c8c5 	.word	0x0800c8c5
 800c8a0:	0800c8c5 	.word	0x0800c8c5
 800c8a4:	0800c8c5 	.word	0x0800c8c5
 800c8a8:	0800c8c5 	.word	0x0800c8c5
 800c8ac:	0800c8c5 	.word	0x0800c8c5
 800c8b0:	0800c8c5 	.word	0x0800c8c5
 800c8b4:	0800c8c5 	.word	0x0800c8c5
 800c8b8:	0800c8c5 	.word	0x0800c8c5
 800c8bc:	0800c8c5 	.word	0x0800c8c5
 800c8c0:	0800c8c5 	.word	0x0800c8c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8c4:	bf00      	nop
  }

  return (USBD_OK);
 800c8c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bc80      	pop	{r7}
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c8de:	6879      	ldr	r1, [r7, #4]
 800c8e0:	4805      	ldr	r0, [pc, #20]	; (800c8f8 <CDC_Receive_FS+0x24>)
 800c8e2:	f7fe f88e 	bl	800aa02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c8e6:	4804      	ldr	r0, [pc, #16]	; (800c8f8 <CDC_Receive_FS+0x24>)
 800c8e8:	f7fe f89e 	bl	800aa28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c8ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20001ea0 	.word	0x20001ea0

0800c8fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	4603      	mov	r3, r0
 800c904:	6039      	str	r1, [r7, #0]
 800c906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2212      	movs	r2, #18
 800c90c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c90e:	4b03      	ldr	r3, [pc, #12]	; (800c91c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	bc80      	pop	{r7}
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	2000018c 	.word	0x2000018c

0800c920 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	6039      	str	r1, [r7, #0]
 800c92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2204      	movs	r2, #4
 800c930:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c932:	4b03      	ldr	r3, [pc, #12]	; (800c940 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	bc80      	pop	{r7}
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	200001a0 	.word	0x200001a0

0800c944 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	6039      	str	r1, [r7, #0]
 800c94e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c950:	79fb      	ldrb	r3, [r7, #7]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d105      	bne.n	800c962 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c956:	683a      	ldr	r2, [r7, #0]
 800c958:	4907      	ldr	r1, [pc, #28]	; (800c978 <USBD_FS_ProductStrDescriptor+0x34>)
 800c95a:	4808      	ldr	r0, [pc, #32]	; (800c97c <USBD_FS_ProductStrDescriptor+0x38>)
 800c95c:	f7ff f884 	bl	800ba68 <USBD_GetString>
 800c960:	e004      	b.n	800c96c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	4904      	ldr	r1, [pc, #16]	; (800c978 <USBD_FS_ProductStrDescriptor+0x34>)
 800c966:	4805      	ldr	r0, [pc, #20]	; (800c97c <USBD_FS_ProductStrDescriptor+0x38>)
 800c968:	f7ff f87e 	bl	800ba68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c96c:	4b02      	ldr	r3, [pc, #8]	; (800c978 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20003164 	.word	0x20003164
 800c97c:	0800d3d8 	.word	0x0800d3d8

0800c980 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	6039      	str	r1, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	4904      	ldr	r1, [pc, #16]	; (800c9a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c990:	4804      	ldr	r0, [pc, #16]	; (800c9a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c992:	f7ff f869 	bl	800ba68 <USBD_GetString>
  return USBD_StrDesc;
 800c996:	4b02      	ldr	r3, [pc, #8]	; (800c9a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20003164 	.word	0x20003164
 800c9a4:	0800d3ec 	.word	0x0800d3ec

0800c9a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	6039      	str	r1, [r7, #0]
 800c9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	221a      	movs	r2, #26
 800c9b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c9ba:	f000 f843 	bl	800ca44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c9be:	4b02      	ldr	r3, [pc, #8]	; (800c9c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	200001a4 	.word	0x200001a4

0800c9cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	6039      	str	r1, [r7, #0]
 800c9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d105      	bne.n	800c9ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	4907      	ldr	r1, [pc, #28]	; (800ca00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c9e2:	4808      	ldr	r0, [pc, #32]	; (800ca04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c9e4:	f7ff f840 	bl	800ba68 <USBD_GetString>
 800c9e8:	e004      	b.n	800c9f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	4904      	ldr	r1, [pc, #16]	; (800ca00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c9ee:	4805      	ldr	r0, [pc, #20]	; (800ca04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c9f0:	f7ff f83a 	bl	800ba68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9f4:	4b02      	ldr	r3, [pc, #8]	; (800ca00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20003164 	.word	0x20003164
 800ca04:	0800d400 	.word	0x0800d400

0800ca08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d105      	bne.n	800ca26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	4907      	ldr	r1, [pc, #28]	; (800ca3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca1e:	4808      	ldr	r0, [pc, #32]	; (800ca40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca20:	f7ff f822 	bl	800ba68 <USBD_GetString>
 800ca24:	e004      	b.n	800ca30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	4904      	ldr	r1, [pc, #16]	; (800ca3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca2a:	4805      	ldr	r0, [pc, #20]	; (800ca40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca2c:	f7ff f81c 	bl	800ba68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca30:	4b02      	ldr	r3, [pc, #8]	; (800ca3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20003164 	.word	0x20003164
 800ca40:	0800d40c 	.word	0x0800d40c

0800ca44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca4a:	4b0f      	ldr	r3, [pc, #60]	; (800ca88 <Get_SerialNum+0x44>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca50:	4b0e      	ldr	r3, [pc, #56]	; (800ca8c <Get_SerialNum+0x48>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca56:	4b0e      	ldr	r3, [pc, #56]	; (800ca90 <Get_SerialNum+0x4c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4413      	add	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d009      	beq.n	800ca7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca6a:	2208      	movs	r2, #8
 800ca6c:	4909      	ldr	r1, [pc, #36]	; (800ca94 <Get_SerialNum+0x50>)
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 f814 	bl	800ca9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca74:	2204      	movs	r2, #4
 800ca76:	4908      	ldr	r1, [pc, #32]	; (800ca98 <Get_SerialNum+0x54>)
 800ca78:	68b8      	ldr	r0, [r7, #8]
 800ca7a:	f000 f80f 	bl	800ca9c <IntToUnicode>
  }
}
 800ca7e:	bf00      	nop
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	1fff7a10 	.word	0x1fff7a10
 800ca8c:	1fff7a14 	.word	0x1fff7a14
 800ca90:	1fff7a18 	.word	0x1fff7a18
 800ca94:	200001a6 	.word	0x200001a6
 800ca98:	200001b6 	.word	0x200001b6

0800ca9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	4613      	mov	r3, r2
 800caa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800caae:	2300      	movs	r3, #0
 800cab0:	75fb      	strb	r3, [r7, #23]
 800cab2:	e027      	b.n	800cb04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	0f1b      	lsrs	r3, r3, #28
 800cab8:	2b09      	cmp	r3, #9
 800caba:	d80b      	bhi.n	800cad4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	0f1b      	lsrs	r3, r3, #28
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4619      	mov	r1, r3
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	440b      	add	r3, r1
 800cacc:	3230      	adds	r2, #48	; 0x30
 800cace:	b2d2      	uxtb	r2, r2
 800cad0:	701a      	strb	r2, [r3, #0]
 800cad2:	e00a      	b.n	800caea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	0f1b      	lsrs	r3, r3, #28
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4619      	mov	r1, r3
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	440b      	add	r3, r1
 800cae4:	3237      	adds	r2, #55	; 0x37
 800cae6:	b2d2      	uxtb	r2, r2
 800cae8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	011b      	lsls	r3, r3, #4
 800caee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	3301      	adds	r3, #1
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	4413      	add	r3, r2
 800cafa:	2200      	movs	r2, #0
 800cafc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	3301      	adds	r3, #1
 800cb02:	75fb      	strb	r3, [r7, #23]
 800cb04:	7dfa      	ldrb	r2, [r7, #23]
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d3d3      	bcc.n	800cab4 <IntToUnicode+0x18>
  }
}
 800cb0c:	bf00      	nop
 800cb0e:	bf00      	nop
 800cb10:	371c      	adds	r7, #28
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bc80      	pop	{r7}
 800cb16:	4770      	bx	lr

0800cb18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08a      	sub	sp, #40	; 0x28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb20:	f107 0314 	add.w	r3, r7, #20
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	605a      	str	r2, [r3, #4]
 800cb2a:	609a      	str	r2, [r3, #8]
 800cb2c:	60da      	str	r2, [r3, #12]
 800cb2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb38:	d147      	bne.n	800cbca <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	613b      	str	r3, [r7, #16]
 800cb3e:	4b25      	ldr	r3, [pc, #148]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb42:	4a24      	ldr	r2, [pc, #144]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cb44:	f043 0301 	orr.w	r3, r3, #1
 800cb48:	6313      	str	r3, [r2, #48]	; 0x30
 800cb4a:	4b22      	ldr	r3, [pc, #136]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cb56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb64:	f107 0314 	add.w	r3, r7, #20
 800cb68:	4619      	mov	r1, r3
 800cb6a:	481b      	ldr	r0, [pc, #108]	; (800cbd8 <HAL_PCD_MspInit+0xc0>)
 800cb6c:	f7f5 fe2c 	bl	80027c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cb74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb76:	2302      	movs	r3, #2
 800cb78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cb82:	230a      	movs	r3, #10
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb86:	f107 0314 	add.w	r3, r7, #20
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4812      	ldr	r0, [pc, #72]	; (800cbd8 <HAL_PCD_MspInit+0xc0>)
 800cb8e:	f7f5 fe1b 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb92:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb96:	4a0f      	ldr	r2, [pc, #60]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cb98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb9c:	6353      	str	r3, [r2, #52]	; 0x34
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba6:	4a0b      	ldr	r2, [pc, #44]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbac:	6453      	str	r3, [r2, #68]	; 0x44
 800cbae:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <HAL_PCD_MspInit+0xbc>)
 800cbb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	2043      	movs	r0, #67	; 0x43
 800cbc0:	f7f5 f953 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cbc4:	2043      	movs	r0, #67	; 0x43
 800cbc6:	f7f5 f96c 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cbca:	bf00      	nop
 800cbcc:	3728      	adds	r7, #40	; 0x28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	40023800 	.word	0x40023800
 800cbd8:	40020000 	.word	0x40020000

0800cbdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fd ffce 	bl	800ab94 <USBD_LL_SetupStage>
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cc12:	78fa      	ldrb	r2, [r7, #3]
 800cc14:	6879      	ldr	r1, [r7, #4]
 800cc16:	4613      	mov	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	440b      	add	r3, r1
 800cc20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	78fb      	ldrb	r3, [r7, #3]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f7fe f800 	bl	800ac2e <USBD_LL_DataOutStage>
}
 800cc2e:	bf00      	nop
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cc48:	78fa      	ldrb	r2, [r7, #3]
 800cc4a:	6879      	ldr	r1, [r7, #4]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	00db      	lsls	r3, r3, #3
 800cc50:	1a9b      	subs	r3, r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	440b      	add	r3, r1
 800cc56:	3348      	adds	r3, #72	; 0x48
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f7fe f857 	bl	800ad10 <USBD_LL_DataInStage>
}
 800cc62:	bf00      	nop
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b082      	sub	sp, #8
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe f967 	bl	800af4c <USBD_LL_SOF>
}
 800cc7e:	bf00      	nop
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d102      	bne.n	800cca0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	73fb      	strb	r3, [r7, #15]
 800cc9e:	e008      	b.n	800ccb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d102      	bne.n	800ccae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	e001      	b.n	800ccb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ccae:	f7f4 f891 	bl	8000dd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ccb8:	7bfa      	ldrb	r2, [r7, #15]
 800ccba:	4611      	mov	r1, r2
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe f90d 	bl	800aedc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe f8c6 	bl	800ae5a <USBD_LL_Reset>
}
 800ccce:	bf00      	nop
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
	...

0800ccd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fe f907 	bl	800aefa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ccfe:	f043 0301 	orr.w	r3, r3, #1
 800cd02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd0c:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <HAL_PCD_SuspendCallback+0x48>)
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	4a03      	ldr	r2, [pc, #12]	; (800cd20 <HAL_PCD_SuspendCallback+0x48>)
 800cd12:	f043 0306 	orr.w	r3, r3, #6
 800cd16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	e000ed00 	.word	0xe000ed00

0800cd24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe f8f5 	bl	800af22 <USBD_LL_Resume>
}
 800cd38:	bf00      	nop
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cd52:	78fa      	ldrb	r2, [r7, #3]
 800cd54:	4611      	mov	r1, r2
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe f91e 	bl	800af98 <USBD_LL_IsoOUTIncomplete>
}
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cd76:	78fa      	ldrb	r2, [r7, #3]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe f900 	bl	800af80 <USBD_LL_IsoINIncomplete>
}
 800cd80:	bf00      	nop
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe f90a 	bl	800afb0 <USBD_LL_DevConnected>
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe f906 	bl	800afc4 <USBD_LL_DevDisconnected>
}
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d139      	bne.n	800ce44 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cdd0:	4a1f      	ldr	r2, [pc, #124]	; (800ce50 <USBD_LL_Init+0x90>)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a1d      	ldr	r2, [pc, #116]	; (800ce50 <USBD_LL_Init+0x90>)
 800cddc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cde0:	4b1b      	ldr	r3, [pc, #108]	; (800ce50 <USBD_LL_Init+0x90>)
 800cde2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cde6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cde8:	4b19      	ldr	r3, [pc, #100]	; (800ce50 <USBD_LL_Init+0x90>)
 800cdea:	2204      	movs	r2, #4
 800cdec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cdee:	4b18      	ldr	r3, [pc, #96]	; (800ce50 <USBD_LL_Init+0x90>)
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cdf4:	4b16      	ldr	r3, [pc, #88]	; (800ce50 <USBD_LL_Init+0x90>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdfa:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <USBD_LL_Init+0x90>)
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ce00:	4b13      	ldr	r3, [pc, #76]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ce06:	4b12      	ldr	r3, [pc, #72]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ce0c:	4b10      	ldr	r3, [pc, #64]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ce12:	4b0f      	ldr	r3, [pc, #60]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ce18:	480d      	ldr	r0, [pc, #52]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce1a:	f7f6 f8e5 	bl	8002fe8 <HAL_PCD_Init>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d001      	beq.n	800ce28 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800ce24:	f7f3 ffd6 	bl	8000dd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ce28:	2180      	movs	r1, #128	; 0x80
 800ce2a:	4809      	ldr	r0, [pc, #36]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce2c:	f7f7 fa22 	bl	8004274 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ce30:	2240      	movs	r2, #64	; 0x40
 800ce32:	2100      	movs	r1, #0
 800ce34:	4806      	ldr	r0, [pc, #24]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce36:	f7f7 f9d7 	bl	80041e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ce3a:	2280      	movs	r2, #128	; 0x80
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	4804      	ldr	r0, [pc, #16]	; (800ce50 <USBD_LL_Init+0x90>)
 800ce40:	f7f7 f9d2 	bl	80041e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	20003364 	.word	0x20003364

0800ce54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7f6 f9d9 	bl	8003222 <HAL_PCD_Start>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 f92e 	bl	800d0d8 <USBD_Get_USB_Status>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	4608      	mov	r0, r1
 800ce94:	4611      	mov	r1, r2
 800ce96:	461a      	mov	r2, r3
 800ce98:	4603      	mov	r3, r0
 800ce9a:	70fb      	strb	r3, [r7, #3]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70bb      	strb	r3, [r7, #2]
 800cea0:	4613      	mov	r3, r2
 800cea2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ceb2:	78bb      	ldrb	r3, [r7, #2]
 800ceb4:	883a      	ldrh	r2, [r7, #0]
 800ceb6:	78f9      	ldrb	r1, [r7, #3]
 800ceb8:	f7f6 fd9e 	bl	80039f8 <HAL_PCD_EP_Open>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f908 	bl	800d0d8 <USBD_Get_USB_Status>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b084      	sub	sp, #16
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	460b      	mov	r3, r1
 800cee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cef0:	78fa      	ldrb	r2, [r7, #3]
 800cef2:	4611      	mov	r1, r2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7f6 fde7 	bl	8003ac8 <HAL_PCD_EP_Close>
 800cefa:	4603      	mov	r3, r0
 800cefc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f8e9 	bl	800d0d8 <USBD_Get_USB_Status>
 800cf06:	4603      	mov	r3, r0
 800cf08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f6 febe 	bl	8003cb4 <HAL_PCD_EP_SetStall>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 f8ca 	bl	800d0d8 <USBD_Get_USB_Status>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf48:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf6c:	78fa      	ldrb	r2, [r7, #3]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7f6 ff03 	bl	8003d7c <HAL_PCD_EP_ClrStall>
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f000 f8ab 	bl	800d0d8 <USBD_Get_USB_Status>
 800cf82:	4603      	mov	r3, r0
 800cf84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf86:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cfa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	da0b      	bge.n	800cfc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfb2:	68f9      	ldr	r1, [r7, #12]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	00db      	lsls	r3, r3, #3
 800cfb8:	1a9b      	subs	r3, r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	440b      	add	r3, r1
 800cfbe:	333e      	adds	r3, #62	; 0x3e
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	e00b      	b.n	800cfdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	00db      	lsls	r3, r3, #3
 800cfd0:	1a9b      	subs	r3, r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	440b      	add	r3, r1
 800cfd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3714      	adds	r7, #20
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bc80      	pop	{r7}
 800cfe4:	4770      	bx	lr

0800cfe6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	460b      	mov	r3, r1
 800cff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d000:	78fa      	ldrb	r2, [r7, #3]
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f7f6 fcd2 	bl	80039ae <HAL_PCD_SetAddress>
 800d00a:	4603      	mov	r3, r0
 800d00c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
 800d010:	4618      	mov	r0, r3
 800d012:	f000 f861 	bl	800d0d8 <USBD_Get_USB_Status>
 800d016:	4603      	mov	r3, r0
 800d018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	607a      	str	r2, [r7, #4]
 800d02e:	461a      	mov	r2, r3
 800d030:	460b      	mov	r3, r1
 800d032:	72fb      	strb	r3, [r7, #11]
 800d034:	4613      	mov	r3, r2
 800d036:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d038:	2300      	movs	r3, #0
 800d03a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d046:	893b      	ldrh	r3, [r7, #8]
 800d048:	7af9      	ldrb	r1, [r7, #11]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	f7f6 fde8 	bl	8003c20 <HAL_PCD_EP_Transmit>
 800d050:	4603      	mov	r3, r0
 800d052:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d054:	7dfb      	ldrb	r3, [r7, #23]
 800d056:	4618      	mov	r0, r3
 800d058:	f000 f83e 	bl	800d0d8 <USBD_Get_USB_Status>
 800d05c:	4603      	mov	r3, r0
 800d05e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d060:	7dbb      	ldrb	r3, [r7, #22]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b086      	sub	sp, #24
 800d06e:	af00      	add	r7, sp, #0
 800d070:	60f8      	str	r0, [r7, #12]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	461a      	mov	r2, r3
 800d076:	460b      	mov	r3, r1
 800d078:	72fb      	strb	r3, [r7, #11]
 800d07a:	4613      	mov	r3, r2
 800d07c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d08c:	893b      	ldrh	r3, [r7, #8]
 800d08e:	7af9      	ldrb	r1, [r7, #11]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	f7f6 fd63 	bl	8003b5c <HAL_PCD_EP_Receive>
 800d096:	4603      	mov	r3, r0
 800d098:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d09a:	7dfb      	ldrb	r3, [r7, #23]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 f81b 	bl	800d0d8 <USBD_Get_USB_Status>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0c2:	78fa      	ldrb	r2, [r7, #3]
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7f6 fd93 	bl	8003bf2 <HAL_PCD_EP_GetRxCount>
 800d0cc:	4603      	mov	r3, r0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4603      	mov	r3, r0
 800d0e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d817      	bhi.n	800d11c <USBD_Get_USB_Status+0x44>
 800d0ec:	a201      	add	r2, pc, #4	; (adr r2, 800d0f4 <USBD_Get_USB_Status+0x1c>)
 800d0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f2:	bf00      	nop
 800d0f4:	0800d105 	.word	0x0800d105
 800d0f8:	0800d10b 	.word	0x0800d10b
 800d0fc:	0800d111 	.word	0x0800d111
 800d100:	0800d117 	.word	0x0800d117
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
    break;
 800d108:	e00b      	b.n	800d122 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d10a:	2302      	movs	r3, #2
 800d10c:	73fb      	strb	r3, [r7, #15]
    break;
 800d10e:	e008      	b.n	800d122 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d110:	2301      	movs	r3, #1
 800d112:	73fb      	strb	r3, [r7, #15]
    break;
 800d114:	e005      	b.n	800d122 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d116:	2302      	movs	r3, #2
 800d118:	73fb      	strb	r3, [r7, #15]
    break;
 800d11a:	e002      	b.n	800d122 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d11c:	2302      	movs	r3, #2
 800d11e:	73fb      	strb	r3, [r7, #15]
    break;
 800d120:	bf00      	nop
  }
  return usb_status;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	bc80      	pop	{r7}
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop

0800d130 <malloc>:
 800d130:	4b02      	ldr	r3, [pc, #8]	; (800d13c <malloc+0xc>)
 800d132:	4601      	mov	r1, r0
 800d134:	6818      	ldr	r0, [r3, #0]
 800d136:	f000 b82b 	b.w	800d190 <_malloc_r>
 800d13a:	bf00      	nop
 800d13c:	2000020c 	.word	0x2000020c

0800d140 <free>:
 800d140:	4b02      	ldr	r3, [pc, #8]	; (800d14c <free+0xc>)
 800d142:	4601      	mov	r1, r0
 800d144:	6818      	ldr	r0, [r3, #0]
 800d146:	f000 b8f3 	b.w	800d330 <_free_r>
 800d14a:	bf00      	nop
 800d14c:	2000020c 	.word	0x2000020c

0800d150 <sbrk_aligned>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4e0e      	ldr	r6, [pc, #56]	; (800d18c <sbrk_aligned+0x3c>)
 800d154:	460c      	mov	r4, r1
 800d156:	6831      	ldr	r1, [r6, #0]
 800d158:	4605      	mov	r5, r0
 800d15a:	b911      	cbnz	r1, 800d162 <sbrk_aligned+0x12>
 800d15c:	f000 f8ac 	bl	800d2b8 <_sbrk_r>
 800d160:	6030      	str	r0, [r6, #0]
 800d162:	4621      	mov	r1, r4
 800d164:	4628      	mov	r0, r5
 800d166:	f000 f8a7 	bl	800d2b8 <_sbrk_r>
 800d16a:	1c43      	adds	r3, r0, #1
 800d16c:	d00a      	beq.n	800d184 <sbrk_aligned+0x34>
 800d16e:	1cc4      	adds	r4, r0, #3
 800d170:	f024 0403 	bic.w	r4, r4, #3
 800d174:	42a0      	cmp	r0, r4
 800d176:	d007      	beq.n	800d188 <sbrk_aligned+0x38>
 800d178:	1a21      	subs	r1, r4, r0
 800d17a:	4628      	mov	r0, r5
 800d17c:	f000 f89c 	bl	800d2b8 <_sbrk_r>
 800d180:	3001      	adds	r0, #1
 800d182:	d101      	bne.n	800d188 <sbrk_aligned+0x38>
 800d184:	f04f 34ff 	mov.w	r4, #4294967295
 800d188:	4620      	mov	r0, r4
 800d18a:	bd70      	pop	{r4, r5, r6, pc}
 800d18c:	20003768 	.word	0x20003768

0800d190 <_malloc_r>:
 800d190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d194:	1ccd      	adds	r5, r1, #3
 800d196:	f025 0503 	bic.w	r5, r5, #3
 800d19a:	3508      	adds	r5, #8
 800d19c:	2d0c      	cmp	r5, #12
 800d19e:	bf38      	it	cc
 800d1a0:	250c      	movcc	r5, #12
 800d1a2:	2d00      	cmp	r5, #0
 800d1a4:	4607      	mov	r7, r0
 800d1a6:	db01      	blt.n	800d1ac <_malloc_r+0x1c>
 800d1a8:	42a9      	cmp	r1, r5
 800d1aa:	d905      	bls.n	800d1b8 <_malloc_r+0x28>
 800d1ac:	230c      	movs	r3, #12
 800d1ae:	2600      	movs	r6, #0
 800d1b0:	603b      	str	r3, [r7, #0]
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d28c <_malloc_r+0xfc>
 800d1bc:	f000 f868 	bl	800d290 <__malloc_lock>
 800d1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800d1c4:	461c      	mov	r4, r3
 800d1c6:	bb5c      	cbnz	r4, 800d220 <_malloc_r+0x90>
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	f7ff ffc0 	bl	800d150 <sbrk_aligned>
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	d155      	bne.n	800d282 <_malloc_r+0xf2>
 800d1d6:	f8d8 4000 	ldr.w	r4, [r8]
 800d1da:	4626      	mov	r6, r4
 800d1dc:	2e00      	cmp	r6, #0
 800d1de:	d145      	bne.n	800d26c <_malloc_r+0xdc>
 800d1e0:	2c00      	cmp	r4, #0
 800d1e2:	d048      	beq.n	800d276 <_malloc_r+0xe6>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	eb04 0903 	add.w	r9, r4, r3
 800d1ee:	f000 f863 	bl	800d2b8 <_sbrk_r>
 800d1f2:	4581      	cmp	r9, r0
 800d1f4:	d13f      	bne.n	800d276 <_malloc_r+0xe6>
 800d1f6:	6821      	ldr	r1, [r4, #0]
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	1a6d      	subs	r5, r5, r1
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	f7ff ffa7 	bl	800d150 <sbrk_aligned>
 800d202:	3001      	adds	r0, #1
 800d204:	d037      	beq.n	800d276 <_malloc_r+0xe6>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	442b      	add	r3, r5
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	f8d8 3000 	ldr.w	r3, [r8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d038      	beq.n	800d286 <_malloc_r+0xf6>
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	42a2      	cmp	r2, r4
 800d218:	d12b      	bne.n	800d272 <_malloc_r+0xe2>
 800d21a:	2200      	movs	r2, #0
 800d21c:	605a      	str	r2, [r3, #4]
 800d21e:	e00f      	b.n	800d240 <_malloc_r+0xb0>
 800d220:	6822      	ldr	r2, [r4, #0]
 800d222:	1b52      	subs	r2, r2, r5
 800d224:	d41f      	bmi.n	800d266 <_malloc_r+0xd6>
 800d226:	2a0b      	cmp	r2, #11
 800d228:	d917      	bls.n	800d25a <_malloc_r+0xca>
 800d22a:	1961      	adds	r1, r4, r5
 800d22c:	42a3      	cmp	r3, r4
 800d22e:	6025      	str	r5, [r4, #0]
 800d230:	bf18      	it	ne
 800d232:	6059      	strne	r1, [r3, #4]
 800d234:	6863      	ldr	r3, [r4, #4]
 800d236:	bf08      	it	eq
 800d238:	f8c8 1000 	streq.w	r1, [r8]
 800d23c:	5162      	str	r2, [r4, r5]
 800d23e:	604b      	str	r3, [r1, #4]
 800d240:	4638      	mov	r0, r7
 800d242:	f104 060b 	add.w	r6, r4, #11
 800d246:	f000 f829 	bl	800d29c <__malloc_unlock>
 800d24a:	f026 0607 	bic.w	r6, r6, #7
 800d24e:	1d23      	adds	r3, r4, #4
 800d250:	1af2      	subs	r2, r6, r3
 800d252:	d0ae      	beq.n	800d1b2 <_malloc_r+0x22>
 800d254:	1b9b      	subs	r3, r3, r6
 800d256:	50a3      	str	r3, [r4, r2]
 800d258:	e7ab      	b.n	800d1b2 <_malloc_r+0x22>
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	6862      	ldr	r2, [r4, #4]
 800d25e:	d1dd      	bne.n	800d21c <_malloc_r+0x8c>
 800d260:	f8c8 2000 	str.w	r2, [r8]
 800d264:	e7ec      	b.n	800d240 <_malloc_r+0xb0>
 800d266:	4623      	mov	r3, r4
 800d268:	6864      	ldr	r4, [r4, #4]
 800d26a:	e7ac      	b.n	800d1c6 <_malloc_r+0x36>
 800d26c:	4634      	mov	r4, r6
 800d26e:	6876      	ldr	r6, [r6, #4]
 800d270:	e7b4      	b.n	800d1dc <_malloc_r+0x4c>
 800d272:	4613      	mov	r3, r2
 800d274:	e7cc      	b.n	800d210 <_malloc_r+0x80>
 800d276:	230c      	movs	r3, #12
 800d278:	4638      	mov	r0, r7
 800d27a:	603b      	str	r3, [r7, #0]
 800d27c:	f000 f80e 	bl	800d29c <__malloc_unlock>
 800d280:	e797      	b.n	800d1b2 <_malloc_r+0x22>
 800d282:	6025      	str	r5, [r4, #0]
 800d284:	e7dc      	b.n	800d240 <_malloc_r+0xb0>
 800d286:	605b      	str	r3, [r3, #4]
 800d288:	deff      	udf	#255	; 0xff
 800d28a:	bf00      	nop
 800d28c:	20003764 	.word	0x20003764

0800d290 <__malloc_lock>:
 800d290:	4801      	ldr	r0, [pc, #4]	; (800d298 <__malloc_lock+0x8>)
 800d292:	f000 b84b 	b.w	800d32c <__retarget_lock_acquire_recursive>
 800d296:	bf00      	nop
 800d298:	200038a8 	.word	0x200038a8

0800d29c <__malloc_unlock>:
 800d29c:	4801      	ldr	r0, [pc, #4]	; (800d2a4 <__malloc_unlock+0x8>)
 800d29e:	f000 b846 	b.w	800d32e <__retarget_lock_release_recursive>
 800d2a2:	bf00      	nop
 800d2a4:	200038a8 	.word	0x200038a8

0800d2a8 <memset>:
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	4402      	add	r2, r0
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d100      	bne.n	800d2b2 <memset+0xa>
 800d2b0:	4770      	bx	lr
 800d2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2b6:	e7f9      	b.n	800d2ac <memset+0x4>

0800d2b8 <_sbrk_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4d05      	ldr	r5, [pc, #20]	; (800d2d4 <_sbrk_r+0x1c>)
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	602b      	str	r3, [r5, #0]
 800d2c4:	f7f4 f98c 	bl	80015e0 <_sbrk>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d102      	bne.n	800d2d2 <_sbrk_r+0x1a>
 800d2cc:	682b      	ldr	r3, [r5, #0]
 800d2ce:	b103      	cbz	r3, 800d2d2 <_sbrk_r+0x1a>
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	bd38      	pop	{r3, r4, r5, pc}
 800d2d4:	200038a4 	.word	0x200038a4

0800d2d8 <__errno>:
 800d2d8:	4b01      	ldr	r3, [pc, #4]	; (800d2e0 <__errno+0x8>)
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	2000020c 	.word	0x2000020c

0800d2e4 <__libc_init_array>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	4d0c      	ldr	r5, [pc, #48]	; (800d31c <__libc_init_array+0x38>)
 800d2ea:	4c0d      	ldr	r4, [pc, #52]	; (800d320 <__libc_init_array+0x3c>)
 800d2ec:	1b64      	subs	r4, r4, r5
 800d2ee:	10a4      	asrs	r4, r4, #2
 800d2f0:	42a6      	cmp	r6, r4
 800d2f2:	d109      	bne.n	800d308 <__libc_init_array+0x24>
 800d2f4:	f000 f864 	bl	800d3c0 <_init>
 800d2f8:	2600      	movs	r6, #0
 800d2fa:	4d0a      	ldr	r5, [pc, #40]	; (800d324 <__libc_init_array+0x40>)
 800d2fc:	4c0a      	ldr	r4, [pc, #40]	; (800d328 <__libc_init_array+0x44>)
 800d2fe:	1b64      	subs	r4, r4, r5
 800d300:	10a4      	asrs	r4, r4, #2
 800d302:	42a6      	cmp	r6, r4
 800d304:	d105      	bne.n	800d312 <__libc_init_array+0x2e>
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	f855 3b04 	ldr.w	r3, [r5], #4
 800d30c:	4798      	blx	r3
 800d30e:	3601      	adds	r6, #1
 800d310:	e7ee      	b.n	800d2f0 <__libc_init_array+0xc>
 800d312:	f855 3b04 	ldr.w	r3, [r5], #4
 800d316:	4798      	blx	r3
 800d318:	3601      	adds	r6, #1
 800d31a:	e7f2      	b.n	800d302 <__libc_init_array+0x1e>
 800d31c:	0800d658 	.word	0x0800d658
 800d320:	0800d658 	.word	0x0800d658
 800d324:	0800d658 	.word	0x0800d658
 800d328:	0800d65c 	.word	0x0800d65c

0800d32c <__retarget_lock_acquire_recursive>:
 800d32c:	4770      	bx	lr

0800d32e <__retarget_lock_release_recursive>:
 800d32e:	4770      	bx	lr

0800d330 <_free_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4605      	mov	r5, r0
 800d334:	2900      	cmp	r1, #0
 800d336:	d040      	beq.n	800d3ba <_free_r+0x8a>
 800d338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d33c:	1f0c      	subs	r4, r1, #4
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfb8      	it	lt
 800d342:	18e4      	addlt	r4, r4, r3
 800d344:	f7ff ffa4 	bl	800d290 <__malloc_lock>
 800d348:	4a1c      	ldr	r2, [pc, #112]	; (800d3bc <_free_r+0x8c>)
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	b933      	cbnz	r3, 800d35c <_free_r+0x2c>
 800d34e:	6063      	str	r3, [r4, #4]
 800d350:	6014      	str	r4, [r2, #0]
 800d352:	4628      	mov	r0, r5
 800d354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d358:	f7ff bfa0 	b.w	800d29c <__malloc_unlock>
 800d35c:	42a3      	cmp	r3, r4
 800d35e:	d908      	bls.n	800d372 <_free_r+0x42>
 800d360:	6820      	ldr	r0, [r4, #0]
 800d362:	1821      	adds	r1, r4, r0
 800d364:	428b      	cmp	r3, r1
 800d366:	bf01      	itttt	eq
 800d368:	6819      	ldreq	r1, [r3, #0]
 800d36a:	685b      	ldreq	r3, [r3, #4]
 800d36c:	1809      	addeq	r1, r1, r0
 800d36e:	6021      	streq	r1, [r4, #0]
 800d370:	e7ed      	b.n	800d34e <_free_r+0x1e>
 800d372:	461a      	mov	r2, r3
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	b10b      	cbz	r3, 800d37c <_free_r+0x4c>
 800d378:	42a3      	cmp	r3, r4
 800d37a:	d9fa      	bls.n	800d372 <_free_r+0x42>
 800d37c:	6811      	ldr	r1, [r2, #0]
 800d37e:	1850      	adds	r0, r2, r1
 800d380:	42a0      	cmp	r0, r4
 800d382:	d10b      	bne.n	800d39c <_free_r+0x6c>
 800d384:	6820      	ldr	r0, [r4, #0]
 800d386:	4401      	add	r1, r0
 800d388:	1850      	adds	r0, r2, r1
 800d38a:	4283      	cmp	r3, r0
 800d38c:	6011      	str	r1, [r2, #0]
 800d38e:	d1e0      	bne.n	800d352 <_free_r+0x22>
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	4408      	add	r0, r1
 800d396:	6010      	str	r0, [r2, #0]
 800d398:	6053      	str	r3, [r2, #4]
 800d39a:	e7da      	b.n	800d352 <_free_r+0x22>
 800d39c:	d902      	bls.n	800d3a4 <_free_r+0x74>
 800d39e:	230c      	movs	r3, #12
 800d3a0:	602b      	str	r3, [r5, #0]
 800d3a2:	e7d6      	b.n	800d352 <_free_r+0x22>
 800d3a4:	6820      	ldr	r0, [r4, #0]
 800d3a6:	1821      	adds	r1, r4, r0
 800d3a8:	428b      	cmp	r3, r1
 800d3aa:	bf01      	itttt	eq
 800d3ac:	6819      	ldreq	r1, [r3, #0]
 800d3ae:	685b      	ldreq	r3, [r3, #4]
 800d3b0:	1809      	addeq	r1, r1, r0
 800d3b2:	6021      	streq	r1, [r4, #0]
 800d3b4:	6063      	str	r3, [r4, #4]
 800d3b6:	6054      	str	r4, [r2, #4]
 800d3b8:	e7cb      	b.n	800d352 <_free_r+0x22>
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20003764 	.word	0x20003764

0800d3c0 <_init>:
 800d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c2:	bf00      	nop
 800d3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c6:	bc08      	pop	{r3}
 800d3c8:	469e      	mov	lr, r3
 800d3ca:	4770      	bx	lr

0800d3cc <_fini>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	bf00      	nop
 800d3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3d2:	bc08      	pop	{r3}
 800d3d4:	469e      	mov	lr, r3
 800d3d6:	4770      	bx	lr
