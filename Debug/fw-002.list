
fw-002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab4  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800dc38  0800dc38  0001dc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec4  0800dec4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800decc  0800decc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800ded4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036e8  20000210  0800e0e4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f8  0800e0e4  000238f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025605  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006eab  00000000  00000000  00045881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f8  00000000  00000000  0004c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a1f  00000000  00000000  0004e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a2e  00000000  00000000  00050347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000317e3  00000000  00000000  00078d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2233  00000000  00000000  000aa558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008de4  00000000  00000000  0017c78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00185570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000210 	.word	0x20000210
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800dc20 	.word	0x0800dc20

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000214 	.word	0x20000214
 80001c0:	0800dc20 	.word	0x0800dc20

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	; (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_ADC1_Init+0x98>)
 80004e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80004e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_ADC1_Init+0x98>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_ADC1_Init+0x98>)
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_ADC1_Init+0xa0>)
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_ADC1_Init+0x98>)
 8000512:	2201      	movs	r2, #1
 8000514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_ADC1_Init+0x98>)
 8000520:	2201      	movs	r2, #1
 8000522:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_ADC1_Init+0x98>)
 8000526:	f001 fc91 	bl	8001e4c <HAL_ADC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000530:	f000 fd18 	bl	8000f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000534:	2312      	movs	r3, #18
 8000536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800053c:	2307      	movs	r3, #7
 800053e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_ADC1_Init+0x98>)
 8000546:	f001 fd81 	bl	800204c <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000550:	f000 fd08 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000022c 	.word	0x2000022c
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <HAL_ADC_MspInit+0x38>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d10d      	bne.n	8000596 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_ADC_MspInit+0x3c>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_ADC_MspInit+0x3c>)
 8000584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000588:	6453      	str	r3, [r2, #68]	; 0x44
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_ADC_MspInit+0x3c>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40012000 	.word	0x40012000
 80005a4:	40023800 	.word	0x40023800

080005a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_CRC_Init+0x20>)
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <MX_CRC_Init+0x24>)
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_CRC_Init+0x20>)
 80005b4:	f002 f87d 	bl	80026b2 <HAL_CRC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005be:	f000 fcd1 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000274 	.word	0x20000274
 80005cc:	40023000 	.word	0x40023000

080005d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <HAL_CRC_MspInit+0x38>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d10d      	bne.n	80005fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_CRC_MspInit+0x3c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <HAL_CRC_MspInit+0x3c>)
 80005ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_CRC_MspInit+0x3c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40023000 	.word	0x40023000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <MX_DMA_Init+0xd8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <MX_DMA_Init+0xd8>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_DMA_Init+0xdc>)
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <MX_DMA_Init+0xe0>)
 8000652:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_DMA_Init+0xdc>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_DMA_Init+0xdc>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_DMA_Init+0xdc>)
 8000662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000666:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_DMA_Init+0xdc>)
 800066a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_DMA_Init+0xdc>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_DMA_Init+0xdc>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_DMA_Init+0xdc>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_DMA_Init+0xdc>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_DMA_Init+0xdc>)
 800068a:	2204      	movs	r2, #4
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_DMA_Init+0xdc>)
 8000690:	2203      	movs	r2, #3
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_DMA_Init+0xdc>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA_Init+0xdc>)
 800069c:	2200      	movs	r2, #0
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_DMA_Init+0xdc>)
 80006a2:	f002 f823 	bl	80026ec <HAL_DMA_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 80006ac:	f000 fc5a 	bl	8000f64 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2101      	movs	r1, #1
 80006b4:	200f      	movs	r0, #15
 80006b6:	f001 ffc6 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f001 ffdf 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2038      	movs	r0, #56	; 0x38
 80006c6:	f001 ffbe 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ca:	2038      	movs	r0, #56	; 0x38
 80006cc:	f001 ffd7 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	203b      	movs	r0, #59	; 0x3b
 80006d6:	f001 ffb6 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006da:	203b      	movs	r0, #59	; 0x3b
 80006dc:	f001 ffcf 	bl	800267e <HAL_NVIC_EnableIRQ>

}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	2000027c 	.word	0x2000027c
 80006f0:	40026410 	.word	0x40026410

080006f4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b50      	ldr	r3, [pc, #320]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a4f      	ldr	r2, [pc, #316]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <MX_GPIO_Init+0x15c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <MX_GPIO_Init+0x15c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <MX_GPIO_Init+0x15c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_GPIO_Init+0x15c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 8000796:	2200      	movs	r2, #0
 8000798:	f242 0127 	movw	r1, #8231	; 0x2027
 800079c:	482d      	ldr	r0, [pc, #180]	; (8000854 <MX_GPIO_Init+0x160>)
 800079e:	f002 feb4 	bl	800350a <HAL_GPIO_WritePin>
                          |Out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out1_Pin|Out6_Pin|Out5_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f248 4110 	movw	r1, #33808	; 0x8410
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <MX_GPIO_Init+0x164>)
 80007aa:	f002 feae 	bl	800350a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4828      	ldr	r0, [pc, #160]	; (8000854 <MX_GPIO_Init+0x160>)
 80007b4:	f002 fea9 	bl	800350a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80007b8:	f242 0337 	movw	r3, #8247	; 0x2037
 80007bc:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|Out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4820      	ldr	r0, [pc, #128]	; (8000854 <MX_GPIO_Init+0x160>)
 80007d2:	f002 fbe7 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Out1_Pin|Out6_Pin|Out5_Pin;
 80007d6:	f248 4310 	movw	r3, #33808	; 0x8410
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0x164>)
 80007f0:	f002 fbd8 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = In6_Pin|In4_Pin|In3_Pin|In5_Pin;
 80007f4:	f24d 0304 	movw	r3, #53252	; 0xd004
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_GPIO_Init+0x168>)
 800080a:	f002 fbcb 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = In1_Pin|In2_Pin;
 800080e:	23c0      	movs	r3, #192	; 0xc0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0x160>)
 8000822:	f002 fbbf 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_GPIO_Init+0x164>)
 8000844:	f002 fbae 	bl	8002fa4 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400

08000860 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2C2_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C2_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_I2C2_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2C2_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2C2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C2_Init+0x50>)
 800089e:	f002 fe4d 	bl	800353c <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 fb5c 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200002dc 	.word	0x200002dc
 80008b4:	40005800 	.word	0x40005800
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_I2C_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12c      	bne.n	8000938 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000900:	2312      	movs	r3, #18
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800090c:	2304      	movs	r3, #4
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <HAL_I2C_MspInit+0x8c>)
 8000918:	f002 fb44 	bl	8002fa4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_I2C_MspInit+0x88>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_I2C_MspInit+0x88>)
 8000926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_I2C_MspInit+0x88>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005800 	.word	0x40005800
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f001 f9fb 	bl	8001d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f887 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f7ff fecb 	bl	80006f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800095e:	f7ff fe57 	bl	8000610 <MX_DMA_Init>
  MX_SPI1_Init();
 8000962:	f000 fc43 	bl	80011ec <MX_SPI1_Init>
  MX_SPI2_Init();
 8000966:	f000 fc77 	bl	8001258 <MX_SPI2_Init>
  MX_FATFS_Init();
 800096a:	f00a f92f 	bl	800abcc <MX_FATFS_Init>
  MX_TIM4_Init();
 800096e:	f000 ffab 	bl	80018c8 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000972:	f7ff ff75 	bl	8000860 <MX_I2C2_Init>
  MX_RTC_Init();
 8000976:	f000 fb31 	bl	8000fdc <MX_RTC_Init>
  MX_SPI3_Init();
 800097a:	f000 fca3 	bl	80012c4 <MX_SPI3_Init>
  MX_UART4_Init();
 800097e:	f001 f8e3 	bl	8001b48 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000982:	f00c fb2d 	bl	800cfe0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000986:	f000 ff2f 	bl	80017e8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800098a:	f001 f907 	bl	8001b9c <MX_USART2_UART_Init>
  MX_RNG_Init();
 800098e:	f000 faf1 	bl	8000f74 <MX_RNG_Init>
  MX_SDIO_SD_Init();
 8000992:	f000 fb91 	bl	80010b8 <MX_SDIO_SD_Init>
  MX_CRC_Init();
 8000996:	f7ff fe07 	bl	80005a8 <MX_CRC_Init>
  MX_ADC1_Init();
 800099a:	f7ff fd93 	bl	80004c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	MM_Init();
 800099e:	f00c f9b1 	bl	800cd04 <MM_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	4928      	ldr	r1, [pc, #160]	; (8000a48 <main+0xfc>)
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <main+0x100>)
 80009a8:	f007 fb99 	bl	80080de <HAL_UART_Receive_IT>

#ifdef LORA
	HAL_SPI_DeInit(&hspi3);
 80009ac:	4828      	ldr	r0, [pc, #160]	; (8000a50 <main+0x104>)
 80009ae:	f006 fa99 	bl	8006ee4 <HAL_SPI_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009c2:	2338      	movs	r3, #56	; 0x38
 80009c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	481f      	ldr	r0, [pc, #124]	; (8000a54 <main+0x108>)
 80009d6:	f002 fae5 	bl	8002fa4 <HAL_GPIO_Init>
#define LORA_SET HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
#define LORA_WORK HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

		LORA_SET
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	481d      	ldr	r0, [pc, #116]	; (8000a54 <main+0x108>)
 80009e0:	f002 fd93 	bl	800350a <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f001 fa0c 	bl	8001e04 <HAL_Delay>
		uint8_t prog_string[9] = {0xc0, 0x00, 0x06, 0x03, 0x03, 0x62, 0x00, 0x03, 0x03};
 80009ec:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <main+0x10c>)
 80009ee:	463b      	mov	r3, r7
 80009f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f2:	c303      	stmia	r3!, {r0, r1}
 80009f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, prog_string, 9, 50);
 80009f6:	4639      	mov	r1, r7
 80009f8:	2332      	movs	r3, #50	; 0x32
 80009fa:	2209      	movs	r2, #9
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <main+0x100>)
 80009fe:	f007 fadc 	bl	8007fba <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a06:	f001 f9fd 	bl	8001e04 <HAL_Delay>
		LORA_WORK
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <main+0x108>)
 8000a10:	f002 fd7b 	bl	800350a <HAL_GPIO_WritePin>



	  LORA_WORK
 8000a14:	2200      	movs	r2, #0
 8000a16:	2108      	movs	r1, #8
 8000a18:	480e      	ldr	r0, [pc, #56]	; (8000a54 <main+0x108>)
 8000a1a:	f002 fd76 	bl	800350a <HAL_GPIO_WritePin>

#endif
  	init_OK = 1;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <main+0x110>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  Debug_LED1 = 	RED;
	  Debug_LED1 = BLACK;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <main+0x114>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	  Debug_LED2 = BLACK;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <main+0x118>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f001 f9e6 	bl	8001e04 <HAL_Delay>

//	  Debug_LED1 = BLACK;

	  Debug_LED1 = GREEN;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <main+0x114>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a42:	f001 f9df 	bl	8001e04 <HAL_Delay>
	  Debug_LED1 = BLACK;
 8000a46:	e7ed      	b.n	8000a24 <main+0xd8>
 8000a48:	20000330 	.word	0x20000330
 8000a4c:	200006cc 	.word	0x200006cc
 8000a50:	200004dc 	.word	0x200004dc
 8000a54:	40020400 	.word	0x40020400
 8000a58:	0800dc38 	.word	0x0800dc38
 8000a5c:	20000777 	.word	0x20000777
 8000a60:	20000775 	.word	0x20000775
 8000a64:	20000776 	.word	0x20000776

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	; 0x58
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00d f846 	bl	800db08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ab0:	2319      	movs	r3, #25
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 ffd3 	bl	8004a70 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ad0:	f000 fa48 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2103      	movs	r1, #3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fa0a 	bl	8004f0c <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afe:	f000 fa31 	bl	8000f64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b02:	2304      	movs	r3, #4
 8000b04:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fc64 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b1a:	f000 fa23 	bl	8000f64 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000b24:	2000      	movs	r0, #0
 8000b26:	f004 fadd 	bl	80050e4 <HAL_RCC_MCOConfig>
}
 8000b2a:	bf00      	nop
 8000b2c:	3758      	adds	r7, #88	; 0x58
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	static uint8_t reseive_msg[16] = {0};
	static uint8_t current_byte = 0;
	reseive_msg[current_byte] = rx_byte;
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <HAL_UART_RxCpltCallback+0x140>)
 8000b44:	7819      	ldrb	r1, [r3, #0]
 8000b46:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000b48:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4949      	ldr	r1, [pc, #292]	; (8000c74 <HAL_UART_RxCpltCallback+0x140>)
 8000b4e:	484b      	ldr	r0, [pc, #300]	; (8000c7c <HAL_UART_RxCpltCallback+0x148>)
 8000b50:	f007 fac5 	bl	80080de <HAL_UART_Receive_IT>

	Debug_LED2 = RED;
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <HAL_UART_RxCpltCallback+0x14c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]

	if (current_byte < 7){
 8000b5a:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d80f      	bhi.n	8000b82 <HAL_UART_RxCpltCallback+0x4e>
		current_byte = (reseive_msg[0] == ModbusReg[0]) ? current_byte + 1 : 0;
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <HAL_UART_RxCpltCallback+0x150>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d104      	bne.n	8000b7a <HAL_UART_RxCpltCallback+0x46>
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	e000      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x48>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4a3c      	ldr	r2, [pc, #240]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b7e:	7013      	strb	r3, [r2, #0]
			}
			else {MRTU_Error(3, reseive_msg[1]);}
		}
		else {MRTU_Error(1, reseive_msg[1]);}
	}
}
 8000b80:	e071      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
		current_byte = 0;
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
		uint16_t tmp = MRTU_CRC(reseive_msg, 6);
 8000b88:	2106      	movs	r1, #6
 8000b8a:	483b      	ldr	r0, [pc, #236]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000b8c:	f000 f8f8 	bl	8000d80 <MRTU_CRC>
 8000b90:	4603      	mov	r3, r0
 8000b92:	81fb      	strh	r3, [r7, #14]
		uint8_t CRC1 = (uint8_t)tmp;
 8000b94:	89fb      	ldrh	r3, [r7, #14]
 8000b96:	737b      	strb	r3, [r7, #13]
		uint8_t CRC2 = (uint8_t)(tmp >> 8);
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	733b      	strb	r3, [r7, #12]
		if (reseive_msg[1] == 3){
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d127      	bne.n	8000bf8 <HAL_UART_RxCpltCallback+0xc4>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000ba8:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11c      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d818      	bhi.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
					&& (reseive_msg[4] == 0) && (reseive_msg[5] == 1) \
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d114      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d110      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bca:	799b      	ldrb	r3, [r3, #6]
 8000bcc:	7b7a      	ldrb	r2, [r7, #13]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d10b      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bd4:	79db      	ldrb	r3, [r3, #7]
 8000bd6:	7b3a      	ldrb	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d106      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
				MRTU_Read(reseive_msg[3]);
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bde:	78db      	ldrb	r3, [r3, #3]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f900 	bl	8000de8 <MRTU_Read>
 8000be8:	e03d      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bec:	785b      	ldrb	r3, [r3, #1]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f981 	bl	8000ef8 <MRTU_Error>
}
 8000bf6:	e036      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
		else if (reseive_msg[1] == 6){
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d12b      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x124>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d120      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c0a:	78db      	ldrb	r3, [r3, #3]
 8000c0c:	2b1f      	cmp	r3, #31
 8000c0e:	d81c      	bhi.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c12:	799b      	ldrb	r3, [r3, #6]
 8000c14:	7b7a      	ldrb	r2, [r7, #13]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d117      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c1c:	79db      	ldrb	r3, [r3, #7]
 8000c1e:	7b3a      	ldrb	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d112      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
				MRTU_Write(reseive_msg[3], (((uint16_t)reseive_msg[5]) | (uint16_t)(reseive_msg[4] << 8)));
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f000 f912 	bl	8000e68 <MRTU_Write>
				Update_reg();
 8000c44:	f000 f844 	bl	8000cd0 <Update_reg>
 8000c48:	e00d      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f951 	bl	8000ef8 <MRTU_Error>
}
 8000c56:	e006      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
		else {MRTU_Error(1, reseive_msg[1]);}
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 f94a 	bl	8000ef8 <MRTU_Error>
}
 8000c64:	e7ff      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000331 	.word	0x20000331
 8000c74:	20000330 	.word	0x20000330
 8000c78:	20000334 	.word	0x20000334
 8000c7c:	200006cc 	.word	0x200006cc
 8000c80:	20000776 	.word	0x20000776
 8000c84:	20000000 	.word	0x20000000

08000c88 <Main_IncTic>:



void Main_IncTic(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	static uint8_t timer_5_sec;
	if (timer_5_sec) {timer_5_sec--;}
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <Main_IncTic+0x3c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <Main_IncTic+0x1a>
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <Main_IncTic+0x3c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <Main_IncTic+0x3c>)
 8000c9e:	701a      	strb	r2, [r3, #0]
		Update_reg();
		timer_5_sec = 5000;
		ModbusReg[20] = HAL_ADC_GetValue(&hadc1);
		HAL_ADC_Start(&hadc1);
	}
}
 8000ca0:	e00e      	b.n	8000cc0 <Main_IncTic+0x38>
		Update_reg();
 8000ca2:	f000 f815 	bl	8000cd0 <Update_reg>
		timer_5_sec = 5000;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <Main_IncTic+0x3c>)
 8000ca8:	2288      	movs	r2, #136	; 0x88
 8000caa:	701a      	strb	r2, [r3, #0]
		ModbusReg[20] = HAL_ADC_GetValue(&hadc1);
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <Main_IncTic+0x40>)
 8000cae:	f001 f9c1 	bl	8002034 <HAL_ADC_GetValue>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <Main_IncTic+0x44>)
 8000cb8:	851a      	strh	r2, [r3, #40]	; 0x28
		HAL_ADC_Start(&hadc1);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <Main_IncTic+0x40>)
 8000cbc:	f001 f90a 	bl	8001ed4 <HAL_ADC_Start>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000344 	.word	0x20000344
 8000cc8:	2000022c 	.word	0x2000022c
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <Update_reg>:

void Update_reg(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	if (ModbusReg[14]) {
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <Update_reg+0x60>)
 8000cd6:	8b9b      	ldrh	r3, [r3, #28]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00e      	beq.n	8000cfa <Update_reg+0x2a>
		ModbusReg[14] = 0;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <Update_reg+0x60>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	839a      	strh	r2, [r3, #28]
		ModbusReg[13] = 0;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <Update_reg+0x60>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	835a      	strh	r2, [r3, #26]
		ModbusReg[12] = 0;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <Update_reg+0x60>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	831a      	strh	r2, [r3, #24]
		ModbusReg[11] = 0;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <Update_reg+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	82da      	strh	r2, [r3, #22]
		ModbusReg[10] = 0;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <Update_reg+0x60>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	829a      	strh	r2, [r3, #20]
	}
	Set_Out(P_OUT_2, ModbusReg[10]);
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <Update_reg+0x60>)
 8000cfc:	8a9b      	ldrh	r3, [r3, #20]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	f00c f829 	bl	800cd58 <Set_Out>
	Set_Out(P_OUT_3, ModbusReg[11]);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <Update_reg+0x60>)
 8000d08:	8adb      	ldrh	r3, [r3, #22]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f00c f823 	bl	800cd58 <Set_Out>
	Set_Out(P_OUT_4, ModbusReg[12]);
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <Update_reg+0x60>)
 8000d14:	8b1b      	ldrh	r3, [r3, #24]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f00c f81d 	bl	800cd58 <Set_Out>
	Set_Out(P_OUT_5, ModbusReg[13]);
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <Update_reg+0x60>)
 8000d20:	8b5b      	ldrh	r3, [r3, #26]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2004      	movs	r0, #4
 8000d26:	f00c f817 	bl	800cd58 <Set_Out>


}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000

08000d34 <Buttons_Handler>:



void Buttons_Handler (uint8_t Butt, Button_events_TypeDef Event){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]


	if ((Butt == 0) && (Event == SHORT_CLC)) {
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d111      	bne.n	8000d6e <Buttons_Handler+0x3a>
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d10e      	bne.n	8000d6e <Buttons_Handler+0x3a>

		uint8_t prog_string[6] = {0x03, 0x03, 0x62, 0x00, 0x03, 0x03};
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <Buttons_Handler+0x44>)
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d5a:	6018      	str	r0, [r3, #0]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart2, prog_string, 6, 50);
 8000d60:	f107 0108 	add.w	r1, r7, #8
 8000d64:	2332      	movs	r3, #50	; 0x32
 8000d66:	2206      	movs	r2, #6
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <Buttons_Handler+0x48>)
 8000d6a:	f007 f926 	bl	8007fba <HAL_UART_Transmit>
	if ((Butt == 0) && (Event == LONG_CLC)) {


	}

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	0800dc44 	.word	0x0800dc44
 8000d7c:	200006cc 	.word	0x200006cc

08000d80 <MRTU_CRC>:
uint16_t MRTU_CRC(uint8_t *data, uint8_t len){
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
    uint8_t uchCRCHi = 0xFF;
 8000d8c:	23ff      	movs	r3, #255	; 0xff
 8000d8e:	73fb      	strb	r3, [r7, #15]
    uint8_t uchCRCLo = 0xFF;
 8000d90:	23ff      	movs	r3, #255	; 0xff
 8000d92:	73bb      	strb	r3, [r7, #14]
    uint16_t uIndex ;
    while(len--){
 8000d94:	e011      	b.n	8000dba <MRTU_CRC+0x3a>
        uIndex = uchCRCHi ^ *data++ ;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4053      	eors	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	81bb      	strh	r3, [r7, #12]
        uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
 8000da6:	89bb      	ldrh	r3, [r7, #12]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <MRTU_CRC+0x60>)
 8000daa:	5cd2      	ldrb	r2, [r2, r3]
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	4053      	eors	r3, r2
 8000db0:	73fb      	strb	r3, [r7, #15]
        uchCRCLo = auchCRCLo[uIndex] ;
 8000db2:	89bb      	ldrh	r3, [r7, #12]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <MRTU_CRC+0x64>)
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	73bb      	strb	r3, [r7, #14]
    while(len--){
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	70fa      	strb	r2, [r7, #3]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1e8      	bne.n	8000d96 <MRTU_CRC+0x16>
    }
    return (((uint16_t)(uchCRCLo) << 8) | (uint16_t)(uchCRCHi));
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	b29b      	uxth	r3, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	0800dc90 	.word	0x0800dc90
 8000de4:	0800dd90 	.word	0x0800dd90

08000de8 <MRTU_Read>:
void MRTU_Read(uint16_t reg){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MRTU_Read+0x74>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MRTU_Read+0x78>)
 8000dfa:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = 0x03;								//код функции
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MRTU_Read+0x78>)
 8000dfe:	2203      	movs	r2, #3
 8000e00:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = 2;								//длина пакета
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MRTU_Read+0x78>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <MRTU_Read+0x74>)
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MRTU_Read+0x78>)
 8000e18:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)ModbusReg[reg];			//младший
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <MRTU_Read+0x74>)
 8000e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MRTU_Read+0x78>)
 8000e26:	711a      	strb	r2, [r3, #4]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 5);
 8000e28:	2105      	movs	r1, #5
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MRTU_Read+0x78>)
 8000e2c:	f7ff ffa8 	bl	8000d80 <MRTU_CRC>
 8000e30:	4603      	mov	r3, r0
 8000e32:	81fb      	strh	r3, [r7, #14]
	transmit_msg[5] = (uint8_t)tmp;						//CRC
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MRTU_Read+0x78>)
 8000e3a:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(tmp >> 8);				//
 8000e3c:	89fb      	ldrh	r3, [r7, #14]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MRTU_Read+0x78>)
 8000e46:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000e48:	2332      	movs	r3, #50	; 0x32
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	4904      	ldr	r1, [pc, #16]	; (8000e60 <MRTU_Read+0x78>)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MRTU_Read+0x7c>)
 8000e50:	f007 f8b3 	bl	8007fba <HAL_UART_Transmit>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000348 	.word	0x20000348
 8000e64:	200006cc 	.word	0x200006cc

08000e68 <MRTU_Write>:
void MRTU_Write(uint16_t reg, uint16_t value){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80bb      	strh	r3, [r7, #4]
	static uint8_t transmit_msg[16] = {0};
	ModbusReg[reg] = value;
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	491c      	ldr	r1, [pc, #112]	; (8000eec <MRTU_Write+0x84>)
 8000e7c:	88ba      	ldrh	r2, [r7, #4]
 8000e7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MRTU_Write+0x84>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MRTU_Write+0x88>)
 8000e8a:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = 0x06;								//код функции
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MRTU_Write+0x88>)
 8000e8e:	2206      	movs	r2, #6
 8000e90:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = 2;								//длина пакета
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MRTU_Write+0x88>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <MRTU_Write+0x84>)
 8000e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MRTU_Write+0x88>)
 8000ea8:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)ModbusReg[reg];			//младший
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <MRTU_Write+0x84>)
 8000eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MRTU_Write+0x88>)
 8000eb6:	711a      	strb	r2, [r3, #4]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 5);
 8000eb8:	2105      	movs	r1, #5
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MRTU_Write+0x88>)
 8000ebc:	f7ff ff60 	bl	8000d80 <MRTU_CRC>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	81fb      	strh	r3, [r7, #14]
	transmit_msg[5] = (uint8_t)tmp;						//CRC
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MRTU_Write+0x88>)
 8000eca:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(tmp >> 8);				//
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MRTU_Write+0x88>)
 8000ed6:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000ed8:	2332      	movs	r3, #50	; 0x32
 8000eda:	2208      	movs	r2, #8
 8000edc:	4904      	ldr	r1, [pc, #16]	; (8000ef0 <MRTU_Write+0x88>)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MRTU_Write+0x8c>)
 8000ee0:	f007 f86b 	bl	8007fba <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000358 	.word	0x20000358
 8000ef4:	200006cc 	.word	0x200006cc

08000ef8 <MRTU_Error>:
void MRTU_Error(uint8_t code, uint8_t func){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MRTU_Error+0x60>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MRTU_Error+0x64>)
 8000f10:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = func | 0x80;						//код функции
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MRTU_Error+0x64>)
 8000f1c:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = code;								//длина пакета
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <MRTU_Error+0x64>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	7093      	strb	r3, [r2, #2]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 3);
 8000f24:	2103      	movs	r1, #3
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MRTU_Error+0x64>)
 8000f28:	f7ff ff2a 	bl	8000d80 <MRTU_CRC>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	81fb      	strh	r3, [r7, #14]
	transmit_msg[3] = (uint8_t)tmp;						//CRC
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MRTU_Error+0x64>)
 8000f36:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)(tmp >> 8);				//
 8000f38:	89fb      	ldrh	r3, [r7, #14]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MRTU_Error+0x64>)
 8000f42:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, transmit_msg, 5, 50);
 8000f44:	2332      	movs	r3, #50	; 0x32
 8000f46:	2205      	movs	r2, #5
 8000f48:	4904      	ldr	r1, [pc, #16]	; (8000f5c <MRTU_Error+0x64>)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MRTU_Error+0x68>)
 8000f4c:	f007 f835 	bl	8007fba <HAL_UART_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000368 	.word	0x20000368
 8000f60:	200006cc 	.word	0x200006cc

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Debug_LED2 = RED;
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <Error_Handler+0xc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
//  __disable_irq();
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <Error_Handler+0xa>
 8000f70:	20000776 	.word	0x20000776

08000f74 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_RNG_Init+0x20>)
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <MX_RNG_Init+0x24>)
 8000f7c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_RNG_Init+0x20>)
 8000f80:	f004 fb22 	bl	80055c8 <HAL_RNG_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000f8a:	f7ff ffeb 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000378 	.word	0x20000378
 8000f98:	50060800 	.word	0x50060800

08000f9c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_RNG_MspInit+0x38>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10d      	bne.n	8000fca <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_RNG_MspInit+0x3c>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_RNG_MspInit+0x3c>)
 8000fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbc:	6353      	str	r3, [r2, #52]	; 0x34
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_RNG_MspInit+0x3c>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	50060800 	.word	0x50060800
 8000fd8:	40023800 	.word	0x40023800

08000fdc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_RTC_Init+0xa8>)
 8000ff2:	4a25      	ldr	r2, [pc, #148]	; (8001088 <MX_RTC_Init+0xac>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_RTC_Init+0xa8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_RTC_Init+0xa8>)
 8000ffe:	227f      	movs	r2, #127	; 0x7f
 8001000:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_RTC_Init+0xa8>)
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_RTC_Init+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_RTC_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_RTC_Init+0xa8>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800101a:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_RTC_Init+0xa8>)
 800101c:	f004 fafe 	bl	800561c <HAL_RTC_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8001026:	f7ff ff9d 	bl	8000f64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <MX_RTC_Init+0xa8>)
 8001046:	f004 fb73 	bl	8005730 <HAL_RTC_SetTime>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8001050:	f7ff ff88 	bl	8000f64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001054:	2301      	movs	r3, #1
 8001056:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001058:	2301      	movs	r3, #1
 800105a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_RTC_Init+0xa8>)
 800106c:	f004 fc16 	bl	800589c <HAL_RTC_SetDate>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8001076:	f7ff ff75 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000388 	.word	0x20000388
 8001088:	40002800 	.word	0x40002800

0800108c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_RTC_MspInit+0x24>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d102      	bne.n	80010a4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_RTC_MspInit+0x28>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40002800 	.word	0x40002800
 80010b4:	42470e3c 	.word	0x42470e3c

080010b8 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010be:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <MX_SDIO_SD_Init+0x3c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010da:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 48;
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010e4:	2230      	movs	r2, #48	; 0x30
 80010e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	200003a8 	.word	0x200003a8
 80010f4:	40012c00 	.word	0x40012c00

080010f8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a31      	ldr	r2, [pc, #196]	; (80011dc <HAL_SD_MspInit+0xe4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d15b      	bne.n	80011d2 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 8001124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_SD_MspInit+0xe8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800116e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001178:	2301      	movs	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001180:	230c      	movs	r3, #12
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <HAL_SD_MspInit+0xec>)
 800118c:	f001 ff0a 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011a2:	230c      	movs	r3, #12
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_SD_MspInit+0xec>)
 80011ae:	f001 fef9 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b2:	2304      	movs	r3, #4
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011c2:	230c      	movs	r3, #12
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <HAL_SD_MspInit+0xf0>)
 80011ce:	f001 fee9 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00

080011ec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_SPI1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_SPI1_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_SPI1_Init+0x64>)
 8001220:	2220      	movs	r2, #32
 8001222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_SPI1_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_SPI1_Init+0x64>)
 800123e:	f005 fdc8 	bl	8006dd2 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001248:	f7ff fe8c 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000042c 	.word	0x2000042c
 8001254:	40013000 	.word	0x40013000

08001258 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_SPI2_Init+0x64>)
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <MX_SPI2_Init+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_SPI2_Init+0x64>)
 8001264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_SPI2_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_SPI2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_SPI2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_SPI2_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_SPI2_Init+0x64>)
 8001284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001288:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_SPI2_Init+0x64>)
 800128c:	2220      	movs	r2, #32
 800128e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_SPI2_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_SPI2_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <MX_SPI2_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_SPI2_Init+0x64>)
 80012a4:	220a      	movs	r2, #10
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_SPI2_Init+0x64>)
 80012aa:	f005 fd92 	bl	8006dd2 <HAL_SPI_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012b4:	f7ff fe56 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000484 	.word	0x20000484
 80012c0:	40003800 	.word	0x40003800

080012c4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_SPI3_Init+0x64>)
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <MX_SPI3_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_SPI3_Init+0x64>)
 80012d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI3_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI3_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_SPI3_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI3_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_SPI3_Init+0x64>)
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI3_Init+0x64>)
 80012f8:	2218      	movs	r2, #24
 80012fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI3_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI3_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI3_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI3_Init+0x64>)
 8001310:	220a      	movs	r2, #10
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI3_Init+0x64>)
 8001316:	f005 fd5c 	bl	8006dd2 <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001320:	f7ff fe20 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200004dc 	.word	0x200004dc
 800132c:	40003c00 	.word	0x40003c00

08001330 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a89      	ldr	r2, [pc, #548]	; (8001574 <HAL_SPI_MspInit+0x244>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d15b      	bne.n	800140a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a87      	ldr	r2, [pc, #540]	; (8001578 <HAL_SPI_MspInit+0x248>)
 800135c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b85      	ldr	r3, [pc, #532]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a80      	ldr	r2, [pc, #512]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b7e      	ldr	r3, [pc, #504]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800138a:	23a0      	movs	r3, #160	; 0xa0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139a:	2305      	movs	r3, #5
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4875      	ldr	r0, [pc, #468]	; (800157c <HAL_SPI_MspInit+0x24c>)
 80013a6:	f001 fdfd 	bl	8002fa4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013aa:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013ac:	4a75      	ldr	r2, [pc, #468]	; (8001584 <HAL_SPI_MspInit+0x254>)
 80013ae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013b0:	4b73      	ldr	r3, [pc, #460]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013b2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013be:	4b70      	ldr	r3, [pc, #448]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013cc:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d2:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013d8:	4b69      	ldr	r3, [pc, #420]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013de:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013ec:	4864      	ldr	r0, [pc, #400]	; (8001580 <HAL_SPI_MspInit+0x250>)
 80013ee:	f001 f97d 	bl	80026ec <HAL_DMA_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013f8:	f7ff fdb4 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a60      	ldr	r2, [pc, #384]	; (8001580 <HAL_SPI_MspInit+0x250>)
 8001400:	649a      	str	r2, [r3, #72]	; 0x48
 8001402:	4a5f      	ldr	r2, [pc, #380]	; (8001580 <HAL_SPI_MspInit+0x250>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001408:	e0af      	b.n	800156a <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a5e      	ldr	r2, [pc, #376]	; (8001588 <HAL_SPI_MspInit+0x258>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d179      	bne.n	8001508 <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_SPI_MspInit+0x248>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a56      	ldr	r2, [pc, #344]	; (8001578 <HAL_SPI_MspInit+0x248>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
 8001424:	4b54      	ldr	r3, [pc, #336]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_SPI_MspInit+0x248>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a48      	ldr	r2, [pc, #288]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_SPI_MspInit+0x248>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001468:	2308      	movs	r3, #8
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001478:	2305      	movs	r3, #5
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	4842      	ldr	r0, [pc, #264]	; (800158c <HAL_SPI_MspInit+0x25c>)
 8001484:	f001 fd8e 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149a:	2305      	movs	r3, #5
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	483a      	ldr	r0, [pc, #232]	; (8001590 <HAL_SPI_MspInit+0x260>)
 80014a6:	f001 fd7d 	bl	8002fa4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014ac:	4a3a      	ldr	r2, [pc, #232]	; (8001598 <HAL_SPI_MspInit+0x268>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014b0:	4b38      	ldr	r3, [pc, #224]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014ea:	482a      	ldr	r0, [pc, #168]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014ec:	f001 f8fe 	bl	80026ec <HAL_DMA_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 80014f6:	f7ff fd35 	bl	8000f64 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_SPI_MspInit+0x264>)
 80014fe:	649a      	str	r2, [r3, #72]	; 0x48
 8001500:	4a24      	ldr	r2, [pc, #144]	; (8001594 <HAL_SPI_MspInit+0x264>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001506:	e030      	b.n	800156a <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_SPI_MspInit+0x26c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12b      	bne.n	800156a <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_SPI_MspInit+0x248>)
 800151c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_SPI_MspInit+0x248>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800154a:	2338      	movs	r3, #56	; 0x38
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800155a:	2306      	movs	r3, #6
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <HAL_SPI_MspInit+0x260>)
 8001566:	f001 fd1d 	bl	8002fa4 <HAL_GPIO_Init>
}
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40013000 	.word	0x40013000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	20000534 	.word	0x20000534
 8001584:	40026458 	.word	0x40026458
 8001588:	40003800 	.word	0x40003800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020400 	.word	0x40020400
 8001594:	20000594 	.word	0x20000594
 8001598:	40026070 	.word	0x40026070
 800159c:	40003c00 	.word	0x40003c00

080015a0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1f      	ldr	r2, [pc, #124]	; (800162c <HAL_SPI_MspDeInit+0x8c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10f      	bne.n	80015d2 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_SPI_MspDeInit+0x90>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_SPI_MspDeInit+0x90>)
 80015b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80015be:	21a0      	movs	r1, #160	; 0xa0
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <HAL_SPI_MspDeInit+0x94>)
 80015c2:	f001 fe8d 	bl	80032e0 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 f93c 	bl	8002848 <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 80015d0:	e028      	b.n	8001624 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_SPI_MspDeInit+0x98>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d114      	bne.n	8001606 <HAL_SPI_MspDeInit+0x66>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_SPI_MspDeInit+0x90>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_SPI_MspDeInit+0x90>)
 80015e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 80015e8:	2108      	movs	r1, #8
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <HAL_SPI_MspDeInit+0x9c>)
 80015ec:	f001 fe78 	bl	80032e0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80015f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f4:	4812      	ldr	r0, [pc, #72]	; (8001640 <HAL_SPI_MspDeInit+0xa0>)
 80015f6:	f001 fe73 	bl	80032e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 f922 	bl	8002848 <HAL_DMA_DeInit>
}
 8001604:	e00e      	b.n	8001624 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI3)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_SPI_MspDeInit+0xa4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d109      	bne.n	8001624 <HAL_SPI_MspDeInit+0x84>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_SPI_MspDeInit+0x90>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_SPI_MspDeInit+0x90>)
 8001616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 800161c:	2138      	movs	r1, #56	; 0x38
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <HAL_SPI_MspDeInit+0xa0>)
 8001620:	f001 fe5e 	bl	80032e0 <HAL_GPIO_DeInit>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40013000 	.word	0x40013000
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40003800 	.word	0x40003800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020400 	.word	0x40020400
 8001644:	40003c00 	.word	0x40003c00

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x48>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x48>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x48>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_MspInit+0x48>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_MspInit+0x48>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_MspInit+0x48>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f00b fb1f 	bl	800cd1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <DMA1_Stream4_IRQHandler+0x10>)
 80016ea:	f001 f9f5 	bl	8002ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000594 	.word	0x20000594

080016f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM3_IRQHandler+0x10>)
 80016fe:	f005 ff21 	bl	8007544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200005f8 	.word	0x200005f8

0800170c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <TIM4_IRQHandler+0x10>)
 8001712:	f005 ff17 	bl	8007544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000640 	.word	0x20000640

08001720 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USART2_IRQHandler+0x10>)
 8001726:	f006 fd0b 	bl	8008140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200006cc 	.word	0x200006cc

08001734 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA2_Stream0_IRQHandler+0x10>)
 800173a:	f001 f9cd 	bl	8002ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000027c 	.word	0x2000027c

08001748 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <DMA2_Stream3_IRQHandler+0x10>)
 800174e:	f001 f9c3 	bl	8002ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000534 	.word	0x20000534

0800175c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <OTG_FS_IRQHandler+0x10>)
 8001762:	f002 f96e 	bl	8003a42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200033b0 	.word	0x200033b0

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f00c f9ca 	bl	800db38 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	200005f4 	.word	0x200005f4
 80017d8:	200038f8 	.word	0x200038f8

080017dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800180c:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <MX_TIM3_Init+0xdc>)
 800180e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001812:	2230      	movs	r2, #48	; 0x30
 8001814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800181e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001830:	4823      	ldr	r0, [pc, #140]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001832:	f005 fd6f 	bl	8007314 <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800183c:	f7ff fb92 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4619      	mov	r1, r3
 800184e:	481c      	ldr	r0, [pc, #112]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001850:	f006 fada 	bl	8007e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800185a:	f7ff fb83 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185e:	2360      	movs	r3, #96	; 0x60
 8001860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_TIM3_Init+0xd8>)
 8001876:	f005 ff6d 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001880:	f7ff fb70 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2208      	movs	r2, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM3_Init+0xd8>)
 800188c:	f005 ff62 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001896:	f7ff fb65 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	220c      	movs	r2, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	4807      	ldr	r0, [pc, #28]	; (80018c0 <MX_TIM3_Init+0xd8>)
 80018a2:	f005 ff57 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80018ac:	f7ff fb5a 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <MX_TIM3_Init+0xd8>)
 80018b2:	f000 f8c9 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200005f8 	.word	0x200005f8
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <MX_TIM4_Init+0xec>)
 80018ec:	4a32      	ldr	r2, [pc, #200]	; (80019b8 <MX_TIM4_Init+0xf0>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <MX_TIM4_Init+0xec>)
 80018f2:	2230      	movs	r2, #48	; 0x30
 80018f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <MX_TIM4_Init+0xec>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <MX_TIM4_Init+0xec>)
 80018fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM4_Init+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <MX_TIM4_Init+0xec>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001910:	4828      	ldr	r0, [pc, #160]	; (80019b4 <MX_TIM4_Init+0xec>)
 8001912:	f005 fcff 	bl	8007314 <HAL_TIM_PWM_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800191c:	f7ff fb22 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4619      	mov	r1, r3
 800192e:	4821      	ldr	r0, [pc, #132]	; (80019b4 <MX_TIM4_Init+0xec>)
 8001930:	f006 fa6a 	bl	8007e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800193a:	f7ff fb13 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193e:	2360      	movs	r3, #96	; 0x60
 8001940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	4817      	ldr	r0, [pc, #92]	; (80019b4 <MX_TIM4_Init+0xec>)
 8001956:	f005 fefd 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001960:	f7ff fb00 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2204      	movs	r2, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <MX_TIM4_Init+0xec>)
 800196c:	f005 fef2 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001976:	f7ff faf5 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2208      	movs	r2, #8
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <MX_TIM4_Init+0xec>)
 8001982:	f005 fee7 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800198c:	f7ff faea 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	220c      	movs	r2, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM4_Init+0xec>)
 8001998:	f005 fedc 	bl	8007754 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80019a2:	f7ff fadf 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019a6:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM4_Init+0xec>)
 80019a8:	f000 f84e 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000640 	.word	0x20000640
 80019b8:	40000800 	.word	0x40000800

080019bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_TIM_PWM_MspInit+0x80>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d116      	bne.n	80019fc <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_TIM_PWM_MspInit+0x84>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_TIM_PWM_MspInit+0x84>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_TIM_PWM_MspInit+0x84>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	201d      	movs	r0, #29
 80019f0:	f000 fe29 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019f4:	201d      	movs	r0, #29
 80019f6:	f000 fe42 	bl	800267e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019fa:	e01a      	b.n	8001a32 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM4)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_TIM_PWM_MspInit+0x88>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d115      	bne.n	8001a32 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_TIM_PWM_MspInit+0x84>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_TIM_PWM_MspInit+0x84>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_TIM_PWM_MspInit+0x84>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	201e      	movs	r0, #30
 8001a28:	f000 fe0d 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a2c:	201e      	movs	r0, #30
 8001a2e:	f000 fe26 	bl	800267e <HAL_NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40000800 	.word	0x40000800

08001a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_TIM_MspPostInit+0xec>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d13c      	bne.n	8001ae4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Pout7_Pin;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pout7_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	481f      	ldr	r0, [pc, #124]	; (8001b3c <HAL_TIM_MspPostInit+0xf4>)
 8001abe:	f001 fa71 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pout5_Pin|Pout6_Pin;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4818      	ldr	r0, [pc, #96]	; (8001b40 <HAL_TIM_MspPostInit+0xf8>)
 8001ade:	f001 fa61 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ae2:	e023      	b.n	8001b2c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_TIM_MspPostInit+0xfc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d11e      	bne.n	8001b2c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_TIM_MspPostInit+0xf0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Pout1_Pin|Pout2_Pin|Pout3_Pin|Pout4_Pin;
 8001b0a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <HAL_TIM_MspPostInit+0xf8>)
 8001b28:	f001 fa3c 	bl	8002fa4 <HAL_GPIO_Init>
}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40000800 	.word	0x40000800

08001b48 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_UART4_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_UART4_Init+0x4c>)
 8001b80:	f006 f9ce 	bl	8007f20 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f7ff f9eb 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000688 	.word	0x20000688
 8001b98:	40004c00 	.word	0x40004c00

08001b9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <MX_USART2_UART_Init+0x50>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	f006 f9a4 	bl	8007f20 <HAL_UART_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bde:	f7ff f9c1 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200006cc 	.word	0x200006cc
 8001bec:	40004400 	.word	0x40004400

08001bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_UART_MspInit+0xf8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12c      	bne.n	8001c6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a34      	ldr	r2, [pc, #208]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Tx_Pin|Rx_Pin;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4822      	ldr	r0, [pc, #136]	; (8001cf0 <HAL_UART_MspInit+0x100>)
 8001c66:	f001 f99d 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c6a:	e038      	b.n	8001cde <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_UART_MspInit+0x104>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d133      	bne.n	8001cde <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_UART_MspInit+0xfc>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cae:	230c      	movs	r3, #12
 8001cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <HAL_UART_MspInit+0x100>)
 8001cca:	f001 f96b 	bl	8002fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2026      	movs	r0, #38	; 0x26
 8001cd4:	f000 fcb7 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cd8:	2026      	movs	r0, #38	; 0x26
 8001cda:	f000 fcd0 	bl	800267e <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3730      	adds	r7, #48	; 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40004c00 	.word	0x40004c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <Reset_Handler>:
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x12>
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <LoopFillZerobss+0x16>)
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <LoopFillZerobss+0x1a>)
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1e>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:
 8001d06:	58d4      	ldr	r4, [r2, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:
 8001d0c:	18c4      	adds	r4, r0, r3
 8001d0e:	428c      	cmp	r4, r1
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x22>)
 8001d14:	4c0b      	ldr	r4, [pc, #44]	; (8001d44 <LoopFillZerobss+0x26>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>
 8001d22:	f7ff fd5b 	bl	80017dc <SystemInit>
 8001d26:	f00b ff0d 	bl	800db44 <__libc_init_array>
 8001d2a:	f7fe fe0f 	bl	800094c <main>
 8001d2e:	4770      	bx	lr
 8001d30:	20020000 	.word	0x20020000
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000210 	.word	0x20000210
 8001d3c:	0800ded4 	.word	0x0800ded4
 8001d40:	20000210 	.word	0x20000210
 8001d44:	200038f8 	.word	0x200038f8

08001d48 <ADC_IRQHandler>:
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_Init+0x40>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_Init+0x40>)
 8001d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x40>)
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 fc5b 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	2004      	movs	r0, #4
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fc62 	bl	8001648 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fc73 	bl	800269a <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 fc3b 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000040 	.word	0x20000040
 8001de8:	20000048 	.word	0x20000048
 8001dec:	20000044 	.word	0x20000044

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <HAL_GetTick+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000710 	.word	0x20000710

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffe0 	bl	8001df0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000048 	.word	0x20000048

08001e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e033      	b.n	8001eca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fb7c 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d118      	bne.n	8001ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e92:	f023 0302 	bic.w	r3, r3, #2
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f9f4 	bl	800228c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f023 0303 	bic.w	r3, r3, #3
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eba:	e001      	b.n	8001ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Start+0x1a>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e095      	b.n	800201a <HAL_ADC_Start+0x146>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d018      	beq.n	8001f36 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f14:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_ADC_Start+0x150>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a43      	ldr	r2, [pc, #268]	; (8002028 <HAL_ADC_Start+0x154>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9a      	lsrs	r2, r3, #18
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d15d      	bne.n	8002000 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f82:	d106      	bne.n	8001f92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	f023 0206 	bic.w	r2, r3, #6
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fa8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_ADC_Start+0x158>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d129      	bne.n	8002018 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e020      	b.n	8002018 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_ADC_Start+0x15c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d11b      	bne.n	8002018 <HAL_ADC_Start+0x144>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d114      	bne.n	8002018 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	e00b      	b.n	8002018 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000040 	.word	0x20000040
 8002028:	431bde83 	.word	0x431bde83
 800202c:	40012300 	.word	0x40012300
 8002030:	40012000 	.word	0x40012000

08002034 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x1c>
 8002064:	2302      	movs	r3, #2
 8002066:	e103      	b.n	8002270 <HAL_ADC_ConfigChannel+0x224>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b09      	cmp	r3, #9
 8002076:	d925      	bls.n	80020c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3b1e      	subs	r3, #30
 800208e:	2207      	movs	r2, #7
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43da      	mvns	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	400a      	ands	r2, r1
 800209c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68d9      	ldr	r1, [r3, #12]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4403      	add	r3, r0
 80020b6:	3b1e      	subs	r3, #30
 80020b8:	409a      	lsls	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	e022      	b.n	800210a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	2207      	movs	r2, #7
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	400a      	ands	r2, r1
 80020e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6919      	ldr	r1, [r3, #16]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4403      	add	r3, r0
 8002100:	409a      	lsls	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d824      	bhi.n	800215c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b05      	subs	r3, #5
 8002124:	221f      	movs	r2, #31
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b05      	subs	r3, #5
 800214e:	fa00 f203 	lsl.w	r2, r0, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
 800215a:	e04c      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d824      	bhi.n	80021ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b23      	subs	r3, #35	; 0x23
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43da      	mvns	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	400a      	ands	r2, r1
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	3b23      	subs	r3, #35	; 0x23
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
 80021ac:	e023      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b41      	subs	r3, #65	; 0x41
 80021c0:	221f      	movs	r2, #31
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b41      	subs	r3, #65	; 0x41
 80021ea:	fa00 f203 	lsl.w	r2, r0, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a20      	ldr	r2, [pc, #128]	; (800227c <HAL_ADC_ConfigChannel+0x230>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d109      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c8>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b12      	cmp	r3, #18
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_ADC_ConfigChannel+0x234>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_ADC_ConfigChannel+0x234>)
 800220e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002212:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_ADC_ConfigChannel+0x230>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d123      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d003      	beq.n	800222e <HAL_ADC_ConfigChannel+0x1e2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b11      	cmp	r3, #17
 800222c:	d11b      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_ADC_ConfigChannel+0x234>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_ADC_ConfigChannel+0x234>)
 8002234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002238:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d111      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_ADC_ConfigChannel+0x238>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_ADC_ConfigChannel+0x23c>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9a      	lsrs	r2, r3, #18
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002258:	e002      	b.n	8002260 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f9      	bne.n	800225a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40012000 	.word	0x40012000
 8002280:	40012300 	.word	0x40012300
 8002284:	20000040 	.word	0x20000040
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002294:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <ADC_Init+0x204>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a7d      	ldr	r2, [pc, #500]	; (8002490 <ADC_Init+0x204>)
 800229a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800229e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022a0:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <ADC_Init+0x204>)
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4979      	ldr	r1, [pc, #484]	; (8002490 <ADC_Init+0x204>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	021a      	lsls	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	4a5e      	ldr	r2, [pc, #376]	; (8002494 <ADC_Init+0x208>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800232e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e00f      	b.n	8002386 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0202 	bic.w	r2, r2, #2
 8002394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	005a      	lsls	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d027      	beq.n	8002404 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	3b01      	subs	r3, #1
 80023da:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80023de:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	fa92 f2a2 	rbit	r2, r2
 80023e6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	fa03 f102 	lsl.w	r1, r3, r2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e007      	b.n	8002414 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	051a      	lsls	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	029a      	lsls	r2, r3, #10
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40012300 	.word	0x40012300
 8002494:	0f000001 	.word	0x0f000001

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db0b      	blt.n	8002526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4906      	ldr	r1, [pc, #24]	; (8002530 <__NVIC_EnableIRQ+0x34>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2001      	movs	r0, #1
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff90 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff2d 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff42 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff90 	bl	8002588 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5f 	bl	8002534 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff35 	bl	80024fc <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00e      	b.n	80026e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	795b      	ldrb	r3, [r3, #5]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7fd ff7b 	bl	80005d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff fb7a 	bl	8001df0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fb61 	bl	8001df0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fb5d 	bl	8002eb0 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fb16 	bl	8002e48 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e050      	b.n	80028fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d101      	bne.n	800286a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	e048      	b.n	80028fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2221      	movs	r2, #33	; 0x21
 80028a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 facc 	bl	8002e48 <DMA_CalcBaseAndBitshift>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	223f      	movs	r2, #63	; 0x3f
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_DMA_Start_IT+0x26>
 8002926:	2302      	movs	r3, #2
 8002928:	e040      	b.n	80029ac <HAL_DMA_Start_IT+0xa8>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d12f      	bne.n	800299e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fa4a 	bl	8002dec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	223f      	movs	r2, #63	; 0x3f
 800295e:	409a      	lsls	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0216 	orr.w	r2, r2, #22
 8002972:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0208 	orr.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e005      	b.n	80029aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
 80029a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029c2:	f7ff fa15 	bl	8001df0 <HAL_GetTick>
 80029c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d008      	beq.n	80029e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e052      	b.n	8002a8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0216 	bic.w	r2, r2, #22
 80029f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <HAL_DMA_Abort+0x62>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0208 	bic.w	r2, r2, #8
 8002a24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a36:	e013      	b.n	8002a60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a38:	f7ff f9da 	bl	8001df0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d90c      	bls.n	8002a60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e015      	b.n	8002a8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e4      	bne.n	8002a38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	223f      	movs	r2, #63	; 0x3f
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00c      	b.n	8002acc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ae4:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <HAL_DMA_IRQHandler+0x248>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a8e      	ldr	r2, [pc, #568]	; (8002d24 <HAL_DMA_IRQHandler+0x24c>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2208      	movs	r2, #8
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0204 	bic.w	r2, r2, #4
 8002b2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2208      	movs	r2, #8
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2201      	movs	r2, #1
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2204      	movs	r2, #4
 8002b80:	409a      	lsls	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d043      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03c      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e01f      	b.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
 8002c18:	e016      	b.n	8002c48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0208 	bic.w	r2, r2, #8
 8002c36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 808f 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8087 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2220      	movs	r2, #32
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d136      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0216 	bic.w	r2, r2, #22
 8002c90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x1da>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0208 	bic.w	r2, r2, #8
 8002cc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	223f      	movs	r2, #63	; 0x3f
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d07e      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
        }
        return;
 8002cee:	e079      	b.n	8002de4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01d      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d031      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e02c      	b.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
 8002d1e:	bf00      	nop
 8002d20:	20000040 	.word	0x20000040
 8002d24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d023      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
 8002d38:	e01e      	b.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0210 	bic.w	r2, r2, #16
 8002d56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d032      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d307      	bcc.n	8002dc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f2      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x2cc>
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de4:	bf00      	nop
    }
  }
}
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d108      	bne.n	8002e2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e2a:	e007      	b.n	8002e3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
	...

08002e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3b10      	subs	r3, #16
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <DMA_CalcBaseAndBitshift+0x64>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d909      	bls.n	8002e8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	1d1a      	adds	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	659a      	str	r2, [r3, #88]	; 0x58
 8002e88:	e007      	b.n	8002e9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	0800dea8 	.word	0x0800dea8

08002eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d856      	bhi.n	8002f7e <DMA_CheckFifoParam+0xce>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <DMA_CheckFifoParam+0x28>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f7f 	.word	0x08002f7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d046      	beq.n	8002f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e043      	b.n	8002f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f02:	d140      	bne.n	8002f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e03d      	b.n	8002f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f12:	d121      	bne.n	8002f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d837      	bhi.n	8002f8a <DMA_CheckFifoParam+0xda>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <DMA_CheckFifoParam+0x70>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f37 	.word	0x08002f37
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e030      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d025      	beq.n	8002f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e022      	b.n	8002f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f56:	e01c      	b.n	8002f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d903      	bls.n	8002f66 <DMA_CheckFifoParam+0xb6>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f64:	e018      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6a:	e015      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e00b      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e00a      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e008      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e006      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
    }
  } 
  
  return status; 
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb2:	e16f      	b.n	8003294 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8161 	beq.w	800328e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d005      	beq.n	8002fe4 <HAL_GPIO_Init+0x40>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d130      	bne.n	8003046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301a:	2201      	movs	r2, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0201 	and.w	r2, r3, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b03      	cmp	r3, #3
 8003050:	d017      	beq.n	8003082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4013      	ands	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d123      	bne.n	80030d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0203 	and.w	r2, r3, #3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80bb 	beq.w	800328e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	4b64      	ldr	r3, [pc, #400]	; (80032b0 <HAL_GPIO_Init+0x30c>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_GPIO_Init+0x30c>)
 8003122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003126:	6453      	str	r3, [r2, #68]	; 0x44
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_GPIO_Init+0x30c>)
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003134:	4a5f      	ldr	r2, [pc, #380]	; (80032b4 <HAL_GPIO_Init+0x310>)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_GPIO_Init+0x314>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d031      	beq.n	80031c4 <HAL_GPIO_Init+0x220>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_GPIO_Init+0x318>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d02b      	beq.n	80031c0 <HAL_GPIO_Init+0x21c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a55      	ldr	r2, [pc, #340]	; (80032c0 <HAL_GPIO_Init+0x31c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d025      	beq.n	80031bc <HAL_GPIO_Init+0x218>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_GPIO_Init+0x320>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d01f      	beq.n	80031b8 <HAL_GPIO_Init+0x214>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_GPIO_Init+0x324>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d019      	beq.n	80031b4 <HAL_GPIO_Init+0x210>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_GPIO_Init+0x328>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d013      	beq.n	80031b0 <HAL_GPIO_Init+0x20c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_GPIO_Init+0x32c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00d      	beq.n	80031ac <HAL_GPIO_Init+0x208>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_GPIO_Init+0x330>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d007      	beq.n	80031a8 <HAL_GPIO_Init+0x204>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <HAL_GPIO_Init+0x334>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d101      	bne.n	80031a4 <HAL_GPIO_Init+0x200>
 80031a0:	2308      	movs	r3, #8
 80031a2:	e010      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031a4:	2309      	movs	r3, #9
 80031a6:	e00e      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031a8:	2307      	movs	r3, #7
 80031aa:	e00c      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031ac:	2306      	movs	r3, #6
 80031ae:	e00a      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031b0:	2305      	movs	r3, #5
 80031b2:	e008      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e006      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031b8:	2303      	movs	r3, #3
 80031ba:	e004      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031bc:	2302      	movs	r3, #2
 80031be:	e002      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_GPIO_Init+0x222>
 80031c4:	2300      	movs	r3, #0
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	f002 0203 	and.w	r2, r2, #3
 80031cc:	0092      	lsls	r2, r2, #2
 80031ce:	4093      	lsls	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031d8:	4936      	ldr	r1, [pc, #216]	; (80032b4 <HAL_GPIO_Init+0x310>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_GPIO_Init+0x338>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800320a:	4a34      	ldr	r2, [pc, #208]	; (80032dc <HAL_GPIO_Init+0x338>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_GPIO_Init+0x338>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003234:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_GPIO_Init+0x338>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_GPIO_Init+0x338>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_GPIO_Init+0x338>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_GPIO_Init+0x338>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <HAL_GPIO_Init+0x338>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ae88 	bne.w	8002fb4 <HAL_GPIO_Init+0x10>
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40021c00 	.word	0x40021c00
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032ee:	e0d1      	b.n	8003494 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032f0:	2201      	movs	r2, #1
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80c4 	beq.w	800348e <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003306:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <HAL_GPIO_DeInit+0x1d0>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_GPIO_DeInit+0x1d4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d031      	beq.n	8003394 <HAL_GPIO_DeInit+0xb4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a61      	ldr	r2, [pc, #388]	; (80034b8 <HAL_GPIO_DeInit+0x1d8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02b      	beq.n	8003390 <HAL_GPIO_DeInit+0xb0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a60      	ldr	r2, [pc, #384]	; (80034bc <HAL_GPIO_DeInit+0x1dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d025      	beq.n	800338c <HAL_GPIO_DeInit+0xac>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a5f      	ldr	r2, [pc, #380]	; (80034c0 <HAL_GPIO_DeInit+0x1e0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01f      	beq.n	8003388 <HAL_GPIO_DeInit+0xa8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a5e      	ldr	r2, [pc, #376]	; (80034c4 <HAL_GPIO_DeInit+0x1e4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d019      	beq.n	8003384 <HAL_GPIO_DeInit+0xa4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <HAL_GPIO_DeInit+0x1e8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_GPIO_DeInit+0xa0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a5c      	ldr	r2, [pc, #368]	; (80034cc <HAL_GPIO_DeInit+0x1ec>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00d      	beq.n	800337c <HAL_GPIO_DeInit+0x9c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <HAL_GPIO_DeInit+0x1f0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_DeInit+0x98>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a5a      	ldr	r2, [pc, #360]	; (80034d4 <HAL_GPIO_DeInit+0x1f4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_GPIO_DeInit+0x94>
 8003370:	2308      	movs	r3, #8
 8003372:	e010      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003374:	2309      	movs	r3, #9
 8003376:	e00e      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003378:	2307      	movs	r3, #7
 800337a:	e00c      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 800337c:	2306      	movs	r3, #6
 800337e:	e00a      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003380:	2305      	movs	r3, #5
 8003382:	e008      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003384:	2304      	movs	r3, #4
 8003386:	e006      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003388:	2303      	movs	r3, #3
 800338a:	e004      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 800338c:	2302      	movs	r3, #2
 800338e:	e002      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_GPIO_DeInit+0xb6>
 8003394:	2300      	movs	r3, #0
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	f002 0203 	and.w	r2, r2, #3
 800339c:	0092      	lsls	r2, r2, #2
 800339e:	fa03 f202 	lsl.w	r2, r3, r2
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d132      	bne.n	800340e <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4949      	ldr	r1, [pc, #292]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033b6:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	4946      	ldr	r1, [pc, #280]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033c4:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	4942      	ldr	r1, [pc, #264]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	493f      	ldr	r1, [pc, #252]	; (80034d8 <HAL_GPIO_DeInit+0x1f8>)
 80033dc:	4013      	ands	r3, r2
 80033de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <HAL_GPIO_DeInit+0x1d0>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43da      	mvns	r2, r3
 8003400:	482b      	ldr	r0, [pc, #172]	; (80034b0 <HAL_GPIO_DeInit+0x1d0>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	400a      	ands	r2, r1
 8003408:	3302      	adds	r3, #2
 800340a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2103      	movs	r1, #3
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	08da      	lsrs	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3208      	adds	r2, #8
 800342c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	08d2      	lsrs	r2, r2, #3
 8003444:	4019      	ands	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3208      	adds	r2, #8
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2103      	movs	r1, #3
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	2101      	movs	r1, #1
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	401a      	ands	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2103      	movs	r1, #3
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	401a      	ands	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	f47f af27 	bne.w	80032f0 <HAL_GPIO_DeInit+0x10>
  }
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40021400 	.word	0x40021400
 80034cc:	40021800 	.word	0x40021800
 80034d0:	40021c00 	.word	0x40021c00
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e001      	b.n	80034fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
 8003516:	4613      	mov	r3, r2
 8003518:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800351a:	787b      	ldrb	r3, [r7, #1]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003520:	887a      	ldrh	r2, [r7, #2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003526:	e003      	b.n	8003530 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	041a      	lsls	r2, r3, #16
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e12b      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd f9aa 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a0:	f001 fed8 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a81      	ldr	r2, [pc, #516]	; (80037b0 <HAL_I2C_Init+0x274>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d807      	bhi.n	80035c0 <HAL_I2C_Init+0x84>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_I2C_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bf94      	ite	ls
 80035b8:	2301      	movls	r3, #1
 80035ba:	2300      	movhi	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e006      	b.n	80035ce <HAL_I2C_Init+0x92>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <HAL_I2C_Init+0x27c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e7      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a78      	ldr	r2, [pc, #480]	; (80037bc <HAL_I2C_Init+0x280>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a6a      	ldr	r2, [pc, #424]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <HAL_I2C_Init+0xd4>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	e009      	b.n	8003624 <HAL_I2C_Init+0xe8>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_I2C_Init+0x284>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	495c      	ldr	r1, [pc, #368]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d819      	bhi.n	8003678 <HAL_I2C_Init+0x13c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e59      	subs	r1, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003658:	400b      	ands	r3, r1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_I2C_Init+0x138>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb1 f3f3 	udiv	r3, r1, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	e051      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003674:	2304      	movs	r3, #4
 8003676:	e04f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_I2C_Init+0x168>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_I2C_Init+0x18e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x196>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_I2C_Init+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e58      	subs	r0, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	440b      	add	r3, r1
 80036e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6911      	ldr	r1, [r2, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	000186a0 	.word	0x000186a0
 80037b4:	001e847f 	.word	0x001e847f
 80037b8:	003d08ff 	.word	0x003d08ff
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	b08f      	sub	sp, #60	; 0x3c
 80037c8:	af0a      	add	r7, sp, #40	; 0x28
 80037ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e10f      	b.n	80039f6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f009 fdc1 	bl	800d378 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f005 ff8b 	bl	8009730 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	687e      	ldr	r6, [r7, #4]
 8003822:	466d      	mov	r5, sp
 8003824:	f106 0410 	add.w	r4, r6, #16
 8003828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003834:	e885 0003 	stmia.w	r5, {r0, r1}
 8003838:	1d33      	adds	r3, r6, #4
 800383a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f005 fe6d 	bl	800951c <USB_CoreInit>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0d0      	b.n	80039f6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f005 ff78 	bl	8009750 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e04a      	b.n	80038fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	333d      	adds	r3, #61	; 0x3d
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	333c      	adds	r3, #60	; 0x3c
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	b298      	uxth	r0, r3
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3342      	adds	r3, #66	; 0x42
 80038a2:	4602      	mov	r2, r0
 80038a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	333f      	adds	r3, #63	; 0x3f
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	3344      	adds	r3, #68	; 0x44
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ce:	7bfa      	ldrb	r2, [r7, #15]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3348      	adds	r3, #72	; 0x48
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038e2:	7bfa      	ldrb	r2, [r7, #15]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3350      	adds	r3, #80	; 0x50
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	3301      	adds	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3af      	bcc.n	8003866 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e044      	b.n	8003996 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	3301      	adds	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	d3b5      	bcc.n	800390c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	687e      	ldr	r6, [r7, #4]
 80039a8:	466d      	mov	r5, sp
 80039aa:	f106 0410 	add.w	r4, r6, #16
 80039ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80039be:	1d33      	adds	r3, r6, #4
 80039c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039c2:	6838      	ldr	r0, [r7, #0]
 80039c4:	f005 ff10 	bl	80097e8 <USB_DevInit>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00d      	b.n	80039f6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f006 ff81 	bl	800a8f6 <USB_DevDisconnect>

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_Start+0x16>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e012      	b.n	8003a3a <HAL_PCD_Start+0x3c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f005 fe75 	bl	8009710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f006 ff43 	bl	800a8b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a42:	b590      	push	{r4, r7, lr}
 8003a44:	b08d      	sub	sp, #52	; 0x34
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f006 fffa 	bl	800aa52 <USB_GetMode>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 838f 	bne.w	8004184 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 ff63 	bl	800a936 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8385 	beq.w	8004182 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 ff5a 	bl	800a936 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d107      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 0202 	and.w	r2, r2, #2
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f006 ff48 	bl	800a936 <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d161      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0210 	bic.w	r2, r2, #16
 8003abe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d124      	bne.n	8003b36 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d035      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a38      	ldr	r0, [r7, #32]
 8003b0c:	f006 fd85 	bl	800a61a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1c:	441a      	add	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2e:	441a      	add	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
 8003b34:	e016      	b.n	8003b64 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	0c5b      	lsrs	r3, r3, #17
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d110      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b48:	2208      	movs	r2, #8
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6a38      	ldr	r0, [r7, #32]
 8003b4e:	f006 fd64 	bl	800a61a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	441a      	add	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0210 	orr.w	r2, r2, #16
 8003b72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f006 fedc 	bl	800a936 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b88:	d16e      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f006 fee1 	bl	800a95a <USB_ReadDevAllOutEpInterrupt>
 8003b98:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b9a:	e062      	b.n	8003c62 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d057      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f006 ff04 	bl	800a9be <USB_ReadDevOutEPInterrupt>
 8003bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00c      	beq.n	8003bdc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fda2 	bl	8004720 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00c      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fe9c 	bl	8004938 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	2310      	movs	r3, #16
 8003c1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	461a      	mov	r2, r3
 8003c34:	2320      	movs	r3, #32
 8003c36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	3301      	adds	r3, #1
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d199      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f006 fe62 	bl	800a936 <USB_ReadInterrupts>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7c:	f040 80c0 	bne.w	8003e00 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f006 fe81 	bl	800a98c <USB_ReadDevAllInEpInterrupt>
 8003c8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c90:	e0b2      	b.n	8003df8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a7 	beq.w	8003dec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f006 fea5 	bl	800a9f8 <USB_ReadDevInEPInterrupt>
 8003cae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d057      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cda:	4013      	ands	r3, r2
 8003cdc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	461a      	mov	r2, r3
 8003cec:	2301      	movs	r3, #1
 8003cee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d132      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3348      	adds	r3, #72	; 0x48
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4403      	add	r3, r0
 8003d18:	3344      	adds	r3, #68	; 0x44
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4419      	add	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	3348      	adds	r3, #72	; 0x48
 8003d2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d113      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x31c>
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3350      	adds	r3, #80	; 0x50
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d56:	461a      	mov	r2, r3
 8003d58:	2101      	movs	r1, #1
 8003d5a:	f006 fea9 	bl	800aab0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f009 fb96 	bl	800d496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	2308      	movs	r3, #8
 8003d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2310      	movs	r3, #16
 8003da0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	461a      	mov	r2, r3
 8003dba:	2340      	movs	r3, #64	; 0x40
 8003dbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fc0c 	bl	8004604 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	3301      	adds	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f47f af49 	bne.w	8003c92 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f006 fd96 	bl	800a936 <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d114      	bne.n	8003e40 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f009 fbaa 	bl	800d584 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f006 fd76 	bl	800a936 <USB_ReadInterrupts>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e54:	d112      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d102      	bne.n	8003e6c <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f009 fb66 	bl	800d538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e7a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f006 fd58 	bl	800a936 <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	f040 80c7 	bne.w	8004022 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2110      	movs	r1, #16
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 fdfe 	bl	8009ab0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb8:	e056      	b.n	8003f68 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ecc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ede:	0151      	lsls	r1, r2, #5
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	3301      	adds	r3, #1
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d3a3      	bcc.n	8003eba <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9e:	f043 030b 	orr.w	r3, r3, #11
 8003fa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb4:	f043 030b 	orr.w	r3, r3, #11
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	e015      	b.n	8003fe8 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe2:	f043 030b 	orr.w	r3, r3, #11
 8003fe6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ffa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800400c:	461a      	mov	r2, r3
 800400e:	f006 fd4f 	bl	800aab0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f006 fc85 	bl	800a936 <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004036:	d124      	bne.n	8004082 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f006 fd15 	bl	800aa6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f005 fd8e 	bl	8009b68 <USB_GetDevSpeed>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681c      	ldr	r4, [r3, #0]
 8004058:	f001 f972 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 800405c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	4620      	mov	r0, r4
 8004068:	f005 fab0 	bl	80095cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f009 fa3a 	bl	800d4e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004080:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f006 fc55 	bl	800a936 <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d10a      	bne.n	80040ac <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f009 fa17 	bl	800d4ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f002 0208 	and.w	r2, r2, #8
 80040aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f006 fc40 	bl	800a936 <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c0:	d10f      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f009 fa79 	bl	800d5c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 fc25 	bl	800a936 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f6:	d10f      	bne.n	8004118 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f009 fa4c 	bl	800d5a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f006 fc0a 	bl	800a936 <USB_ReadInterrupts>
 8004122:	4603      	mov	r3, r0
 8004124:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412c:	d10a      	bne.n	8004144 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f009 fa5a 	bl	800d5e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f006 fbf4 	bl	800a936 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d115      	bne.n	8004184 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f009 fa4a 	bl	800d604 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e000      	b.n	8004184 <HAL_PCD_IRQHandler+0x742>
      return;
 8004182:	bf00      	nop
    }
  }
}
 8004184:	3734      	adds	r7, #52	; 0x34
 8004186:	46bd      	mov	sp, r7
 8004188:	bd90      	pop	{r4, r7, pc}

0800418a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_PCD_SetAddress+0x1a>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e013      	b.n	80041cc <HAL_PCD_SetAddress+0x42>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f006 fb55 	bl	800a86c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	70fb      	strb	r3, [r7, #3]
 80041e6:	460b      	mov	r3, r1
 80041e8:	803b      	strh	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da0f      	bge.n	800421a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3338      	adds	r3, #56	; 0x38
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	705a      	strb	r2, [r3, #1]
 8004218:	e00f      	b.n	800423a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004246:	883a      	ldrh	r2, [r7, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	78ba      	ldrb	r2, [r7, #2]
 8004250:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	785b      	ldrb	r3, [r3, #1]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004264:	78bb      	ldrb	r3, [r7, #2]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d102      	bne.n	8004270 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_PCD_EP_Open+0xaa>
 800427a:	2302      	movs	r3, #2
 800427c:	e00e      	b.n	800429c <HAL_PCD_EP_Open+0xc8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	4618      	mov	r0, r3
 800428e:	f005 fc8f 	bl	8009bb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800429a:	7afb      	ldrb	r3, [r7, #11]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da0f      	bge.n	80042d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	f003 020f 	and.w	r2, r3, #15
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	3338      	adds	r3, #56	; 0x38
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	705a      	strb	r2, [r3, #1]
 80042d6:	e00f      	b.n	80042f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	3304      	adds	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_PCD_EP_Close+0x6e>
 800430e:	2302      	movs	r3, #2
 8004310:	e00e      	b.n	8004330 <HAL_PCD_EP_Close+0x8c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	4618      	mov	r0, r3
 8004322:	f005 fccb 	bl	8009cbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	460b      	mov	r3, r1
 8004346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004348:	7afb      	ldrb	r3, [r7, #11]
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	b2da      	uxtb	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004394:	7afb      	ldrb	r3, [r7, #11]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	6979      	ldr	r1, [r7, #20]
 80043ac:	f005 ffa6 	bl	800a2fc <USB_EP0StartXfer>
 80043b0:	e008      	b.n	80043c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	6979      	ldr	r1, [r7, #20]
 80043c0:	f005 fd58 	bl	8009e74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043f0:	681b      	ldr	r3, [r3, #0]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	460b      	mov	r3, r1
 800440a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800440c:	7afb      	ldrb	r3, [r7, #11]
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	3338      	adds	r3, #56	; 0x38
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2200      	movs	r2, #0
 8004434:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2201      	movs	r2, #1
 800443a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	b2da      	uxtb	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d102      	bne.n	8004456 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	f005 ff45 	bl	800a2fc <USB_EP0StartXfer>
 8004472:	e008      	b.n	8004486 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	f005 fcf7 	bl	8009e74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 020f 	and.w	r2, r3, #15
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d901      	bls.n	80044ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e050      	b.n	8004550 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da0f      	bge.n	80044d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	3338      	adds	r3, #56	; 0x38
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	705a      	strb	r2, [r3, #1]
 80044d4:	e00d      	b.n	80044f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	3304      	adds	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_PCD_EP_SetStall+0x82>
 800450e:	2302      	movs	r3, #2
 8004510:	e01e      	b.n	8004550 <HAL_PCD_EP_SetStall+0xc0>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	4618      	mov	r0, r3
 8004522:	f006 f8d1 	bl	800a6c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	b2d9      	uxtb	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004540:	461a      	mov	r2, r3
 8004542:	f006 fab5 	bl	800aab0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d901      	bls.n	8004576 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e042      	b.n	80045fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457a:	2b00      	cmp	r3, #0
 800457c:	da0f      	bge.n	800459e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	f003 020f 	and.w	r2, r3, #15
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	3338      	adds	r3, #56	; 0x38
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	3304      	adds	r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	705a      	strb	r2, [r3, #1]
 800459c:	e00f      	b.n	80045be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_PCD_EP_ClrStall+0x86>
 80045da:	2302      	movs	r3, #2
 80045dc:	e00e      	b.n	80045fc <HAL_PCD_EP_ClrStall+0xa4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f006 f8d8 	bl	800a7a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d901      	bls.n	800463c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e06c      	b.n	8004716 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	429a      	cmp	r2, r3
 8004650:	d902      	bls.n	8004658 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3303      	adds	r3, #3
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004660:	e02b      	b.n	80046ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	429a      	cmp	r2, r3
 8004676:	d902      	bls.n	800467e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3303      	adds	r3, #3
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68d9      	ldr	r1, [r3, #12]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004696:	b2db      	uxtb	r3, r3
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	4603      	mov	r3, r0
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	f005 ff7f 	bl	800a5a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	441a      	add	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	441a      	add	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d809      	bhi.n	80046e4 <PCD_WriteEmptyTxFifo+0xe0>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046d8:	429a      	cmp	r2, r3
 80046da:	d203      	bcs.n	80046e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1be      	bne.n	8004662 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d811      	bhi.n	8004714 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	43db      	mvns	r3, r3
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004710:	4013      	ands	r3, r2
 8004712:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	3304      	adds	r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b01      	cmp	r3, #1
 8004754:	f040 80a0 	bne.w	8004898 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a72      	ldr	r2, [pc, #456]	; (8004930 <PCD_EP_OutXfrComplete_int+0x210>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f240 80dd 	bls.w	8004926 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80d7 	beq.w	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004784:	461a      	mov	r2, r3
 8004786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	e0cb      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	2320      	movs	r3, #32
 80047a8:	6093      	str	r3, [r2, #8]
 80047aa:	e0bc      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f040 80b7 	bne.w	8004926 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <PCD_EP_OutXfrComplete_int+0x210>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d90f      	bls.n	80047e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	461a      	mov	r2, r3
 80047d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047dc:	6093      	str	r3, [r2, #8]
 80047de:	e0a2      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	0159      	lsls	r1, r3, #5
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	440b      	add	r3, r1
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004806:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4403      	add	r3, r0
 8004816:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800481a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4403      	add	r3, r0
 800483e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4419      	add	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4403      	add	r3, r0
 8004854:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004858:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d114      	bne.n	800488a <PCD_EP_OutXfrComplete_int+0x16a>
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004882:	461a      	mov	r2, r3
 8004884:	2101      	movs	r1, #1
 8004886:	f006 f913 	bl	800aab0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f008 fde5 	bl	800d460 <HAL_PCD_DataOutStageCallback>
 8004896:	e046      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <PCD_EP_OutXfrComplete_int+0x214>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d124      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048bc:	6093      	str	r3, [r2, #8]
 80048be:	e032      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	2320      	movs	r3, #32
 80048da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f008 fdbc 	bl	800d460 <HAL_PCD_DataOutStageCallback>
 80048e8:	e01d      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d114      	bne.n	800491a <PCD_EP_OutXfrComplete_int+0x1fa>
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004912:	461a      	mov	r2, r3
 8004914:	2100      	movs	r1, #0
 8004916:	f006 f8cb 	bl	800aab0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f008 fd9d 	bl	800d460 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	4f54300a 	.word	0x4f54300a
 8004934:	4f54310a 	.word	0x4f54310a

08004938 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	333c      	adds	r3, #60	; 0x3c
 8004950:	3304      	adds	r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d90e      	bls.n	800498c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004984:	461a      	mov	r2, r3
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f008 fd55 	bl	800d43c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d90c      	bls.n	80049b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d108      	bne.n	80049b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049ac:	461a      	mov	r2, r3
 80049ae:	2101      	movs	r1, #1
 80049b0:	f006 f87e 	bl	800aab0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	4f54300a 	.word	0x4f54300a

080049c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
 80049d0:	4613      	mov	r3, r2
 80049d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d107      	bne.n	80049f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049e2:	883b      	ldrh	r3, [r7, #0]
 80049e4:	0419      	lsls	r1, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28
 80049f0:	e028      	b.n	8004a44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e00d      	b.n	8004a22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3340      	adds	r3, #64	; 0x40
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3ec      	bcc.n	8004a06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a2c:	883b      	ldrh	r3, [r7, #0]
 8004a2e:	0418      	lsls	r0, r3, #16
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	4302      	orrs	r2, r0
 8004a3c:	3340      	adds	r3, #64	; 0x40
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	887a      	ldrh	r2, [r7, #2]
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e236      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d050      	beq.n	8004b30 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a8e:	4b9e      	ldr	r3, [pc, #632]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d00c      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9a:	4b9b      	ldr	r3, [pc, #620]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d112      	bne.n	8004acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa6:	4b98      	ldr	r3, [pc, #608]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab2:	d10b      	bne.n	8004acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	4b94      	ldr	r3, [pc, #592]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d036      	beq.n	8004b2e <HAL_RCC_OscConfig+0xbe>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d132      	bne.n	8004b2e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e211      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	4b8e      	ldr	r3, [pc, #568]	; (8004d0c <HAL_RCC_OscConfig+0x29c>)
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d013      	beq.n	8004b06 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fd f987 	bl	8001df0 <HAL_GetTick>
 8004ae2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae6:	f7fd f983 	bl	8001df0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b64      	cmp	r3, #100	; 0x64
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e1fb      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af8:	4b83      	ldr	r3, [pc, #524]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x76>
 8004b04:	e014      	b.n	8004b30 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fd f973 	bl	8001df0 <HAL_GetTick>
 8004b0a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0e:	f7fd f96f 	bl	8001df0 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b64      	cmp	r3, #100	; 0x64
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e1e7      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b20:	4b79      	ldr	r3, [pc, #484]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x9e>
 8004b2c:	e000      	b.n	8004b30 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d077      	beq.n	8004c2c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3c:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b48:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d126      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b54:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d120      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b60:	4b69      	ldr	r3, [pc, #420]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_OscConfig+0x108>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e1bb      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b78:	4b63      	ldr	r3, [pc, #396]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	21f8      	movs	r1, #248	; 0xf8
 8004b86:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	fa91 f1a1 	rbit	r1, r1
 8004b8e:	6179      	str	r1, [r7, #20]
  return result;
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	fab1 f181 	clz	r1, r1
 8004b96:	b2c9      	uxtb	r1, r1
 8004b98:	408b      	lsls	r3, r1
 8004b9a:	495b      	ldr	r1, [pc, #364]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba0:	e044      	b.n	8004c2c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d02a      	beq.n	8004c00 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004baa:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_OscConfig+0x2a0>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fd f91e 	bl	8001df0 <HAL_GetTick>
 8004bb4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7fd f91a 	bl	8001df0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e192      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b4f      	ldr	r3, [pc, #316]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	21f8      	movs	r1, #248	; 0xf8
 8004be4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	6939      	ldr	r1, [r7, #16]
 8004be8:	fa91 f1a1 	rbit	r1, r1
 8004bec:	60f9      	str	r1, [r7, #12]
  return result;
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	fab1 f181 	clz	r1, r1
 8004bf4:	b2c9      	uxtb	r1, r1
 8004bf6:	408b      	lsls	r3, r1
 8004bf8:	4943      	ldr	r1, [pc, #268]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
 8004bfe:	e015      	b.n	8004c2c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x2a0>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fd f8f3 	bl	8001df0 <HAL_GetTick>
 8004c0a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fd f8ef 	bl	8001df0 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e167      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d030      	beq.n	8004c9a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d016      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c46:	f7fd f8d3 	bl	8001df0 <HAL_GetTick>
 8004c4a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7fd f8cf 	bl	8001df0 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e147      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c60:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1de>
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <HAL_RCC_OscConfig+0x2a4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c74:	f7fd f8bc 	bl	8001df0 <HAL_GetTick>
 8004c78:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f8b8 	bl	8001df0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e130      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8087 	beq.w	8004db6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d110      	bne.n	8004cdc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RCC_OscConfig+0x298>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCC_OscConfig+0x2a8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <HAL_RCC_OscConfig+0x2a8>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCC_OscConfig+0x2a8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d122      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_RCC_OscConfig+0x2a8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a07      	ldr	r2, [pc, #28]	; (8004d18 <HAL_RCC_OscConfig+0x2a8>)
 8004cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d00:	f7fd f876 	bl	8001df0 <HAL_GetTick>
 8004d04:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	e012      	b.n	8004d2e <HAL_RCC_OscConfig+0x2be>
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40023802 	.word	0x40023802
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
 8004d18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1c:	f7fd f868 	bl	8001df0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0e0      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2e:	4b72      	ldr	r3, [pc, #456]	; (8004ef8 <HAL_RCC_OscConfig+0x488>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_OscConfig+0x48c>)
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4c:	f7fd f850 	bl	8001df0 <HAL_GetTick>
 8004d50:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fd f84c 	bl	8001df0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0c2      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0ee      	beq.n	8004d54 <HAL_RCC_OscConfig+0x2e4>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7fd f83a 	bl	8001df0 <HAL_GetTick>
 8004d7c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fd f836 	bl	8001df0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0ac      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d96:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ee      	bne.n	8004d80 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004daa:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a54      	ldr	r2, [pc, #336]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8097 	beq.w	8004eee <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dc0:	4b4f      	ldr	r3, [pc, #316]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d061      	beq.n	8004e90 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d146      	bne.n	8004e62 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <HAL_RCC_OscConfig+0x494>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fd f809 	bl	8001df0 <HAL_GetTick>
 8004dde:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de2:	f7fd f805 	bl	8001df0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b64      	cmp	r3, #100	; 0x64
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e07d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f0      	bne.n	8004de2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e00:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <HAL_RCC_OscConfig+0x498>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	69d1      	ldr	r1, [r2, #28]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6a12      	ldr	r2, [r2, #32]
 8004e10:	4311      	orrs	r1, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e16:	0192      	lsls	r2, r2, #6
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e1e:	0612      	lsls	r2, r2, #24
 8004e20:	4311      	orrs	r1, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e26:	0852      	lsrs	r2, r2, #1
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	0412      	lsls	r2, r2, #16
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	4934      	ldr	r1, [pc, #208]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e34:	4b33      	ldr	r3, [pc, #204]	; (8004f04 <HAL_RCC_OscConfig+0x494>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fc ffd9 	bl	8001df0 <HAL_GetTick>
 8004e3e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fc ffd5 	bl	8001df0 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b64      	cmp	r3, #100	; 0x64
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e04d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e54:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x3d2>
 8004e60:	e045      	b.n	8004eee <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <HAL_RCC_OscConfig+0x494>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fc ffc2 	bl	8001df0 <HAL_GetTick>
 8004e6c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fc ffbe 	bl	8001df0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e036      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x400>
 8004e8e:	e02e      	b.n	8004eee <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e029      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <HAL_RCC_OscConfig+0x490>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d11c      	bne.n	8004eea <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d115      	bne.n	8004eea <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d10d      	bne.n	8004eea <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3728      	adds	r7, #40	; 0x28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	40023870 	.word	0x40023870
 8004f00:	40023800 	.word	0x40023800
 8004f04:	42470060 	.word	0x42470060
 8004f08:	f0bc8000 	.word	0xf0bc8000

08004f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0d2      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b6b      	ldr	r3, [pc, #428]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d90c      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b68      	ldr	r3, [pc, #416]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b66      	ldr	r3, [pc, #408]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0be      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f60:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a5b      	ldr	r2, [pc, #364]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004f78:	4b56      	ldr	r3, [pc, #344]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a55      	ldr	r2, [pc, #340]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f84:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4950      	ldr	r1, [pc, #320]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d040      	beq.n	8005024 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d107      	bne.n	8004fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d115      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e085      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e079      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e071      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b3c      	ldr	r3, [pc, #240]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4939      	ldr	r1, [pc, #228]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7fc fefc 	bl	8001df0 <HAL_GetTick>
 8004ff8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fc fef8 	bl	8001df0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e059      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 020c 	and.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d1eb      	bne.n	8004ffc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d20c      	bcs.n	800504c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e03c      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b1e      	ldr	r3, [pc, #120]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	491b      	ldr	r1, [pc, #108]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4913      	ldr	r1, [pc, #76]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800508a:	f000 f893 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 800508e:	4601      	mov	r1, r0
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_ClockConfig+0x1c8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005098:	22f0      	movs	r2, #240	; 0xf0
 800509a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	fa92 f2a2 	rbit	r2, r2
 80050a2:	60fa      	str	r2, [r7, #12]
  return result;
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	fab2 f282 	clz	r2, r2
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	40d3      	lsrs	r3, r2
 80050ae:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <HAL_RCC_ClockConfig+0x1cc>)
 80050b0:	5cd3      	ldrb	r3, [r2, r3]
 80050b2:	fa21 f303 	lsr.w	r3, r1, r3
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <HAL_RCC_ClockConfig+0x1d0>)
 80050b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050ba:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x1d4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc fe66 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40023c00 	.word	0x40023c00
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800de90 	.word	0x0800de90
 80050dc:	20000040 	.word	0x20000040
 80050e0:	20000044 	.word	0x20000044

080050e4 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d129      	bne.n	800514a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6313      	str	r3, [r2, #48]	; 0x30
 8005106:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005118:	2302      	movs	r3, #2
 800511a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511c:	2303      	movs	r3, #3
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005128:	f107 031c 	add.w	r3, r7, #28
 800512c:	4619      	mov	r1, r3
 800512e:	481f      	ldr	r0, [pc, #124]	; (80051ac <HAL_RCC_MCOConfig+0xc8>)
 8005130:	f7fd ff38 	bl	8002fa4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005134:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	430b      	orrs	r3, r1
 8005142:	4919      	ldr	r1, [pc, #100]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
  }
}
 8005148:	e029      	b.n	800519e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800516a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516c:	2302      	movs	r3, #2
 800516e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005170:	2303      	movs	r3, #3
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005178:	2300      	movs	r3, #0
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800517c:	f107 031c 	add.w	r3, r7, #28
 8005180:	4619      	mov	r1, r3
 8005182:	480b      	ldr	r0, [pc, #44]	; (80051b0 <HAL_RCC_MCOConfig+0xcc>)
 8005184:	f7fd ff0e 	bl	8002fa4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	00d9      	lsls	r1, r3, #3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	430b      	orrs	r3, r1
 8005198:	4903      	ldr	r1, [pc, #12]	; (80051a8 <HAL_RCC_MCOConfig+0xc4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
}
 800519e:	bf00      	nop
 80051a0:	3730      	adds	r7, #48	; 0x30
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40020000 	.word	0x40020000
 80051b0:	40020800 	.word	0x40020800

080051b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b8:	b090      	sub	sp, #64	; 0x40
 80051ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
 80051c0:	2300      	movs	r3, #0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	2300      	movs	r3, #0
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051cc:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d00d      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x40>
 80051d8:	2b08      	cmp	r3, #8
 80051da:	f200 80a2 	bhi.w	8005322 <HAL_RCC_GetSysClockFreq+0x16e>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x34>
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d003      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x3a>
 80051e6:	e09c      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_GetSysClockFreq+0x184>)
 80051ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051ec:	e09c      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4b53      	ldr	r3, [pc, #332]	; (800533c <HAL_RCC_GetSysClockFreq+0x188>)
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051f2:	e099      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f4:	4b4f      	ldr	r3, [pc, #316]	; (8005334 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fe:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <HAL_RCC_GetSysClockFreq+0x180>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d027      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <HAL_RCC_GetSysClockFreq+0x180>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	2200      	movs	r2, #0
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	627a      	str	r2, [r7, #36]	; 0x24
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800521c:	2100      	movs	r1, #0
 800521e:	4b47      	ldr	r3, [pc, #284]	; (800533c <HAL_RCC_GetSysClockFreq+0x188>)
 8005220:	fb03 f201 	mul.w	r2, r3, r1
 8005224:	2300      	movs	r3, #0
 8005226:	fb00 f303 	mul.w	r3, r0, r3
 800522a:	4413      	add	r3, r2
 800522c:	4a43      	ldr	r2, [pc, #268]	; (800533c <HAL_RCC_GetSysClockFreq+0x188>)
 800522e:	fba0 2102 	umull	r2, r1, r0, r2
 8005232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005234:	62ba      	str	r2, [r7, #40]	; 0x28
 8005236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005238:	4413      	add	r3, r2
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	2200      	movs	r2, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	61fa      	str	r2, [r7, #28]
 8005244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005248:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800524c:	f7fa ffba 	bl	80001c4 <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4613      	mov	r3, r2
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005258:	e055      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCC_GetSysClockFreq+0x180>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	2200      	movs	r2, #0
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	617a      	str	r2, [r7, #20]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800526c:	f04f 0b00 	mov.w	fp, #0
 8005270:	4652      	mov	r2, sl
 8005272:	465b      	mov	r3, fp
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f04f 0100 	mov.w	r1, #0
 800527c:	0159      	lsls	r1, r3, #5
 800527e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005282:	0150      	lsls	r0, r2, #5
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	ebb2 080a 	subs.w	r8, r2, sl
 800528c:	eb63 090b 	sbc.w	r9, r3, fp
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800529c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052a0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052a4:	ebb2 0408 	subs.w	r4, r2, r8
 80052a8:	eb63 0509 	sbc.w	r5, r3, r9
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	00eb      	lsls	r3, r5, #3
 80052b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ba:	00e2      	lsls	r2, r4, #3
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	eb14 030a 	adds.w	r3, r4, sl
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	eb45 030b 	adc.w	r3, r5, fp
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052d8:	4629      	mov	r1, r5
 80052da:	028b      	lsls	r3, r1, #10
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	4604      	mov	r4, r0
 80052e2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80052e6:	4601      	mov	r1, r0
 80052e8:	028a      	lsls	r2, r1, #10
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f0:	2200      	movs	r2, #0
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	60fa      	str	r2, [r7, #12]
 80052f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052fa:	f7fa ff63 	bl	80001c4 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4613      	mov	r3, r2
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_GetSysClockFreq+0x180>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	3301      	adds	r3, #1
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005320:	e002      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetSysClockFreq+0x184>)
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005326:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800532a:	4618      	mov	r0, r3
 800532c:	3740      	adds	r7, #64	; 0x40
 800532e:	46bd      	mov	sp, r7
 8005330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	00f42400 	.word	0x00f42400
 800533c:	017d7840 	.word	0x017d7840

08005340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005344:	4b02      	ldr	r3, [pc, #8]	; (8005350 <HAL_RCC_GetHCLKFreq+0x10>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	20000040 	.word	0x20000040

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800535a:	f7ff fff1 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 800535e:	4601      	mov	r1, r0
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005368:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800536c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	fa92 f2a2 	rbit	r2, r2
 8005374:	603a      	str	r2, [r7, #0]
  return result;
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	fab2 f282 	clz	r2, r2
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	40d3      	lsrs	r3, r2
 8005380:	4a04      	ldr	r2, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40023800 	.word	0x40023800
 8005394:	0800dea0 	.word	0x0800dea0

08005398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800539e:	f7ff ffcf 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 80053a2:	4601      	mov	r1, r0
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80053ac:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80053b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	fa92 f2a2 	rbit	r2, r2
 80053b8:	603a      	str	r2, [r7, #0]
  return result;
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	fab2 f282 	clz	r2, r2
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	40d3      	lsrs	r3, r2
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	0800dea0 	.word	0x0800dea0

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d14c      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005400:	4b6d      	ldr	r3, [pc, #436]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005406:	f7fc fcf3 	bl	8001df0 <HAL_GetTick>
 800540a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800540e:	f7fc fcef 	bl	8001df0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0c7      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005420:	4b66      	ldr	r3, [pc, #408]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f0      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	fa92 f2a2 	rbit	r2, r2
 800543c:	613a      	str	r2, [r7, #16]
  return result;
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	fab2 f282 	clz	r2, r2
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	fa03 f202 	lsl.w	r2, r3, r2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8005452:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	fa91 f1a1 	rbit	r1, r1
 800545a:	61b9      	str	r1, [r7, #24]
  return result;
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	fab1 f181 	clz	r1, r1
 8005462:	b2c9      	uxtb	r1, r1
 8005464:	408b      	lsls	r3, r1
 8005466:	4955      	ldr	r1, [pc, #340]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800546e:	4b52      	ldr	r3, [pc, #328]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005474:	f7fc fcbc 	bl	8001df0 <HAL_GetTick>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800547c:	f7fc fcb8 	bl	8001df0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e090      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800548e:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8083 	beq.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	4b43      	ldr	r3, [pc, #268]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	4a42      	ldr	r2, [pc, #264]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6413      	str	r3, [r2, #64]	; 0x40
 80054b8:	4b40      	ldr	r3, [pc, #256]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054c4:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3d      	ldr	r2, [pc, #244]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80054d0:	f7fc fc8e 	bl	8001df0 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054d8:	f7fc fc8a 	bl	8001df0 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e062      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054ea:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054f6:	4b31      	ldr	r3, [pc, #196]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d02f      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	429a      	cmp	r2, r3
 8005512:	d028      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551c:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800551e:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800552a:	4a24      	ldr	r2, [pc, #144]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005530:	4b22      	ldr	r3, [pc, #136]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	d114      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc fc58 	bl	8001df0 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005542:	e00a      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7fc fc54 	bl	8001df0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e02a      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555a:	4b18      	ldr	r3, [pc, #96]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ee      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005572:	d10d      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005574:	4b11      	ldr	r3, [pc, #68]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	490c      	ldr	r1, [pc, #48]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
 800558e:	e005      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a09      	ldr	r2, [pc, #36]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800559a:	6093      	str	r3, [r2, #8]
 800559c:	4b07      	ldr	r3, [pc, #28]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800559e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a8:	4904      	ldr	r1, [pc, #16]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3728      	adds	r7, #40	; 0x28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	42470068 	.word	0x42470068
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40007000 	.word	0x40007000
 80055c4:	42470e40 	.word	0x42470e40

080055c8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e01c      	b.n	8005614 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	795b      	ldrb	r3, [r3, #5]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb fcd6 	bl	8000f9c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0204 	orr.w	r2, r2, #4
 8005604:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e07c      	b.n	8005728 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7f5b      	ldrb	r3, [r3, #29]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d105      	bne.n	8005644 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb fd24 	bl	800108c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	22ca      	movs	r2, #202	; 0xca
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2253      	movs	r2, #83	; 0x53
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9e6 	bl	8005a2c <RTC_EnterInitMode>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	22ff      	movs	r2, #255	; 0xff
 800566c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2204      	movs	r2, #4
 8005672:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e057      	b.n	8005728 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68d2      	ldr	r2, [r2, #12]
 80056b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6919      	ldr	r1, [r3, #16]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	041a      	lsls	r2, r3, #16
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056d6:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f97f 	bl	80059dc <HAL_RTC_WaitForSynchro>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	22ff      	movs	r2, #255	; 0xff
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2204      	movs	r2, #4
 80056f0:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e018      	b.n	8005728 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	22ff      	movs	r2, #255	; 0xff
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7f1b      	ldrb	r3, [r3, #28]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_RTC_SetTime+0x1c>
 8005748:	2302      	movs	r3, #2
 800574a:	e0a3      	b.n	8005894 <HAL_RTC_SetTime+0x164>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2202      	movs	r2, #2
 8005756:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d126      	bne.n	80057ac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f984 	bl	8005a84 <RTC_ByteToBcd2>
 800577c:	4603      	mov	r3, r0
 800577e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 f97d 	bl	8005a84 <RTC_ByteToBcd2>
 800578a:	4603      	mov	r3, r0
 800578c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800578e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	789b      	ldrb	r3, [r3, #2]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f975 	bl	8005a84 <RTC_ByteToBcd2>
 800579a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800579c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	78db      	ldrb	r3, [r3, #3]
 80057a4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e018      	b.n	80057de <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80057cc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80057d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	22ca      	movs	r2, #202	; 0xca
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2253      	movs	r2, #83	; 0x53
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f91c 	bl	8005a2c <RTC_EnterInitMode>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	22ff      	movs	r2, #255	; 0xff
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2204      	movs	r2, #4
 8005806:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e040      	b.n	8005894 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800581c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005820:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005830:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6899      	ldr	r1, [r3, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005858:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f8be 	bl	80059dc <HAL_RTC_WaitForSynchro>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2204      	movs	r2, #4
 8005872:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e00a      	b.n	8005894 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005892:	2300      	movs	r3, #0
  }
}
 8005894:	4618      	mov	r0, r3
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd90      	pop	{r4, r7, pc}

0800589c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	7f1b      	ldrb	r3, [r3, #28]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_RTC_SetDate+0x1c>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e08d      	b.n	80059d4 <HAL_RTC_SetDate+0x138>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2202      	movs	r2, #2
 80058c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10e      	bne.n	80058e8 <HAL_RTC_SetDate+0x4c>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	f023 0310 	bic.w	r3, r3, #16
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	330a      	adds	r3, #10
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11c      	bne.n	8005928 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	78db      	ldrb	r3, [r3, #3]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f8c6 	bl	8005a84 <RTC_ByteToBcd2>
 80058f8:	4603      	mov	r3, r0
 80058fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f8bf 	bl	8005a84 <RTC_ByteToBcd2>
 8005906:	4603      	mov	r3, r0
 8005908:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800590a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	789b      	ldrb	r3, [r3, #2]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f8b7 	bl	8005a84 <RTC_ByteToBcd2>
 8005916:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005918:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e00e      	b.n	8005946 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005934:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800593a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22ca      	movs	r2, #202	; 0xca
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2253      	movs	r2, #83	; 0x53
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f868 	bl	8005a2c <RTC_EnterInitMode>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	22ff      	movs	r2, #255	; 0xff
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2204      	movs	r2, #4
 800596e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e02c      	b.n	80059d4 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005984:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005988:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005998:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f81e 	bl	80059dc <HAL_RTC_WaitForSynchro>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	22ff      	movs	r2, #255	; 0xff
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2204      	movs	r2, #4
 80059b2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e00a      	b.n	80059d4 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	22ff      	movs	r2, #255	; 0xff
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}

080059dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059f8:	f7fc f9fa 	bl	8001df0 <HAL_GetTick>
 80059fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059fe:	e009      	b.n	8005a14 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a00:	f7fc f9f6 	bl	8001df0 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0e:	d901      	bls.n	8005a14 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e007      	b.n	8005a24 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0ee      	beq.n	8005a00 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d119      	bne.n	8005a7a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a50:	f7fc f9ce 	bl	8001df0 <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a56:	e009      	b.n	8005a6c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a58:	f7fc f9ca 	bl	8001df0 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a66:	d901      	bls.n	8005a6c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e007      	b.n	8005a7c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ee      	beq.n	8005a58 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8005a92:	e005      	b.n	8005aa0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	3b0a      	subs	r3, #10
 8005a9e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	2b09      	cmp	r3, #9
 8005aa4:	d8f6      	bhi.n	8005a94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e022      	b.n	8005b16 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fb fb08 	bl	80010f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2203      	movs	r2, #3
 8005aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f815 	bl	8005b20 <HAL_SD_InitCard>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e00a      	b.n	8005b16 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b08e      	sub	sp, #56	; 0x38
 8005b24:	af04      	add	r7, sp, #16
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005b3c:	2376      	movs	r3, #118	; 0x76
 8005b3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681d      	ldr	r5, [r3, #0]
 8005b44:	466c      	mov	r4, sp
 8005b46:	f107 0314 	add.w	r3, r7, #20
 8005b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b52:	f107 0308 	add.w	r3, r7, #8
 8005b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f002 ff77 	bl	8008a4c <SDIO_Init>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e04c      	b.n	8005c0a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <HAL_SD_InitCard+0xf4>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 ffac 	bl	8008ad8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <HAL_SD_InitCard+0xf4>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 ff04 	bl	8006994 <SD_PowerON>
 8005b8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e02e      	b.n	8005c0a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fe23 	bl	80067f8 <SD_InitCard>
 8005bb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e01b      	b.n	8005c0a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 f80a 	bl	8008bf4 <SDMMC_CmdBlockLength>
 8005be0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00f      	beq.n	8005c08 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <HAL_SD_InitCard+0xf8>)
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bdb0      	pop	{r4, r5, r7, pc}
 8005c12:	bf00      	nop
 8005c14:	422580a0 	.word	0x422580a0
 8005c18:	004005ff 	.word	0x004005ff

08005c1c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b092      	sub	sp, #72	; 0x48
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c2a:	f7fc f8e1 	bl	8001df0 <HAL_GetTick>
 8005c2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e1bd      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	f040 81b0 	bne.w	8005fbc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d907      	bls.n	8005c80 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e1a4      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d002      	beq.n	8005c9e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	025b      	lsls	r3, r3, #9
 8005c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	025b      	lsls	r3, r3, #9
 8005ca8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005caa:	2390      	movs	r3, #144	; 0x90
 8005cac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f107 0214 	add.w	r2, r7, #20
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f002 ff6a 	bl	8008b9e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d90a      	bls.n	8005ce6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f002 ffcd 	bl	8008c7c <SDMMC_CmdReadMultiBlock>
 8005ce2:	6478      	str	r0, [r7, #68]	; 0x44
 8005ce4:	e009      	b.n	8005cfa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f002 ffa0 	bl	8008c38 <SDMMC_CmdReadSingleBlock>
 8005cf8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d012      	beq.n	8005d26 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a7a      	ldr	r2, [pc, #488]	; (8005ef0 <HAL_SD_ReadBlocks+0x2d4>)
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e151      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d2a:	e061      	b.n	8005df0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d03c      	beq.n	8005db4 <HAL_SD_ReadBlocks+0x198>
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d039      	beq.n	8005db4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	643b      	str	r3, [r7, #64]	; 0x40
 8005d44:	e033      	b.n	8005dae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f002 fea8 	bl	8008aa0 <SDIO_ReadFIFO>
 8005d50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d62:	3b01      	subs	r3, #1
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	3301      	adds	r3, #1
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	3301      	adds	r3, #1
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	0e1b      	lsrs	r3, r3, #24
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9e:	3301      	adds	r3, #1
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da4:	3b01      	subs	r3, #1
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	3301      	adds	r3, #1
 8005dac:	643b      	str	r3, [r7, #64]	; 0x40
 8005dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db0:	2b07      	cmp	r3, #7
 8005db2:	d9c8      	bls.n	8005d46 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005db4:	f7fc f81c 	bl	8001df0 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d902      	bls.n	8005dca <HAL_SD_ReadBlocks+0x1ae>
 8005dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d112      	bne.n	8005df0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a48      	ldr	r2, [pc, #288]	; (8005ef0 <HAL_SD_ReadBlocks+0x2d4>)
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e0ec      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	f240 332a 	movw	r3, #810	; 0x32a
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d095      	beq.n	8005d2c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d022      	beq.n	8005e54 <HAL_SD_ReadBlocks+0x238>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d91f      	bls.n	8005e54 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d01b      	beq.n	8005e54 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 ff91 	bl	8008d48 <SDMMC_CmdStopTransfer>
 8005e26:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d012      	beq.n	8005e54 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_SD_ReadBlocks+0x2d4>)
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0ba      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d012      	beq.n	8005e88 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_SD_ReadBlocks+0x2d4>)
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	f043 0208 	orr.w	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0a0      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d012      	beq.n	8005ebc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_SD_ReadBlocks+0x2d4>)
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	f043 0202 	orr.w	r2, r3, #2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e086      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d063      	beq.n	8005f92 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <HAL_SD_ReadBlocks+0x2d4>)
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e06c      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
 8005ef0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f002 fdd1 	bl	8008aa0 <SDIO_ReadFIFO>
 8005efe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f10:	3b01      	subs	r3, #1
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f20:	3301      	adds	r3, #1
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	3b01      	subs	r3, #1
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	3301      	adds	r3, #1
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	0e1b      	lsrs	r3, r3, #24
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f52:	3b01      	subs	r3, #1
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f56:	f7fb ff4b 	bl	8001df0 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d902      	bls.n	8005f6c <HAL_SD_ReadBlocks+0x350>
 8005f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d112      	bne.n	8005f92 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a18      	ldr	r2, [pc, #96]	; (8005fd4 <HAL_SD_ReadBlocks+0x3b8>)
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e01b      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_SD_ReadBlocks+0x38a>
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1a6      	bne.n	8005ef4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e006      	b.n	8005fca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3748      	adds	r7, #72	; 0x48
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	004005ff 	.word	0x004005ff

08005fd8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b092      	sub	sp, #72	; 0x48
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fe6:	f7fb ff03 	bl	8001df0 <HAL_GetTick>
 8005fea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e166      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b01      	cmp	r3, #1
 8006014:	f040 8159 	bne.w	80062ca <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800601e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	429a      	cmp	r2, r3
 800602a:	d907      	bls.n	800603c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e14d      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2203      	movs	r2, #3
 8006040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2200      	movs	r2, #0
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	2b01      	cmp	r3, #1
 8006052:	d002      	beq.n	800605a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	025b      	lsls	r3, r3, #9
 8006058:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	025b      	lsls	r3, r3, #9
 8006064:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006066:	2390      	movs	r3, #144	; 0x90
 8006068:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800606a:	2300      	movs	r3, #0
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800606e:	2300      	movs	r3, #0
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006072:	2301      	movs	r3, #1
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f107 0218 	add.w	r2, r7, #24
 800607e:	4611      	mov	r1, r2
 8006080:	4618      	mov	r0, r3
 8006082:	f002 fd8c 	bl	8008b9e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d90a      	bls.n	80060a2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006098:	4618      	mov	r0, r3
 800609a:	f002 fe33 	bl	8008d04 <SDMMC_CmdWriteMultiBlock>
 800609e:	6478      	str	r0, [r7, #68]	; 0x44
 80060a0:	e009      	b.n	80060b6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2210      	movs	r2, #16
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ae:	4618      	mov	r0, r3
 80060b0:	f002 fe06 	bl	8008cc0 <SDMMC_CmdWriteSingleBlock>
 80060b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80060b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d012      	beq.n	80060e2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a87      	ldr	r2, [pc, #540]	; (80062e0 <HAL_SD_WriteBlocks+0x308>)
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e0fa      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80060e6:	e065      	b.n	80061b4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d040      	beq.n	8006178 <HAL_SD_WriteBlocks+0x1a0>
 80060f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d03d      	beq.n	8006178 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006100:	e037      	b.n	8006172 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610a:	3301      	adds	r3, #1
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006110:	3b01      	subs	r3, #1
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	021a      	lsls	r2, r3, #8
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	3301      	adds	r3, #1
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	3b01      	subs	r3, #1
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	041a      	lsls	r2, r3, #16
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	3301      	adds	r3, #1
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	3b01      	subs	r3, #1
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	061a      	lsls	r2, r3, #24
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	3301      	adds	r3, #1
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006158:	3b01      	subs	r3, #1
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f107 0214 	add.w	r2, r7, #20
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f002 fca6 	bl	8008ab8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	3301      	adds	r3, #1
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006174:	2b07      	cmp	r3, #7
 8006176:	d9c4      	bls.n	8006102 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006178:	f7fb fe3a 	bl	8001df0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006184:	429a      	cmp	r2, r3
 8006186:	d902      	bls.n	800618e <HAL_SD_WriteBlocks+0x1b6>
 8006188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618a:	2b00      	cmp	r3, #0
 800618c:	d112      	bne.n	80061b4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a53      	ldr	r2, [pc, #332]	; (80062e0 <HAL_SD_WriteBlocks+0x308>)
 8006194:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e091      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ba:	f240 331a 	movw	r3, #794	; 0x31a
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d091      	beq.n	80060e8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d022      	beq.n	8006218 <HAL_SD_WriteBlocks+0x240>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d91f      	bls.n	8006218 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d01b      	beq.n	8006218 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f002 fdaf 	bl	8008d48 <SDMMC_CmdStopTransfer>
 80061ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d012      	beq.n	8006218 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a3a      	ldr	r2, [pc, #232]	; (80062e0 <HAL_SD_WriteBlocks+0x308>)
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e05f      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d012      	beq.n	800624c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2d      	ldr	r2, [pc, #180]	; (80062e0 <HAL_SD_WriteBlocks+0x308>)
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	f043 0208 	orr.w	r2, r3, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e045      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d012      	beq.n	8006280 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <HAL_SD_WriteBlocks+0x308>)
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	f043 0202 	orr.w	r2, r3, #2
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e02b      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <HAL_SD_WriteBlocks+0x308>)
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	f043 0210 	orr.w	r2, r3, #16
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e011      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e006      	b.n	80062d8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
  }
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3748      	adds	r7, #72	; 0x48
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	004005ff 	.word	0x004005ff

080062e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f2:	0f9b      	lsrs	r3, r3, #30
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fe:	0e9b      	lsrs	r3, r3, #26
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	b2da      	uxtb	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006310:	0e1b      	lsrs	r3, r3, #24
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	b2da      	uxtb	r2, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	b2da      	uxtb	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	b2da      	uxtb	r2, r3
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633a:	b2da      	uxtb	r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006344:	0d1b      	lsrs	r3, r3, #20
 8006346:	b29a      	uxth	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	b2da      	uxtb	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006362:	0bdb      	lsrs	r3, r3, #15
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	0b9b      	lsrs	r3, r3, #14
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006386:	0b5b      	lsrs	r3, r3, #13
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	b2da      	uxtb	r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006398:	0b1b      	lsrs	r3, r3, #12
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d163      	bne.n	800647c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b8:	009a      	lsls	r2, r3, #2
 80063ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063be:	4013      	ands	r3, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063c4:	0f92      	lsrs	r2, r2, #30
 80063c6:	431a      	orrs	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d0:	0edb      	lsrs	r3, r3, #27
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e2:	0e1b      	lsrs	r3, r3, #24
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f4:	0d5b      	lsrs	r3, r3, #21
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006406:	0c9b      	lsrs	r3, r3, #18
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	b2da      	uxtb	r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006418:	0bdb      	lsrs	r3, r3, #15
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	b2da      	uxtb	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	7e1b      	ldrb	r3, [r3, #24]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	3302      	adds	r3, #2
 800643c:	2201      	movs	r2, #1
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006446:	fb03 f202 	mul.w	r2, r3, r2
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	7a1b      	ldrb	r3, [r3, #8]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	2201      	movs	r2, #1
 800645a:	409a      	lsls	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006468:	0a52      	lsrs	r2, r2, #9
 800646a:	fb03 f202 	mul.w	r2, r3, r2
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006478:	661a      	str	r2, [r3, #96]	; 0x60
 800647a:	e031      	b.n	80064e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006480:	2b01      	cmp	r3, #1
 8006482:	d11d      	bne.n	80064c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	431a      	orrs	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	3301      	adds	r3, #1
 80064a0:	029a      	lsls	r2, r3, #10
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60
 80064be:	e00f      	b.n	80064e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a58      	ldr	r2, [pc, #352]	; (8006628 <HAL_SD_GetCardCSD+0x344>)
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e09d      	b.n	800661c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e4:	0b9b      	lsrs	r3, r3, #14
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f6:	09db      	lsrs	r3, r3, #7
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650e:	b2da      	uxtb	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	0fdb      	lsrs	r3, r3, #31
 800651a:	b2da      	uxtb	r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006524:	0f5b      	lsrs	r3, r3, #29
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	b2da      	uxtb	r2, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	0e9b      	lsrs	r3, r3, #26
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	0d9b      	lsrs	r3, r3, #22
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	b2da      	uxtb	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	0d5b      	lsrs	r3, r3, #21
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006576:	0c1b      	lsrs	r3, r3, #16
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	0bdb      	lsrs	r3, r3, #15
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	0b9b      	lsrs	r3, r3, #14
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	0b5b      	lsrs	r3, r3, #13
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	0b1b      	lsrs	r3, r3, #12
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	0a9b      	lsrs	r3, r3, #10
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660a:	b2da      	uxtb	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	004005ff 	.word	0x004005ff

0800662c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
	...

08006684 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006684:	b5b0      	push	{r4, r5, r7, lr}
 8006686:	b08e      	sub	sp, #56	; 0x38
 8006688:	af04      	add	r7, sp, #16
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2203      	movs	r2, #3
 8006698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d02e      	beq.n	8006702 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066aa:	d106      	bne.n	80066ba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
 80066b8:	e029      	b.n	800670e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c0:	d10a      	bne.n	80066d8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa1c 	bl	8006b00 <SD_WideBus_Enable>
 80066c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
 80066d6:	e01a      	b.n	800670e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa59 	bl	8006b96 <SD_WideBus_Disable>
 80066e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
 80066f2:	e00c      	b.n	800670e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006700:	e005      	b.n	800670e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800672c:	e01f      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681d      	ldr	r5, [r3, #0]
 8006754:	466c      	mov	r4, sp
 8006756:	f107 0314 	add.w	r3, r7, #20
 800675a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800675e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006768:	4628      	mov	r0, r5
 800676a:	f002 f96f 	bl	8008a4c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006776:	4618      	mov	r0, r3
 8006778:	f002 fa3c 	bl	8008bf4 <SDMMC_CmdBlockLength>
 800677c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80067a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3728      	adds	r7, #40	; 0x28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bdb0      	pop	{r4, r5, r7, pc}
 80067b2:	bf00      	nop
 80067b4:	004005ff 	.word	0x004005ff

080067b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80067c4:	f107 030c 	add.w	r3, r7, #12
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f970 	bl	8006ab0 <SD_SendStatus>
 80067d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	0a5b      	lsrs	r3, r3, #9
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80067ee:	693b      	ldr	r3, [r7, #16]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067f8:	b5b0      	push	{r4, r5, r7, lr}
 80067fa:	b094      	sub	sp, #80	; 0x50
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f002 f974 	bl	8008af6 <SDIO_GetPowerState>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006814:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006818:	e0b8      	b.n	800698c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	2b03      	cmp	r3, #3
 8006820:	d02f      	beq.n	8006882 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f002 fb98 	bl	8008f5c <SDMMC_CmdSendCID>
 800682c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800682e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <SD_InitCard+0x40>
    {
      return errorstate;
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	e0a9      	b.n	800698c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f002 f99b 	bl	8008b7a <SDIO_GetResponse>
 8006844:	4602      	mov	r2, r0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2104      	movs	r1, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f002 f992 	bl	8008b7a <SDIO_GetResponse>
 8006856:	4602      	mov	r2, r0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2108      	movs	r1, #8
 8006862:	4618      	mov	r0, r3
 8006864:	f002 f989 	bl	8008b7a <SDIO_GetResponse>
 8006868:	4602      	mov	r2, r0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	210c      	movs	r1, #12
 8006874:	4618      	mov	r0, r3
 8006876:	f002 f980 	bl	8008b7a <SDIO_GetResponse>
 800687a:	4602      	mov	r2, r0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	2b03      	cmp	r3, #3
 8006888:	d00d      	beq.n	80068a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f107 020e 	add.w	r2, r7, #14
 8006892:	4611      	mov	r1, r2
 8006894:	4618      	mov	r0, r3
 8006896:	f002 fb9e 	bl	8008fd6 <SDMMC_CmdSetRelAdd>
 800689a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800689c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	e072      	b.n	800698c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d036      	beq.n	800691c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f002 fb68 	bl	8008f98 <SDMMC_CmdSendCSD>
 80068c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	e05b      	b.n	800698c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 f94d 	bl	8008b7a <SDIO_GetResponse>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2104      	movs	r1, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f002 f944 	bl	8008b7a <SDIO_GetResponse>
 80068f2:	4602      	mov	r2, r0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2108      	movs	r1, #8
 80068fe:	4618      	mov	r0, r3
 8006900:	f002 f93b 	bl	8008b7a <SDIO_GetResponse>
 8006904:	4602      	mov	r2, r0
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	210c      	movs	r1, #12
 8006910:	4618      	mov	r0, r3
 8006912:	f002 f932 	bl	8008b7a <SDIO_GetResponse>
 8006916:	4602      	mov	r2, r0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2104      	movs	r1, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f002 f929 	bl	8008b7a <SDIO_GetResponse>
 8006928:	4603      	mov	r3, r0
 800692a:	0d1a      	lsrs	r2, r3, #20
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006930:	f107 0310 	add.w	r3, r7, #16
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fcd4 	bl	80062e4 <HAL_SD_GetCardCSD>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006946:	e021      	b.n	800698c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	2200      	movs	r2, #0
 8006954:	461c      	mov	r4, r3
 8006956:	4615      	mov	r5, r2
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	4608      	mov	r0, r1
 800695e:	f002 fa15 	bl	8008d8c <SDMMC_CmdSelDesel>
 8006962:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <SD_InitCard+0x176>
  {
    return errorstate;
 800696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696c:	e00e      	b.n	800698c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681d      	ldr	r5, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	466c      	mov	r4, sp
 8006976:	f103 0210 	add.w	r2, r3, #16
 800697a:	ca07      	ldmia	r2, {r0, r1, r2}
 800697c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006980:	3304      	adds	r3, #4
 8006982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006984:	4628      	mov	r0, r5
 8006986:	f002 f861 	bl	8008a4c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3740      	adds	r7, #64	; 0x40
 8006990:	46bd      	mov	sp, r7
 8006992:	bdb0      	pop	{r4, r5, r7, pc}

08006994 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fa10 	bl	8008dd2 <SDMMC_CmdGoIdleState>
 80069b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <SD_PowerON+0x2a>
  {
    return errorstate;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	e072      	b.n	8006aa4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 fa23 	bl	8008e0e <SDMMC_CmdOperCond>
 80069c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00d      	beq.n	80069ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f002 f9f9 	bl	8008dd2 <SDMMC_CmdGoIdleState>
 80069e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	e05b      	b.n	8006aa4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d137      	bne.n	8006a6a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 fa23 	bl	8008e4c <SDMMC_CmdAppCommand>
 8006a06:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d02d      	beq.n	8006a6a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a12:	e047      	b.n	8006aa4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f002 fa16 	bl	8008e4c <SDMMC_CmdAppCommand>
 8006a20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <SD_PowerON+0x98>
    {
      return errorstate;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	e03b      	b.n	8006aa4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	491e      	ldr	r1, [pc, #120]	; (8006aac <SD_PowerON+0x118>)
 8006a32:	4618      	mov	r0, r3
 8006a34:	f002 fa2c 	bl	8008e90 <SDMMC_CmdAppOperCommand>
 8006a38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a44:	e02e      	b.n	8006aa4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f002 f894 	bl	8008b7a <SDIO_GetResponse>
 8006a52:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	0fdb      	lsrs	r3, r3, #31
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <SD_PowerON+0xcc>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <SD_PowerON+0xce>
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]

    count++;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d802      	bhi.n	8006a7a <SD_PowerON+0xe6>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0cc      	beq.n	8006a14 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d902      	bls.n	8006a8a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a88:	e00c      	b.n	8006aa4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44
 8006a9a:	e002      	b.n	8006aa2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	c1100000 	.word	0xc1100000

08006ab0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ac4:	e018      	b.n	8006af8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f002 faa0 	bl	8009018 <SDMMC_CmdSendStatus>
 8006ad8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	e009      	b.n	8006af8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 f845 	bl	8008b7a <SDIO_GetResponse>
 8006af0:	4602      	mov	r2, r0
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f002 f82f 	bl	8008b7a <SDIO_GetResponse>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b26:	d102      	bne.n	8006b2e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b2c:	e02f      	b.n	8006b8e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b2e:	f107 030c 	add.w	r3, r7, #12
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f879 	bl	8006c2c <SD_FindSCR>
 8006b3a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	e023      	b.n	8006b8e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01c      	beq.n	8006b8a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f002 f975 	bl	8008e4c <SDMMC_CmdAppCommand>
 8006b62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	e00f      	b.n	8006b8e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2102      	movs	r1, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 f9ae 	bl	8008ed6 <SDMMC_CmdBusWidth>
 8006b7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	e003      	b.n	8006b8e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e001      	b.n	8006b8e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 ffe4 	bl	8008b7a <SDIO_GetResponse>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bbc:	d102      	bne.n	8006bc4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006bbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bc2:	e02f      	b.n	8006c24 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f82e 	bl	8006c2c <SD_FindSCR>
 8006bd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	e023      	b.n	8006c24 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01c      	beq.n	8006c20 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f002 f92a 	bl	8008e4c <SDMMC_CmdAppCommand>
 8006bf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	e00f      	b.n	8006c24 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 f963 	bl	8008ed6 <SDMMC_CmdBusWidth>
 8006c10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	e003      	b.n	8006c24 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e001      	b.n	8006c24 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b08f      	sub	sp, #60	; 0x3c
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c36:	f7fb f8db 	bl	8001df0 <HAL_GetTick>
 8006c3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006c40:	2300      	movs	r3, #0
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2108      	movs	r1, #8
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 ffce 	bl	8008bf4 <SDMMC_CmdBlockLength>
 8006c58:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	e0b2      	b.n	8006dca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4610      	mov	r0, r2
 8006c72:	f002 f8eb 	bl	8008e4c <SDMMC_CmdAppCommand>
 8006c76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	e0a3      	b.n	8006dca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006c88:	2308      	movs	r3, #8
 8006c8a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006c8c:	2330      	movs	r3, #48	; 0x30
 8006c8e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c90:	2302      	movs	r3, #2
 8006c92:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f107 0210 	add.w	r2, r7, #16
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 ff79 	bl	8008b9e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f002 f932 	bl	8008f1a <SDMMC_CmdSendSCR>
 8006cb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d02a      	beq.n	8006d14 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	e083      	b.n	8006dca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00f      	beq.n	8006cf0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	f107 0208 	add.w	r2, r7, #8
 8006cdc:	18d4      	adds	r4, r2, r3
 8006cde:	4608      	mov	r0, r1
 8006ce0:	f001 fede 	bl	8008aa0 <SDIO_ReadFIFO>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	6023      	str	r3, [r4, #0]
      index++;
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	3301      	adds	r3, #1
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
 8006cee:	e006      	b.n	8006cfe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d012      	beq.n	8006d24 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cfe:	f7fb f877 	bl	8001df0 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d102      	bne.n	8006d14 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d12:	e05a      	b.n	8006dca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0cf      	beq.n	8006cc2 <SD_FindSCR+0x96>
 8006d22:	e000      	b.n	8006d26 <SD_FindSCR+0xfa>
      break;
 8006d24:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2208      	movs	r2, #8
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	e044      	b.n	8006dca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2202      	movs	r2, #2
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d56:	2302      	movs	r3, #2
 8006d58:	e037      	b.n	8006dca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006d70:	2320      	movs	r3, #32
 8006d72:	e02a      	b.n	8006dca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	061a      	lsls	r2, r3, #24
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	0a1b      	lsrs	r3, r3, #8
 8006d90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	0e1b      	lsrs	r3, r3, #24
 8006d9a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	601a      	str	r2, [r3, #0]
    scr++;
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	3304      	adds	r3, #4
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	061a      	lsls	r2, r3, #24
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006db2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006dbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	0e1b      	lsrs	r3, r3, #24
 8006dc2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	373c      	adds	r7, #60	; 0x3c
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}

08006dd2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e07b      	b.n	8006edc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d108      	bne.n	8006dfe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df4:	d009      	beq.n	8006e0a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	61da      	str	r2, [r3, #28]
 8006dfc:	e005      	b.n	8006e0a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fa fa83 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8e:	ea42 0103 	orr.w	r1, r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f003 0104 	and.w	r1, r3, #4
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	f003 0210 	and.w	r2, r3, #16
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e01a      	b.n	8006f2c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fa fb46 	bl	80015a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_SPI_Transmit_DMA+0x20>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e09b      	b.n	800708c <HAL_SPI_Transmit_DMA+0x158>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d002      	beq.n	8006f6e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f6c:	e089      	b.n	8007082 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_SPI_Transmit_DMA+0x46>
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f7e:	e080      	b.n	8007082 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2203      	movs	r2, #3
 8006f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fe6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fec:	4a29      	ldr	r2, [pc, #164]	; (8007094 <HAL_SPI_Transmit_DMA+0x160>)
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <HAL_SPI_Transmit_DMA+0x164>)
 8006ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <HAL_SPI_Transmit_DMA+0x168>)
 8006ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007004:	2200      	movs	r2, #0
 8007006:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	4619      	mov	r1, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007020:	f7fb fc70 	bl	8002904 <HAL_DMA_Start_IT>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	f043 0210 	orr.w	r2, r3, #16
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007042:	e01e      	b.n	8007082 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d007      	beq.n	8007062 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007060:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0220 	orr.w	r2, r2, #32
 8007070:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0202 	orr.w	r2, r2, #2
 8007080:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	0800716d 	.word	0x0800716d
 8007098:	080070c5 	.word	0x080070c5
 800709c:	08007189 	.word	0x08007189

080070a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr

080070b2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070d2:	f7fa fe8d 	bl	8001df0 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e6:	d03b      	beq.n	8007160 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0220 	bic.w	r2, r2, #32
 80070f6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0202 	bic.w	r2, r2, #2
 8007106:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	2164      	movs	r1, #100	; 0x64
 800710c:	6978      	ldr	r0, [r7, #20]
 800710e:	f000 f8e3 	bl	80072d8 <SPI_EndRxTxTransaction>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	f043 0220 	orr.w	r2, r3, #32
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007158:	6978      	ldr	r0, [r7, #20]
 800715a:	f7ff ffaa 	bl	80070b2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800715e:	e002      	b.n	8007166 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007160:	6978      	ldr	r0, [r7, #20]
 8007162:	f005 ff15 	bl	800cf90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff ff90 	bl	80070a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0203 	bic.w	r2, r2, #3
 80071a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f043 0210 	orr.w	r2, r3, #16
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff ff79 	bl	80070b2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	4613      	mov	r3, r2
 80071d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071d8:	f7fa fe0a 	bl	8001df0 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4413      	add	r3, r2
 80071e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071e8:	f7fa fe02 	bl	8001df0 <HAL_GetTick>
 80071ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ee:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	015b      	lsls	r3, r3, #5
 80071f4:	0d1b      	lsrs	r3, r3, #20
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	fb02 f303 	mul.w	r3, r2, r3
 80071fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071fe:	e054      	b.n	80072aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d050      	beq.n	80072aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007208:	f7fa fdf2 	bl	8001df0 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	429a      	cmp	r2, r3
 8007216:	d902      	bls.n	800721e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d13d      	bne.n	800729a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800722c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007236:	d111      	bne.n	800725c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	d004      	beq.n	800724c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724a:	d107      	bne.n	800725c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800725a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007264:	d10f      	bne.n	8007286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e017      	b.n	80072ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4013      	ands	r3, r2
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	bf0c      	ite	eq
 80072ba:	2301      	moveq	r3, #1
 80072bc:	2300      	movne	r3, #0
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d19b      	bne.n	8007200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000040 	.word	0x20000040

080072d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff ff6a 	bl	80071c8 <SPI_WaitFlagStateUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	f043 0220 	orr.w	r2, r3, #32
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e000      	b.n	800730c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e041      	b.n	80073aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fa fb3e 	bl	80019bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f000 faea 	bl	800792c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d109      	bne.n	80073d8 <HAL_TIM_PWM_Start+0x24>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	bf14      	ite	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	2300      	moveq	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	e022      	b.n	800741e <HAL_TIM_PWM_Start+0x6a>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d109      	bne.n	80073f2 <HAL_TIM_PWM_Start+0x3e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	bf14      	ite	ne
 80073ea:	2301      	movne	r3, #1
 80073ec:	2300      	moveq	r3, #0
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	e015      	b.n	800741e <HAL_TIM_PWM_Start+0x6a>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d109      	bne.n	800740c <HAL_TIM_PWM_Start+0x58>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	bf14      	ite	ne
 8007404:	2301      	movne	r3, #1
 8007406:	2300      	moveq	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	e008      	b.n	800741e <HAL_TIM_PWM_Start+0x6a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e07c      	b.n	8007520 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <HAL_TIM_PWM_Start+0x82>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007434:	e013      	b.n	800745e <HAL_TIM_PWM_Start+0xaa>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b04      	cmp	r3, #4
 800743a:	d104      	bne.n	8007446 <HAL_TIM_PWM_Start+0x92>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007444:	e00b      	b.n	800745e <HAL_TIM_PWM_Start+0xaa>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d104      	bne.n	8007456 <HAL_TIM_PWM_Start+0xa2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007454:	e003      	b.n	800745e <HAL_TIM_PWM_Start+0xaa>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2201      	movs	r2, #1
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fcaa 	bl	8007dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2d      	ldr	r2, [pc, #180]	; (8007528 <HAL_TIM_PWM_Start+0x174>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <HAL_TIM_PWM_Start+0xcc>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2c      	ldr	r2, [pc, #176]	; (800752c <HAL_TIM_PWM_Start+0x178>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <HAL_TIM_PWM_Start+0xd0>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <HAL_TIM_PWM_Start+0xd2>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a22      	ldr	r2, [pc, #136]	; (8007528 <HAL_TIM_PWM_Start+0x174>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d022      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ac:	d01d      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1f      	ldr	r2, [pc, #124]	; (8007530 <HAL_TIM_PWM_Start+0x17c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d018      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <HAL_TIM_PWM_Start+0x180>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d013      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1c      	ldr	r2, [pc, #112]	; (8007538 <HAL_TIM_PWM_Start+0x184>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a16      	ldr	r2, [pc, #88]	; (800752c <HAL_TIM_PWM_Start+0x178>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a18      	ldr	r2, [pc, #96]	; (800753c <HAL_TIM_PWM_Start+0x188>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <HAL_TIM_PWM_Start+0x136>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a16      	ldr	r2, [pc, #88]	; (8007540 <HAL_TIM_PWM_Start+0x18c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d111      	bne.n	800750e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b06      	cmp	r3, #6
 80074fa:	d010      	beq.n	800751e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750c:	e007      	b.n	800751e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0201 	orr.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40014000 	.word	0x40014000
 8007540:	40001800 	.word	0x40001800

08007544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b02      	cmp	r3, #2
 8007558:	d122      	bne.n	80075a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b02      	cmp	r3, #2
 8007566:	d11b      	bne.n	80075a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0202 	mvn.w	r2, #2
 8007570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9b4 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 800758c:	e005      	b.n	800759a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f9a7 	bl	80078e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9b6 	bl	8007906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d122      	bne.n	80075f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d11b      	bne.n	80075f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f06f 0204 	mvn.w	r2, #4
 80075c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f98a 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 80075e0:	e005      	b.n	80075ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f97d 	bl	80078e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f98c 	bl	8007906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d122      	bne.n	8007648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b08      	cmp	r3, #8
 800760e:	d11b      	bne.n	8007648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0208 	mvn.w	r2, #8
 8007618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2204      	movs	r2, #4
 800761e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f960 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f953 	bl	80078e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f962 	bl	8007906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0310 	and.w	r3, r3, #16
 8007652:	2b10      	cmp	r3, #16
 8007654:	d122      	bne.n	800769c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b10      	cmp	r3, #16
 8007662:	d11b      	bne.n	800769c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0210 	mvn.w	r2, #16
 800766c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2208      	movs	r2, #8
 8007672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f936 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 8007688:	e005      	b.n	8007696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f929 	bl	80078e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f938 	bl	8007906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d10e      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d107      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0201 	mvn.w	r2, #1
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f904 	bl	80078d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d10e      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e0:	2b80      	cmp	r3, #128	; 0x80
 80076e2:	d107      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc0d 	bl	8007f0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	d10e      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	d107      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8fc 	bl	8007918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b20      	cmp	r3, #32
 800772c:	d10e      	bne.n	800774c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b20      	cmp	r3, #32
 800773a:	d107      	bne.n	800774c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0220 	mvn.w	r2, #32
 8007744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fbd8 	bl	8007efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800776a:	2302      	movs	r3, #2
 800776c:	e0ac      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b0c      	cmp	r3, #12
 800777a:	f200 809f 	bhi.w	80078bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077b9 	.word	0x080077b9
 8007788:	080078bd 	.word	0x080078bd
 800778c:	080078bd 	.word	0x080078bd
 8007790:	080078bd 	.word	0x080078bd
 8007794:	080077f9 	.word	0x080077f9
 8007798:	080078bd 	.word	0x080078bd
 800779c:	080078bd 	.word	0x080078bd
 80077a0:	080078bd 	.word	0x080078bd
 80077a4:	0800783b 	.word	0x0800783b
 80077a8:	080078bd 	.word	0x080078bd
 80077ac:	080078bd 	.word	0x080078bd
 80077b0:	080078bd 	.word	0x080078bd
 80077b4:	0800787b 	.word	0x0800787b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f952 	bl	8007a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0208 	orr.w	r2, r2, #8
 80077d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0204 	bic.w	r2, r2, #4
 80077e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6999      	ldr	r1, [r3, #24]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	619a      	str	r2, [r3, #24]
      break;
 80077f6:	e062      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f9a2 	bl	8007b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6999      	ldr	r1, [r3, #24]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	021a      	lsls	r2, r3, #8
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	619a      	str	r2, [r3, #24]
      break;
 8007838:	e041      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 f9f5 	bl	8007c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0208 	orr.w	r2, r2, #8
 8007854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0204 	bic.w	r2, r2, #4
 8007864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	61da      	str	r2, [r3, #28]
      break;
 8007878:	e021      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fa49 	bl	8007d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69da      	ldr	r2, [r3, #28]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69d9      	ldr	r1, [r3, #28]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	021a      	lsls	r2, r3, #8
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	61da      	str	r2, [r3, #28]
      break;
 80078ba:	e000      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80078bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr

080078e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr

08007918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr
	...

0800792c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a3f      	ldr	r2, [pc, #252]	; (8007a3c <TIM_Base_SetConfig+0x110>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794a:	d00f      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a3c      	ldr	r2, [pc, #240]	; (8007a40 <TIM_Base_SetConfig+0x114>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00b      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a3b      	ldr	r2, [pc, #236]	; (8007a44 <TIM_Base_SetConfig+0x118>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d007      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a3a      	ldr	r2, [pc, #232]	; (8007a48 <TIM_Base_SetConfig+0x11c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d003      	beq.n	800796c <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a39      	ldr	r2, [pc, #228]	; (8007a4c <TIM_Base_SetConfig+0x120>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d108      	bne.n	800797e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a2e      	ldr	r2, [pc, #184]	; (8007a3c <TIM_Base_SetConfig+0x110>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d02b      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798c:	d027      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a2b      	ldr	r2, [pc, #172]	; (8007a40 <TIM_Base_SetConfig+0x114>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d023      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <TIM_Base_SetConfig+0x118>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01f      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a29      	ldr	r2, [pc, #164]	; (8007a48 <TIM_Base_SetConfig+0x11c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d01b      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a28      	ldr	r2, [pc, #160]	; (8007a4c <TIM_Base_SetConfig+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d017      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a27      	ldr	r2, [pc, #156]	; (8007a50 <TIM_Base_SetConfig+0x124>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d013      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a26      	ldr	r2, [pc, #152]	; (8007a54 <TIM_Base_SetConfig+0x128>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00f      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a25      	ldr	r2, [pc, #148]	; (8007a58 <TIM_Base_SetConfig+0x12c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00b      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a24      	ldr	r2, [pc, #144]	; (8007a5c <TIM_Base_SetConfig+0x130>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d007      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a23      	ldr	r2, [pc, #140]	; (8007a60 <TIM_Base_SetConfig+0x134>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d003      	beq.n	80079de <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <TIM_Base_SetConfig+0x138>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d108      	bne.n	80079f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <TIM_Base_SetConfig+0x110>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_Base_SetConfig+0xf8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a0b      	ldr	r2, [pc, #44]	; (8007a4c <TIM_Base_SetConfig+0x120>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d103      	bne.n	8007a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	615a      	str	r2, [r3, #20]
}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40014400 	.word	0x40014400
 8007a58:	40014800 	.word	0x40014800
 8007a5c:	40001800 	.word	0x40001800
 8007a60:	40001c00 	.word	0x40001c00
 8007a64:	40002000 	.word	0x40002000

08007a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	f023 0201 	bic.w	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f023 0302 	bic.w	r3, r3, #2
 8007ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <TIM_OC1_SetConfig+0xd8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d003      	beq.n	8007acc <TIM_OC1_SetConfig+0x64>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <TIM_OC1_SetConfig+0xdc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d10c      	bne.n	8007ae6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f023 0308 	bic.w	r3, r3, #8
 8007ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f023 0304 	bic.w	r3, r3, #4
 8007ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a15      	ldr	r2, [pc, #84]	; (8007b40 <TIM_OC1_SetConfig+0xd8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d003      	beq.n	8007af6 <TIM_OC1_SetConfig+0x8e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <TIM_OC1_SetConfig+0xdc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d111      	bne.n	8007b1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	621a      	str	r2, [r3, #32]
}
 8007b34:	bf00      	nop
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400

08007b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0210 	bic.w	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0320 	bic.w	r3, r3, #32
 8007b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a21      	ldr	r2, [pc, #132]	; (8007c28 <TIM_OC2_SetConfig+0xe0>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC2_SetConfig+0x68>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a20      	ldr	r2, [pc, #128]	; (8007c2c <TIM_OC2_SetConfig+0xe4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10d      	bne.n	8007bcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <TIM_OC2_SetConfig+0xe0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_OC2_SetConfig+0x94>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <TIM_OC2_SetConfig+0xe4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d113      	bne.n	8007c04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007be2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40010400 	.word	0x40010400

08007c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a21      	ldr	r2, [pc, #132]	; (8007d10 <TIM_OC3_SetConfig+0xe0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC3_SetConfig+0x66>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a20      	ldr	r2, [pc, #128]	; (8007d14 <TIM_OC3_SetConfig+0xe4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10d      	bne.n	8007cb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <TIM_OC3_SetConfig+0xe0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_OC3_SetConfig+0x92>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a15      	ldr	r2, [pc, #84]	; (8007d14 <TIM_OC3_SetConfig+0xe4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d113      	bne.n	8007cea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	621a      	str	r2, [r3, #32]
}
 8007d04:	bf00      	nop
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	40010000 	.word	0x40010000
 8007d14:	40010400 	.word	0x40010400

08007d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	031b      	lsls	r3, r3, #12
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a11      	ldr	r2, [pc, #68]	; (8007db8 <TIM_OC4_SetConfig+0xa0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_OC4_SetConfig+0x68>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <TIM_OC4_SetConfig+0xa4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d109      	bne.n	8007d94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	019b      	lsls	r3, r3, #6
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40010400 	.word	0x40010400

08007dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1a      	ldr	r2, [r3, #32]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	43db      	mvns	r3, r3
 8007de2:	401a      	ands	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f003 031f 	and.w	r3, r3, #31
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	fa01 f303 	lsl.w	r3, r1, r3
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e05a      	b.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6c:	d01d      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a19      	ldr	r2, [pc, #100]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a17      	ldr	r2, [pc, #92]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a16      	ldr	r2, [pc, #88]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr
 8007ee0:	40010000 	.word	0x40010000
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	40000800 	.word	0x40000800
 8007eec:	40000c00 	.word	0x40000c00
 8007ef0:	40010400 	.word	0x40010400
 8007ef4:	40014000 	.word	0x40014000
 8007ef8:	40001800 	.word	0x40001800

08007efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bc80      	pop	{r7}
 8007f0c:	4770      	bx	lr

08007f0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e03f      	b.n	8007fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7f9 fe52 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2224      	movs	r2, #36	; 0x24
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fc87 	bl	8008878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691a      	ldr	r2, [r3, #16]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08a      	sub	sp, #40	; 0x28
 8007fbe:	af02      	add	r7, sp, #8
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	603b      	str	r3, [r7, #0]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d17c      	bne.n	80080d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <HAL_UART_Transmit+0x2c>
 8007fe0:	88fb      	ldrh	r3, [r7, #6]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e075      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_UART_Transmit+0x3e>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e06e      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2221      	movs	r2, #33	; 0x21
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800800e:	f7f9 feef 	bl	8001df0 <HAL_GetTick>
 8008012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008028:	d108      	bne.n	800803c <HAL_UART_Transmit+0x82>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	e003      	b.n	8008044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800804c:	e02a      	b.n	80080a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2200      	movs	r2, #0
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fa3a 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e036      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10b      	bne.n	8008086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800807c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3302      	adds	r3, #2
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	e007      	b.n	8008096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1cf      	bne.n	800804e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2140      	movs	r1, #64	; 0x40
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fa0a 	bl	80084d2 <UART_WaitOnFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e006      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
  }
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3720      	adds	r7, #32
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d11d      	bne.n	8008134 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_UART_Receive_IT+0x26>
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e016      	b.n	8008136 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_UART_Receive_IT+0x38>
 8008112:	2302      	movs	r3, #2
 8008114:	e00f      	b.n	8008136 <HAL_UART_Receive_IT+0x58>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008124:	88fb      	ldrh	r3, [r7, #6]
 8008126:	461a      	mov	r2, r3
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fa1b 	bl	8008566 <UART_Start_Receive_IT>
 8008130:	4603      	mov	r3, r0
 8008132:	e000      	b.n	8008136 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08a      	sub	sp, #40	; 0x28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10d      	bne.n	8008192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d008      	beq.n	8008192 <HAL_UART_IRQHandler+0x52>
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 facb 	bl	8008726 <UART_Receive_IT>
      return;
 8008190:	e17c      	b.n	800848c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80b1 	beq.w	80082fc <HAL_UART_IRQHandler+0x1bc>
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <HAL_UART_IRQHandler+0x70>
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 80a6 	beq.w	80082fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <HAL_UART_IRQHandler+0x90>
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f043 0201 	orr.w	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_UART_IRQHandler+0xb0>
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	f043 0202 	orr.w	r2, r3, #2
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <HAL_UART_IRQHandler+0xd0>
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f043 0204 	orr.w	r2, r3, #4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00f      	beq.n	800823a <HAL_UART_IRQHandler+0xfa>
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_UART_IRQHandler+0xee>
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008232:	f043 0208 	orr.w	r2, r3, #8
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 811f 	beq.w	8008482 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d007      	beq.n	800825e <HAL_UART_IRQHandler+0x11e>
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fa64 	bl	8008726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	bf0c      	ite	eq
 800826c:	2301      	moveq	r3, #1
 800826e:	2300      	movne	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <HAL_UART_IRQHandler+0x146>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d031      	beq.n	80082ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f9a6 	bl	80085d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d123      	bne.n	80082e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d013      	beq.n	80082da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b6:	4a77      	ldr	r2, [pc, #476]	; (8008494 <HAL_UART_IRQHandler+0x354>)
 80082b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fa fbe8 	bl	8002a94 <HAL_DMA_Abort_IT>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d016      	beq.n	80082f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d8:	e00e      	b.n	80082f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f8e5 	bl	80084aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e0:	e00a      	b.n	80082f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f8e1 	bl	80084aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e8:	e006      	b.n	80082f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f8dd 	bl	80084aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082f6:	e0c4      	b.n	8008482 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f8:	bf00      	nop
    return;
 80082fa:	e0c2      	b.n	8008482 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	2b01      	cmp	r3, #1
 8008302:	f040 80a2 	bne.w	800844a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 809c 	beq.w	800844a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8096 	beq.w	800844a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d14f      	bne.n	80083e2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800834c:	8a3b      	ldrh	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8099 	beq.w	8008486 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008358:	8a3a      	ldrh	r2, [r7, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	f080 8093 	bcs.w	8008486 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	8a3a      	ldrh	r2, [r7, #16]
 8008364:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008370:	d02b      	beq.n	80083ca <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008380:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0210 	bic.w	r2, r2, #16
 80083be:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fa faf5 	bl	80029b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f86e 	bl	80084bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80083e0:	e051      	b.n	8008486 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d047      	beq.n	800848a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80083fa:	8a7b      	ldrh	r3, [r7, #18]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d044      	beq.n	800848a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800840e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695a      	ldr	r2, [r3, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0201 	bic.w	r2, r2, #1
 800841e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0210 	bic.w	r2, r2, #16
 800843c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800843e:	8a7b      	ldrh	r3, [r7, #18]
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f83a 	bl	80084bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008448:	e01f      	b.n	800848a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_UART_IRQHandler+0x326>
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8fa 	bl	8008658 <UART_Transmit_IT>
    return;
 8008464:	e012      	b.n	800848c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00d      	beq.n	800848c <HAL_UART_IRQHandler+0x34c>
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d008      	beq.n	800848c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f93b 	bl	80086f6 <UART_EndTransmit_IT>
    return;
 8008480:	e004      	b.n	800848c <HAL_UART_IRQHandler+0x34c>
    return;
 8008482:	bf00      	nop
 8008484:	e002      	b.n	800848c <HAL_UART_IRQHandler+0x34c>
      return;
 8008486:	bf00      	nop
 8008488:	e000      	b.n	800848c <HAL_UART_IRQHandler+0x34c>
      return;
 800848a:	bf00      	nop
  }
}
 800848c:	3728      	adds	r7, #40	; 0x28
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	08008631 	.word	0x08008631

08008498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr

080084aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr

080084bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e2:	e02c      	b.n	800853e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d028      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <UART_WaitOnFlagUntilTimeout+0x30>
 80084f2:	f7f9 fc7d 	bl	8001df0 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d21d      	bcs.n	800853e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008510:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e00f      	b.n	800855e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4013      	ands	r3, r2
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	bf0c      	ite	eq
 800854e:	2301      	moveq	r3, #1
 8008550:	2300      	movne	r3, #0
 8008552:	b2db      	uxtb	r3, r3
 8008554:	461a      	mov	r2, r3
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	429a      	cmp	r2, r3
 800855a:	d0c3      	beq.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008566:	b480      	push	{r7}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	88fa      	ldrh	r2, [r7, #6]
 800857e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2222      	movs	r2, #34	; 0x22
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085aa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695a      	ldr	r2, [r3, #20]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0201 	orr.w	r2, r2, #1
 80085ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0220 	orr.w	r2, r2, #32
 80085ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr

080085d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0201 	bic.w	r2, r2, #1
 80085fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	2b01      	cmp	r3, #1
 8008606:	d107      	bne.n	8008618 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0210 	bic.w	r2, r2, #16
 8008616:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff ff2d 	bl	80084aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b21      	cmp	r3, #33	; 0x21
 800866a:	d13e      	bne.n	80086ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008674:	d114      	bne.n	80086a0 <UART_Transmit_IT+0x48>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d110      	bne.n	80086a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008692:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	1c9a      	adds	r2, r3, #2
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	621a      	str	r2, [r3, #32]
 800869e:	e008      	b.n	80086b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	1c59      	adds	r1, r3, #1
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	6211      	str	r1, [r2, #32]
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4619      	mov	r1, r3
 80086c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10f      	bne.n	80086e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	e000      	b.n	80086ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086ea:	2302      	movs	r3, #2
  }
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr

080086f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800870c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff febe 	bl	8008498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b086      	sub	sp, #24
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b22      	cmp	r3, #34	; 0x22
 8008738:	f040 8099 	bne.w	800886e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008744:	d117      	bne.n	8008776 <UART_Receive_IT+0x50>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d113      	bne.n	8008776 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008764:	b29a      	uxth	r2, r3
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	1c9a      	adds	r2, r3, #2
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	629a      	str	r2, [r3, #40]	; 0x28
 8008774:	e026      	b.n	80087c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800877c:	2300      	movs	r3, #0
 800877e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008788:	d007      	beq.n	800879a <UART_Receive_IT+0x74>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <UART_Receive_IT+0x82>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	e008      	b.n	80087ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	3b01      	subs	r3, #1
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4619      	mov	r1, r3
 80087d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d148      	bne.n	800886a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0220 	bic.w	r2, r2, #32
 80087e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695a      	ldr	r2, [r3, #20]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0201 	bic.w	r2, r2, #1
 8008806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	2b01      	cmp	r3, #1
 8008816:	d123      	bne.n	8008860 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0210 	bic.w	r2, r2, #16
 800882c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b10      	cmp	r3, #16
 800883a:	d10a      	bne.n	8008852 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800883c:	2300      	movs	r3, #0
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fe2f 	bl	80084bc <HAL_UARTEx_RxEventCallback>
 800885e:	e002      	b.n	8008866 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7f8 f967 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	e002      	b.n	8008870 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	e000      	b.n	8008870 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800886e:	2302      	movs	r3, #2
  }
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689a      	ldr	r2, [r3, #8]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80088b8:	f023 030c 	bic.w	r3, r3, #12
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	430b      	orrs	r3, r1
 80088c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a57      	ldr	r2, [pc, #348]	; (8008a40 <UART_SetConfig+0x1c8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <UART_SetConfig+0x78>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a56      	ldr	r2, [pc, #344]	; (8008a44 <UART_SetConfig+0x1cc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d103      	bne.n	80088f8 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088f0:	f7fc fd52 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	e002      	b.n	80088fe <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088f8:	f7fc fd2c 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80088fc:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008906:	d14c      	bne.n	80089a2 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009a      	lsls	r2, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	fbb2 f3f3 	udiv	r3, r2, r3
 800891e:	4a4a      	ldr	r2, [pc, #296]	; (8008a48 <UART_SetConfig+0x1d0>)
 8008920:	fba2 2303 	umull	r2, r3, r2, r3
 8008924:	095b      	lsrs	r3, r3, #5
 8008926:	0119      	lsls	r1, r3, #4
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	009a      	lsls	r2, r3, #2
 8008932:	441a      	add	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	fbb2 f2f3 	udiv	r2, r2, r3
 800893e:	4b42      	ldr	r3, [pc, #264]	; (8008a48 <UART_SetConfig+0x1d0>)
 8008940:	fba3 0302 	umull	r0, r3, r3, r2
 8008944:	095b      	lsrs	r3, r3, #5
 8008946:	2064      	movs	r0, #100	; 0x64
 8008948:	fb00 f303 	mul.w	r3, r0, r3
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	3332      	adds	r3, #50	; 0x32
 8008952:	4a3d      	ldr	r2, [pc, #244]	; (8008a48 <UART_SetConfig+0x1d0>)
 8008954:	fba2 2303 	umull	r2, r3, r2, r3
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008960:	4419      	add	r1, r3
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009a      	lsls	r2, r3, #2
 800896c:	441a      	add	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	fbb2 f2f3 	udiv	r2, r2, r3
 8008978:	4b33      	ldr	r3, [pc, #204]	; (8008a48 <UART_SetConfig+0x1d0>)
 800897a:	fba3 0302 	umull	r0, r3, r3, r2
 800897e:	095b      	lsrs	r3, r3, #5
 8008980:	2064      	movs	r0, #100	; 0x64
 8008982:	fb00 f303 	mul.w	r3, r0, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	3332      	adds	r3, #50	; 0x32
 800898c:	4a2e      	ldr	r2, [pc, #184]	; (8008a48 <UART_SetConfig+0x1d0>)
 800898e:	fba2 2303 	umull	r2, r3, r2, r3
 8008992:	095b      	lsrs	r3, r3, #5
 8008994:	f003 0207 	and.w	r2, r3, #7
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	440a      	add	r2, r1
 800899e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089a0:	e04a      	b.n	8008a38 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	009a      	lsls	r2, r3, #2
 80089ac:	441a      	add	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b8:	4a23      	ldr	r2, [pc, #140]	; (8008a48 <UART_SetConfig+0x1d0>)
 80089ba:	fba2 2303 	umull	r2, r3, r2, r3
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	0119      	lsls	r1, r3, #4
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	009a      	lsls	r2, r3, #2
 80089cc:	441a      	add	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80089d8:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <UART_SetConfig+0x1d0>)
 80089da:	fba3 0302 	umull	r0, r3, r3, r2
 80089de:	095b      	lsrs	r3, r3, #5
 80089e0:	2064      	movs	r0, #100	; 0x64
 80089e2:	fb00 f303 	mul.w	r3, r0, r3
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	3332      	adds	r3, #50	; 0x32
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <UART_SetConfig+0x1d0>)
 80089ee:	fba2 2303 	umull	r2, r3, r2, r3
 80089f2:	095b      	lsrs	r3, r3, #5
 80089f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089f8:	4419      	add	r1, r3
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009a      	lsls	r2, r3, #2
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a10:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <UART_SetConfig+0x1d0>)
 8008a12:	fba3 0302 	umull	r0, r3, r3, r2
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	2064      	movs	r0, #100	; 0x64
 8008a1a:	fb00 f303 	mul.w	r3, r0, r3
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	3332      	adds	r3, #50	; 0x32
 8008a24:	4a08      	ldr	r2, [pc, #32]	; (8008a48 <UART_SetConfig+0x1d0>)
 8008a26:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	f003 020f 	and.w	r2, r3, #15
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	440a      	add	r2, r1
 8008a36:	609a      	str	r2, [r3, #8]
}
 8008a38:	bf00      	nop
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40011000 	.word	0x40011000
 8008a44:	40011400 	.word	0x40011400
 8008a48:	51eb851f 	.word	0x51eb851f

08008a4c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	f107 001c 	add.w	r0, r7, #28
 8008a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008a62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008a64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008a66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008a6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008a6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008a72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008a76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	b004      	add	sp, #16
 8008a9e:	4770      	bx	lr

08008aa0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008ae6:	2002      	movs	r0, #2
 8008ae8:	f7f9 f98c 	bl	8001e04 <HAL_Delay>
  
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0303 	and.w	r3, r3, #3
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr

08008b10 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008b34:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008b3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008b4a:	f023 030f 	bic.w	r3, r3, #15
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	b2db      	uxtb	r3, r3
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr

08008b7a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3314      	adds	r3, #20
 8008b88:	461a      	mov	r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
}  
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bc80      	pop	{r7}
 8008b9c:	4770      	bx	lr

08008b9e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008bc4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008bca:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008bd0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0

}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008c02:	2310      	movs	r3, #16
 8008c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c06:	2340      	movs	r3, #64	; 0x40
 8008c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c14:	f107 0308 	add.w	r3, r7, #8
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ff78 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c24:	2110      	movs	r1, #16
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa42 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008c46:	2311      	movs	r3, #17
 8008c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c4a:	2340      	movs	r3, #64	; 0x40
 8008c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c58:	f107 0308 	add.w	r3, r7, #8
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ff56 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	2111      	movs	r1, #17
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa20 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c72:	69fb      	ldr	r3, [r7, #28]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c8a:	2312      	movs	r3, #18
 8008c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c9c:	f107 0308 	add.w	r3, r7, #8
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff ff34 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cac:	2112      	movs	r1, #18
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f9fe 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3720      	adds	r7, #32
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008cce:	2318      	movs	r3, #24
 8008cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff ff12 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	2118      	movs	r1, #24
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9dc 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008d12:	2319      	movs	r3, #25
 8008d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d16:	2340      	movs	r3, #64	; 0x40
 8008d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d24:	f107 0308 	add.w	r3, r7, #8
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fef0 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d34:	2119      	movs	r1, #25
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f9ba 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008d54:	230c      	movs	r3, #12
 8008d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fecf 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008d72:	4a05      	ldr	r2, [pc, #20]	; (8008d88 <SDMMC_CmdStopTransfer+0x40>)
 8008d74:	210c      	movs	r1, #12
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f99a 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3720      	adds	r7, #32
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	05f5e100 	.word	0x05f5e100

08008d8c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d9c:	2307      	movs	r3, #7
 8008d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008da4:	2300      	movs	r3, #0
 8008da6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dae:	f107 0310 	add.w	r3, r7, #16
 8008db2:	4619      	mov	r1, r3
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f7ff feab 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbe:	2107      	movs	r1, #7
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f975 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008dc6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3728      	adds	r7, #40	; 0x28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fe8a 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f92d 	bl	800905c <SDMMC_GetCmdError>
 8008e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e04:	69fb      	ldr	r3, [r7, #28]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b088      	sub	sp, #32
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008e16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008e1c:	2308      	movs	r3, #8
 8008e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e20:	2340      	movs	r3, #64	; 0x40
 8008e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e2e:	f107 0308 	add.w	r3, r7, #8
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fe6b 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fb20 	bl	8009480 <SDMMC_GetCmdResp7>
 8008e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e5a:	2337      	movs	r3, #55	; 0x37
 8008e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff fe4c 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7c:	2137      	movs	r1, #55	; 0x37
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f916 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e86:	69fb      	ldr	r3, [r7, #28]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ea6:	2329      	movs	r3, #41	; 0x29
 8008ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eaa:	2340      	movs	r3, #64	; 0x40
 8008eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eb8:	f107 0308 	add.w	r3, r7, #8
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fe26 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa29 	bl	800931c <SDMMC_GetCmdResp3>
 8008eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b088      	sub	sp, #32
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ee4:	2306      	movs	r3, #6
 8008ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fe07 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	2106      	movs	r1, #6
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f8d1 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f10:	69fb      	ldr	r3, [r7, #28]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b088      	sub	sp, #32
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008f26:	2333      	movs	r3, #51	; 0x33
 8008f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f2a:	2340      	movs	r3, #64	; 0x40
 8008f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fde6 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f48:	2133      	movs	r1, #51	; 0x33
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f8b0 	bl	80090b0 <SDMMC_GetCmdResp1>
 8008f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f52:	69fb      	ldr	r3, [r7, #28]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f6c:	23c0      	movs	r3, #192	; 0xc0
 8008f6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f7a:	f107 0308 	add.w	r3, r7, #8
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fdc5 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f980 	bl	800928c <SDMMC_GetCmdResp2>
 8008f8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008fa6:	2309      	movs	r3, #9
 8008fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008faa:	23c0      	movs	r3, #192	; 0xc0
 8008fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb8:	f107 0308 	add.w	r3, r7, #8
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fda6 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f961 	bl	800928c <SDMMC_GetCmdResp2>
 8008fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b088      	sub	sp, #32
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fe8:	2340      	movs	r3, #64	; 0x40
 8008fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ff6:	f107 0308 	add.w	r3, r7, #8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fd87 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	2103      	movs	r1, #3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f9c4 	bl	8009394 <SDMMC_GetCmdResp6>
 800900c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800900e:	69fb      	ldr	r3, [r7, #28]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3720      	adds	r7, #32
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009026:	230d      	movs	r3, #13
 8009028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009038:	f107 0308 	add.w	r3, r7, #8
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fd66 	bl	8008b10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009044:	f241 3288 	movw	r2, #5000	; 0x1388
 8009048:	210d      	movs	r1, #13
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f830 	bl	80090b0 <SDMMC_GetCmdResp1>
 8009050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009052:	69fb      	ldr	r3, [r7, #28]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3720      	adds	r7, #32
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009064:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <SDMMC_GetCmdError+0x4c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a10      	ldr	r2, [pc, #64]	; (80090ac <SDMMC_GetCmdError+0x50>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	0a5b      	lsrs	r3, r3, #9
 8009070:	f241 3288 	movw	r2, #5000	; 0x1388
 8009074:	fb02 f303 	mul.w	r3, r2, r3
 8009078:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	60fa      	str	r2, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009084:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009088:	e009      	b.n	800909e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f1      	beq.n	800907a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	22c5      	movs	r2, #197	; 0xc5
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr
 80090a8:	20000040 	.word	0x20000040
 80090ac:	10624dd3 	.word	0x10624dd3

080090b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	460b      	mov	r3, r1
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80090be:	4b70      	ldr	r3, [pc, #448]	; (8009280 <SDMMC_GetCmdResp1+0x1d0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a70      	ldr	r2, [pc, #448]	; (8009284 <SDMMC_GetCmdResp1+0x1d4>)
 80090c4:	fba2 2303 	umull	r2, r3, r2, r3
 80090c8:	0a5a      	lsrs	r2, r3, #9
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	fb02 f303 	mul.w	r3, r2, r3
 80090d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	1e5a      	subs	r2, r3, #1
 80090d6:	61fa      	str	r2, [r7, #28]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090e0:	e0c9      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0ef      	beq.n	80090d2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1ea      	bne.n	80090d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2204      	movs	r2, #4
 800910c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800910e:	2304      	movs	r3, #4
 8009110:	e0b1      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009124:	2301      	movs	r3, #1
 8009126:	e0a6      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	22c5      	movs	r2, #197	; 0xc5
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7ff fd17 	bl	8008b62 <SDIO_GetCommandResponse>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	4293      	cmp	r3, r2
 800913c:	d001      	beq.n	8009142 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800913e:	2301      	movs	r3, #1
 8009140:	e099      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009142:	2100      	movs	r1, #0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff fd18 	bl	8008b7a <SDIO_GetResponse>
 800914a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	4b4e      	ldr	r3, [pc, #312]	; (8009288 <SDMMC_GetCmdResp1+0x1d8>)
 8009150:	4013      	ands	r3, r2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009156:	2300      	movs	r3, #0
 8009158:	e08d      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da02      	bge.n	8009166 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009164:	e087      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009170:	2340      	movs	r3, #64	; 0x40
 8009172:	e080      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800917e:	2380      	movs	r3, #128	; 0x80
 8009180:	e079      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800918c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009190:	e071      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800919c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091a0:	e069      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80091ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b0:	e061      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091c0:	e059      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091d0:	e051      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091e0:	e049      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091f0:	e041      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009200:	e039      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800920c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009210:	e031      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800921c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009220:	e029      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800922c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009230:	e021      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800923c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009240:	e019      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800924c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009250:	e011      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800925c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009260:	e009      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800926c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009270:	e001      	b.n	8009276 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20000040 	.word	0x20000040
 8009284:	10624dd3 	.word	0x10624dd3
 8009288:	fdffe008 	.word	0xfdffe008

0800928c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009294:	4b1f      	ldr	r3, [pc, #124]	; (8009314 <SDMMC_GetCmdResp2+0x88>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <SDMMC_GetCmdResp2+0x8c>)
 800929a:	fba2 2303 	umull	r2, r3, r2, r3
 800929e:	0a5b      	lsrs	r3, r3, #9
 80092a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a4:	fb02 f303 	mul.w	r3, r2, r3
 80092a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	1e5a      	subs	r2, r3, #1
 80092ae:	60fa      	str	r2, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092b8:	e026      	b.n	8009308 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0ef      	beq.n	80092aa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1ea      	bne.n	80092aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2204      	movs	r2, #4
 80092e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092e6:	2304      	movs	r3, #4
 80092e8:	e00e      	b.n	8009308 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d004      	beq.n	8009300 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e003      	b.n	8009308 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	22c5      	movs	r2, #197	; 0xc5
 8009304:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000040 	.word	0x20000040
 8009318:	10624dd3 	.word	0x10624dd3

0800931c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009324:	4b19      	ldr	r3, [pc, #100]	; (800938c <SDMMC_GetCmdResp3+0x70>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a19      	ldr	r2, [pc, #100]	; (8009390 <SDMMC_GetCmdResp3+0x74>)
 800932a:	fba2 2303 	umull	r2, r3, r2, r3
 800932e:	0a5b      	lsrs	r3, r3, #9
 8009330:	f241 3288 	movw	r2, #5000	; 0x1388
 8009334:	fb02 f303 	mul.w	r3, r2, r3
 8009338:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	1e5a      	subs	r2, r3, #1
 800933e:	60fa      	str	r2, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d102      	bne.n	800934a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009348:	e01b      	b.n	8009382 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0ef      	beq.n	800933a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1ea      	bne.n	800933a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2204      	movs	r2, #4
 8009374:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009376:	2304      	movs	r3, #4
 8009378:	e003      	b.n	8009382 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	22c5      	movs	r2, #197	; 0xc5
 800937e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr
 800938c:	20000040 	.word	0x20000040
 8009390:	10624dd3 	.word	0x10624dd3

08009394 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	460b      	mov	r3, r1
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093a2:	4b35      	ldr	r3, [pc, #212]	; (8009478 <SDMMC_GetCmdResp6+0xe4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a35      	ldr	r2, [pc, #212]	; (800947c <SDMMC_GetCmdResp6+0xe8>)
 80093a8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ac:	0a5b      	lsrs	r3, r3, #9
 80093ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b2:	fb02 f303 	mul.w	r3, r2, r3
 80093b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	1e5a      	subs	r2, r3, #1
 80093bc:	61fa      	str	r2, [r7, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093c6:	e052      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0ef      	beq.n	80093b8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1ea      	bne.n	80093b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e6:	f003 0304 	and.w	r3, r3, #4
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2204      	movs	r2, #4
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093f4:	2304      	movs	r3, #4
 80093f6:	e03a      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800940a:	2301      	movs	r3, #1
 800940c:	e02f      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fba7 	bl	8008b62 <SDIO_GetCommandResponse>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	7afb      	ldrb	r3, [r7, #11]
 800941a:	4293      	cmp	r3, r2
 800941c:	d001      	beq.n	8009422 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800941e:	2301      	movs	r3, #1
 8009420:	e025      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	22c5      	movs	r2, #197	; 0xc5
 8009426:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009428:	2100      	movs	r1, #0
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7ff fba5 	bl	8008b7a <SDIO_GetResponse>
 8009430:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	0c1b      	lsrs	r3, r3, #16
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009446:	2300      	movs	r3, #0
 8009448:	e011      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009458:	e009      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009468:	e001      	b.n	800946e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800946a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800946e:	4618      	mov	r0, r3
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000040 	.word	0x20000040
 800947c:	10624dd3 	.word	0x10624dd3

08009480 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009488:	4b22      	ldr	r3, [pc, #136]	; (8009514 <SDMMC_GetCmdResp7+0x94>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a22      	ldr	r2, [pc, #136]	; (8009518 <SDMMC_GetCmdResp7+0x98>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	0a5b      	lsrs	r3, r3, #9
 8009494:	f241 3288 	movw	r2, #5000	; 0x1388
 8009498:	fb02 f303 	mul.w	r3, r2, r3
 800949c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	60fa      	str	r2, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ac:	e02c      	b.n	8009508 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0ef      	beq.n	800949e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1ea      	bne.n	800949e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094da:	2304      	movs	r3, #4
 80094dc:	e014      	b.n	8009508 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e009      	b.n	8009508 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2240      	movs	r2, #64	; 0x40
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009506:	2300      	movs	r3, #0
  
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000040 	.word	0x20000040
 8009518:	10624dd3 	.word	0x10624dd3

0800951c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800951c:	b084      	sub	sp, #16
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	f107 001c 	add.w	r0, r7, #28
 800952a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	2b01      	cmp	r3, #1
 8009532:	d122      	bne.n	800957a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800955c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955e:	2b01      	cmp	r3, #1
 8009560:	d105      	bne.n	800956e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fafa 	bl	800ab68 <USB_CoreReset>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
 8009578:	e010      	b.n	800959c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 faee 	bl	800ab68 <USB_CoreReset>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10b      	bne.n	80095ba <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f043 0206 	orr.w	r2, r3, #6
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f043 0220 	orr.w	r2, r3, #32
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095c6:	b004      	add	sp, #16
 80095c8:	4770      	bx	lr
	...

080095cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d165      	bne.n	80096ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4a41      	ldr	r2, [pc, #260]	; (80096e8 <USB_SetTurnaroundTime+0x11c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d906      	bls.n	80095f6 <USB_SetTurnaroundTime+0x2a>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	4a40      	ldr	r2, [pc, #256]	; (80096ec <USB_SetTurnaroundTime+0x120>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d202      	bcs.n	80095f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095f0:	230f      	movs	r3, #15
 80095f2:	617b      	str	r3, [r7, #20]
 80095f4:	e062      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	4a3c      	ldr	r2, [pc, #240]	; (80096ec <USB_SetTurnaroundTime+0x120>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d306      	bcc.n	800960c <USB_SetTurnaroundTime+0x40>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4a3b      	ldr	r2, [pc, #236]	; (80096f0 <USB_SetTurnaroundTime+0x124>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d202      	bcs.n	800960c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009606:	230e      	movs	r3, #14
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	e057      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4a38      	ldr	r2, [pc, #224]	; (80096f0 <USB_SetTurnaroundTime+0x124>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d306      	bcc.n	8009622 <USB_SetTurnaroundTime+0x56>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a37      	ldr	r2, [pc, #220]	; (80096f4 <USB_SetTurnaroundTime+0x128>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d202      	bcs.n	8009622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800961c:	230d      	movs	r3, #13
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e04c      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	4a33      	ldr	r2, [pc, #204]	; (80096f4 <USB_SetTurnaroundTime+0x128>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d306      	bcc.n	8009638 <USB_SetTurnaroundTime+0x6c>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4a32      	ldr	r2, [pc, #200]	; (80096f8 <USB_SetTurnaroundTime+0x12c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d802      	bhi.n	8009638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009632:	230c      	movs	r3, #12
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e041      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4a2f      	ldr	r2, [pc, #188]	; (80096f8 <USB_SetTurnaroundTime+0x12c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d906      	bls.n	800964e <USB_SetTurnaroundTime+0x82>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a2e      	ldr	r2, [pc, #184]	; (80096fc <USB_SetTurnaroundTime+0x130>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d802      	bhi.n	800964e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009648:	230b      	movs	r3, #11
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	e036      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <USB_SetTurnaroundTime+0x130>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d906      	bls.n	8009664 <USB_SetTurnaroundTime+0x98>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4a29      	ldr	r2, [pc, #164]	; (8009700 <USB_SetTurnaroundTime+0x134>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d802      	bhi.n	8009664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800965e:	230a      	movs	r3, #10
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e02b      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	4a26      	ldr	r2, [pc, #152]	; (8009700 <USB_SetTurnaroundTime+0x134>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d906      	bls.n	800967a <USB_SetTurnaroundTime+0xae>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4a25      	ldr	r2, [pc, #148]	; (8009704 <USB_SetTurnaroundTime+0x138>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d202      	bcs.n	800967a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009674:	2309      	movs	r3, #9
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e020      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4a21      	ldr	r2, [pc, #132]	; (8009704 <USB_SetTurnaroundTime+0x138>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d306      	bcc.n	8009690 <USB_SetTurnaroundTime+0xc4>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4a20      	ldr	r2, [pc, #128]	; (8009708 <USB_SetTurnaroundTime+0x13c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d802      	bhi.n	8009690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800968a:	2308      	movs	r3, #8
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e015      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4a1d      	ldr	r2, [pc, #116]	; (8009708 <USB_SetTurnaroundTime+0x13c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d906      	bls.n	80096a6 <USB_SetTurnaroundTime+0xda>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4a1c      	ldr	r2, [pc, #112]	; (800970c <USB_SetTurnaroundTime+0x140>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d202      	bcs.n	80096a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096a0:	2307      	movs	r3, #7
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e00a      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096a6:	2306      	movs	r3, #6
 80096a8:	617b      	str	r3, [r7, #20]
 80096aa:	e007      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d102      	bne.n	80096b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096b2:	2309      	movs	r3, #9
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	e001      	b.n	80096bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096b8:	2309      	movs	r3, #9
 80096ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	029b      	lsls	r3, r3, #10
 80096d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	371c      	adds	r7, #28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	00d8acbf 	.word	0x00d8acbf
 80096ec:	00e4e1c0 	.word	0x00e4e1c0
 80096f0:	00f42400 	.word	0x00f42400
 80096f4:	01067380 	.word	0x01067380
 80096f8:	011a499f 	.word	0x011a499f
 80096fc:	01312cff 	.word	0x01312cff
 8009700:	014ca43f 	.word	0x014ca43f
 8009704:	016e3600 	.word	0x016e3600
 8009708:	01a6ab1f 	.word	0x01a6ab1f
 800970c:	01e84800 	.word	0x01e84800

08009710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f043 0201 	orr.w	r2, r3, #1
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr

08009730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f023 0201 	bic.w	r2, r3, #1
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr

08009750 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d115      	bne.n	800979e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800977e:	2001      	movs	r0, #1
 8009780:	f7f8 fb40 	bl	8001e04 <HAL_Delay>
      ms++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f961 	bl	800aa52 <USB_GetMode>
 8009790:	4603      	mov	r3, r0
 8009792:	2b01      	cmp	r3, #1
 8009794:	d01e      	beq.n	80097d4 <USB_SetCurrentMode+0x84>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b31      	cmp	r3, #49	; 0x31
 800979a:	d9f0      	bls.n	800977e <USB_SetCurrentMode+0x2e>
 800979c:	e01a      	b.n	80097d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d115      	bne.n	80097d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097b0:	2001      	movs	r0, #1
 80097b2:	f7f8 fb27 	bl	8001e04 <HAL_Delay>
      ms++;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 f948 	bl	800aa52 <USB_GetMode>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <USB_SetCurrentMode+0x84>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b31      	cmp	r3, #49	; 0x31
 80097cc:	d9f0      	bls.n	80097b0 <USB_SetCurrentMode+0x60>
 80097ce:	e001      	b.n	80097d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e005      	b.n	80097e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b32      	cmp	r3, #50	; 0x32
 80097d8:	d101      	bne.n	80097de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e000      	b.n	80097e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097e8:	b084      	sub	sp, #16
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b086      	sub	sp, #24
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	e009      	b.n	800981c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	3340      	adds	r3, #64	; 0x40
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	2b0e      	cmp	r3, #14
 8009820:	d9f2      	bls.n	8009808 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d11c      	bne.n	8009862 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009836:	f043 0302 	orr.w	r3, r3, #2
 800983a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
 8009860:	e00b      	b.n	800987a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009880:	461a      	mov	r2, r3
 8009882:	2300      	movs	r3, #0
 8009884:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988c:	4619      	mov	r1, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009894:	461a      	mov	r2, r3
 8009896:	680b      	ldr	r3, [r1, #0]
 8009898:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	2b01      	cmp	r3, #1
 800989e:	d10c      	bne.n	80098ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d104      	bne.n	80098b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098a6:	2100      	movs	r1, #0
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f945 	bl	8009b38 <USB_SetDevSpeed>
 80098ae:	e008      	b.n	80098c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098b0:	2101      	movs	r1, #1
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f940 	bl	8009b38 <USB_SetDevSpeed>
 80098b8:	e003      	b.n	80098c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098ba:	2103      	movs	r1, #3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f93b 	bl	8009b38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098c2:	2110      	movs	r1, #16
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f8f3 	bl	8009ab0 <USB_FlushTxFifo>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f90f 	bl	8009af8 <USB_FlushRxFifo>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ea:	461a      	mov	r2, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f6:	461a      	mov	r2, r3
 80098f8:	2300      	movs	r3, #0
 80098fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009902:	461a      	mov	r2, r3
 8009904:	2300      	movs	r3, #0
 8009906:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009908:	2300      	movs	r3, #0
 800990a:	613b      	str	r3, [r7, #16]
 800990c:	e043      	b.n	8009996 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	015a      	lsls	r2, r3, #5
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	4413      	add	r3, r2
 8009916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009924:	d118      	bne.n	8009958 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009938:	461a      	mov	r2, r3
 800993a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	e013      	b.n	800996a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994e:	461a      	mov	r2, r3
 8009950:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	e008      	b.n	800996a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	461a      	mov	r2, r3
 8009966:	2300      	movs	r3, #0
 8009968:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009976:	461a      	mov	r2, r3
 8009978:	2300      	movs	r3, #0
 800997a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	461a      	mov	r2, r3
 800998a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800998e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	3301      	adds	r3, #1
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	429a      	cmp	r2, r3
 800999c:	d3b7      	bcc.n	800990e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800999e:	2300      	movs	r3, #0
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	e043      	b.n	8009a2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ba:	d118      	bne.n	80099ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10a      	bne.n	80099d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ce:	461a      	mov	r2, r3
 80099d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	e013      	b.n	8009a00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e4:	461a      	mov	r2, r3
 80099e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	e008      	b.n	8009a00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	461a      	mov	r2, r3
 80099fc:	2300      	movs	r3, #0
 80099fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d3b7      	bcc.n	80099a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d105      	bne.n	8009a68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	f043 0210 	orr.w	r2, r3, #16
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	699a      	ldr	r2, [r3, #24]
 8009a6c:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <USB_DevInit+0x2c4>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d005      	beq.n	8009a86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	f043 0208 	orr.w	r2, r3, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d107      	bne.n	8009a9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a94:	f043 0304 	orr.w	r3, r3, #4
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009aa8:	b004      	add	sp, #16
 8009aaa:	4770      	bx	lr
 8009aac:	803c3800 	.word	0x803c3800

08009ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	019b      	lsls	r3, r3, #6
 8009ac2:	f043 0220 	orr.w	r2, r3, #32
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3301      	adds	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <USB_FlushTxFifo+0x44>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d901      	bls.n	8009adc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e006      	b.n	8009aea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d0f0      	beq.n	8009aca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bc80      	pop	{r7}
 8009af2:	4770      	bx	lr
 8009af4:	00030d40 	.word	0x00030d40

08009af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2210      	movs	r2, #16
 8009b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a08      	ldr	r2, [pc, #32]	; (8009b34 <USB_FlushRxFifo+0x3c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d901      	bls.n	8009b1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e006      	b.n	8009b2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d0f0      	beq.n	8009b0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr
 8009b34:	00030d40 	.word	0x00030d40

08009b38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f003 0306 	and.w	r3, r3, #6
 8009b80:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	75fb      	strb	r3, [r7, #23]
 8009b8c:	e00a      	b.n	8009ba4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d002      	beq.n	8009b9a <USB_GetDevSpeed+0x32>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b06      	cmp	r3, #6
 8009b98:	d102      	bne.n	8009ba0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	75fb      	strb	r3, [r7, #23]
 8009b9e:	e001      	b.n	8009ba4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ba0:	230f      	movs	r3, #15
 8009ba2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	371c      	adds	r7, #28
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bc80      	pop	{r7}
 8009bae:	4770      	bx	lr

08009bb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d13a      	bne.n	8009c42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	2101      	movs	r1, #1
 8009bde:	fa01 f303 	lsl.w	r3, r1, r3
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	68f9      	ldr	r1, [r7, #12]
 8009be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bea:	4313      	orrs	r3, r2
 8009bec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d155      	bne.n	8009cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	78db      	ldrb	r3, [r3, #3]
 8009c1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	059b      	lsls	r3, r3, #22
 8009c26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	0151      	lsls	r1, r2, #5
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	440a      	add	r2, r1
 8009c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	e036      	b.n	8009cb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c48:	69da      	ldr	r2, [r3, #28]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	2101      	movs	r1, #1
 8009c54:	fa01 f303 	lsl.w	r3, r1, r3
 8009c58:	041b      	lsls	r3, r3, #16
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c60:	4313      	orrs	r3, r2
 8009c62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d11a      	bne.n	8009cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	78db      	ldrb	r3, [r3, #3]
 8009c94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c96:	430b      	orrs	r3, r1
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr

08009cbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	785b      	ldrb	r3, [r3, #1]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d161      	bne.n	8009d9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cee:	d11f      	bne.n	8009d30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	2101      	movs	r1, #1
 8009d42:	fa01 f303 	lsl.w	r3, r1, r3
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	68f9      	ldr	r1, [r7, #12]
 8009d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d50:	4013      	ands	r3, r2
 8009d52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5a:	69da      	ldr	r2, [r3, #28]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 030f 	and.w	r3, r3, #15
 8009d64:	2101      	movs	r1, #1
 8009d66:	fa01 f303 	lsl.w	r3, r1, r3
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	43db      	mvns	r3, r3
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d74:	4013      	ands	r3, r2
 8009d76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	0159      	lsls	r1, r3, #5
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	440b      	add	r3, r1
 8009d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d92:	4619      	mov	r1, r3
 8009d94:	4b35      	ldr	r3, [pc, #212]	; (8009e6c <USB_DeactivateEndpoint+0x1b0>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	600b      	str	r3, [r1, #0]
 8009d9a:	e060      	b.n	8009e5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009db2:	d11f      	bne.n	8009df4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	0151      	lsls	r1, r2, #5
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	440a      	add	r2, r1
 8009dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009df2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	2101      	movs	r1, #1
 8009e06:	fa01 f303 	lsl.w	r3, r1, r3
 8009e0a:	041b      	lsls	r3, r3, #16
 8009e0c:	43db      	mvns	r3, r3
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e14:	4013      	ands	r3, r2
 8009e16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1e:	69da      	ldr	r2, [r3, #28]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	2101      	movs	r1, #1
 8009e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2e:	041b      	lsls	r3, r3, #16
 8009e30:	43db      	mvns	r3, r3
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e38:	4013      	ands	r3, r2
 8009e3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	0159      	lsls	r1, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	440b      	add	r3, r1
 8009e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e56:	4619      	mov	r1, r3
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <USB_DeactivateEndpoint+0x1b4>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	ec337800 	.word	0xec337800
 8009e70:	eff37800 	.word	0xeff37800

08009e74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	785b      	ldrb	r3, [r3, #1]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	f040 815c 	bne.w	800a14e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d132      	bne.n	8009f04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	0151      	lsls	r1, r2, #5
 8009ed4:	69fa      	ldr	r2, [r7, #28]
 8009ed6:	440a      	add	r2, r1
 8009ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	0151      	lsls	r1, r2, #5
 8009ef4:	69fa      	ldr	r2, [r7, #28]
 8009ef6:	440a      	add	r2, r1
 8009ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efc:	0cdb      	lsrs	r3, r3, #19
 8009efe:	04db      	lsls	r3, r3, #19
 8009f00:	6113      	str	r3, [r2, #16]
 8009f02:	e074      	b.n	8009fee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	0cdb      	lsrs	r3, r3, #19
 8009f20:	04db      	lsls	r3, r3, #19
 8009f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	0151      	lsls	r1, r2, #5
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	440a      	add	r2, r1
 8009f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6959      	ldr	r1, [r3, #20]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	440b      	add	r3, r1
 8009f60:	1e59      	subs	r1, r3, #1
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f6c:	4b9d      	ldr	r3, [pc, #628]	; (800a1e4 <USB_EPStartXfer+0x370>)
 8009f6e:	400b      	ands	r3, r1
 8009f70:	69b9      	ldr	r1, [r7, #24]
 8009f72:	0148      	lsls	r0, r1, #5
 8009f74:	69f9      	ldr	r1, [r7, #28]
 8009f76:	4401      	add	r1, r0
 8009f78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8c:	691a      	ldr	r2, [r3, #16]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f96:	69b9      	ldr	r1, [r7, #24]
 8009f98:	0148      	lsls	r0, r1, #5
 8009f9a:	69f9      	ldr	r1, [r7, #28]
 8009f9c:	4401      	add	r1, r0
 8009f9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	78db      	ldrb	r3, [r3, #3]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d11f      	bne.n	8009fee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009fcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d14b      	bne.n	800a08c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d009      	beq.n	800a010 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a008:	461a      	mov	r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	78db      	ldrb	r3, [r3, #3]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d128      	bne.n	800a06a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a024:	2b00      	cmp	r3, #0
 800a026:	d110      	bne.n	800a04a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	e00f      	b.n	800a06a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a068:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	0151      	lsls	r1, r2, #5
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	440a      	add	r2, r1
 800a080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a084:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e12f      	b.n	800a2ec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	0151      	lsls	r1, r2, #5
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	440a      	add	r2, r1
 800a0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	78db      	ldrb	r3, [r3, #3]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d015      	beq.n	800a0e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 8117 	beq.w	800a2ec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f003 030f 	and.w	r3, r3, #15
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d4:	69f9      	ldr	r1, [r7, #28]
 800a0d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	634b      	str	r3, [r1, #52]	; 0x34
 800a0de:	e105      	b.n	800a2ec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d110      	bne.n	800a112 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	440a      	add	r2, r1
 800a106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a10a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	e00f      	b.n	800a132 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	0151      	lsls	r1, r2, #5
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	440a      	add	r2, r1
 800a128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a12c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a130:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	68d9      	ldr	r1, [r3, #12]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	781a      	ldrb	r2, [r3, #0]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	b298      	uxth	r0, r3
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	4603      	mov	r3, r0
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fa2a 	bl	800a5a0 <USB_WritePacket>
 800a14c:	e0ce      	b.n	800a2ec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	69fa      	ldr	r2, [r7, #28]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a168:	0cdb      	lsrs	r3, r3, #19
 800a16a:	04db      	lsls	r3, r3, #19
 800a16c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a18c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a190:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d126      	bne.n	800a1e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a6:	691a      	ldr	r2, [r3, #16]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1b0:	69b9      	ldr	r1, [r7, #24]
 800a1b2:	0148      	lsls	r0, r1, #5
 800a1b4:	69f9      	ldr	r1, [r7, #28]
 800a1b6:	4401      	add	r1, r0
 800a1b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	015a      	lsls	r2, r3, #5
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	0151      	lsls	r1, r2, #5
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	440a      	add	r2, r1
 800a1d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1de:	6113      	str	r3, [r2, #16]
 800a1e0:	e036      	b.n	800a250 <USB_EPStartXfer+0x3dc>
 800a1e2:	bf00      	nop
 800a1e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	695a      	ldr	r2, [r3, #20]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	1e5a      	subs	r2, r3, #1
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	8afb      	ldrh	r3, [r7, #22]
 800a20e:	04d9      	lsls	r1, r3, #19
 800a210:	4b39      	ldr	r3, [pc, #228]	; (800a2f8 <USB_EPStartXfer+0x484>)
 800a212:	400b      	ands	r3, r1
 800a214:	69b9      	ldr	r1, [r7, #24]
 800a216:	0148      	lsls	r0, r1, #5
 800a218:	69f9      	ldr	r1, [r7, #28]
 800a21a:	4401      	add	r1, r0
 800a21c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a220:	4313      	orrs	r3, r2
 800a222:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	8af9      	ldrh	r1, [r7, #22]
 800a238:	fb01 f303 	mul.w	r3, r1, r3
 800a23c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a240:	69b9      	ldr	r1, [r7, #24]
 800a242:	0148      	lsls	r0, r1, #5
 800a244:	69f9      	ldr	r1, [r7, #28]
 800a246:	4401      	add	r1, r0
 800a248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a24c:	4313      	orrs	r3, r2
 800a24e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a250:	79fb      	ldrb	r3, [r7, #7]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d10d      	bne.n	800a272 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	68d9      	ldr	r1, [r3, #12]
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26e:	460a      	mov	r2, r1
 800a270:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	78db      	ldrb	r3, [r3, #3]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d128      	bne.n	800a2cc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a286:	2b00      	cmp	r3, #0
 800a288:	d110      	bne.n	800a2ac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	0151      	lsls	r1, r2, #5
 800a29c:	69fa      	ldr	r2, [r7, #28]
 800a29e:	440a      	add	r2, r1
 800a2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	e00f      	b.n	800a2cc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	0151      	lsls	r1, r2, #5
 800a2de:	69fa      	ldr	r2, [r7, #28]
 800a2e0:	440a      	add	r2, r1
 800a2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	1ff80000 	.word	0x1ff80000

0800a2fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	785b      	ldrb	r3, [r3, #1]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	f040 80cd 	bne.w	800a4b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d132      	bne.n	800a38c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	0151      	lsls	r1, r2, #5
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	440a      	add	r2, r1
 800a33c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a340:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a344:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a348:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	4413      	add	r3, r2
 800a372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	0151      	lsls	r1, r2, #5
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	440a      	add	r2, r1
 800a380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a384:	0cdb      	lsrs	r3, r3, #19
 800a386:	04db      	lsls	r3, r3, #19
 800a388:	6113      	str	r3, [r2, #16]
 800a38a:	e04e      	b.n	800a42a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	0151      	lsls	r1, r2, #5
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	440a      	add	r2, r1
 800a3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3a6:	0cdb      	lsrs	r3, r3, #19
 800a3a8:	04db      	lsls	r3, r3, #19
 800a3aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	0151      	lsls	r1, r2, #5
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	695a      	ldr	r2, [r3, #20]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d903      	bls.n	800a3e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a402:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a41a:	6939      	ldr	r1, [r7, #16]
 800a41c:	0148      	lsls	r0, r1, #5
 800a41e:	6979      	ldr	r1, [r7, #20]
 800a420:	4401      	add	r1, r0
 800a422:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a426:	4313      	orrs	r3, r2
 800a428:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d11e      	bne.n	800a46e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d009      	beq.n	800a44c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a444:	461a      	mov	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	440a      	add	r2, r1
 800a462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	e092      	b.n	800a594 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	0151      	lsls	r1, r2, #5
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	440a      	add	r2, r1
 800a484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a488:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a48c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d07e      	beq.n	800a594 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	f003 030f 	and.w	r3, r3, #15
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ac:	6979      	ldr	r1, [r7, #20]
 800a4ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	634b      	str	r3, [r1, #52]	; 0x34
 800a4b6:	e06d      	b.n	800a594 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	0151      	lsls	r1, r2, #5
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	440a      	add	r2, r1
 800a4ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d2:	0cdb      	lsrs	r3, r3, #19
 800a4d4:	04db      	lsls	r3, r3, #19
 800a4d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	0151      	lsls	r1, r2, #5
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	440a      	add	r2, r1
 800a4ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d003      	beq.n	800a50c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a52a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a542:	6939      	ldr	r1, [r7, #16]
 800a544:	0148      	lsls	r0, r1, #5
 800a546:	6979      	ldr	r1, [r7, #20]
 800a548:	4401      	add	r1, r0
 800a54a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a54e:	4313      	orrs	r3, r2
 800a550:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d10d      	bne.n	800a574 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	68d9      	ldr	r1, [r3, #12]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a570:	460a      	mov	r2, r1
 800a572:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	0151      	lsls	r1, r2, #5
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	440a      	add	r2, r1
 800a58a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr

0800a5a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	71fb      	strb	r3, [r7, #7]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d123      	bne.n	800a60e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5c6:	88bb      	ldrh	r3, [r7, #4]
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	e018      	b.n	800a606 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	031a      	lsls	r2, r3, #12
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	3301      	adds	r3, #1
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d3e2      	bcc.n	800a5d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3724      	adds	r7, #36	; 0x24
 800a614:	46bd      	mov	sp, r7
 800a616:	bc80      	pop	{r7}
 800a618:	4770      	bx	lr

0800a61a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b08b      	sub	sp, #44	; 0x2c
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	4613      	mov	r3, r2
 800a626:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a630:	88fb      	ldrh	r3, [r7, #6]
 800a632:	089b      	lsrs	r3, r3, #2
 800a634:	b29b      	uxth	r3, r3
 800a636:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a640:	2300      	movs	r3, #0
 800a642:	623b      	str	r3, [r7, #32]
 800a644:	e014      	b.n	800a670 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	601a      	str	r2, [r3, #0]
    pDest++;
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	3301      	adds	r3, #1
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	3301      	adds	r3, #1
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	3301      	adds	r3, #1
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	3301      	adds	r3, #1
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	3301      	adds	r3, #1
 800a66e:	623b      	str	r3, [r7, #32]
 800a670:	6a3a      	ldr	r2, [r7, #32]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	429a      	cmp	r2, r3
 800a676:	d3e6      	bcc.n	800a646 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a678:	8bfb      	ldrh	r3, [r7, #30]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d01e      	beq.n	800a6bc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a688:	461a      	mov	r2, r3
 800a68a:	f107 0310 	add.w	r3, r7, #16
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	fa22 f303 	lsr.w	r3, r2, r3
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	701a      	strb	r2, [r3, #0]
      i++;
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6b0:	8bfb      	ldrh	r3, [r7, #30]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6b6:	8bfb      	ldrh	r3, [r7, #30]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1ea      	bne.n	800a692 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	372c      	adds	r7, #44	; 0x2c
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bc80      	pop	{r7}
 800a6c6:	4770      	bx	lr

0800a6c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d12c      	bne.n	800a73e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	db12      	blt.n	800a71c <USB_EPSetStall+0x54>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00f      	beq.n	800a71c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	440a      	add	r2, r1
 800a712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a71a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	0151      	lsls	r1, r2, #5
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	440a      	add	r2, r1
 800a732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a736:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e02b      	b.n	800a796 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	db12      	blt.n	800a776 <USB_EPSetStall+0xae>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a774:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a794:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bc80      	pop	{r7}
 800a7a0:	4770      	bx	lr

0800a7a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b085      	sub	sp, #20
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	785b      	ldrb	r3, [r3, #1]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d128      	bne.n	800a810 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	78db      	ldrb	r3, [r3, #3]
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d003      	beq.n	800a7ee <USB_EPClearStall+0x4c>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	78db      	ldrb	r3, [r3, #3]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d138      	bne.n	800a860 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	0151      	lsls	r1, r2, #5
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	440a      	add	r2, r1
 800a804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	e027      	b.n	800a860 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	0151      	lsls	r1, r2, #5
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	440a      	add	r2, r1
 800a826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a82a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a82e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	78db      	ldrb	r3, [r3, #3]
 800a834:	2b03      	cmp	r3, #3
 800a836:	d003      	beq.n	800a840 <USB_EPClearStall+0x9e>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	78db      	ldrb	r3, [r3, #3]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d10f      	bne.n	800a860 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	0151      	lsls	r1, r2, #5
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	440a      	add	r2, r1
 800a856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a85e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	bc80      	pop	{r7}
 800a86a:	4770      	bx	lr

0800a86c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a88e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a8a0:	68f9      	ldr	r1, [r7, #12]
 800a8a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr

0800a8b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8e4:	f023 0302 	bic.w	r3, r3, #2
 800a8e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bc80      	pop	{r7}
 800a8f4:	4770      	bx	lr

0800a8f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a924:	f043 0302 	orr.w	r3, r3, #2
 800a928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	bc80      	pop	{r7}
 800a934:	4770      	bx	lr

0800a936 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a936:	b480      	push	{r7}
 800a938:	b085      	sub	sp, #20
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	4013      	ands	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a94e:	68fb      	ldr	r3, [r7, #12]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	bc80      	pop	{r7}
 800a958:	4770      	bx	lr

0800a95a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	4013      	ands	r3, r2
 800a97c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	0c1b      	lsrs	r3, r3, #16
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	bc80      	pop	{r7}
 800a98a:	4770      	bx	lr

0800a98c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	b29b      	uxth	r3, r3
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr

0800a9be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bc80      	pop	{r7}
 800a9f6:	4770      	bx	lr

0800a9f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
 800aa28:	01db      	lsls	r3, r3, #7
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4013      	ands	r3, r2
 800aa44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa46:	68bb      	ldr	r3, [r7, #8]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bc80      	pop	{r7}
 800aa50:	4770      	bx	lr

0800aa52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa52:	b480      	push	{r7}
 800aa54:	b083      	sub	sp, #12
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	f003 0301 	and.w	r3, r3, #1
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr

0800aa6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr

0800aab0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	460b      	mov	r3, r1
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	333c      	adds	r3, #60	; 0x3c
 800aac6:	3304      	adds	r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	4a25      	ldr	r2, [pc, #148]	; (800ab64 <USB_EP0_OutStart+0xb4>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d90a      	bls.n	800aaea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aae4:	d101      	bne.n	800aaea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	e037      	b.n	800ab5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab18:	f043 0318 	orr.w	r3, r3, #24
 800ab1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab32:	7afb      	ldrb	r3, [r7, #11]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d10f      	bne.n	800ab58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3e:	461a      	mov	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ab56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bc80      	pop	{r7}
 800ab62:	4770      	bx	lr
 800ab64:	4f54300a 	.word	0x4f54300a

0800ab68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3301      	adds	r3, #1
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4a12      	ldr	r2, [pc, #72]	; (800abc8 <USB_CoreReset+0x60>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d901      	bls.n	800ab86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e01b      	b.n	800abbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	daf2      	bge.n	800ab74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f043 0201 	orr.w	r2, r3, #1
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3301      	adds	r3, #1
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <USB_CoreReset+0x60>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d901      	bls.n	800abb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e006      	b.n	800abbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d0f0      	beq.n	800ab9e <USB_CoreReset+0x36>

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr
 800abc8:	00030d40 	.word	0x00030d40

0800abcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800abd0:	4904      	ldr	r1, [pc, #16]	; (800abe4 <MX_FATFS_Init+0x18>)
 800abd2:	4805      	ldr	r0, [pc, #20]	; (800abe8 <MX_FATFS_Init+0x1c>)
 800abd4:	f001 fc5e 	bl	800c494 <FATFS_LinkDriver>
 800abd8:	4603      	mov	r3, r0
 800abda:	461a      	mov	r2, r3
 800abdc:	4b03      	ldr	r3, [pc, #12]	; (800abec <MX_FATFS_Init+0x20>)
 800abde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abe0:	bf00      	nop
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000718 	.word	0x20000718
 800abe8:	0800deb0 	.word	0x0800deb0
 800abec:	20000714 	.word	0x20000714

0800abf0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abfa:	f000 f879 	bl	800acf0 <BSP_SD_IsDetected>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d001      	beq.n	800ac08 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e012      	b.n	800ac2e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ac08:	480b      	ldr	r0, [pc, #44]	; (800ac38 <BSP_SD_Init+0x48>)
 800ac0a:	f7fa ff58 	bl	8005abe <HAL_SD_Init>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ac18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac1c:	4806      	ldr	r0, [pc, #24]	; (800ac38 <BSP_SD_Init+0x48>)
 800ac1e:	f7fb fd31 	bl	8006684 <HAL_SD_ConfigWideBusOperation>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	200003a8 	.word	0x200003a8

0800ac3c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	68f9      	ldr	r1, [r7, #12]
 800ac58:	4806      	ldr	r0, [pc, #24]	; (800ac74 <BSP_SD_ReadBlocks+0x38>)
 800ac5a:	f7fa ffdf 	bl	8005c1c <HAL_SD_ReadBlocks>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200003a8 	.word	0x200003a8

0800ac78 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	68f9      	ldr	r1, [r7, #12]
 800ac94:	4806      	ldr	r0, [pc, #24]	; (800acb0 <BSP_SD_WriteBlocks+0x38>)
 800ac96:	f7fb f99f 	bl	8005fd8 <HAL_SD_WriteBlocks>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	200003a8 	.word	0x200003a8

0800acb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800acb8:	4805      	ldr	r0, [pc, #20]	; (800acd0 <BSP_SD_GetCardState+0x1c>)
 800acba:	f7fb fd7d 	bl	80067b8 <HAL_SD_GetCardState>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	bf14      	ite	ne
 800acc4:	2301      	movne	r3, #1
 800acc6:	2300      	moveq	r3, #0
 800acc8:	b2db      	uxtb	r3, r3
}
 800acca:	4618      	mov	r0, r3
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	200003a8 	.word	0x200003a8

0800acd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	4803      	ldr	r0, [pc, #12]	; (800acec <BSP_SD_GetCardInfo+0x18>)
 800ace0:	f7fb fca4 	bl	800662c <HAL_SD_GetCardInfo>
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	200003a8 	.word	0x200003a8

0800acf0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800acf6:	2301      	movs	r3, #1
 800acf8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	b2db      	uxtb	r3, r3
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bc80      	pop	{r7}
 800ad06:	4770      	bx	lr

0800ad08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7c1b      	ldrb	r3, [r3, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d115      	bne.n	800ad4c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad24:	2202      	movs	r2, #2
 800ad26:	2181      	movs	r1, #129	; 0x81
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f002 fcde 	bl	800d6ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad38:	2202      	movs	r2, #2
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f002 fcd4 	bl	800d6ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ad4a:	e012      	b.n	800ad72 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad4c:	2340      	movs	r3, #64	; 0x40
 800ad4e:	2202      	movs	r2, #2
 800ad50:	2181      	movs	r1, #129	; 0x81
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f002 fcc9 	bl	800d6ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	2202      	movs	r2, #2
 800ad62:	2101      	movs	r1, #1
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f002 fcc0 	bl	800d6ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad72:	2308      	movs	r3, #8
 800ad74:	2203      	movs	r2, #3
 800ad76:	2182      	movs	r1, #130	; 0x82
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f002 fcb6 	bl	800d6ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad88:	f002 fe02 	bl	800d990 <malloc>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	461a      	mov	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800ada0:	2301      	movs	r3, #1
 800ada2:	73fb      	strb	r3, [r7, #15]
 800ada4:	e026      	b.n	800adf4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	7c1b      	ldrb	r3, [r3, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d109      	bne.n	800ade4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800add6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adda:	2101      	movs	r1, #1
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f002 fd74 	bl	800d8ca <USBD_LL_PrepareReceive>
 800ade2:	e007      	b.n	800adf4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adea:	2340      	movs	r3, #64	; 0x40
 800adec:	2101      	movs	r1, #1
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f002 fd6b 	bl	800d8ca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae0e:	2181      	movs	r1, #129	; 0x81
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f002 fc90 	bl	800d736 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f002 fc89 	bl	800d736 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae2c:	2182      	movs	r1, #130	; 0x82
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f002 fc81 	bl	800d736 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00e      	beq.n	800ae62 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 fda3 	bl	800d9a0 <free>
    pdev->pClassData = NULL;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d039      	beq.n	800af0a <USBD_CDC_Setup+0x9e>
 800ae96:	2b20      	cmp	r3, #32
 800ae98:	d17f      	bne.n	800af9a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	88db      	ldrh	r3, [r3, #6]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d029      	beq.n	800aef6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da11      	bge.n	800aed0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aeb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	88d2      	ldrh	r2, [r2, #6]
 800aebe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aec0:	6939      	ldr	r1, [r7, #16]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	461a      	mov	r2, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 fa14 	bl	800c2f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aece:	e06b      	b.n	800afa8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	785a      	ldrb	r2, [r3, #1]
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aee6:	6939      	ldr	r1, [r7, #16]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	88db      	ldrh	r3, [r3, #6]
 800aeec:	461a      	mov	r2, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 fa2f 	bl	800c352 <USBD_CtlPrepareRx>
      break;
 800aef4:	e058      	b.n	800afa8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	7850      	ldrb	r0, [r2, #1]
 800af02:	2200      	movs	r2, #0
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	4798      	blx	r3
      break;
 800af08:	e04e      	b.n	800afa8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	785b      	ldrb	r3, [r3, #1]
 800af0e:	2b0b      	cmp	r3, #11
 800af10:	d02e      	beq.n	800af70 <USBD_CDC_Setup+0x104>
 800af12:	2b0b      	cmp	r3, #11
 800af14:	dc38      	bgt.n	800af88 <USBD_CDC_Setup+0x11c>
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <USBD_CDC_Setup+0xb4>
 800af1a:	2b0a      	cmp	r3, #10
 800af1c:	d014      	beq.n	800af48 <USBD_CDC_Setup+0xdc>
 800af1e:	e033      	b.n	800af88 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af26:	2b03      	cmp	r3, #3
 800af28:	d107      	bne.n	800af3a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800af2a:	f107 030c 	add.w	r3, r7, #12
 800af2e:	2202      	movs	r2, #2
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f001 f9df 	bl	800c2f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af38:	e02e      	b.n	800af98 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 f970 	bl	800c222 <USBD_CtlError>
            ret = USBD_FAIL;
 800af42:	2302      	movs	r3, #2
 800af44:	75fb      	strb	r3, [r7, #23]
          break;
 800af46:	e027      	b.n	800af98 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d107      	bne.n	800af62 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800af52:	f107 030f 	add.w	r3, r7, #15
 800af56:	2201      	movs	r2, #1
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 f9cb 	bl	800c2f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af60:	e01a      	b.n	800af98 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 f95c 	bl	800c222 <USBD_CtlError>
            ret = USBD_FAIL;
 800af6a:	2302      	movs	r3, #2
 800af6c:	75fb      	strb	r3, [r7, #23]
          break;
 800af6e:	e013      	b.n	800af98 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af76:	2b03      	cmp	r3, #3
 800af78:	d00d      	beq.n	800af96 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 f950 	bl	800c222 <USBD_CtlError>
            ret = USBD_FAIL;
 800af82:	2302      	movs	r3, #2
 800af84:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af86:	e006      	b.n	800af96 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 f949 	bl	800c222 <USBD_CtlError>
          ret = USBD_FAIL;
 800af90:	2302      	movs	r3, #2
 800af92:	75fb      	strb	r3, [r7, #23]
          break;
 800af94:	e000      	b.n	800af98 <USBD_CDC_Setup+0x12c>
          break;
 800af96:	bf00      	nop
      }
      break;
 800af98:	e006      	b.n	800afa8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 f940 	bl	800c222 <USBD_CtlError>
      ret = USBD_FAIL;
 800afa2:	2302      	movs	r3, #2
 800afa4:	75fb      	strb	r3, [r7, #23]
      break;
 800afa6:	bf00      	nop
  }

  return ret;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	460b      	mov	r3, r1
 800afbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afcc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d03a      	beq.n	800b04e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800afd8:	78fa      	ldrb	r2, [r7, #3]
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	440b      	add	r3, r1
 800afe6:	331c      	adds	r3, #28
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d029      	beq.n	800b042 <USBD_CDC_DataIn+0x90>
 800afee:	78fa      	ldrb	r2, [r7, #3]
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	331c      	adds	r3, #28
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	78f9      	ldrb	r1, [r7, #3]
 800b002:	68b8      	ldr	r0, [r7, #8]
 800b004:	460b      	mov	r3, r1
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	1a5b      	subs	r3, r3, r1
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4403      	add	r3, r0
 800b00e:	3344      	adds	r3, #68	; 0x44
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	fbb2 f1f3 	udiv	r1, r2, r3
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d110      	bne.n	800b042 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b020:	78fa      	ldrb	r2, [r7, #3]
 800b022:	6879      	ldr	r1, [r7, #4]
 800b024:	4613      	mov	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	440b      	add	r3, r1
 800b02e:	331c      	adds	r3, #28
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b034:	78f9      	ldrb	r1, [r7, #3]
 800b036:	2300      	movs	r3, #0
 800b038:	2200      	movs	r2, #0
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f002 fc22 	bl	800d884 <USBD_LL_Transmit>
 800b040:	e003      	b.n	800b04a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e000      	b.n	800b050 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b04e:	2302      	movs	r3, #2
  }
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f002 fc4d 	bl	800d910 <USBD_LL_GetRxDataSize>
 800b076:	4602      	mov	r2, r0
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00d      	beq.n	800b0a4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b09c:	4611      	mov	r1, r2
 800b09e:	4798      	blx	r3

    return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e000      	b.n	800b0a6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b0a4:	2302      	movs	r3, #2
  }
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0bc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d015      	beq.n	800b0f4 <USBD_CDC_EP0_RxReady+0x46>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0ce:	2bff      	cmp	r3, #255	; 0xff
 800b0d0:	d010      	beq.n	800b0f4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b0e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0e8:	b292      	uxth	r2, r2
 800b0ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	22ff      	movs	r2, #255	; 0xff
 800b0f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2243      	movs	r2, #67	; 0x43
 800b10c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b10e:	4b03      	ldr	r3, [pc, #12]	; (800b11c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	bc80      	pop	{r7}
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	200000d4 	.word	0x200000d4

0800b120 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2243      	movs	r2, #67	; 0x43
 800b12c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b12e:	4b03      	ldr	r3, [pc, #12]	; (800b13c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	bc80      	pop	{r7}
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000090 	.word	0x20000090

0800b140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2243      	movs	r2, #67	; 0x43
 800b14c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b14e:	4b03      	ldr	r3, [pc, #12]	; (800b15c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	20000118 	.word	0x20000118

0800b160 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	220a      	movs	r2, #10
 800b16c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b16e:	4b03      	ldr	r3, [pc, #12]	; (800b17c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	bc80      	pop	{r7}
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	2000004c 	.word	0x2000004c

0800b180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b18a:	2302      	movs	r3, #2
 800b18c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr

0800b1ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b1ca:	88fa      	ldrh	r2, [r7, #6]
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc80      	pop	{r7}
 800b1dc:	4770      	bx	lr

0800b1de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bc80      	pop	{r7}
 800b202:	4770      	bx	lr

0800b204 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b212:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d017      	beq.n	800b24e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7c1b      	ldrb	r3, [r3, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d109      	bne.n	800b23a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b230:	2101      	movs	r1, #1
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f002 fb49 	bl	800d8ca <USBD_LL_PrepareReceive>
 800b238:	e007      	b.n	800b24a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b240:	2340      	movs	r3, #64	; 0x40
 800b242:	2101      	movs	r1, #1
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f002 fb40 	bl	800d8ca <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e000      	b.n	800b250 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b24e:	2302      	movs	r3, #2
  }
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	4613      	mov	r3, r2
 800b264:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b26c:	2302      	movs	r3, #2
 800b26e:	e01a      	b.n	800b2a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	79fa      	ldrb	r2, [r7, #7]
 800b29c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f002 f9be 	bl	800d620 <USBD_LL_Init>

  return USBD_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]
 800b2ce:	e001      	b.n	800b2d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr

0800b2e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f002 f9e3 	bl	800d6b4 <USBD_LL_Start>

  return USBD_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	bc80      	pop	{r7}
 800b30a:	4770      	bx	lr

0800b30c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b318:	2302      	movs	r3, #2
 800b31a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00c      	beq.n	800b340 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	78fa      	ldrb	r2, [r7, #3]
 800b330:	4611      	mov	r1, r2
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	4798      	blx	r3
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	460b      	mov	r3, r1
 800b354:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	78fa      	ldrb	r2, [r7, #3]
 800b360:	4611      	mov	r1, r2
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	4798      	blx	r3

  return USBD_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 ff11 	bl	800c1aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3a4:	f003 031f 	and.w	r3, r3, #31
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d016      	beq.n	800b3da <USBD_LL_SetupStage+0x6a>
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d81c      	bhi.n	800b3ea <USBD_LL_SetupStage+0x7a>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <USBD_LL_SetupStage+0x4a>
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d008      	beq.n	800b3ca <USBD_LL_SetupStage+0x5a>
 800b3b8:	e017      	b.n	800b3ea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fa04 	bl	800b7d0 <USBD_StdDevReq>
      break;
 800b3c8:	e01a      	b.n	800b400 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa66 	bl	800b8a4 <USBD_StdItfReq>
      break;
 800b3d8:	e012      	b.n	800b400 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 faa6 	bl	800b934 <USBD_StdEPReq>
      break;
 800b3e8:	e00a      	b.n	800b400 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f002 f9bb 	bl	800d774 <USBD_LL_StallEP>
      break;
 800b3fe:	bf00      	nop
  }

  return USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	460b      	mov	r3, r1
 800b414:	607a      	str	r2, [r7, #4]
 800b416:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d14b      	bne.n	800b4b6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b424:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d134      	bne.n	800b49a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d919      	bls.n	800b470 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	68da      	ldr	r2, [r3, #12]
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	1ad2      	subs	r2, r2, r3
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b452:	429a      	cmp	r2, r3
 800b454:	d203      	bcs.n	800b45e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	e002      	b.n	800b464 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b462:	b29b      	uxth	r3, r3
 800b464:	461a      	mov	r2, r3
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 ff90 	bl	800c38e <USBD_CtlContinueRx>
 800b46e:	e038      	b.n	800b4e2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b482:	2b03      	cmp	r3, #3
 800b484:	d105      	bne.n	800b492 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 ff8d 	bl	800c3b2 <USBD_CtlSendStatus>
 800b498:	e023      	b.n	800b4e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4a0:	2b05      	cmp	r3, #5
 800b4a2:	d11e      	bne.n	800b4e2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f002 f960 	bl	800d774 <USBD_LL_StallEP>
 800b4b4:	e015      	b.n	800b4e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00d      	beq.n	800b4de <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d108      	bne.n	800b4de <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	7afa      	ldrb	r2, [r7, #11]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	4798      	blx	r3
 800b4dc:	e001      	b.n	800b4e2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4de:	2302      	movs	r3, #2
 800b4e0:	e000      	b.n	800b4e4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	607a      	str	r2, [r7, #4]
 800b4f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d17f      	bne.n	800b600 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3314      	adds	r3, #20
 800b504:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d15c      	bne.n	800b5ca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d915      	bls.n	800b548 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	68da      	ldr	r2, [r3, #12]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	1ad2      	subs	r2, r2, r3
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	461a      	mov	r2, r3
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 fefa 	bl	800c32e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b53a:	2300      	movs	r3, #0
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f002 f9c2 	bl	800d8ca <USBD_LL_PrepareReceive>
 800b546:	e04e      	b.n	800b5e6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	6912      	ldr	r2, [r2, #16]
 800b550:	fbb3 f1f2 	udiv	r1, r3, r2
 800b554:	fb01 f202 	mul.w	r2, r1, r2
 800b558:	1a9b      	subs	r3, r3, r2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d11c      	bne.n	800b598 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b566:	429a      	cmp	r2, r3
 800b568:	d316      	bcc.n	800b598 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	689a      	ldr	r2, [r3, #8]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b574:	429a      	cmp	r2, r3
 800b576:	d20f      	bcs.n	800b598 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b578:	2200      	movs	r2, #0
 800b57a:	2100      	movs	r1, #0
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 fed6 	bl	800c32e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b58a:	2300      	movs	r3, #0
 800b58c:	2200      	movs	r2, #0
 800b58e:	2100      	movs	r1, #0
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f002 f99a 	bl	800d8ca <USBD_LL_PrepareReceive>
 800b596:	e026      	b.n	800b5e6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00a      	beq.n	800b5ba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d105      	bne.n	800b5ba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b5ba:	2180      	movs	r1, #128	; 0x80
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f002 f8d9 	bl	800d774 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 ff08 	bl	800c3d8 <USBD_CtlReceiveStatus>
 800b5c8:	e00d      	b.n	800b5e6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d004      	beq.n	800b5de <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d103      	bne.n	800b5e6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b5de:	2180      	movs	r1, #128	; 0x80
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f002 f8c7 	bl	800d774 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d11d      	bne.n	800b62c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff fe81 	bl	800b2f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b5fe:	e015      	b.n	800b62c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00d      	beq.n	800b628 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b612:	2b03      	cmp	r3, #3
 800b614:	d108      	bne.n	800b628 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	7afa      	ldrb	r2, [r7, #11]
 800b620:	4611      	mov	r1, r2
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	4798      	blx	r3
 800b626:	e001      	b.n	800b62c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b628:	2302      	movs	r3, #2
 800b62a:	e000      	b.n	800b62e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b63e:	2340      	movs	r3, #64	; 0x40
 800b640:	2200      	movs	r2, #0
 800b642:	2100      	movs	r1, #0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f002 f850 	bl	800d6ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2240      	movs	r2, #64	; 0x40
 800b656:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b65a:	2340      	movs	r3, #64	; 0x40
 800b65c:	2200      	movs	r2, #0
 800b65e:	2180      	movs	r1, #128	; 0x80
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f002 f842 	bl	800d6ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2240      	movs	r2, #64	; 0x40
 800b670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b696:	2b00      	cmp	r3, #0
 800b698:	d009      	beq.n	800b6ae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	6852      	ldr	r2, [r2, #4]
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	4798      	blx	r3
  }

  return USBD_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	78fa      	ldrb	r2, [r7, #3]
 800b6c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr

0800b6d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2204      	movs	r2, #4
 800b6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr

0800b6fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b70c:	2b04      	cmp	r3, #4
 800b70e:	d105      	bne.n	800b71c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	bc80      	pop	{r7}
 800b726:	4770      	bx	lr

0800b728 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b736:	2b03      	cmp	r3, #3
 800b738:	d10b      	bne.n	800b752 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d005      	beq.n	800b752 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74c:	69db      	ldr	r3, [r3, #28]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	bc80      	pop	{r7}
 800b772:	4770      	bx	lr

0800b774 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	bc80      	pop	{r7}
 800b78a:	4770      	bx	lr

0800b78c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bc80      	pop	{r7}
 800b79e:	4770      	bx	lr

0800b7a0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6852      	ldr	r2, [r2, #4]
 800b7bc:	b2d2      	uxtb	r2, r2
 800b7be:	4611      	mov	r1, r2
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	4798      	blx	r3

  return USBD_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7e6:	2b40      	cmp	r3, #64	; 0x40
 800b7e8:	d005      	beq.n	800b7f6 <USBD_StdDevReq+0x26>
 800b7ea:	2b40      	cmp	r3, #64	; 0x40
 800b7ec:	d84f      	bhi.n	800b88e <USBD_StdDevReq+0xbe>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d009      	beq.n	800b806 <USBD_StdDevReq+0x36>
 800b7f2:	2b20      	cmp	r3, #32
 800b7f4:	d14b      	bne.n	800b88e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	4798      	blx	r3
      break;
 800b804:	e048      	b.n	800b898 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	785b      	ldrb	r3, [r3, #1]
 800b80a:	2b09      	cmp	r3, #9
 800b80c:	d839      	bhi.n	800b882 <USBD_StdDevReq+0xb2>
 800b80e:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <USBD_StdDevReq+0x44>)
 800b810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b814:	0800b865 	.word	0x0800b865
 800b818:	0800b879 	.word	0x0800b879
 800b81c:	0800b883 	.word	0x0800b883
 800b820:	0800b86f 	.word	0x0800b86f
 800b824:	0800b883 	.word	0x0800b883
 800b828:	0800b847 	.word	0x0800b847
 800b82c:	0800b83d 	.word	0x0800b83d
 800b830:	0800b883 	.word	0x0800b883
 800b834:	0800b85b 	.word	0x0800b85b
 800b838:	0800b851 	.word	0x0800b851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f9dc 	bl	800bbfc <USBD_GetDescriptor>
          break;
 800b844:	e022      	b.n	800b88c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fb3f 	bl	800becc <USBD_SetAddress>
          break;
 800b84e:	e01d      	b.n	800b88c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fb7e 	bl	800bf54 <USBD_SetConfig>
          break;
 800b858:	e018      	b.n	800b88c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fc07 	bl	800c070 <USBD_GetConfig>
          break;
 800b862:	e013      	b.n	800b88c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fc37 	bl	800c0da <USBD_GetStatus>
          break;
 800b86c:	e00e      	b.n	800b88c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fc65 	bl	800c140 <USBD_SetFeature>
          break;
 800b876:	e009      	b.n	800b88c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fc74 	bl	800c168 <USBD_ClrFeature>
          break;
 800b880:	e004      	b.n	800b88c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fccc 	bl	800c222 <USBD_CtlError>
          break;
 800b88a:	bf00      	nop
      }
      break;
 800b88c:	e004      	b.n	800b898 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fcc6 	bl	800c222 <USBD_CtlError>
      break;
 800b896:	bf00      	nop
  }

  return ret;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop

0800b8a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8ba:	2b40      	cmp	r3, #64	; 0x40
 800b8bc:	d005      	beq.n	800b8ca <USBD_StdItfReq+0x26>
 800b8be:	2b40      	cmp	r3, #64	; 0x40
 800b8c0:	d82e      	bhi.n	800b920 <USBD_StdItfReq+0x7c>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <USBD_StdItfReq+0x26>
 800b8c6:	2b20      	cmp	r3, #32
 800b8c8:	d12a      	bne.n	800b920 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d81d      	bhi.n	800b912 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	889b      	ldrh	r3, [r3, #4]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d813      	bhi.n	800b908 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	4798      	blx	r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	88db      	ldrh	r3, [r3, #6]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d110      	bne.n	800b91c <USBD_StdItfReq+0x78>
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10d      	bne.n	800b91c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fd56 	bl	800c3b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b906:	e009      	b.n	800b91c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fc89 	bl	800c222 <USBD_CtlError>
          break;
 800b910:	e004      	b.n	800b91c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fc84 	bl	800c222 <USBD_CtlError>
          break;
 800b91a:	e000      	b.n	800b91e <USBD_StdItfReq+0x7a>
          break;
 800b91c:	bf00      	nop
      }
      break;
 800b91e:	e004      	b.n	800b92a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fc7d 	bl	800c222 <USBD_CtlError>
      break;
 800b928:	bf00      	nop
  }

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	889b      	ldrh	r3, [r3, #4]
 800b946:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b950:	2b40      	cmp	r3, #64	; 0x40
 800b952:	d007      	beq.n	800b964 <USBD_StdEPReq+0x30>
 800b954:	2b40      	cmp	r3, #64	; 0x40
 800b956:	f200 8146 	bhi.w	800bbe6 <USBD_StdEPReq+0x2b2>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <USBD_StdEPReq+0x40>
 800b95e:	2b20      	cmp	r3, #32
 800b960:	f040 8141 	bne.w	800bbe6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	4798      	blx	r3
      break;
 800b972:	e13d      	b.n	800bbf0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b97c:	2b20      	cmp	r3, #32
 800b97e:	d10a      	bne.n	800b996 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	4798      	blx	r3
 800b98e:	4603      	mov	r3, r0
 800b990:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	e12d      	b.n	800bbf2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	785b      	ldrb	r3, [r3, #1]
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d007      	beq.n	800b9ae <USBD_StdEPReq+0x7a>
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	f300 811b 	bgt.w	800bbda <USBD_StdEPReq+0x2a6>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d072      	beq.n	800ba8e <USBD_StdEPReq+0x15a>
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d03a      	beq.n	800ba22 <USBD_StdEPReq+0xee>
 800b9ac:	e115      	b.n	800bbda <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d002      	beq.n	800b9be <USBD_StdEPReq+0x8a>
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d015      	beq.n	800b9e8 <USBD_StdEPReq+0xb4>
 800b9bc:	e02b      	b.n	800ba16 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00c      	beq.n	800b9de <USBD_StdEPReq+0xaa>
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b80      	cmp	r3, #128	; 0x80
 800b9c8:	d009      	beq.n	800b9de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 fed0 	bl	800d774 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b9d4:	2180      	movs	r1, #128	; 0x80
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 fecc 	bl	800d774 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9dc:	e020      	b.n	800ba20 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fc1e 	bl	800c222 <USBD_CtlError>
              break;
 800b9e6:	e01b      	b.n	800ba20 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	885b      	ldrh	r3, [r3, #2]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10e      	bne.n	800ba0e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00b      	beq.n	800ba0e <USBD_StdEPReq+0xda>
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b80      	cmp	r3, #128	; 0x80
 800b9fa:	d008      	beq.n	800ba0e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	88db      	ldrh	r3, [r3, #6]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 feb3 	bl	800d774 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fccf 	bl	800c3b2 <USBD_CtlSendStatus>

              break;
 800ba14:	e004      	b.n	800ba20 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fc02 	bl	800c222 <USBD_CtlError>
              break;
 800ba1e:	bf00      	nop
          }
          break;
 800ba20:	e0e0      	b.n	800bbe4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d002      	beq.n	800ba32 <USBD_StdEPReq+0xfe>
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d015      	beq.n	800ba5c <USBD_StdEPReq+0x128>
 800ba30:	e026      	b.n	800ba80 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00c      	beq.n	800ba52 <USBD_StdEPReq+0x11e>
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	2b80      	cmp	r3, #128	; 0x80
 800ba3c:	d009      	beq.n	800ba52 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 fe96 	bl	800d774 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba48:	2180      	movs	r1, #128	; 0x80
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f001 fe92 	bl	800d774 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba50:	e01c      	b.n	800ba8c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fbe4 	bl	800c222 <USBD_CtlError>
              break;
 800ba5a:	e017      	b.n	800ba8c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	885b      	ldrh	r3, [r3, #2]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d112      	bne.n	800ba8a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba6e:	7bbb      	ldrb	r3, [r7, #14]
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f001 fe9d 	bl	800d7b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fc9a 	bl	800c3b2 <USBD_CtlSendStatus>
              }
              break;
 800ba7e:	e004      	b.n	800ba8a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fbcd 	bl	800c222 <USBD_CtlError>
              break;
 800ba88:	e000      	b.n	800ba8c <USBD_StdEPReq+0x158>
              break;
 800ba8a:	bf00      	nop
          }
          break;
 800ba8c:	e0aa      	b.n	800bbe4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d002      	beq.n	800ba9e <USBD_StdEPReq+0x16a>
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d032      	beq.n	800bb02 <USBD_StdEPReq+0x1ce>
 800ba9c:	e097      	b.n	800bbce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <USBD_StdEPReq+0x180>
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b80      	cmp	r3, #128	; 0x80
 800baa8:	d004      	beq.n	800bab4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fbb8 	bl	800c222 <USBD_CtlError>
                break;
 800bab2:	e091      	b.n	800bbd8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	da0b      	bge.n	800bad4 <USBD_StdEPReq+0x1a0>
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	3310      	adds	r3, #16
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	4413      	add	r3, r2
 800bad0:	3304      	adds	r3, #4
 800bad2:	e00b      	b.n	800baec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	3304      	adds	r3, #4
 800baec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2200      	movs	r2, #0
 800baf2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2202      	movs	r2, #2
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fbfb 	bl	800c2f6 <USBD_CtlSendData>
              break;
 800bb00:	e06a      	b.n	800bbd8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	da11      	bge.n	800bb2e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	f003 020f 	and.w	r2, r3, #15
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	440b      	add	r3, r1
 800bb1c:	3318      	adds	r3, #24
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d117      	bne.n	800bb54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 fb7b 	bl	800c222 <USBD_CtlError>
                  break;
 800bb2c:	e054      	b.n	800bbd8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	f003 020f 	and.w	r2, r3, #15
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	4613      	mov	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	440b      	add	r3, r1
 800bb40:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d104      	bne.n	800bb54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fb68 	bl	800c222 <USBD_CtlError>
                  break;
 800bb52:	e041      	b.n	800bbd8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da0b      	bge.n	800bb74 <USBD_StdEPReq+0x240>
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	3310      	adds	r3, #16
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4413      	add	r3, r2
 800bb70:	3304      	adds	r3, #4
 800bb72:	e00b      	b.n	800bb8c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	4413      	add	r3, r2
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <USBD_StdEPReq+0x266>
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	2b80      	cmp	r3, #128	; 0x80
 800bb98:	d103      	bne.n	800bba2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	e00e      	b.n	800bbc0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fe22 	bl	800d7f0 <USBD_LL_IsStallEP>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	e002      	b.n	800bbc0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fb95 	bl	800c2f6 <USBD_CtlSendData>
              break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fb26 	bl	800c222 <USBD_CtlError>
              break;
 800bbd6:	bf00      	nop
          }
          break;
 800bbd8:	e004      	b.n	800bbe4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fb20 	bl	800c222 <USBD_CtlError>
          break;
 800bbe2:	bf00      	nop
      }
      break;
 800bbe4:	e004      	b.n	800bbf0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fb1a 	bl	800c222 <USBD_CtlError>
      break;
 800bbee:	bf00      	nop
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	885b      	ldrh	r3, [r3, #2]
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	2b06      	cmp	r3, #6
 800bc1e:	f200 8128 	bhi.w	800be72 <USBD_GetDescriptor+0x276>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <USBD_GetDescriptor+0x2c>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc45 	.word	0x0800bc45
 800bc2c:	0800bc5d 	.word	0x0800bc5d
 800bc30:	0800bc9d 	.word	0x0800bc9d
 800bc34:	0800be73 	.word	0x0800be73
 800bc38:	0800be73 	.word	0x0800be73
 800bc3c:	0800be13 	.word	0x0800be13
 800bc40:	0800be3f 	.word	0x0800be3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	7c12      	ldrb	r2, [r2, #16]
 800bc50:	f107 0108 	add.w	r1, r7, #8
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
 800bc58:	60f8      	str	r0, [r7, #12]
      break;
 800bc5a:	e112      	b.n	800be82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	7c1b      	ldrb	r3, [r3, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10d      	bne.n	800bc80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6c:	f107 0208 	add.w	r2, r7, #8
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc7e:	e100      	b.n	800be82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	f107 0208 	add.w	r2, r7, #8
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4798      	blx	r3
 800bc90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3301      	adds	r3, #1
 800bc96:	2202      	movs	r2, #2
 800bc98:	701a      	strb	r2, [r3, #0]
      break;
 800bc9a:	e0f2      	b.n	800be82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	885b      	ldrh	r3, [r3, #2]
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	f200 80ac 	bhi.w	800be00 <USBD_GetDescriptor+0x204>
 800bca8:	a201      	add	r2, pc, #4	; (adr r2, 800bcb0 <USBD_GetDescriptor+0xb4>)
 800bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcc9 	.word	0x0800bcc9
 800bcb4:	0800bcfd 	.word	0x0800bcfd
 800bcb8:	0800bd31 	.word	0x0800bd31
 800bcbc:	0800bd65 	.word	0x0800bd65
 800bcc0:	0800bd99 	.word	0x0800bd99
 800bcc4:	0800bdcd 	.word	0x0800bdcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00b      	beq.n	800bcec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	7c12      	ldrb	r2, [r2, #16]
 800bce0:	f107 0108 	add.w	r1, r7, #8
 800bce4:	4610      	mov	r0, r2
 800bce6:	4798      	blx	r3
 800bce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcea:	e091      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fa97 	bl	800c222 <USBD_CtlError>
            err++;
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcfa:	e089      	b.n	800be10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00b      	beq.n	800bd20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	7c12      	ldrb	r2, [r2, #16]
 800bd14:	f107 0108 	add.w	r1, r7, #8
 800bd18:	4610      	mov	r0, r2
 800bd1a:	4798      	blx	r3
 800bd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd1e:	e077      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fa7d 	bl	800c222 <USBD_CtlError>
            err++;
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd2e:	e06f      	b.n	800be10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	7c12      	ldrb	r2, [r2, #16]
 800bd48:	f107 0108 	add.w	r1, r7, #8
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	4798      	blx	r3
 800bd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd52:	e05d      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fa63 	bl	800c222 <USBD_CtlError>
            err++;
 800bd5c:	7afb      	ldrb	r3, [r7, #11]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	72fb      	strb	r3, [r7, #11]
          break;
 800bd62:	e055      	b.n	800be10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00b      	beq.n	800bd88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	7c12      	ldrb	r2, [r2, #16]
 800bd7c:	f107 0108 	add.w	r1, r7, #8
 800bd80:	4610      	mov	r0, r2
 800bd82:	4798      	blx	r3
 800bd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd86:	e043      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fa49 	bl	800c222 <USBD_CtlError>
            err++;
 800bd90:	7afb      	ldrb	r3, [r7, #11]
 800bd92:	3301      	adds	r3, #1
 800bd94:	72fb      	strb	r3, [r7, #11]
          break;
 800bd96:	e03b      	b.n	800be10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00b      	beq.n	800bdbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	7c12      	ldrb	r2, [r2, #16]
 800bdb0:	f107 0108 	add.w	r1, r7, #8
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4798      	blx	r3
 800bdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdba:	e029      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fa2f 	bl	800c222 <USBD_CtlError>
            err++;
 800bdc4:	7afb      	ldrb	r3, [r7, #11]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdca:	e021      	b.n	800be10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00b      	beq.n	800bdf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	7c12      	ldrb	r2, [r2, #16]
 800bde4:	f107 0108 	add.w	r1, r7, #8
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
 800bdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdee:	e00f      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa15 	bl	800c222 <USBD_CtlError>
            err++;
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bdfe:	e007      	b.n	800be10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fa0d 	bl	800c222 <USBD_CtlError>
          err++;
 800be08:	7afb      	ldrb	r3, [r7, #11]
 800be0a:	3301      	adds	r3, #1
 800be0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800be0e:	e038      	b.n	800be82 <USBD_GetDescriptor+0x286>
 800be10:	e037      	b.n	800be82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7c1b      	ldrb	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be22:	f107 0208 	add.w	r2, r7, #8
 800be26:	4610      	mov	r0, r2
 800be28:	4798      	blx	r3
 800be2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be2c:	e029      	b.n	800be82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f9f6 	bl	800c222 <USBD_CtlError>
        err++;
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	3301      	adds	r3, #1
 800be3a:	72fb      	strb	r3, [r7, #11]
      break;
 800be3c:	e021      	b.n	800be82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7c1b      	ldrb	r3, [r3, #16]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10d      	bne.n	800be62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4e:	f107 0208 	add.w	r2, r7, #8
 800be52:	4610      	mov	r0, r2
 800be54:	4798      	blx	r3
 800be56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3301      	adds	r3, #1
 800be5c:	2207      	movs	r2, #7
 800be5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be60:	e00f      	b.n	800be82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f9dc 	bl	800c222 <USBD_CtlError>
        err++;
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	3301      	adds	r3, #1
 800be6e:	72fb      	strb	r3, [r7, #11]
      break;
 800be70:	e007      	b.n	800be82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f9d4 	bl	800c222 <USBD_CtlError>
      err++;
 800be7a:	7afb      	ldrb	r3, [r7, #11]
 800be7c:	3301      	adds	r3, #1
 800be7e:	72fb      	strb	r3, [r7, #11]
      break;
 800be80:	bf00      	nop
  }

  if (err != 0U)
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d11c      	bne.n	800bec2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be88:	893b      	ldrh	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d011      	beq.n	800beb2 <USBD_GetDescriptor+0x2b6>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	88db      	ldrh	r3, [r3, #6]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00d      	beq.n	800beb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	88da      	ldrh	r2, [r3, #6]
 800be9a:	893b      	ldrh	r3, [r7, #8]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	bf28      	it	cs
 800bea0:	4613      	movcs	r3, r2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bea6:	893b      	ldrh	r3, [r7, #8]
 800bea8:	461a      	mov	r2, r3
 800beaa:	68f9      	ldr	r1, [r7, #12]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fa22 	bl	800c2f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	88db      	ldrh	r3, [r3, #6]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d104      	bne.n	800bec4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fa79 	bl	800c3b2 <USBD_CtlSendStatus>
 800bec0:	e000      	b.n	800bec4 <USBD_GetDescriptor+0x2c8>
    return;
 800bec2:	bf00      	nop
    }
  }
}
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop

0800becc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	889b      	ldrh	r3, [r3, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d130      	bne.n	800bf40 <USBD_SetAddress+0x74>
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	88db      	ldrh	r3, [r3, #6]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d12c      	bne.n	800bf40 <USBD_SetAddress+0x74>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	885b      	ldrh	r3, [r3, #2]
 800beea:	2b7f      	cmp	r3, #127	; 0x7f
 800beec:	d828      	bhi.n	800bf40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	885b      	ldrh	r3, [r3, #2]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d104      	bne.n	800bf0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f98b 	bl	800c222 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0c:	e01d      	b.n	800bf4a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7bfa      	ldrb	r2, [r7, #15]
 800bf12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 fc93 	bl	800d846 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fa46 	bl	800c3b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2202      	movs	r2, #2
 800bf30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf34:	e009      	b.n	800bf4a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3e:	e004      	b.n	800bf4a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f96d 	bl	800c222 <USBD_CtlError>
  }
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	4b41      	ldr	r3, [pc, #260]	; (800c06c <USBD_SetConfig+0x118>)
 800bf66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf68:	4b40      	ldr	r3, [pc, #256]	; (800c06c <USBD_SetConfig+0x118>)
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d904      	bls.n	800bf7a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f955 	bl	800c222 <USBD_CtlError>
 800bf78:	e075      	b.n	800c066 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d002      	beq.n	800bf8a <USBD_SetConfig+0x36>
 800bf84:	2b03      	cmp	r3, #3
 800bf86:	d023      	beq.n	800bfd0 <USBD_SetConfig+0x7c>
 800bf88:	e062      	b.n	800c050 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf8a:	4b38      	ldr	r3, [pc, #224]	; (800c06c <USBD_SetConfig+0x118>)
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d01a      	beq.n	800bfc8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bf92:	4b36      	ldr	r3, [pc, #216]	; (800c06c <USBD_SetConfig+0x118>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2203      	movs	r2, #3
 800bfa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfa4:	4b31      	ldr	r3, [pc, #196]	; (800c06c <USBD_SetConfig+0x118>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff f9ae 	bl	800b30c <USBD_SetClassConfig>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d104      	bne.n	800bfc0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f932 	bl	800c222 <USBD_CtlError>
            return;
 800bfbe:	e052      	b.n	800c066 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f9f6 	bl	800c3b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfc6:	e04e      	b.n	800c066 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f9f2 	bl	800c3b2 <USBD_CtlSendStatus>
        break;
 800bfce:	e04a      	b.n	800c066 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfd0:	4b26      	ldr	r3, [pc, #152]	; (800c06c <USBD_SetConfig+0x118>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d112      	bne.n	800bffe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bfe0:	4b22      	ldr	r3, [pc, #136]	; (800c06c <USBD_SetConfig+0x118>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bfea:	4b20      	ldr	r3, [pc, #128]	; (800c06c <USBD_SetConfig+0x118>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff f9aa 	bl	800b34a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9db 	bl	800c3b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bffc:	e033      	b.n	800c066 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bffe:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <USBD_SetConfig+0x118>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d01d      	beq.n	800c048 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff f998 	bl	800b34a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c01a:	4b14      	ldr	r3, [pc, #80]	; (800c06c <USBD_SetConfig+0x118>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c024:	4b11      	ldr	r3, [pc, #68]	; (800c06c <USBD_SetConfig+0x118>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff f96e 	bl	800b30c <USBD_SetClassConfig>
 800c030:	4603      	mov	r3, r0
 800c032:	2b02      	cmp	r3, #2
 800c034:	d104      	bne.n	800c040 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f8f2 	bl	800c222 <USBD_CtlError>
            return;
 800c03e:	e012      	b.n	800c066 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f9b6 	bl	800c3b2 <USBD_CtlSendStatus>
        break;
 800c046:	e00e      	b.n	800c066 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f9b2 	bl	800c3b2 <USBD_CtlSendStatus>
        break;
 800c04e:	e00a      	b.n	800c066 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f8e5 	bl	800c222 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c058:	4b04      	ldr	r3, [pc, #16]	; (800c06c <USBD_SetConfig+0x118>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff f973 	bl	800b34a <USBD_ClrClassConfig>
        break;
 800c064:	bf00      	nop
    }
  }
}
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	2000071c 	.word	0x2000071c

0800c070 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	88db      	ldrh	r3, [r3, #6]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d004      	beq.n	800c08c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f8cc 	bl	800c222 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c08a:	e022      	b.n	800c0d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c092:	2b02      	cmp	r3, #2
 800c094:	dc02      	bgt.n	800c09c <USBD_GetConfig+0x2c>
 800c096:	2b00      	cmp	r3, #0
 800c098:	dc03      	bgt.n	800c0a2 <USBD_GetConfig+0x32>
 800c09a:	e015      	b.n	800c0c8 <USBD_GetConfig+0x58>
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d00b      	beq.n	800c0b8 <USBD_GetConfig+0x48>
 800c0a0:	e012      	b.n	800c0c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f920 	bl	800c2f6 <USBD_CtlSendData>
        break;
 800c0b6:	e00c      	b.n	800c0d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	2201      	movs	r2, #1
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f918 	bl	800c2f6 <USBD_CtlSendData>
        break;
 800c0c6:	e004      	b.n	800c0d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f8a9 	bl	800c222 <USBD_CtlError>
        break;
 800c0d0:	bf00      	nop
}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d81e      	bhi.n	800c12e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	88db      	ldrh	r3, [r3, #6]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d004      	beq.n	800c102 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f891 	bl	800c222 <USBD_CtlError>
        break;
 800c100:	e01a      	b.n	800c138 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d005      	beq.n	800c11e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f043 0202 	orr.w	r2, r3, #2
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	330c      	adds	r3, #12
 800c122:	2202      	movs	r2, #2
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f8e5 	bl	800c2f6 <USBD_CtlSendData>
      break;
 800c12c:	e004      	b.n	800c138 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f876 	bl	800c222 <USBD_CtlError>
      break;
 800c136:	bf00      	nop
  }
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	885b      	ldrh	r3, [r3, #2]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d106      	bne.n	800c160 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f929 	bl	800c3b2 <USBD_CtlSendStatus>
  }
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c178:	3b01      	subs	r3, #1
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d80b      	bhi.n	800c196 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	885b      	ldrh	r3, [r3, #2]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d10c      	bne.n	800c1a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f90f 	bl	800c3b2 <USBD_CtlSendStatus>
      }
      break;
 800c194:	e004      	b.n	800c1a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f842 	bl	800c222 <USBD_CtlError>
      break;
 800c19e:	e000      	b.n	800c1a2 <USBD_ClrFeature+0x3a>
      break;
 800c1a0:	bf00      	nop
  }
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	781a      	ldrb	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	785a      	ldrb	r2, [r3, #1]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	3302      	adds	r3, #2
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	3303      	adds	r3, #3
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	021b      	lsls	r3, r3, #8
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	4413      	add	r3, r2
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	3305      	adds	r3, #5
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	021b      	lsls	r3, r3, #8
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	4413      	add	r3, r2
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	3306      	adds	r3, #6
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	b29a      	uxth	r2, r3
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	3307      	adds	r3, #7
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	021b      	lsls	r3, r3, #8
 800c20e:	b29b      	uxth	r3, r3
 800c210:	4413      	add	r3, r2
 800c212:	b29a      	uxth	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	80da      	strh	r2, [r3, #6]

}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bc80      	pop	{r7}
 800c220:	4770      	bx	lr

0800c222 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c22c:	2180      	movs	r1, #128	; 0x80
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 faa0 	bl	800d774 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c234:	2100      	movs	r1, #0
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f001 fa9c 	bl	800d774 <USBD_LL_StallEP>
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c250:	2300      	movs	r3, #0
 800c252:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d032      	beq.n	800c2c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f000 f834 	bl	800c2c8 <USBD_GetLen>
 800c260:	4603      	mov	r3, r0
 800c262:	3301      	adds	r3, #1
 800c264:	b29b      	uxth	r3, r3
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	75fa      	strb	r2, [r7, #23]
 800c274:	461a      	mov	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	4413      	add	r3, r2
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	7812      	ldrb	r2, [r2, #0]
 800c27e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	75fa      	strb	r2, [r7, #23]
 800c286:	461a      	mov	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	4413      	add	r3, r2
 800c28c:	2203      	movs	r2, #3
 800c28e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c290:	e012      	b.n	800c2b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	60fa      	str	r2, [r7, #12]
 800c298:	7dfa      	ldrb	r2, [r7, #23]
 800c29a:	1c51      	adds	r1, r2, #1
 800c29c:	75f9      	strb	r1, [r7, #23]
 800c29e:	4611      	mov	r1, r2
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	440a      	add	r2, r1
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	75fa      	strb	r2, [r7, #23]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e8      	bne.n	800c292 <USBD_GetString+0x4e>
    }
  }
}
 800c2c0:	bf00      	nop
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c2d4:	e005      	b.n	800c2e2 <USBD_GetLen+0x1a>
  {
    len++;
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f5      	bne.n	800c2d6 <USBD_GetLen+0xe>
  }

  return len;
 800c2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bc80      	pop	{r7}
 800c2f4:	4770      	bx	lr

0800c2f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	4613      	mov	r3, r2
 800c302:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2202      	movs	r2, #2
 800c308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c30c:	88fa      	ldrh	r2, [r7, #6]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c312:	88fa      	ldrh	r2, [r7, #6]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c318:	88fb      	ldrh	r3, [r7, #6]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	2100      	movs	r1, #0
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f001 fab0 	bl	800d884 <USBD_LL_Transmit>

  return USBD_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	60f8      	str	r0, [r7, #12]
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	4613      	mov	r3, r2
 800c33a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	2100      	movs	r1, #0
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f001 fa9e 	bl	800d884 <USBD_LL_Transmit>

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2203      	movs	r2, #3
 800c364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c368:	88fa      	ldrh	r2, [r7, #6]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c370:	88fa      	ldrh	r2, [r7, #6]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c378:	88fb      	ldrh	r3, [r7, #6]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	2100      	movs	r1, #0
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f001 faa3 	bl	800d8ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	4613      	mov	r3, r2
 800c39a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c39c:	88fb      	ldrh	r3, [r7, #6]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f001 fa91 	bl	800d8ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2204      	movs	r2, #4
 800c3be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f001 fa5b 	bl	800d884 <USBD_LL_Transmit>

  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2205      	movs	r2, #5
 800c3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f001 fa6b 	bl	800d8ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	4613      	mov	r3, r2
 800c40c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c40e:	2301      	movs	r3, #1
 800c410:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c416:	4b1e      	ldr	r3, [pc, #120]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c418:	7a5b      	ldrb	r3, [r3, #9]
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d831      	bhi.n	800c484 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c420:	4b1b      	ldr	r3, [pc, #108]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c422:	7a5b      	ldrb	r3, [r3, #9]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	461a      	mov	r2, r3
 800c428:	4b19      	ldr	r3, [pc, #100]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c42a:	2100      	movs	r1, #0
 800c42c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c42e:	4b18      	ldr	r3, [pc, #96]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c430:	7a5b      	ldrb	r3, [r3, #9]
 800c432:	b2db      	uxtb	r3, r3
 800c434:	4a16      	ldr	r2, [pc, #88]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c440:	7a5b      	ldrb	r3, [r3, #9]
 800c442:	b2db      	uxtb	r3, r3
 800c444:	461a      	mov	r2, r3
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c448:	4413      	add	r3, r2
 800c44a:	79fa      	ldrb	r2, [r7, #7]
 800c44c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c44e:	4b10      	ldr	r3, [pc, #64]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c450:	7a5b      	ldrb	r3, [r3, #9]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	b2d1      	uxtb	r1, r2
 800c458:	4a0d      	ldr	r2, [pc, #52]	; (800c490 <FATFS_LinkDriverEx+0x90>)
 800c45a:	7251      	strb	r1, [r2, #9]
 800c45c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c45e:	7dbb      	ldrb	r3, [r7, #22]
 800c460:	3330      	adds	r3, #48	; 0x30
 800c462:	b2da      	uxtb	r2, r3
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	3301      	adds	r3, #1
 800c46c:	223a      	movs	r2, #58	; 0x3a
 800c46e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	3302      	adds	r3, #2
 800c474:	222f      	movs	r2, #47	; 0x2f
 800c476:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	3303      	adds	r3, #3
 800c47c:	2200      	movs	r2, #0
 800c47e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c484:	7dfb      	ldrb	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	371c      	adds	r7, #28
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bc80      	pop	{r7}
 800c48e:	4770      	bx	lr
 800c490:	20000720 	.word	0x20000720

0800c494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ffac 	bl	800c400 <FATFS_LinkDriverEx>
 800c4a8:	4603      	mov	r3, r0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c4be:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <SD_initialize+0x38>)
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800c4c4:	f7fe fb94 	bl	800abf0 <BSP_SD_Init>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d107      	bne.n	800c4de <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c4ce:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <SD_initialize+0x38>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f023 0301 	bic.w	r3, r3, #1
 800c4d8:	b2da      	uxtb	r2, r3
 800c4da:	4b04      	ldr	r3, [pc, #16]	; (800c4ec <SD_initialize+0x38>)
 800c4dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c4de:	4b03      	ldr	r3, [pc, #12]	; (800c4ec <SD_initialize+0x38>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	b2db      	uxtb	r3, r3
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	2000015b 	.word	0x2000015b

0800c4f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c4fa:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <SD_status+0x38>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c500:	f7fe fbd8 	bl	800acb4 <BSP_SD_GetCardState>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d107      	bne.n	800c51a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c50a:	4b07      	ldr	r3, [pc, #28]	; (800c528 <SD_status+0x38>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f023 0301 	bic.w	r3, r3, #1
 800c514:	b2da      	uxtb	r2, r3
 800c516:	4b04      	ldr	r3, [pc, #16]	; (800c528 <SD_status+0x38>)
 800c518:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c51a:	4b03      	ldr	r3, [pc, #12]	; (800c528 <SD_status+0x38>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	b2db      	uxtb	r3, r3
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	2000015b 	.word	0x2000015b

0800c52c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c540:	4b0f      	ldr	r3, [pc, #60]	; (800c580 <SD_read+0x54>)
 800c542:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <SD_read+0x58>)
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	68b8      	ldr	r0, [r7, #8]
 800c54c:	f7fe fb76 	bl	800ac3c <BSP_SD_ReadBlocks>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10e      	bne.n	800c574 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c556:	e006      	b.n	800c566 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	1e5a      	subs	r2, r3, #1
 800c55c:	613a      	str	r2, [r7, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <SD_read+0x3a>
      {
        return RES_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e007      	b.n	800c576 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c566:	f7fe fba5 	bl	800acb4 <BSP_SD_GetCardState>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f3      	bne.n	800c558 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c574:	7dfb      	ldrb	r3, [r7, #23]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	000186a0 	.word	0x000186a0
 800c584:	05f5e100 	.word	0x05f5e100

0800c588 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c59c:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <SD_write+0x54>)
 800c59e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <SD_write+0x58>)
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	68b8      	ldr	r0, [r7, #8]
 800c5a8:	f7fe fb66 	bl	800ac78 <BSP_SD_WriteBlocks>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10e      	bne.n	800c5d0 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c5b2:	e006      	b.n	800c5c2 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1e5a      	subs	r2, r3, #1
 800c5b8:	613a      	str	r2, [r7, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <SD_write+0x3a>
      {
        return RES_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e007      	b.n	800c5d2 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c5c2:	f7fe fb77 	bl	800acb4 <BSP_SD_GetCardState>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1f3      	bne.n	800c5b4 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	000186a0 	.word	0x000186a0
 800c5e0:	05f5e100 	.word	0x05f5e100

0800c5e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08c      	sub	sp, #48	; 0x30
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	603a      	str	r2, [r7, #0]
 800c5ee:	71fb      	strb	r3, [r7, #7]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c5fa:	4b24      	ldr	r3, [pc, #144]	; (800c68c <SD_ioctl+0xa8>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <SD_ioctl+0x28>
 800c608:	2303      	movs	r3, #3
 800c60a:	e03b      	b.n	800c684 <SD_ioctl+0xa0>
  
  switch (cmd)
 800c60c:	79bb      	ldrb	r3, [r7, #6]
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d833      	bhi.n	800c67a <SD_ioctl+0x96>
 800c612:	a201      	add	r2, pc, #4	; (adr r2, 800c618 <SD_ioctl+0x34>)
 800c614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c618:	0800c629 	.word	0x0800c629
 800c61c:	0800c631 	.word	0x0800c631
 800c620:	0800c649 	.word	0x0800c649
 800c624:	0800c663 	.word	0x0800c663
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c62e:	e027      	b.n	800c680 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c630:	f107 030c 	add.w	r3, r7, #12
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fb4d 	bl	800acd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c646:	e01b      	b.n	800c680 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c648:	f107 030c 	add.w	r3, r7, #12
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe fb41 	bl	800acd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c654:	b29a      	uxth	r2, r3
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c660:	e00e      	b.n	800c680 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c662:	f107 030c 	add.w	r3, r7, #12
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe fb34 	bl	800acd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c678:	e002      	b.n	800c680 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800c67a:	2304      	movs	r3, #4
 800c67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800c680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c684:	4618      	mov	r0, r3
 800c686:	3730      	adds	r7, #48	; 0x30
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	2000015b 	.word	0x2000015b

0800c690 <Button_IncTick>:
} ;

struct Button_Struct Button[BUTTONS];


void Button_IncTick(void){
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
	static uint8_t inc_div;
	if (inc_div) {inc_div--;}	//Входной делитель частоты опроса
 800c696:	4bb9      	ldr	r3, [pc, #740]	; (800c97c <Button_IncTick+0x2ec>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d006      	beq.n	800c6ac <Button_IncTick+0x1c>
 800c69e:	4bb7      	ldr	r3, [pc, #732]	; (800c97c <Button_IncTick+0x2ec>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4bb5      	ldr	r3, [pc, #724]	; (800c97c <Button_IncTick+0x2ec>)
 800c6a8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 800c6aa:	e186      	b.n	800c9ba <Button_IncTick+0x32a>
		inc_div = DIVIDER;		//на 10
 800c6ac:	4bb3      	ldr	r3, [pc, #716]	; (800c97c <Button_IncTick+0x2ec>)
 800c6ae:	220a      	movs	r2, #10
 800c6b0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	71fb      	strb	r3, [r7, #7]
 800c6b6:	e17c      	b.n	800c9b2 <Button_IncTick+0x322>
			uint8_t tmp = HAL_GPIO_ReadPin(Button[i].Port, Button[i].Pin);
 800c6b8:	79fa      	ldrb	r2, [r7, #7]
 800c6ba:	49b1      	ldr	r1, [pc, #708]	; (800c980 <Button_IncTick+0x2f0>)
 800c6bc:	4613      	mov	r3, r2
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	4413      	add	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	440b      	add	r3, r1
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	79fa      	ldrb	r2, [r7, #7]
 800c6ca:	49ad      	ldr	r1, [pc, #692]	; (800c980 <Button_IncTick+0x2f0>)
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f7f6 fefe 	bl	80034dc <HAL_GPIO_ReadPin>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	71bb      	strb	r3, [r7, #6]
			if (tmp == Button[i].PinState) {
 800c6e4:	79fa      	ldrb	r2, [r7, #7]
 800c6e6:	49a6      	ldr	r1, [pc, #664]	; (800c980 <Button_IncTick+0x2f0>)
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	4413      	add	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	440b      	add	r3, r1
 800c6f2:	3306      	adds	r3, #6
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	79ba      	ldrb	r2, [r7, #6]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d173      	bne.n	800c7e4 <Button_IncTick+0x154>
				if (Button[i].Timer) {
 800c6fc:	79fa      	ldrb	r2, [r7, #7]
 800c6fe:	49a0      	ldr	r1, [pc, #640]	; (800c980 <Button_IncTick+0x2f0>)
 800c700:	4613      	mov	r3, r2
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	4413      	add	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	440b      	add	r3, r1
 800c70a:	3308      	adds	r3, #8
 800c70c:	881b      	ldrh	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f000 814c 	beq.w	800c9ac <Button_IncTick+0x31c>
					Button[i].Timer++;
 800c714:	79fa      	ldrb	r2, [r7, #7]
 800c716:	499a      	ldr	r1, [pc, #616]	; (800c980 <Button_IncTick+0x2f0>)
 800c718:	4613      	mov	r3, r2
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	4413      	add	r3, r2
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	440b      	add	r3, r1
 800c722:	3308      	adds	r3, #8
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	3301      	adds	r3, #1
 800c728:	b298      	uxth	r0, r3
 800c72a:	4995      	ldr	r1, [pc, #596]	; (800c980 <Button_IncTick+0x2f0>)
 800c72c:	4613      	mov	r3, r2
 800c72e:	005b      	lsls	r3, r3, #1
 800c730:	4413      	add	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	440b      	add	r3, r1
 800c736:	3308      	adds	r3, #8
 800c738:	4602      	mov	r2, r0
 800c73a:	801a      	strh	r2, [r3, #0]
					if(Button[i].Timer == SHORT_TIME){
 800c73c:	79fa      	ldrb	r2, [r7, #7]
 800c73e:	4990      	ldr	r1, [pc, #576]	; (800c980 <Button_IncTick+0x2f0>)
 800c740:	4613      	mov	r3, r2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	4413      	add	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	440b      	add	r3, r1
 800c74a:	3308      	adds	r3, #8
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	2b1e      	cmp	r3, #30
 800c750:	d123      	bne.n	800c79a <Button_IncTick+0x10a>
						if ((Button[i].Event == SHORT_CLC)||(Button[i].Event == DOUBLE_CLC)){
 800c752:	79fa      	ldrb	r2, [r7, #7]
 800c754:	498a      	ldr	r1, [pc, #552]	; (800c980 <Button_IncTick+0x2f0>)
 800c756:	4613      	mov	r3, r2
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	440b      	add	r3, r1
 800c760:	330a      	adds	r3, #10
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b02      	cmp	r3, #2
 800c766:	d00a      	beq.n	800c77e <Button_IncTick+0xee>
 800c768:	79fa      	ldrb	r2, [r7, #7]
 800c76a:	4985      	ldr	r1, [pc, #532]	; (800c980 <Button_IncTick+0x2f0>)
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	440b      	add	r3, r1
 800c776:	330a      	adds	r3, #10
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d10d      	bne.n	800c79a <Button_IncTick+0x10a>
							Event_Button(i, Button[i].Event);					// отправка по таймеру
 800c77e:	79fa      	ldrb	r2, [r7, #7]
 800c780:	497f      	ldr	r1, [pc, #508]	; (800c980 <Button_IncTick+0x2f0>)
 800c782:	4613      	mov	r3, r2
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	440b      	add	r3, r1
 800c78c:	330a      	adds	r3, #10
 800c78e:	781a      	ldrb	r2, [r3, #0]
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f917 	bl	800c9c8 <Event_Button>
					if(Button[i].Timer == LONG_TIME){							// Тут мы если вместо кнопки переключатель
 800c79a:	79fa      	ldrb	r2, [r7, #7]
 800c79c:	4978      	ldr	r1, [pc, #480]	; (800c980 <Button_IncTick+0x2f0>)
 800c79e:	4613      	mov	r3, r2
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	440b      	add	r3, r1
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	2b50      	cmp	r3, #80	; 0x50
 800c7ae:	f040 80fd 	bne.w	800c9ac <Button_IncTick+0x31c>
						Button[i].Event = SWITCH;
 800c7b2:	79fa      	ldrb	r2, [r7, #7]
 800c7b4:	4972      	ldr	r1, [pc, #456]	; (800c980 <Button_IncTick+0x2f0>)
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	4413      	add	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	440b      	add	r3, r1
 800c7c0:	330a      	adds	r3, #10
 800c7c2:	2205      	movs	r2, #5
 800c7c4:	701a      	strb	r2, [r3, #0]
						Event_Button(i, Button[i].Event);
 800c7c6:	79fa      	ldrb	r2, [r7, #7]
 800c7c8:	496d      	ldr	r1, [pc, #436]	; (800c980 <Button_IncTick+0x2f0>)
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	440b      	add	r3, r1
 800c7d4:	330a      	adds	r3, #10
 800c7d6:	781a      	ldrb	r2, [r3, #0]
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	4611      	mov	r1, r2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 f8f3 	bl	800c9c8 <Event_Button>
 800c7e2:	e0e3      	b.n	800c9ac <Button_IncTick+0x31c>
				Button[i].PinState = tmp;
 800c7e4:	79fa      	ldrb	r2, [r7, #7]
 800c7e6:	4966      	ldr	r1, [pc, #408]	; (800c980 <Button_IncTick+0x2f0>)
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	4413      	add	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3306      	adds	r3, #6
 800c7f4:	79ba      	ldrb	r2, [r7, #6]
 800c7f6:	701a      	strb	r2, [r3, #0]
				if (Button[i].Timer > NOISE_TIME){								// если таймер больше 10 мс.
 800c7f8:	79fa      	ldrb	r2, [r7, #7]
 800c7fa:	4961      	ldr	r1, [pc, #388]	; (800c980 <Button_IncTick+0x2f0>)
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	4413      	add	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	440b      	add	r3, r1
 800c806:	3308      	adds	r3, #8
 800c808:	881b      	ldrh	r3, [r3, #0]
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	f240 8096 	bls.w	800c93c <Button_IncTick+0x2ac>
					if(Button[i].Timer < SHORT_TIME){							// если это меньше 300 мс
 800c810:	79fa      	ldrb	r2, [r7, #7]
 800c812:	495b      	ldr	r1, [pc, #364]	; (800c980 <Button_IncTick+0x2f0>)
 800c814:	4613      	mov	r3, r2
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	4413      	add	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	440b      	add	r3, r1
 800c81e:	3308      	adds	r3, #8
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	2b1d      	cmp	r3, #29
 800c824:	d850      	bhi.n	800c8c8 <Button_IncTick+0x238>
						Button[i].Timer = 1;
 800c826:	79fa      	ldrb	r2, [r7, #7]
 800c828:	4955      	ldr	r1, [pc, #340]	; (800c980 <Button_IncTick+0x2f0>)
 800c82a:	4613      	mov	r3, r2
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	4413      	add	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	440b      	add	r3, r1
 800c834:	3308      	adds	r3, #8
 800c836:	2201      	movs	r2, #1
 800c838:	801a      	strh	r2, [r3, #0]
						if(Button[i].Event == PRESS){							// если в событиях было пусто
 800c83a:	79fa      	ldrb	r2, [r7, #7]
 800c83c:	4950      	ldr	r1, [pc, #320]	; (800c980 <Button_IncTick+0x2f0>)
 800c83e:	4613      	mov	r3, r2
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	4413      	add	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	440b      	add	r3, r1
 800c848:	330a      	adds	r3, #10
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10a      	bne.n	800c866 <Button_IncTick+0x1d6>
							Button[i].Event = SHORT_CLC;						// То фиксируем первое нажатие. Но не отправляем, а запускаем таймер снова
 800c850:	79fa      	ldrb	r2, [r7, #7]
 800c852:	494b      	ldr	r1, [pc, #300]	; (800c980 <Button_IncTick+0x2f0>)
 800c854:	4613      	mov	r3, r2
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	440b      	add	r3, r1
 800c85e:	330a      	adds	r3, #10
 800c860:	2202      	movs	r2, #2
 800c862:	701a      	strb	r2, [r3, #0]
 800c864:	e0a2      	b.n	800c9ac <Button_IncTick+0x31c>
						else if(Button[i].Event == SHORT_CLC){					// если нажатие уже было
 800c866:	79fa      	ldrb	r2, [r7, #7]
 800c868:	4945      	ldr	r1, [pc, #276]	; (800c980 <Button_IncTick+0x2f0>)
 800c86a:	4613      	mov	r3, r2
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	4413      	add	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	440b      	add	r3, r1
 800c874:	330a      	adds	r3, #10
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d10a      	bne.n	800c892 <Button_IncTick+0x202>
							Button[i].Event = DOUBLE_CLC; 						// Фиксируем двойное нажатие
 800c87c:	79fa      	ldrb	r2, [r7, #7]
 800c87e:	4940      	ldr	r1, [pc, #256]	; (800c980 <Button_IncTick+0x2f0>)
 800c880:	4613      	mov	r3, r2
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	440b      	add	r3, r1
 800c88a:	330a      	adds	r3, #10
 800c88c:	2203      	movs	r2, #3
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	e08c      	b.n	800c9ac <Button_IncTick+0x31c>
						else if(Button[i].Event == DOUBLE_CLC){					//
 800c892:	79fa      	ldrb	r2, [r7, #7]
 800c894:	493a      	ldr	r1, [pc, #232]	; (800c980 <Button_IncTick+0x2f0>)
 800c896:	4613      	mov	r3, r2
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	440b      	add	r3, r1
 800c8a0:	330a      	adds	r3, #10
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	f040 8081 	bne.w	800c9ac <Button_IncTick+0x31c>
							Event_Button(i, Button[i].Event); 					// Двойное отправляем сразу или по таймеру.
 800c8aa:	79fa      	ldrb	r2, [r7, #7]
 800c8ac:	4934      	ldr	r1, [pc, #208]	; (800c980 <Button_IncTick+0x2f0>)
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	440b      	add	r3, r1
 800c8b8:	330a      	adds	r3, #10
 800c8ba:	781a      	ldrb	r2, [r3, #0]
 800c8bc:	79fb      	ldrb	r3, [r7, #7]
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 f881 	bl	800c9c8 <Event_Button>
 800c8c6:	e071      	b.n	800c9ac <Button_IncTick+0x31c>
					else if(Button[i].Timer < LONG_TIME){						// Если мы были в нажатом положении больше 200 мс
 800c8c8:	79fa      	ldrb	r2, [r7, #7]
 800c8ca:	492d      	ldr	r1, [pc, #180]	; (800c980 <Button_IncTick+0x2f0>)
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	4413      	add	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	440b      	add	r3, r1
 800c8d6:	3308      	adds	r3, #8
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	2b4f      	cmp	r3, #79	; 0x4f
 800c8dc:	d823      	bhi.n	800c926 <Button_IncTick+0x296>
						if(Button[i].Event == PRESS){							//
 800c8de:	79fa      	ldrb	r2, [r7, #7]
 800c8e0:	4927      	ldr	r1, [pc, #156]	; (800c980 <Button_IncTick+0x2f0>)
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	4413      	add	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	440b      	add	r3, r1
 800c8ec:	330a      	adds	r3, #10
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d15b      	bne.n	800c9ac <Button_IncTick+0x31c>
							Button[i].Event = LONG_CLC; 						// Фиксируем длинное нажатие
 800c8f4:	79fa      	ldrb	r2, [r7, #7]
 800c8f6:	4922      	ldr	r1, [pc, #136]	; (800c980 <Button_IncTick+0x2f0>)
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	4413      	add	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	440b      	add	r3, r1
 800c902:	330a      	adds	r3, #10
 800c904:	2204      	movs	r2, #4
 800c906:	701a      	strb	r2, [r3, #0]
							Event_Button(i, Button[i].Event);
 800c908:	79fa      	ldrb	r2, [r7, #7]
 800c90a:	491d      	ldr	r1, [pc, #116]	; (800c980 <Button_IncTick+0x2f0>)
 800c90c:	4613      	mov	r3, r2
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	440b      	add	r3, r1
 800c916:	330a      	adds	r3, #10
 800c918:	781a      	ldrb	r2, [r3, #0]
 800c91a:	79fb      	ldrb	r3, [r7, #7]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 f852 	bl	800c9c8 <Event_Button>
 800c924:	e042      	b.n	800c9ac <Button_IncTick+0x31c>
						Button[i].Timer = 0;
 800c926:	79fa      	ldrb	r2, [r7, #7]
 800c928:	4915      	ldr	r1, [pc, #84]	; (800c980 <Button_IncTick+0x2f0>)
 800c92a:	4613      	mov	r3, r2
 800c92c:	005b      	lsls	r3, r3, #1
 800c92e:	4413      	add	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	440b      	add	r3, r1
 800c934:	3308      	adds	r3, #8
 800c936:	2200      	movs	r2, #0
 800c938:	801a      	strh	r2, [r3, #0]
 800c93a:	e037      	b.n	800c9ac <Button_IncTick+0x31c>
					if (Button[i].Timer) {										// если таймер меньше 10 мс.
 800c93c:	79fa      	ldrb	r2, [r7, #7]
 800c93e:	4910      	ldr	r1, [pc, #64]	; (800c980 <Button_IncTick+0x2f0>)
 800c940:	4613      	mov	r3, r2
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	440b      	add	r3, r1
 800c94a:	3308      	adds	r3, #8
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d018      	beq.n	800c984 <Button_IncTick+0x2f4>
						Button[i].Timer = 0;
 800c952:	79fa      	ldrb	r2, [r7, #7]
 800c954:	490a      	ldr	r1, [pc, #40]	; (800c980 <Button_IncTick+0x2f0>)
 800c956:	4613      	mov	r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	440b      	add	r3, r1
 800c960:	3308      	adds	r3, #8
 800c962:	2200      	movs	r2, #0
 800c964:	801a      	strh	r2, [r3, #0]
						Button[i].Event = NONE;
 800c966:	79fa      	ldrb	r2, [r7, #7]
 800c968:	4905      	ldr	r1, [pc, #20]	; (800c980 <Button_IncTick+0x2f0>)
 800c96a:	4613      	mov	r3, r2
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	440b      	add	r3, r1
 800c974:	330a      	adds	r3, #10
 800c976:	2200      	movs	r2, #0
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	e017      	b.n	800c9ac <Button_IncTick+0x31c>
 800c97c:	20000774 	.word	0x20000774
 800c980:	2000072c 	.word	0x2000072c
						Button[i].Event = PRESS;
 800c984:	79fa      	ldrb	r2, [r7, #7]
 800c986:	490f      	ldr	r1, [pc, #60]	; (800c9c4 <Button_IncTick+0x334>)
 800c988:	4613      	mov	r3, r2
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	440b      	add	r3, r1
 800c992:	330a      	adds	r3, #10
 800c994:	2201      	movs	r2, #1
 800c996:	701a      	strb	r2, [r3, #0]
						Button[i].Timer = 1;									// Первре срабатывание.
 800c998:	79fa      	ldrb	r2, [r7, #7]
 800c99a:	490a      	ldr	r1, [pc, #40]	; (800c9c4 <Button_IncTick+0x334>)
 800c99c:	4613      	mov	r3, r2
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	4413      	add	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	440b      	add	r3, r1
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	71fb      	strb	r3, [r7, #7]
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	2b05      	cmp	r3, #5
 800c9b6:	f67f ae7f 	bls.w	800c6b8 <Button_IncTick+0x28>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	2000072c 	.word	0x2000072c

0800c9c8 <Event_Button>:
void Event_Button (uint8_t Butt, Button_events_TypeDef Event){
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	460a      	mov	r2, r1
 800c9d2:	71fb      	strb	r3, [r7, #7]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	71bb      	strb	r3, [r7, #6]


	Buttons_Handler(Butt, Event);
 800c9d8:	79ba      	ldrb	r2, [r7, #6]
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f4 f9a8 	bl	8000d34 <Buttons_Handler>
//	uint8_t Send_msg[25] = "Button [x] type [x]\r\n";
//	Send_msg[8] = Butt + 0x30;
//	Send_msg[17] = Event + 0x30;
//	Debug_UART( Send_msg, DBG_BTN,  21);

	Button[Butt].Event = NONE;
 800c9e4:	79fa      	ldrb	r2, [r7, #7]
 800c9e6:	490b      	ldr	r1, [pc, #44]	; (800ca14 <Event_Button+0x4c>)
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	4413      	add	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	440b      	add	r3, r1
 800c9f2:	330a      	adds	r3, #10
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	701a      	strb	r2, [r3, #0]
	Button[Butt].Timer = 0;
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	4906      	ldr	r1, [pc, #24]	; (800ca14 <Event_Button+0x4c>)
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	4413      	add	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	440b      	add	r3, r1
 800ca06:	3308      	adds	r3, #8
 800ca08:	2200      	movs	r2, #0
 800ca0a:	801a      	strh	r2, [r3, #0]

}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	2000072c 	.word	0x2000072c

0800ca18 <Buttons_Init>:


};


void Buttons_Init (void){
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	af00      	add	r7, sp, #0

	Button[0].Port = In1_GPIO_Port;
 800ca1c:	4b45      	ldr	r3, [pc, #276]	; (800cb34 <Buttons_Init+0x11c>)
 800ca1e:	4a46      	ldr	r2, [pc, #280]	; (800cb38 <Buttons_Init+0x120>)
 800ca20:	601a      	str	r2, [r3, #0]
	Button[1].Port = In2_GPIO_Port;
 800ca22:	4b44      	ldr	r3, [pc, #272]	; (800cb34 <Buttons_Init+0x11c>)
 800ca24:	4a44      	ldr	r2, [pc, #272]	; (800cb38 <Buttons_Init+0x120>)
 800ca26:	60da      	str	r2, [r3, #12]
	Button[2].Port = In3_GPIO_Port;
 800ca28:	4b42      	ldr	r3, [pc, #264]	; (800cb34 <Buttons_Init+0x11c>)
 800ca2a:	4a44      	ldr	r2, [pc, #272]	; (800cb3c <Buttons_Init+0x124>)
 800ca2c:	619a      	str	r2, [r3, #24]
	Button[3].Port = In4_GPIO_Port;
 800ca2e:	4b41      	ldr	r3, [pc, #260]	; (800cb34 <Buttons_Init+0x11c>)
 800ca30:	4a42      	ldr	r2, [pc, #264]	; (800cb3c <Buttons_Init+0x124>)
 800ca32:	625a      	str	r2, [r3, #36]	; 0x24
	Button[4].Port = In5_GPIO_Port;
 800ca34:	4b3f      	ldr	r3, [pc, #252]	; (800cb34 <Buttons_Init+0x11c>)
 800ca36:	4a41      	ldr	r2, [pc, #260]	; (800cb3c <Buttons_Init+0x124>)
 800ca38:	631a      	str	r2, [r3, #48]	; 0x30
	Button[5].Port = In6_GPIO_Port;
 800ca3a:	4b3e      	ldr	r3, [pc, #248]	; (800cb34 <Buttons_Init+0x11c>)
 800ca3c:	4a3f      	ldr	r2, [pc, #252]	; (800cb3c <Buttons_Init+0x124>)
 800ca3e:	63da      	str	r2, [r3, #60]	; 0x3c

	Button[0].Pin = In1_Pin;
 800ca40:	4b3c      	ldr	r3, [pc, #240]	; (800cb34 <Buttons_Init+0x11c>)
 800ca42:	2240      	movs	r2, #64	; 0x40
 800ca44:	809a      	strh	r2, [r3, #4]
	Button[1].Pin = In2_Pin;
 800ca46:	4b3b      	ldr	r3, [pc, #236]	; (800cb34 <Buttons_Init+0x11c>)
 800ca48:	2280      	movs	r2, #128	; 0x80
 800ca4a:	821a      	strh	r2, [r3, #16]
	Button[2].Pin = In3_Pin;
 800ca4c:	4b39      	ldr	r3, [pc, #228]	; (800cb34 <Buttons_Init+0x11c>)
 800ca4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ca52:	839a      	strh	r2, [r3, #28]
	Button[3].Pin = In4_Pin;
 800ca54:	4b37      	ldr	r3, [pc, #220]	; (800cb34 <Buttons_Init+0x11c>)
 800ca56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca5a:	851a      	strh	r2, [r3, #40]	; 0x28
	Button[4].Pin = In5_Pin;
 800ca5c:	4b35      	ldr	r3, [pc, #212]	; (800cb34 <Buttons_Init+0x11c>)
 800ca5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ca62:	869a      	strh	r2, [r3, #52]	; 0x34
	Button[5].Pin = In6_Pin;
 800ca64:	4b33      	ldr	r3, [pc, #204]	; (800cb34 <Buttons_Init+0x11c>)
 800ca66:	2204      	movs	r2, #4
 800ca68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	Button[0].PinState = HAL_GPIO_ReadPin(Button[0].Port, Button[0].Pin);
 800ca6c:	4b31      	ldr	r3, [pc, #196]	; (800cb34 <Buttons_Init+0x11c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a30      	ldr	r2, [pc, #192]	; (800cb34 <Buttons_Init+0x11c>)
 800ca72:	8892      	ldrh	r2, [r2, #4]
 800ca74:	4611      	mov	r1, r2
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f6 fd30 	bl	80034dc <HAL_GPIO_ReadPin>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4b2c      	ldr	r3, [pc, #176]	; (800cb34 <Buttons_Init+0x11c>)
 800ca82:	719a      	strb	r2, [r3, #6]
	Button[1].PinState = HAL_GPIO_ReadPin(Button[1].Port, Button[1].Pin);
 800ca84:	4b2b      	ldr	r3, [pc, #172]	; (800cb34 <Buttons_Init+0x11c>)
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	4a2a      	ldr	r2, [pc, #168]	; (800cb34 <Buttons_Init+0x11c>)
 800ca8a:	8a12      	ldrh	r2, [r2, #16]
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f6 fd24 	bl	80034dc <HAL_GPIO_ReadPin>
 800ca94:	4603      	mov	r3, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	4b26      	ldr	r3, [pc, #152]	; (800cb34 <Buttons_Init+0x11c>)
 800ca9a:	749a      	strb	r2, [r3, #18]
	Button[2].PinState = HAL_GPIO_ReadPin(Button[2].Port, Button[2].Pin);
 800ca9c:	4b25      	ldr	r3, [pc, #148]	; (800cb34 <Buttons_Init+0x11c>)
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	4a24      	ldr	r2, [pc, #144]	; (800cb34 <Buttons_Init+0x11c>)
 800caa2:	8b92      	ldrh	r2, [r2, #28]
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f6 fd18 	bl	80034dc <HAL_GPIO_ReadPin>
 800caac:	4603      	mov	r3, r0
 800caae:	461a      	mov	r2, r3
 800cab0:	4b20      	ldr	r3, [pc, #128]	; (800cb34 <Buttons_Init+0x11c>)
 800cab2:	779a      	strb	r2, [r3, #30]
	Button[3].PinState = HAL_GPIO_ReadPin(Button[3].Port, Button[3].Pin);
 800cab4:	4b1f      	ldr	r3, [pc, #124]	; (800cb34 <Buttons_Init+0x11c>)
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	4a1e      	ldr	r2, [pc, #120]	; (800cb34 <Buttons_Init+0x11c>)
 800caba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f6 fd0c 	bl	80034dc <HAL_GPIO_ReadPin>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <Buttons_Init+0x11c>)
 800caca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Button[4].PinState = HAL_GPIO_ReadPin(Button[4].Port, Button[4].Pin);
 800cace:	4b19      	ldr	r3, [pc, #100]	; (800cb34 <Buttons_Init+0x11c>)
 800cad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad2:	4a18      	ldr	r2, [pc, #96]	; (800cb34 <Buttons_Init+0x11c>)
 800cad4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f6 fcff 	bl	80034dc <HAL_GPIO_ReadPin>
 800cade:	4603      	mov	r3, r0
 800cae0:	461a      	mov	r2, r3
 800cae2:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <Buttons_Init+0x11c>)
 800cae4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Button[5].PinState = HAL_GPIO_ReadPin(Button[5].Port, Button[5].Pin);
 800cae8:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <Buttons_Init+0x11c>)
 800caea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caec:	4a11      	ldr	r2, [pc, #68]	; (800cb34 <Buttons_Init+0x11c>)
 800caee:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800caf2:	4611      	mov	r1, r2
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7f6 fcf1 	bl	80034dc <HAL_GPIO_ReadPin>
 800cafa:	4603      	mov	r3, r0
 800cafc:	461a      	mov	r2, r3
 800cafe:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <Buttons_Init+0x11c>)
 800cb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	Button[0].Event = NONE;
 800cb04:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <Buttons_Init+0x11c>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	729a      	strb	r2, [r3, #10]
	Button[1].Event = NONE;
 800cb0a:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <Buttons_Init+0x11c>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	759a      	strb	r2, [r3, #22]
	Button[2].Event = NONE;
 800cb10:	4b08      	ldr	r3, [pc, #32]	; (800cb34 <Buttons_Init+0x11c>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Button[3].Event = NONE;
 800cb18:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <Buttons_Init+0x11c>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Button[4].Event = NONE;
 800cb20:	4b04      	ldr	r3, [pc, #16]	; (800cb34 <Buttons_Init+0x11c>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Button[5].Event = NONE;
 800cb28:	4b02      	ldr	r3, [pc, #8]	; (800cb34 <Buttons_Init+0x11c>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

//	Debug_UART( "Button init\r\n", DBG_OK,  13);

}
 800cb30:	bf00      	nop
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	2000072c 	.word	0x2000072c
 800cb38:	40020800 	.word	0x40020800
 800cb3c:	40020400 	.word	0x40020400

0800cb40 <Debug_LED_IncTic>:
#include "debug_LED.h"

LED_ColorTypeDef Debug_LED1;
LED_ColorTypeDef Debug_LED2;

void Debug_LED_IncTic(void){
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0

	static uint8_t switch_timer = 22;
	switch_timer--;
 800cb44:	4b63      	ldr	r3, [pc, #396]	; (800ccd4 <Debug_LED_IncTic+0x194>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	4b61      	ldr	r3, [pc, #388]	; (800ccd4 <Debug_LED_IncTic+0x194>)
 800cb4e:	701a      	strb	r2, [r3, #0]
	if (switch_timer == 11) {
 800cb50:	4b60      	ldr	r3, [pc, #384]	; (800ccd4 <Debug_LED_IncTic+0x194>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b0b      	cmp	r3, #11
 800cb56:	d15a      	bne.n	800cc0e <Debug_LED_IncTic+0xce>
		switch (Debug_LED1) {
 800cb58:	4b5f      	ldr	r3, [pc, #380]	; (800ccd8 <Debug_LED_IncTic+0x198>)
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d855      	bhi.n	800cc0c <Debug_LED_IncTic+0xcc>
 800cb60:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <Debug_LED_IncTic+0x28>)
 800cb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb66:	bf00      	nop
 800cb68:	0800cbf3 	.word	0x0800cbf3
 800cb6c:	0800cb9d 	.word	0x0800cb9d
 800cb70:	0800cbc3 	.word	0x0800cbc3
 800cb74:	0800cb79 	.word	0x0800cb79
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cb78:	4b58      	ldr	r3, [pc, #352]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a57      	ldr	r2, [pc, #348]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cb7e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cb82:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0; 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;}
 800cb84:	4b55      	ldr	r3, [pc, #340]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a54      	ldr	r2, [pc, #336]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cb8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	2201      	movs	r2, #1
 800cb92:	2110      	movs	r1, #16
 800cb94:	4851      	ldr	r0, [pc, #324]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cb96:	f7f6 fcb8 	bl	800350a <HAL_GPIO_WritePin>
 800cb9a:	e038      	b.n	800cc0e <Debug_LED_IncTic+0xce>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800cb9c:	4b4f      	ldr	r3, [pc, #316]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a4e      	ldr	r2, [pc, #312]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cba6:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800cba8:	4b4c      	ldr	r3, [pc, #304]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a4b      	ldr	r2, [pc, #300]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cbba:	4848      	ldr	r0, [pc, #288]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbbc:	f7f6 fca5 	bl	800350a <HAL_GPIO_WritePin>
 800cbc0:	e025      	b.n	800cc0e <Debug_LED_IncTic+0xce>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800cbc2:	4b46      	ldr	r3, [pc, #280]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a45      	ldr	r2, [pc, #276]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	2110      	movs	r1, #16
 800cbd2:	4842      	ldr	r0, [pc, #264]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbd4:	f7f6 fc99 	bl	800350a <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800cbd8:	4b40      	ldr	r3, [pc, #256]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cbea:	483c      	ldr	r0, [pc, #240]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbec:	f7f6 fc8d 	bl	800350a <HAL_GPIO_WritePin>
 800cbf0:	e00d      	b.n	800cc0e <Debug_LED_IncTic+0xce>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cbf2:	4b3a      	ldr	r3, [pc, #232]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a39      	ldr	r2, [pc, #228]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cbf8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cbfc:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800cbfe:	4b37      	ldr	r3, [pc, #220]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a36      	ldr	r2, [pc, #216]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	e000      	b.n	800cc0e <Debug_LED_IncTic+0xce>
			default:		{break;}
 800cc0c:	bf00      	nop
		}
	}
	if (switch_timer == 0) {
 800cc0e:	4b31      	ldr	r3, [pc, #196]	; (800ccd4 <Debug_LED_IncTic+0x194>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d15c      	bne.n	800ccd0 <Debug_LED_IncTic+0x190>
		switch (Debug_LED2) {
 800cc16:	4b32      	ldr	r3, [pc, #200]	; (800cce0 <Debug_LED_IncTic+0x1a0>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d854      	bhi.n	800ccc8 <Debug_LED_IncTic+0x188>
 800cc1e:	a201      	add	r2, pc, #4	; (adr r2, 800cc24 <Debug_LED_IncTic+0xe4>)
 800cc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc24:	0800ccaf 	.word	0x0800ccaf
 800cc28:	0800cc5b 	.word	0x0800cc5b
 800cc2c:	0800cc7f 	.word	0x0800cc7f
 800cc30:	0800cc35 	.word	0x0800cc35
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800cc34:	4b29      	ldr	r3, [pc, #164]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a28      	ldr	r2, [pc, #160]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc3e:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0; 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800cc40:	4b26      	ldr	r3, [pc, #152]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a25      	ldr	r2, [pc, #148]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cc52:	4822      	ldr	r0, [pc, #136]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc54:	f7f6 fc59 	bl	800350a <HAL_GPIO_WritePin>
 800cc58:	e037      	b.n	800ccca <Debug_LED_IncTic+0x18a>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cc5a:	4b20      	ldr	r3, [pc, #128]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a1f      	ldr	r2, [pc, #124]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc60:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cc64:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;}
 800cc66:	4b1d      	ldr	r3, [pc, #116]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a1c      	ldr	r2, [pc, #112]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	2200      	movs	r2, #0
 800cc74:	2110      	movs	r1, #16
 800cc76:	4819      	ldr	r0, [pc, #100]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc78:	f7f6 fc47 	bl	800350a <HAL_GPIO_WritePin>
 800cc7c:	e025      	b.n	800ccca <Debug_LED_IncTic+0x18a>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800cc7e:	4b17      	ldr	r3, [pc, #92]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a16      	ldr	r2, [pc, #88]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc88:	6013      	str	r3, [r2, #0]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2110      	movs	r1, #16
 800cc8e:	4813      	ldr	r0, [pc, #76]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc90:	f7f6 fc3b 	bl	800350a <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800cc94:	4b11      	ldr	r3, [pc, #68]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a10      	ldr	r2, [pc, #64]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cc9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc9e:	6013      	str	r3, [r2, #0]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cca6:	480d      	ldr	r0, [pc, #52]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800cca8:	f7f6 fc2f 	bl	800350a <HAL_GPIO_WritePin>
 800ccac:	e00d      	b.n	800ccca <Debug_LED_IncTic+0x18a>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800ccae:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a0a      	ldr	r2, [pc, #40]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800ccb4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800ccb8:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800ccba:	4b08      	ldr	r3, [pc, #32]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a07      	ldr	r2, [pc, #28]	; (800ccdc <Debug_LED_IncTic+0x19c>)
 800ccc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	e000      	b.n	800ccca <Debug_LED_IncTic+0x18a>
			default:		{break;}
 800ccc8:	bf00      	nop
		}
		switch_timer = 22;
 800ccca:	4b02      	ldr	r3, [pc, #8]	; (800ccd4 <Debug_LED_IncTic+0x194>)
 800cccc:	2216      	movs	r2, #22
 800ccce:	701a      	strb	r2, [r3, #0]
	}

}
 800ccd0:	bf00      	nop
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	2000015c 	.word	0x2000015c
 800ccd8:	20000775 	.word	0x20000775
 800ccdc:	40020800 	.word	0x40020800
 800cce0:	20000776 	.word	0x20000776

0800cce4 <Debug_LED_Init>:

}



void Debug_LED_Init (void){
 800cce4:	b480      	push	{r7}
 800cce6:	af00      	add	r7, sp, #0

	Debug_LED1 = BLACK;
 800cce8:	4b04      	ldr	r3, [pc, #16]	; (800ccfc <Debug_LED_Init+0x18>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
	Debug_LED2 = BLACK;
 800ccee:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <Debug_LED_Init+0x1c>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	701a      	strb	r2, [r3, #0]
//	Debug_UART( "Debug_LED init\r\n", DBG_OK, 16);

}
 800ccf4:	bf00      	nop
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bc80      	pop	{r7}
 800ccfa:	4770      	bx	lr
 800ccfc:	20000775 	.word	0x20000775
 800cd00:	20000776 	.word	0x20000776

0800cd04 <MM_Init>:
//{
//	__RBIT(data);
//        return data;
//};

void MM_Init(void){
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0

	Spi_LED_Init();
 800cd08:	f000 f8d8 	bl	800cebc <Spi_LED_Init>
	Buttons_Init();
 800cd0c:	f7ff fe84 	bl	800ca18 <Buttons_Init>
	Debug_LED_Init();
 800cd10:	f7ff ffe8 	bl	800cce4 <Debug_LED_Init>
	Out_Init();
 800cd14:	f000 f862 	bl	800cddc <Out_Init>

//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\033[36mParametrica.ru\033[0m\r\n", 27, 5);
//	init_OK = 1;
}
 800cd18:	bf00      	nop
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_IncTick>:


void HAL_IncTick(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <HAL_IncTick+0x30>)
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	461a      	mov	r2, r3
 800cd26:	4b0a      	ldr	r3, [pc, #40]	; (800cd50 <HAL_IncTick+0x34>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	4a08      	ldr	r2, [pc, #32]	; (800cd50 <HAL_IncTick+0x34>)
 800cd2e:	6013      	str	r3, [r2, #0]
  if (init_OK){
 800cd30:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <HAL_IncTick+0x38>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <HAL_IncTick+0x2c>
	  Main_IncTic();
 800cd38:	f7f3 ffa6 	bl	8000c88 <Main_IncTic>
	  Debug_LED_IncTic();
 800cd3c:	f7ff ff00 	bl	800cb40 <Debug_LED_IncTic>
	  Button_IncTick();
 800cd40:	f7ff fca6 	bl	800c690 <Button_IncTick>
	  Spi_LED_IncTick();
 800cd44:	f000 f86e 	bl	800ce24 <Spi_LED_IncTick>

  }
}
 800cd48:	bf00      	nop
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20000048 	.word	0x20000048
 800cd50:	20000710 	.word	0x20000710
 800cd54:	20000777 	.word	0x20000777

0800cd58 <Set_Out>:

#include "out.h"
#include "tim.h"
#include "debug_LED.h"

void Set_Out(PowerChannelTypeDef Channel, uint16_t volume){
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	4603      	mov	r3, r0
 800cd60:	460a      	mov	r2, r1
 800cd62:	71fb      	strb	r3, [r7, #7]
 800cd64:	4613      	mov	r3, r2
 800cd66:	80bb      	strh	r3, [r7, #4]
if (volume > 1000) {volume = 1000;}
 800cd68:	88bb      	ldrh	r3, [r7, #4]
 800cd6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd6e:	d902      	bls.n	800cd76 <Set_Out+0x1e>
 800cd70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd74:	80bb      	strh	r3, [r7, #4]
	if (Channel == P_OUT_1){TIM4->CCR1 = volume;}
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d102      	bne.n	800cd82 <Set_Out+0x2a>
 800cd7c:	4a15      	ldr	r2, [pc, #84]	; (800cdd4 <Set_Out+0x7c>)
 800cd7e:	88bb      	ldrh	r3, [r7, #4]
 800cd80:	6353      	str	r3, [r2, #52]	; 0x34
	if (Channel == P_OUT_2){TIM4->CCR2 = volume;}
 800cd82:	79fb      	ldrb	r3, [r7, #7]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d102      	bne.n	800cd8e <Set_Out+0x36>
 800cd88:	4a12      	ldr	r2, [pc, #72]	; (800cdd4 <Set_Out+0x7c>)
 800cd8a:	88bb      	ldrh	r3, [r7, #4]
 800cd8c:	6393      	str	r3, [r2, #56]	; 0x38
	if (Channel == P_OUT_3){TIM4->CCR3 = volume;}
 800cd8e:	79fb      	ldrb	r3, [r7, #7]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d102      	bne.n	800cd9a <Set_Out+0x42>
 800cd94:	4a0f      	ldr	r2, [pc, #60]	; (800cdd4 <Set_Out+0x7c>)
 800cd96:	88bb      	ldrh	r3, [r7, #4]
 800cd98:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Channel == P_OUT_4){TIM4->CCR4 = volume;}
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d102      	bne.n	800cda6 <Set_Out+0x4e>
 800cda0:	4a0c      	ldr	r2, [pc, #48]	; (800cdd4 <Set_Out+0x7c>)
 800cda2:	88bb      	ldrh	r3, [r7, #4]
 800cda4:	6413      	str	r3, [r2, #64]	; 0x40
	if (Channel == P_OUT_5){TIM3->CCR3 = volume;}
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	2b04      	cmp	r3, #4
 800cdaa:	d102      	bne.n	800cdb2 <Set_Out+0x5a>
 800cdac:	4a0a      	ldr	r2, [pc, #40]	; (800cdd8 <Set_Out+0x80>)
 800cdae:	88bb      	ldrh	r3, [r7, #4]
 800cdb0:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Channel == P_OUT_6){TIM3->CCR4 = volume;}
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	2b05      	cmp	r3, #5
 800cdb6:	d102      	bne.n	800cdbe <Set_Out+0x66>
 800cdb8:	4a07      	ldr	r2, [pc, #28]	; (800cdd8 <Set_Out+0x80>)
 800cdba:	88bb      	ldrh	r3, [r7, #4]
 800cdbc:	6413      	str	r3, [r2, #64]	; 0x40
	if (Channel == P_OUT_7){TIM3->CCR1 = volume;}
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	2b06      	cmp	r3, #6
 800cdc2:	d102      	bne.n	800cdca <Set_Out+0x72>
 800cdc4:	4a04      	ldr	r2, [pc, #16]	; (800cdd8 <Set_Out+0x80>)
 800cdc6:	88bb      	ldrh	r3, [r7, #4]
 800cdc8:	6353      	str	r3, [r2, #52]	; 0x34

}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bc80      	pop	{r7}
 800cdd2:	4770      	bx	lr
 800cdd4:	40000800 	.word	0x40000800
 800cdd8:	40000400 	.word	0x40000400

0800cddc <Out_Init>:
	if (Channel == P_OUT_1234){TIM4->PSC = volume;}
	if (Channel == P_OUT_567){TIM3->PSC = volume;}


}
void Out_Init(void){
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim4);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800cde0:	2100      	movs	r1, #0
 800cde2:	480e      	ldr	r0, [pc, #56]	; (800ce1c <Out_Init+0x40>)
 800cde4:	f7fa fae6 	bl	80073b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800cde8:	2104      	movs	r1, #4
 800cdea:	480c      	ldr	r0, [pc, #48]	; (800ce1c <Out_Init+0x40>)
 800cdec:	f7fa fae2 	bl	80073b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800cdf0:	2108      	movs	r1, #8
 800cdf2:	480a      	ldr	r0, [pc, #40]	; (800ce1c <Out_Init+0x40>)
 800cdf4:	f7fa fade 	bl	80073b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800cdf8:	210c      	movs	r1, #12
 800cdfa:	4808      	ldr	r0, [pc, #32]	; (800ce1c <Out_Init+0x40>)
 800cdfc:	f7fa fada 	bl	80073b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800ce00:	2100      	movs	r1, #0
 800ce02:	4807      	ldr	r0, [pc, #28]	; (800ce20 <Out_Init+0x44>)
 800ce04:	f7fa fad6 	bl	80073b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800ce08:	2108      	movs	r1, #8
 800ce0a:	4805      	ldr	r0, [pc, #20]	; (800ce20 <Out_Init+0x44>)
 800ce0c:	f7fa fad2 	bl	80073b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800ce10:	210c      	movs	r1, #12
 800ce12:	4803      	ldr	r0, [pc, #12]	; (800ce20 <Out_Init+0x44>)
 800ce14:	f7fa face 	bl	80073b4 <HAL_TIM_PWM_Start>

//	Debug_UART((uint8_t *) "Out init\r\n", DBG_OK, 10);

}
 800ce18:	bf00      	nop
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20000640 	.word	0x20000640
 800ce20:	200005f8 	.word	0x200005f8

0800ce24 <Spi_LED_IncTick>:


//=========================================================================================================

void Spi_LED_IncTick(void)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	af00      	add	r7, sp, #0

//-------------------------------------------------------------
	Frame_Delay--;
 800ce28:	4b1e      	ldr	r3, [pc, #120]	; (800cea4 <Spi_LED_IncTick+0x80>)
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	4b1c      	ldr	r3, [pc, #112]	; (800cea4 <Spi_LED_IncTick+0x80>)
 800ce32:	801a      	strh	r2, [r3, #0]

	if (Frame_Delay == 2) {
 800ce34:	4b1b      	ldr	r3, [pc, #108]	; (800cea4 <Spi_LED_IncTick+0x80>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	d112      	bne.n	800ce62 <Spi_LED_IncTick+0x3e>
		if (Spi_LED_Cmplt_Frame_Flag & 0x01){
 800ce3c:	4b1a      	ldr	r3, [pc, #104]	; (800cea8 <Spi_LED_IncTick+0x84>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00c      	beq.n	800ce62 <Spi_LED_IncTick+0x3e>
			//HAL_SPI_Transmit(&hspi1, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi1, &OutputArray[0][0].Green , LED_MAX * 3);
 800ce48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ce4c:	4917      	ldr	r1, [pc, #92]	; (800ceac <Spi_LED_IncTick+0x88>)
 800ce4e:	4818      	ldr	r0, [pc, #96]	; (800ceb0 <Spi_LED_IncTick+0x8c>)
 800ce50:	f7fa f870 	bl	8006f34 <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x01;
 800ce54:	4b14      	ldr	r3, [pc, #80]	; (800cea8 <Spi_LED_IncTick+0x84>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	f023 0301 	bic.w	r3, r3, #1
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <Spi_LED_IncTick+0x84>)
 800ce60:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 1) {
 800ce62:	4b10      	ldr	r3, [pc, #64]	; (800cea4 <Spi_LED_IncTick+0x80>)
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d112      	bne.n	800ce90 <Spi_LED_IncTick+0x6c>
		if (Spi_LED_Cmplt_Frame_Flag & 0x02){
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <Spi_LED_IncTick+0x84>)
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	f003 0302 	and.w	r3, r3, #2
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00c      	beq.n	800ce90 <Spi_LED_IncTick+0x6c>
			//HAL_SPI_Transmit(&hspi2, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi2, &OutputArray[1][0].Green , LED_MAX * 3);
 800ce76:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ce7a:	490e      	ldr	r1, [pc, #56]	; (800ceb4 <Spi_LED_IncTick+0x90>)
 800ce7c:	480e      	ldr	r0, [pc, #56]	; (800ceb8 <Spi_LED_IncTick+0x94>)
 800ce7e:	f7fa f859 	bl	8006f34 <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x02;
 800ce82:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <Spi_LED_IncTick+0x84>)
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f023 0302 	bic.w	r3, r3, #2
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <Spi_LED_IncTick+0x84>)
 800ce8e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 0) {
 800ce90:	4b04      	ldr	r3, [pc, #16]	; (800cea4 <Spi_LED_IncTick+0x80>)
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d102      	bne.n	800ce9e <Spi_LED_IncTick+0x7a>
		Frame_Delay = 1000 / SPI_FREQ;
 800ce98:	4b02      	ldr	r3, [pc, #8]	; (800cea4 <Spi_LED_IncTick+0x80>)
 800ce9a:	2232      	movs	r2, #50	; 0x32
 800ce9c:	801a      	strh	r2, [r3, #0]
	}
}
 800ce9e:	bf00      	nop
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000015e 	.word	0x2000015e
 800cea8:	20000778 	.word	0x20000778
 800ceac:	2000077c 	.word	0x2000077c
 800ceb0:	2000042c 	.word	0x2000042c
 800ceb4:	20001334 	.word	0x20001334
 800ceb8:	20000484 	.word	0x20000484

0800cebc <Spi_LED_Init>:
//=========================================================================================================
void Spi_LED_Init(void){
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
	Spi_LED_Cmplt_Frame_Flag |= 0x01 | 0x02;
 800cec2:	4b2f      	ldr	r3, [pc, #188]	; (800cf80 <Spi_LED_Init+0xc4>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	f043 0303 	orr.w	r3, r3, #3
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	4b2c      	ldr	r3, [pc, #176]	; (800cf80 <Spi_LED_Init+0xc4>)
 800cece:	701a      	strb	r2, [r3, #0]

	extern DMA_HandleTypeDef hdma_spi1_tx;
	extern DMA_HandleTypeDef hdma_spi2_tx;

	HAL_DMA_Init(&hdma_spi1_tx);
 800ced0:	482c      	ldr	r0, [pc, #176]	; (800cf84 <Spi_LED_Init+0xc8>)
 800ced2:	f7f5 fc0b 	bl	80026ec <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi2_tx);
 800ced6:	482c      	ldr	r0, [pc, #176]	; (800cf88 <Spi_LED_Init+0xcc>)
 800ced8:	f7f5 fc08 	bl	80026ec <HAL_DMA_Init>

	for (uint16_t i = 0; i < LED_MAX; i++){
 800cedc:	2300      	movs	r3, #0
 800cede:	80fb      	strh	r3, [r7, #6]
 800cee0:	e01c      	b.n	800cf1c <Spi_LED_Init+0x60>
		OutputArray[0][i].Green = g;
 800cee2:	88fa      	ldrh	r2, [r7, #6]
 800cee4:	4929      	ldr	r1, [pc, #164]	; (800cf8c <Spi_LED_Init+0xd0>)
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	440b      	add	r3, r1
 800ceee:	2200      	movs	r2, #0
 800cef0:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Red 	= r;
 800cef2:	88fa      	ldrh	r2, [r7, #6]
 800cef4:	4925      	ldr	r1, [pc, #148]	; (800cf8c <Spi_LED_Init+0xd0>)
 800cef6:	4613      	mov	r3, r2
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	4413      	add	r3, r2
 800cefc:	440b      	add	r3, r1
 800cefe:	3301      	adds	r3, #1
 800cf00:	2200      	movs	r2, #0
 800cf02:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Blue 	= b;
 800cf04:	88fa      	ldrh	r2, [r7, #6]
 800cf06:	4921      	ldr	r1, [pc, #132]	; (800cf8c <Spi_LED_Init+0xd0>)
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	440b      	add	r3, r1
 800cf10:	3302      	adds	r3, #2
 800cf12:	2200      	movs	r2, #0
 800cf14:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800cf16:	88fb      	ldrh	r3, [r7, #6]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	80fb      	strh	r3, [r7, #6]
 800cf1c:	88fb      	ldrh	r3, [r7, #6]
 800cf1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf22:	d3de      	bcc.n	800cee2 <Spi_LED_Init+0x26>
	}

	for (uint16_t i = 0; i < LED_MAX; i++){
 800cf24:	2300      	movs	r3, #0
 800cf26:	80bb      	strh	r3, [r7, #4]
 800cf28:	e020      	b.n	800cf6c <Spi_LED_Init+0xb0>
		OutputArray[1][i].Green =	g;
 800cf2a:	88ba      	ldrh	r2, [r7, #4]
 800cf2c:	4917      	ldr	r1, [pc, #92]	; (800cf8c <Spi_LED_Init+0xd0>)
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	440b      	add	r3, r1
 800cf36:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Red 	=	r;
 800cf3e:	88ba      	ldrh	r2, [r7, #4]
 800cf40:	4912      	ldr	r1, [pc, #72]	; (800cf8c <Spi_LED_Init+0xd0>)
 800cf42:	4613      	mov	r3, r2
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	4413      	add	r3, r2
 800cf48:	440b      	add	r3, r1
 800cf4a:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800cf4e:	2200      	movs	r2, #0
 800cf50:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Blue 	=	b;
 800cf52:	88ba      	ldrh	r2, [r7, #4]
 800cf54:	490d      	ldr	r1, [pc, #52]	; (800cf8c <Spi_LED_Init+0xd0>)
 800cf56:	4613      	mov	r3, r2
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	4413      	add	r3, r2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	f603 33ba 	addw	r3, r3, #3002	; 0xbba
 800cf62:	2200      	movs	r2, #0
 800cf64:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800cf66:	88bb      	ldrh	r3, [r7, #4]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	80bb      	strh	r3, [r7, #4]
 800cf6c:	88bb      	ldrh	r3, [r7, #4]
 800cf6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf72:	d3da      	bcc.n	800cf2a <Spi_LED_Init+0x6e>


//	Debug_UART((uint8_t *) "SPI_LED init\r\n", DBG_OK, 14);


}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20000778 	.word	0x20000778
 800cf84:	20000534 	.word	0x20000534
 800cf88:	20000594 	.word	0x20000594
 800cf8c:	2000077c 	.word	0x2000077c

0800cf90 <HAL_SPI_TxCpltCallback>:
//=========================================================================================================
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1){Spi_LED_Cmplt_Frame_Flag |= 0x01;}
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a0d      	ldr	r2, [pc, #52]	; (800cfd4 <HAL_SPI_TxCpltCallback+0x44>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d106      	bne.n	800cfb0 <HAL_SPI_TxCpltCallback+0x20>
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <HAL_SPI_TxCpltCallback+0x48>)
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	f043 0301 	orr.w	r3, r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <HAL_SPI_TxCpltCallback+0x48>)
 800cfae:	701a      	strb	r2, [r3, #0]
	if (hspi->Instance == SPI2){Spi_LED_Cmplt_Frame_Flag |= 0x02;}
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a09      	ldr	r2, [pc, #36]	; (800cfdc <HAL_SPI_TxCpltCallback+0x4c>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d106      	bne.n	800cfc8 <HAL_SPI_TxCpltCallback+0x38>
 800cfba:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <HAL_SPI_TxCpltCallback+0x48>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	f043 0302 	orr.w	r3, r3, #2
 800cfc2:	b2da      	uxtb	r2, r3
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <HAL_SPI_TxCpltCallback+0x48>)
 800cfc6:	701a      	strb	r2, [r3, #0]
//	itoa(tmp, string + 2, 16);
//	string[14] = Spi_LED_Cmplt_Frame_Flag + 0x30;
//	if (string[15] == *" ") {string[15] = *".";} else {string[15] = *" ";}
//	HAL_UART_Transmit(&huart2, string, 16, 2);

}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bc80      	pop	{r7}
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	40013000 	.word	0x40013000
 800cfd8:	20000778 	.word	0x20000778
 800cfdc:	40003800 	.word	0x40003800

0800cfe0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4912      	ldr	r1, [pc, #72]	; (800d030 <MX_USB_DEVICE_Init+0x50>)
 800cfe8:	4812      	ldr	r0, [pc, #72]	; (800d034 <MX_USB_DEVICE_Init+0x54>)
 800cfea:	f7fe f935 	bl	800b258 <USBD_Init>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d001      	beq.n	800cff8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cff4:	f7f3 ffb6 	bl	8000f64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cff8:	490f      	ldr	r1, [pc, #60]	; (800d038 <MX_USB_DEVICE_Init+0x58>)
 800cffa:	480e      	ldr	r0, [pc, #56]	; (800d034 <MX_USB_DEVICE_Init+0x54>)
 800cffc:	f7fe f957 	bl	800b2ae <USBD_RegisterClass>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d006:	f7f3 ffad 	bl	8000f64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d00a:	490c      	ldr	r1, [pc, #48]	; (800d03c <MX_USB_DEVICE_Init+0x5c>)
 800d00c:	4809      	ldr	r0, [pc, #36]	; (800d034 <MX_USB_DEVICE_Init+0x54>)
 800d00e:	f7fe f8b7 	bl	800b180 <USBD_CDC_RegisterInterface>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d018:	f7f3 ffa4 	bl	8000f64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d01c:	4805      	ldr	r0, [pc, #20]	; (800d034 <MX_USB_DEVICE_Init+0x54>)
 800d01e:	f7fe f95f 	bl	800b2e0 <USBD_Start>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d028:	f7f3 ff9c 	bl	8000f64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d02c:	bf00      	nop
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	20000170 	.word	0x20000170
 800d034:	20001eec 	.word	0x20001eec
 800d038:	20000058 	.word	0x20000058
 800d03c:	20000160 	.word	0x20000160

0800d040 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d044:	2200      	movs	r2, #0
 800d046:	4905      	ldr	r1, [pc, #20]	; (800d05c <CDC_Init_FS+0x1c>)
 800d048:	4805      	ldr	r0, [pc, #20]	; (800d060 <CDC_Init_FS+0x20>)
 800d04a:	f7fe f8af 	bl	800b1ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d04e:	4905      	ldr	r1, [pc, #20]	; (800d064 <CDC_Init_FS+0x24>)
 800d050:	4803      	ldr	r0, [pc, #12]	; (800d060 <CDC_Init_FS+0x20>)
 800d052:	f7fe f8c4 	bl	800b1de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d056:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d058:	4618      	mov	r0, r3
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	200029b0 	.word	0x200029b0
 800d060:	20001eec 	.word	0x20001eec
 800d064:	200021b0 	.word	0x200021b0

0800d068 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d068:	b480      	push	{r7}
 800d06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d06c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d06e:	4618      	mov	r0, r3
 800d070:	46bd      	mov	sp, r7
 800d072:	bc80      	pop	{r7}
 800d074:	4770      	bx	lr
	...

0800d078 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	4603      	mov	r3, r0
 800d080:	6039      	str	r1, [r7, #0]
 800d082:	71fb      	strb	r3, [r7, #7]
 800d084:	4613      	mov	r3, r2
 800d086:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b23      	cmp	r3, #35	; 0x23
 800d08c:	d84a      	bhi.n	800d124 <CDC_Control_FS+0xac>
 800d08e:	a201      	add	r2, pc, #4	; (adr r2, 800d094 <CDC_Control_FS+0x1c>)
 800d090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d094:	0800d125 	.word	0x0800d125
 800d098:	0800d125 	.word	0x0800d125
 800d09c:	0800d125 	.word	0x0800d125
 800d0a0:	0800d125 	.word	0x0800d125
 800d0a4:	0800d125 	.word	0x0800d125
 800d0a8:	0800d125 	.word	0x0800d125
 800d0ac:	0800d125 	.word	0x0800d125
 800d0b0:	0800d125 	.word	0x0800d125
 800d0b4:	0800d125 	.word	0x0800d125
 800d0b8:	0800d125 	.word	0x0800d125
 800d0bc:	0800d125 	.word	0x0800d125
 800d0c0:	0800d125 	.word	0x0800d125
 800d0c4:	0800d125 	.word	0x0800d125
 800d0c8:	0800d125 	.word	0x0800d125
 800d0cc:	0800d125 	.word	0x0800d125
 800d0d0:	0800d125 	.word	0x0800d125
 800d0d4:	0800d125 	.word	0x0800d125
 800d0d8:	0800d125 	.word	0x0800d125
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d125 	.word	0x0800d125
 800d0e4:	0800d125 	.word	0x0800d125
 800d0e8:	0800d125 	.word	0x0800d125
 800d0ec:	0800d125 	.word	0x0800d125
 800d0f0:	0800d125 	.word	0x0800d125
 800d0f4:	0800d125 	.word	0x0800d125
 800d0f8:	0800d125 	.word	0x0800d125
 800d0fc:	0800d125 	.word	0x0800d125
 800d100:	0800d125 	.word	0x0800d125
 800d104:	0800d125 	.word	0x0800d125
 800d108:	0800d125 	.word	0x0800d125
 800d10c:	0800d125 	.word	0x0800d125
 800d110:	0800d125 	.word	0x0800d125
 800d114:	0800d125 	.word	0x0800d125
 800d118:	0800d125 	.word	0x0800d125
 800d11c:	0800d125 	.word	0x0800d125
 800d120:	0800d125 	.word	0x0800d125
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d124:	bf00      	nop
  }

  return (USBD_OK);
 800d126:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d128:	4618      	mov	r0, r3
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bc80      	pop	{r7}
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop

0800d134 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d13e:	6879      	ldr	r1, [r7, #4]
 800d140:	4805      	ldr	r0, [pc, #20]	; (800d158 <CDC_Receive_FS+0x24>)
 800d142:	f7fe f84c 	bl	800b1de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d146:	4804      	ldr	r0, [pc, #16]	; (800d158 <CDC_Receive_FS+0x24>)
 800d148:	f7fe f85c 	bl	800b204 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d14c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	20001eec 	.word	0x20001eec

0800d15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	4603      	mov	r3, r0
 800d164:	6039      	str	r1, [r7, #0]
 800d166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2212      	movs	r2, #18
 800d16c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d16e:	4b03      	ldr	r3, [pc, #12]	; (800d17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d170:	4618      	mov	r0, r3
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	bc80      	pop	{r7}
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	2000018c 	.word	0x2000018c

0800d180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	4603      	mov	r3, r0
 800d188:	6039      	str	r1, [r7, #0]
 800d18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2204      	movs	r2, #4
 800d190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d192:	4b03      	ldr	r3, [pc, #12]	; (800d1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d194:	4618      	mov	r0, r3
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	bc80      	pop	{r7}
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	200001a0 	.word	0x200001a0

0800d1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d105      	bne.n	800d1c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	4907      	ldr	r1, [pc, #28]	; (800d1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1ba:	4808      	ldr	r0, [pc, #32]	; (800d1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800d1bc:	f7ff f842 	bl	800c244 <USBD_GetString>
 800d1c0:	e004      	b.n	800d1cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	4904      	ldr	r1, [pc, #16]	; (800d1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1c6:	4805      	ldr	r0, [pc, #20]	; (800d1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800d1c8:	f7ff f83c 	bl	800c244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1cc:	4b02      	ldr	r3, [pc, #8]	; (800d1d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200031b0 	.word	0x200031b0
 800d1dc:	0800dc4c 	.word	0x0800dc4c

0800d1e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	6039      	str	r1, [r7, #0]
 800d1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	4904      	ldr	r1, [pc, #16]	; (800d200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1f0:	4804      	ldr	r0, [pc, #16]	; (800d204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1f2:	f7ff f827 	bl	800c244 <USBD_GetString>
  return USBD_StrDesc;
 800d1f6:	4b02      	ldr	r3, [pc, #8]	; (800d200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	200031b0 	.word	0x200031b0
 800d204:	0800dc60 	.word	0x0800dc60

0800d208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	6039      	str	r1, [r7, #0]
 800d212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	221a      	movs	r2, #26
 800d218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d21a:	f000 f843 	bl	800d2a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d21e:	4b02      	ldr	r3, [pc, #8]	; (800d228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	200001a4 	.word	0x200001a4

0800d22c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	4603      	mov	r3, r0
 800d234:	6039      	str	r1, [r7, #0]
 800d236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d105      	bne.n	800d24a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	4907      	ldr	r1, [pc, #28]	; (800d260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d242:	4808      	ldr	r0, [pc, #32]	; (800d264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d244:	f7fe fffe 	bl	800c244 <USBD_GetString>
 800d248:	e004      	b.n	800d254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	4904      	ldr	r1, [pc, #16]	; (800d260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d24e:	4805      	ldr	r0, [pc, #20]	; (800d264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d250:	f7fe fff8 	bl	800c244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d254:	4b02      	ldr	r3, [pc, #8]	; (800d260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	200031b0 	.word	0x200031b0
 800d264:	0800dc74 	.word	0x0800dc74

0800d268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	4603      	mov	r3, r0
 800d270:	6039      	str	r1, [r7, #0]
 800d272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d105      	bne.n	800d286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	4907      	ldr	r1, [pc, #28]	; (800d29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d27e:	4808      	ldr	r0, [pc, #32]	; (800d2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d280:	f7fe ffe0 	bl	800c244 <USBD_GetString>
 800d284:	e004      	b.n	800d290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	4904      	ldr	r1, [pc, #16]	; (800d29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d28a:	4805      	ldr	r0, [pc, #20]	; (800d2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d28c:	f7fe ffda 	bl	800c244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d290:	4b02      	ldr	r3, [pc, #8]	; (800d29c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d292:	4618      	mov	r0, r3
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	200031b0 	.word	0x200031b0
 800d2a0:	0800dc80 	.word	0x0800dc80

0800d2a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <Get_SerialNum+0x44>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2b0:	4b0e      	ldr	r3, [pc, #56]	; (800d2ec <Get_SerialNum+0x48>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2b6:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <Get_SerialNum+0x4c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d009      	beq.n	800d2de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2ca:	2208      	movs	r2, #8
 800d2cc:	4909      	ldr	r1, [pc, #36]	; (800d2f4 <Get_SerialNum+0x50>)
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f000 f814 	bl	800d2fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2d4:	2204      	movs	r2, #4
 800d2d6:	4908      	ldr	r1, [pc, #32]	; (800d2f8 <Get_SerialNum+0x54>)
 800d2d8:	68b8      	ldr	r0, [r7, #8]
 800d2da:	f000 f80f 	bl	800d2fc <IntToUnicode>
  }
}
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	1fff7a10 	.word	0x1fff7a10
 800d2ec:	1fff7a14 	.word	0x1fff7a14
 800d2f0:	1fff7a18 	.word	0x1fff7a18
 800d2f4:	200001a6 	.word	0x200001a6
 800d2f8:	200001b6 	.word	0x200001b6

0800d2fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	4613      	mov	r3, r2
 800d308:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d30e:	2300      	movs	r3, #0
 800d310:	75fb      	strb	r3, [r7, #23]
 800d312:	e027      	b.n	800d364 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	0f1b      	lsrs	r3, r3, #28
 800d318:	2b09      	cmp	r3, #9
 800d31a:	d80b      	bhi.n	800d334 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	0f1b      	lsrs	r3, r3, #28
 800d320:	b2da      	uxtb	r2, r3
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	005b      	lsls	r3, r3, #1
 800d326:	4619      	mov	r1, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	440b      	add	r3, r1
 800d32c:	3230      	adds	r2, #48	; 0x30
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	701a      	strb	r2, [r3, #0]
 800d332:	e00a      	b.n	800d34a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	0f1b      	lsrs	r3, r3, #28
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	7dfb      	ldrb	r3, [r7, #23]
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	4619      	mov	r1, r3
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	440b      	add	r3, r1
 800d344:	3237      	adds	r2, #55	; 0x37
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	011b      	lsls	r3, r3, #4
 800d34e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d350:	7dfb      	ldrb	r3, [r7, #23]
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	3301      	adds	r3, #1
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	4413      	add	r3, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d35e:	7dfb      	ldrb	r3, [r7, #23]
 800d360:	3301      	adds	r3, #1
 800d362:	75fb      	strb	r3, [r7, #23]
 800d364:	7dfa      	ldrb	r2, [r7, #23]
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d3d3      	bcc.n	800d314 <IntToUnicode+0x18>
  }
}
 800d36c:	bf00      	nop
 800d36e:	bf00      	nop
 800d370:	371c      	adds	r7, #28
 800d372:	46bd      	mov	sp, r7
 800d374:	bc80      	pop	{r7}
 800d376:	4770      	bx	lr

0800d378 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d380:	f107 0314 	add.w	r3, r7, #20
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	605a      	str	r2, [r3, #4]
 800d38a:	609a      	str	r2, [r3, #8]
 800d38c:	60da      	str	r2, [r3, #12]
 800d38e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d398:	d147      	bne.n	800d42a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d39a:	2300      	movs	r3, #0
 800d39c:	613b      	str	r3, [r7, #16]
 800d39e:	4b25      	ldr	r3, [pc, #148]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a2:	4a24      	ldr	r2, [pc, #144]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d3a4:	f043 0301 	orr.w	r3, r3, #1
 800d3a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d3aa:	4b22      	ldr	r3, [pc, #136]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	613b      	str	r3, [r7, #16]
 800d3b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d3b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3c4:	f107 0314 	add.w	r3, r7, #20
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	481b      	ldr	r0, [pc, #108]	; (800d438 <HAL_PCD_MspInit+0xc0>)
 800d3cc:	f7f5 fdea 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d3d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d3d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d3e2:	230a      	movs	r3, #10
 800d3e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3e6:	f107 0314 	add.w	r3, r7, #20
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4812      	ldr	r0, [pc, #72]	; (800d438 <HAL_PCD_MspInit+0xc0>)
 800d3ee:	f7f5 fdd9 	bl	8002fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3f2:	4b10      	ldr	r3, [pc, #64]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f6:	4a0f      	ldr	r2, [pc, #60]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3fc:	6353      	str	r3, [r2, #52]	; 0x34
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
 800d402:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d406:	4a0b      	ldr	r2, [pc, #44]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d40c:	6453      	str	r3, [r2, #68]	; 0x44
 800d40e:	4b09      	ldr	r3, [pc, #36]	; (800d434 <HAL_PCD_MspInit+0xbc>)
 800d410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d41a:	2200      	movs	r2, #0
 800d41c:	2100      	movs	r1, #0
 800d41e:	2043      	movs	r0, #67	; 0x43
 800d420:	f7f5 f911 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d424:	2043      	movs	r0, #67	; 0x43
 800d426:	f7f5 f92a 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d42a:	bf00      	nop
 800d42c:	3728      	adds	r7, #40	; 0x28
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	40023800 	.word	0x40023800
 800d438:	40020000 	.word	0x40020000

0800d43c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d450:	4619      	mov	r1, r3
 800d452:	4610      	mov	r0, r2
 800d454:	f7fd ff8c 	bl	800b370 <USBD_LL_SetupStage>
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d472:	78fa      	ldrb	r2, [r7, #3]
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	4613      	mov	r3, r2
 800d478:	00db      	lsls	r3, r3, #3
 800d47a:	1a9b      	subs	r3, r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	440b      	add	r3, r1
 800d480:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	78fb      	ldrb	r3, [r7, #3]
 800d488:	4619      	mov	r1, r3
 800d48a:	f7fd ffbe 	bl	800b40a <USBD_LL_DataOutStage>
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d4a8:	78fa      	ldrb	r2, [r7, #3]
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	440b      	add	r3, r1
 800d4b6:	3348      	adds	r3, #72	; 0x48
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	78fb      	ldrb	r3, [r7, #3]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	f7fe f815 	bl	800b4ec <USBD_LL_DataInStage>
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b082      	sub	sp, #8
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fe f925 	bl	800b728 <USBD_LL_SOF>
}
 800d4de:	bf00      	nop
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d102      	bne.n	800d500 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	73fb      	strb	r3, [r7, #15]
 800d4fe:	e008      	b.n	800d512 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d102      	bne.n	800d50e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d508:	2301      	movs	r3, #1
 800d50a:	73fb      	strb	r3, [r7, #15]
 800d50c:	e001      	b.n	800d512 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d50e:	f7f3 fd29 	bl	8000f64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d518:	7bfa      	ldrb	r2, [r7, #15]
 800d51a:	4611      	mov	r1, r2
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7fe f8cb 	bl	800b6b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fe f884 	bl	800b636 <USBD_LL_Reset>
}
 800d52e:	bf00      	nop
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
	...

0800d538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe f8c5 	bl	800b6d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	6812      	ldr	r2, [r2, #0]
 800d55a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d55e:	f043 0301 	orr.w	r3, r3, #1
 800d562:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a1b      	ldr	r3, [r3, #32]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d56c:	4b04      	ldr	r3, [pc, #16]	; (800d580 <HAL_PCD_SuspendCallback+0x48>)
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	4a03      	ldr	r2, [pc, #12]	; (800d580 <HAL_PCD_SuspendCallback+0x48>)
 800d572:	f043 0306 	orr.w	r3, r3, #6
 800d576:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d578:	bf00      	nop
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	e000ed00 	.word	0xe000ed00

0800d584 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe f8b3 	bl	800b6fe <USBD_LL_Resume>
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5b2:	78fa      	ldrb	r2, [r7, #3]
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe f8dc 	bl	800b774 <USBD_LL_IsoOUTIncomplete>
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5d6:	78fa      	ldrb	r2, [r7, #3]
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe f8be 	bl	800b75c <USBD_LL_IsoINIncomplete>
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fe f8c8 	bl	800b78c <USBD_LL_DevConnected>
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe f8c4 	bl	800b7a0 <USBD_LL_DevDisconnected>
}
 800d618:	bf00      	nop
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d139      	bne.n	800d6a4 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d630:	4a1f      	ldr	r2, [pc, #124]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a1d      	ldr	r2, [pc, #116]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d63c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d640:	4b1b      	ldr	r3, [pc, #108]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d646:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d648:	4b19      	ldr	r3, [pc, #100]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d64a:	2204      	movs	r2, #4
 800d64c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d64e:	4b18      	ldr	r3, [pc, #96]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d650:	2202      	movs	r2, #2
 800d652:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d654:	4b16      	ldr	r3, [pc, #88]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d656:	2200      	movs	r2, #0
 800d658:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d65a:	4b15      	ldr	r3, [pc, #84]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d65c:	2202      	movs	r2, #2
 800d65e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d660:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d662:	2200      	movs	r2, #0
 800d664:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d666:	4b12      	ldr	r3, [pc, #72]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d668:	2200      	movs	r2, #0
 800d66a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d66c:	4b10      	ldr	r3, [pc, #64]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d66e:	2201      	movs	r2, #1
 800d670:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d672:	4b0f      	ldr	r3, [pc, #60]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d674:	2200      	movs	r2, #0
 800d676:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d678:	480d      	ldr	r0, [pc, #52]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d67a:	f7f6 f8a3 	bl	80037c4 <HAL_PCD_Init>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d684:	f7f3 fc6e 	bl	8000f64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d688:	2180      	movs	r1, #128	; 0x80
 800d68a:	4809      	ldr	r0, [pc, #36]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d68c:	f7f7 f9e0 	bl	8004a50 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d690:	2240      	movs	r2, #64	; 0x40
 800d692:	2100      	movs	r1, #0
 800d694:	4806      	ldr	r0, [pc, #24]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d696:	f7f7 f995 	bl	80049c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d69a:	2280      	movs	r2, #128	; 0x80
 800d69c:	2101      	movs	r1, #1
 800d69e:	4804      	ldr	r0, [pc, #16]	; (800d6b0 <USBD_LL_Init+0x90>)
 800d6a0:	f7f7 f990 	bl	80049c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	200033b0 	.word	0x200033b0

0800d6b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7f6 f997 	bl	80039fe <HAL_PCD_Start>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 f92e 	bl	800d938 <USBD_Get_USB_Status>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b084      	sub	sp, #16
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	70fb      	strb	r3, [r7, #3]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70bb      	strb	r3, [r7, #2]
 800d700:	4613      	mov	r3, r2
 800d702:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d712:	78bb      	ldrb	r3, [r7, #2]
 800d714:	883a      	ldrh	r2, [r7, #0]
 800d716:	78f9      	ldrb	r1, [r7, #3]
 800d718:	f7f6 fd5c 	bl	80041d4 <HAL_PCD_EP_Open>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f908 	bl	800d938 <USBD_Get_USB_Status>
 800d728:	4603      	mov	r3, r0
 800d72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	460b      	mov	r3, r1
 800d740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d742:	2300      	movs	r3, #0
 800d744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d750:	78fa      	ldrb	r2, [r7, #3]
 800d752:	4611      	mov	r1, r2
 800d754:	4618      	mov	r0, r3
 800d756:	f7f6 fda5 	bl	80042a4 <HAL_PCD_EP_Close>
 800d75a:	4603      	mov	r3, r0
 800d75c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	4618      	mov	r0, r3
 800d762:	f000 f8e9 	bl	800d938 <USBD_Get_USB_Status>
 800d766:	4603      	mov	r3, r0
 800d768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	460b      	mov	r3, r1
 800d77e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d78e:	78fa      	ldrb	r2, [r7, #3]
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f7f6 fe7c 	bl	8004490 <HAL_PCD_EP_SetStall>
 800d798:	4603      	mov	r3, r0
 800d79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f8ca 	bl	800d938 <USBD_Get_USB_Status>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7cc:	78fa      	ldrb	r2, [r7, #3]
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7f6 fec1 	bl	8004558 <HAL_PCD_EP_ClrStall>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 f8ab 	bl	800d938 <USBD_Get_USB_Status>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d802:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	da0b      	bge.n	800d824 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d812:	68f9      	ldr	r1, [r7, #12]
 800d814:	4613      	mov	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	1a9b      	subs	r3, r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	440b      	add	r3, r1
 800d81e:	333e      	adds	r3, #62	; 0x3e
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	e00b      	b.n	800d83c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d82a:	68f9      	ldr	r1, [r7, #12]
 800d82c:	4613      	mov	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	1a9b      	subs	r3, r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	440b      	add	r3, r1
 800d836:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d83a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3714      	adds	r7, #20
 800d840:	46bd      	mov	sp, r7
 800d842:	bc80      	pop	{r7}
 800d844:	4770      	bx	lr

0800d846 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	460b      	mov	r3, r1
 800d850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d860:	78fa      	ldrb	r2, [r7, #3]
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f7f6 fc90 	bl	800418a <HAL_PCD_SetAddress>
 800d86a:	4603      	mov	r3, r0
 800d86c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	4618      	mov	r0, r3
 800d872:	f000 f861 	bl	800d938 <USBD_Get_USB_Status>
 800d876:	4603      	mov	r3, r0
 800d878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d87a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b086      	sub	sp, #24
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	607a      	str	r2, [r7, #4]
 800d88e:	461a      	mov	r2, r3
 800d890:	460b      	mov	r3, r1
 800d892:	72fb      	strb	r3, [r7, #11]
 800d894:	4613      	mov	r3, r2
 800d896:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d8a6:	893b      	ldrh	r3, [r7, #8]
 800d8a8:	7af9      	ldrb	r1, [r7, #11]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	f7f6 fda6 	bl	80043fc <HAL_PCD_EP_Transmit>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b4:	7dfb      	ldrb	r3, [r7, #23]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 f83e 	bl	800d938 <USBD_Get_USB_Status>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b086      	sub	sp, #24
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	60f8      	str	r0, [r7, #12]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	72fb      	strb	r3, [r7, #11]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d8ec:	893b      	ldrh	r3, [r7, #8]
 800d8ee:	7af9      	ldrb	r1, [r7, #11]
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	f7f6 fd21 	bl	8004338 <HAL_PCD_EP_Receive>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 f81b 	bl	800d938 <USBD_Get_USB_Status>
 800d902:	4603      	mov	r3, r0
 800d904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d906:	7dbb      	ldrb	r3, [r7, #22]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d922:	78fa      	ldrb	r2, [r7, #3]
 800d924:	4611      	mov	r1, r2
 800d926:	4618      	mov	r0, r3
 800d928:	f7f6 fd51 	bl	80043ce <HAL_PCD_EP_GetRxCount>
 800d92c:	4603      	mov	r3, r0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
	...

0800d938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d817      	bhi.n	800d97c <USBD_Get_USB_Status+0x44>
 800d94c:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <USBD_Get_USB_Status+0x1c>)
 800d94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d952:	bf00      	nop
 800d954:	0800d965 	.word	0x0800d965
 800d958:	0800d96b 	.word	0x0800d96b
 800d95c:	0800d971 	.word	0x0800d971
 800d960:	0800d977 	.word	0x0800d977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
    break;
 800d968:	e00b      	b.n	800d982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d96a:	2302      	movs	r3, #2
 800d96c:	73fb      	strb	r3, [r7, #15]
    break;
 800d96e:	e008      	b.n	800d982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d970:	2301      	movs	r3, #1
 800d972:	73fb      	strb	r3, [r7, #15]
    break;
 800d974:	e005      	b.n	800d982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d976:	2302      	movs	r3, #2
 800d978:	73fb      	strb	r3, [r7, #15]
    break;
 800d97a:	e002      	b.n	800d982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d97c:	2302      	movs	r3, #2
 800d97e:	73fb      	strb	r3, [r7, #15]
    break;
 800d980:	bf00      	nop
  }
  return usb_status;
 800d982:	7bfb      	ldrb	r3, [r7, #15]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	bc80      	pop	{r7}
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop

0800d990 <malloc>:
 800d990:	4b02      	ldr	r3, [pc, #8]	; (800d99c <malloc+0xc>)
 800d992:	4601      	mov	r1, r0
 800d994:	6818      	ldr	r0, [r3, #0]
 800d996:	f000 b82b 	b.w	800d9f0 <_malloc_r>
 800d99a:	bf00      	nop
 800d99c:	2000020c 	.word	0x2000020c

0800d9a0 <free>:
 800d9a0:	4b02      	ldr	r3, [pc, #8]	; (800d9ac <free+0xc>)
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	6818      	ldr	r0, [r3, #0]
 800d9a6:	f000 b8f3 	b.w	800db90 <_free_r>
 800d9aa:	bf00      	nop
 800d9ac:	2000020c 	.word	0x2000020c

0800d9b0 <sbrk_aligned>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	4e0e      	ldr	r6, [pc, #56]	; (800d9ec <sbrk_aligned+0x3c>)
 800d9b4:	460c      	mov	r4, r1
 800d9b6:	6831      	ldr	r1, [r6, #0]
 800d9b8:	4605      	mov	r5, r0
 800d9ba:	b911      	cbnz	r1, 800d9c2 <sbrk_aligned+0x12>
 800d9bc:	f000 f8ac 	bl	800db18 <_sbrk_r>
 800d9c0:	6030      	str	r0, [r6, #0]
 800d9c2:	4621      	mov	r1, r4
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f000 f8a7 	bl	800db18 <_sbrk_r>
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	d00a      	beq.n	800d9e4 <sbrk_aligned+0x34>
 800d9ce:	1cc4      	adds	r4, r0, #3
 800d9d0:	f024 0403 	bic.w	r4, r4, #3
 800d9d4:	42a0      	cmp	r0, r4
 800d9d6:	d007      	beq.n	800d9e8 <sbrk_aligned+0x38>
 800d9d8:	1a21      	subs	r1, r4, r0
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f000 f89c 	bl	800db18 <_sbrk_r>
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	d101      	bne.n	800d9e8 <sbrk_aligned+0x38>
 800d9e4:	f04f 34ff 	mov.w	r4, #4294967295
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	bd70      	pop	{r4, r5, r6, pc}
 800d9ec:	200037b4 	.word	0x200037b4

0800d9f0 <_malloc_r>:
 800d9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f4:	1ccd      	adds	r5, r1, #3
 800d9f6:	f025 0503 	bic.w	r5, r5, #3
 800d9fa:	3508      	adds	r5, #8
 800d9fc:	2d0c      	cmp	r5, #12
 800d9fe:	bf38      	it	cc
 800da00:	250c      	movcc	r5, #12
 800da02:	2d00      	cmp	r5, #0
 800da04:	4607      	mov	r7, r0
 800da06:	db01      	blt.n	800da0c <_malloc_r+0x1c>
 800da08:	42a9      	cmp	r1, r5
 800da0a:	d905      	bls.n	800da18 <_malloc_r+0x28>
 800da0c:	230c      	movs	r3, #12
 800da0e:	2600      	movs	r6, #0
 800da10:	603b      	str	r3, [r7, #0]
 800da12:	4630      	mov	r0, r6
 800da14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800daec <_malloc_r+0xfc>
 800da1c:	f000 f868 	bl	800daf0 <__malloc_lock>
 800da20:	f8d8 3000 	ldr.w	r3, [r8]
 800da24:	461c      	mov	r4, r3
 800da26:	bb5c      	cbnz	r4, 800da80 <_malloc_r+0x90>
 800da28:	4629      	mov	r1, r5
 800da2a:	4638      	mov	r0, r7
 800da2c:	f7ff ffc0 	bl	800d9b0 <sbrk_aligned>
 800da30:	1c43      	adds	r3, r0, #1
 800da32:	4604      	mov	r4, r0
 800da34:	d155      	bne.n	800dae2 <_malloc_r+0xf2>
 800da36:	f8d8 4000 	ldr.w	r4, [r8]
 800da3a:	4626      	mov	r6, r4
 800da3c:	2e00      	cmp	r6, #0
 800da3e:	d145      	bne.n	800dacc <_malloc_r+0xdc>
 800da40:	2c00      	cmp	r4, #0
 800da42:	d048      	beq.n	800dad6 <_malloc_r+0xe6>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	4631      	mov	r1, r6
 800da48:	4638      	mov	r0, r7
 800da4a:	eb04 0903 	add.w	r9, r4, r3
 800da4e:	f000 f863 	bl	800db18 <_sbrk_r>
 800da52:	4581      	cmp	r9, r0
 800da54:	d13f      	bne.n	800dad6 <_malloc_r+0xe6>
 800da56:	6821      	ldr	r1, [r4, #0]
 800da58:	4638      	mov	r0, r7
 800da5a:	1a6d      	subs	r5, r5, r1
 800da5c:	4629      	mov	r1, r5
 800da5e:	f7ff ffa7 	bl	800d9b0 <sbrk_aligned>
 800da62:	3001      	adds	r0, #1
 800da64:	d037      	beq.n	800dad6 <_malloc_r+0xe6>
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	442b      	add	r3, r5
 800da6a:	6023      	str	r3, [r4, #0]
 800da6c:	f8d8 3000 	ldr.w	r3, [r8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d038      	beq.n	800dae6 <_malloc_r+0xf6>
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	42a2      	cmp	r2, r4
 800da78:	d12b      	bne.n	800dad2 <_malloc_r+0xe2>
 800da7a:	2200      	movs	r2, #0
 800da7c:	605a      	str	r2, [r3, #4]
 800da7e:	e00f      	b.n	800daa0 <_malloc_r+0xb0>
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	1b52      	subs	r2, r2, r5
 800da84:	d41f      	bmi.n	800dac6 <_malloc_r+0xd6>
 800da86:	2a0b      	cmp	r2, #11
 800da88:	d917      	bls.n	800daba <_malloc_r+0xca>
 800da8a:	1961      	adds	r1, r4, r5
 800da8c:	42a3      	cmp	r3, r4
 800da8e:	6025      	str	r5, [r4, #0]
 800da90:	bf18      	it	ne
 800da92:	6059      	strne	r1, [r3, #4]
 800da94:	6863      	ldr	r3, [r4, #4]
 800da96:	bf08      	it	eq
 800da98:	f8c8 1000 	streq.w	r1, [r8]
 800da9c:	5162      	str	r2, [r4, r5]
 800da9e:	604b      	str	r3, [r1, #4]
 800daa0:	4638      	mov	r0, r7
 800daa2:	f104 060b 	add.w	r6, r4, #11
 800daa6:	f000 f829 	bl	800dafc <__malloc_unlock>
 800daaa:	f026 0607 	bic.w	r6, r6, #7
 800daae:	1d23      	adds	r3, r4, #4
 800dab0:	1af2      	subs	r2, r6, r3
 800dab2:	d0ae      	beq.n	800da12 <_malloc_r+0x22>
 800dab4:	1b9b      	subs	r3, r3, r6
 800dab6:	50a3      	str	r3, [r4, r2]
 800dab8:	e7ab      	b.n	800da12 <_malloc_r+0x22>
 800daba:	42a3      	cmp	r3, r4
 800dabc:	6862      	ldr	r2, [r4, #4]
 800dabe:	d1dd      	bne.n	800da7c <_malloc_r+0x8c>
 800dac0:	f8c8 2000 	str.w	r2, [r8]
 800dac4:	e7ec      	b.n	800daa0 <_malloc_r+0xb0>
 800dac6:	4623      	mov	r3, r4
 800dac8:	6864      	ldr	r4, [r4, #4]
 800daca:	e7ac      	b.n	800da26 <_malloc_r+0x36>
 800dacc:	4634      	mov	r4, r6
 800dace:	6876      	ldr	r6, [r6, #4]
 800dad0:	e7b4      	b.n	800da3c <_malloc_r+0x4c>
 800dad2:	4613      	mov	r3, r2
 800dad4:	e7cc      	b.n	800da70 <_malloc_r+0x80>
 800dad6:	230c      	movs	r3, #12
 800dad8:	4638      	mov	r0, r7
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	f000 f80e 	bl	800dafc <__malloc_unlock>
 800dae0:	e797      	b.n	800da12 <_malloc_r+0x22>
 800dae2:	6025      	str	r5, [r4, #0]
 800dae4:	e7dc      	b.n	800daa0 <_malloc_r+0xb0>
 800dae6:	605b      	str	r3, [r3, #4]
 800dae8:	deff      	udf	#255	; 0xff
 800daea:	bf00      	nop
 800daec:	200037b0 	.word	0x200037b0

0800daf0 <__malloc_lock>:
 800daf0:	4801      	ldr	r0, [pc, #4]	; (800daf8 <__malloc_lock+0x8>)
 800daf2:	f000 b84b 	b.w	800db8c <__retarget_lock_acquire_recursive>
 800daf6:	bf00      	nop
 800daf8:	200038f4 	.word	0x200038f4

0800dafc <__malloc_unlock>:
 800dafc:	4801      	ldr	r0, [pc, #4]	; (800db04 <__malloc_unlock+0x8>)
 800dafe:	f000 b846 	b.w	800db8e <__retarget_lock_release_recursive>
 800db02:	bf00      	nop
 800db04:	200038f4 	.word	0x200038f4

0800db08 <memset>:
 800db08:	4603      	mov	r3, r0
 800db0a:	4402      	add	r2, r0
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d100      	bne.n	800db12 <memset+0xa>
 800db10:	4770      	bx	lr
 800db12:	f803 1b01 	strb.w	r1, [r3], #1
 800db16:	e7f9      	b.n	800db0c <memset+0x4>

0800db18 <_sbrk_r>:
 800db18:	b538      	push	{r3, r4, r5, lr}
 800db1a:	2300      	movs	r3, #0
 800db1c:	4d05      	ldr	r5, [pc, #20]	; (800db34 <_sbrk_r+0x1c>)
 800db1e:	4604      	mov	r4, r0
 800db20:	4608      	mov	r0, r1
 800db22:	602b      	str	r3, [r5, #0]
 800db24:	f7f3 fe24 	bl	8001770 <_sbrk>
 800db28:	1c43      	adds	r3, r0, #1
 800db2a:	d102      	bne.n	800db32 <_sbrk_r+0x1a>
 800db2c:	682b      	ldr	r3, [r5, #0]
 800db2e:	b103      	cbz	r3, 800db32 <_sbrk_r+0x1a>
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	200038f0 	.word	0x200038f0

0800db38 <__errno>:
 800db38:	4b01      	ldr	r3, [pc, #4]	; (800db40 <__errno+0x8>)
 800db3a:	6818      	ldr	r0, [r3, #0]
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	2000020c 	.word	0x2000020c

0800db44 <__libc_init_array>:
 800db44:	b570      	push	{r4, r5, r6, lr}
 800db46:	2600      	movs	r6, #0
 800db48:	4d0c      	ldr	r5, [pc, #48]	; (800db7c <__libc_init_array+0x38>)
 800db4a:	4c0d      	ldr	r4, [pc, #52]	; (800db80 <__libc_init_array+0x3c>)
 800db4c:	1b64      	subs	r4, r4, r5
 800db4e:	10a4      	asrs	r4, r4, #2
 800db50:	42a6      	cmp	r6, r4
 800db52:	d109      	bne.n	800db68 <__libc_init_array+0x24>
 800db54:	f000 f864 	bl	800dc20 <_init>
 800db58:	2600      	movs	r6, #0
 800db5a:	4d0a      	ldr	r5, [pc, #40]	; (800db84 <__libc_init_array+0x40>)
 800db5c:	4c0a      	ldr	r4, [pc, #40]	; (800db88 <__libc_init_array+0x44>)
 800db5e:	1b64      	subs	r4, r4, r5
 800db60:	10a4      	asrs	r4, r4, #2
 800db62:	42a6      	cmp	r6, r4
 800db64:	d105      	bne.n	800db72 <__libc_init_array+0x2e>
 800db66:	bd70      	pop	{r4, r5, r6, pc}
 800db68:	f855 3b04 	ldr.w	r3, [r5], #4
 800db6c:	4798      	blx	r3
 800db6e:	3601      	adds	r6, #1
 800db70:	e7ee      	b.n	800db50 <__libc_init_array+0xc>
 800db72:	f855 3b04 	ldr.w	r3, [r5], #4
 800db76:	4798      	blx	r3
 800db78:	3601      	adds	r6, #1
 800db7a:	e7f2      	b.n	800db62 <__libc_init_array+0x1e>
 800db7c:	0800decc 	.word	0x0800decc
 800db80:	0800decc 	.word	0x0800decc
 800db84:	0800decc 	.word	0x0800decc
 800db88:	0800ded0 	.word	0x0800ded0

0800db8c <__retarget_lock_acquire_recursive>:
 800db8c:	4770      	bx	lr

0800db8e <__retarget_lock_release_recursive>:
 800db8e:	4770      	bx	lr

0800db90 <_free_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4605      	mov	r5, r0
 800db94:	2900      	cmp	r1, #0
 800db96:	d040      	beq.n	800dc1a <_free_r+0x8a>
 800db98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db9c:	1f0c      	subs	r4, r1, #4
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bfb8      	it	lt
 800dba2:	18e4      	addlt	r4, r4, r3
 800dba4:	f7ff ffa4 	bl	800daf0 <__malloc_lock>
 800dba8:	4a1c      	ldr	r2, [pc, #112]	; (800dc1c <_free_r+0x8c>)
 800dbaa:	6813      	ldr	r3, [r2, #0]
 800dbac:	b933      	cbnz	r3, 800dbbc <_free_r+0x2c>
 800dbae:	6063      	str	r3, [r4, #4]
 800dbb0:	6014      	str	r4, [r2, #0]
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbb8:	f7ff bfa0 	b.w	800dafc <__malloc_unlock>
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	d908      	bls.n	800dbd2 <_free_r+0x42>
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	1821      	adds	r1, r4, r0
 800dbc4:	428b      	cmp	r3, r1
 800dbc6:	bf01      	itttt	eq
 800dbc8:	6819      	ldreq	r1, [r3, #0]
 800dbca:	685b      	ldreq	r3, [r3, #4]
 800dbcc:	1809      	addeq	r1, r1, r0
 800dbce:	6021      	streq	r1, [r4, #0]
 800dbd0:	e7ed      	b.n	800dbae <_free_r+0x1e>
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	b10b      	cbz	r3, 800dbdc <_free_r+0x4c>
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	d9fa      	bls.n	800dbd2 <_free_r+0x42>
 800dbdc:	6811      	ldr	r1, [r2, #0]
 800dbde:	1850      	adds	r0, r2, r1
 800dbe0:	42a0      	cmp	r0, r4
 800dbe2:	d10b      	bne.n	800dbfc <_free_r+0x6c>
 800dbe4:	6820      	ldr	r0, [r4, #0]
 800dbe6:	4401      	add	r1, r0
 800dbe8:	1850      	adds	r0, r2, r1
 800dbea:	4283      	cmp	r3, r0
 800dbec:	6011      	str	r1, [r2, #0]
 800dbee:	d1e0      	bne.n	800dbb2 <_free_r+0x22>
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	4408      	add	r0, r1
 800dbf6:	6010      	str	r0, [r2, #0]
 800dbf8:	6053      	str	r3, [r2, #4]
 800dbfa:	e7da      	b.n	800dbb2 <_free_r+0x22>
 800dbfc:	d902      	bls.n	800dc04 <_free_r+0x74>
 800dbfe:	230c      	movs	r3, #12
 800dc00:	602b      	str	r3, [r5, #0]
 800dc02:	e7d6      	b.n	800dbb2 <_free_r+0x22>
 800dc04:	6820      	ldr	r0, [r4, #0]
 800dc06:	1821      	adds	r1, r4, r0
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	bf01      	itttt	eq
 800dc0c:	6819      	ldreq	r1, [r3, #0]
 800dc0e:	685b      	ldreq	r3, [r3, #4]
 800dc10:	1809      	addeq	r1, r1, r0
 800dc12:	6021      	streq	r1, [r4, #0]
 800dc14:	6063      	str	r3, [r4, #4]
 800dc16:	6054      	str	r4, [r2, #4]
 800dc18:	e7cb      	b.n	800dbb2 <_free_r+0x22>
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	200037b0 	.word	0x200037b0

0800dc20 <_init>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	bf00      	nop
 800dc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc26:	bc08      	pop	{r3}
 800dc28:	469e      	mov	lr, r3
 800dc2a:	4770      	bx	lr

0800dc2c <_fini>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	bf00      	nop
 800dc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc32:	bc08      	pop	{r3}
 800dc34:	469e      	mov	lr, r3
 800dc36:	4770      	bx	lr
