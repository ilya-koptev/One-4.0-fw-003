
fw-002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d32c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800d4b0  0800d4b0  0001d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d730  0800d730  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d730  0800d730  0001d730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d738  0800d738  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d738  0800d738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036a0  20000210  0800d950  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038b0  0800d950  000238b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e6b  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a46  00000000  00000000  000440e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e0  00000000  00000000  0004ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000194a  00000000  00000000  0004cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a82  00000000  00000000  0004e55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f285  00000000  00000000  00075fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd795  00000000  00000000  000a5261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008964  00000000  00000000  001729f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0017b35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000210 	.word	0x20000210
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800d498 	.word	0x0800d498

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000214 	.word	0x20000214
 80001c0:	0800d498 	.word	0x0800d498

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_CRC_Init+0x20>)
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <MX_CRC_Init+0x24>)
 80004cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_CRC_Init+0x20>)
 80004d0:	f001 fd2b 	bl	8001f2a <HAL_CRC_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004da:	f000 fca5 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000022c 	.word	0x2000022c
 80004e8:	40023000 	.word	0x40023000

080004ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_CRC_MspInit+0x38>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d10d      	bne.n	800051a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_CRC_MspInit+0x3c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40023000 	.word	0x40023000
 8000528:	40023800 	.word	0x40023800

0800052c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <MX_DMA_Init+0xd8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a32      	ldr	r2, [pc, #200]	; (8000604 <MX_DMA_Init+0xd8>)
 800053c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_DMA_Init+0xd8>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_DMA_Init+0xd8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <MX_DMA_Init+0xd8>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_DMA_Init+0xd8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <MX_DMA_Init+0xdc>)
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <MX_DMA_Init+0xe0>)
 800056e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_DMA_Init+0xdc>)
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_DMA_Init+0xdc>)
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_DMA_Init+0xdc>)
 800057e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000582:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000584:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_DMA_Init+0xdc>)
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_DMA_Init+0xdc>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_DMA_Init+0xdc>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_DMA_Init+0xdc>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_DMA_Init+0xdc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_DMA_Init+0xdc>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_DMA_Init+0xdc>)
 80005ac:	2203      	movs	r2, #3
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_DMA_Init+0xdc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_DMA_Init+0xdc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <MX_DMA_Init+0xdc>)
 80005be:	f001 fcd1 	bl	8001f64 <HAL_DMA_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 80005c8:	f000 fc2e 	bl	8000e28 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	200f      	movs	r0, #15
 80005d2:	f001 fc74 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f001 fc8d 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2038      	movs	r0, #56	; 0x38
 80005e2:	f001 fc6c 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005e6:	2038      	movs	r0, #56	; 0x38
 80005e8:	f001 fc85 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	203b      	movs	r0, #59	; 0x3b
 80005f2:	f001 fc64 	bl	8001ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f6:	203b      	movs	r0, #59	; 0x3b
 80005f8:	f001 fc7d 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	20000234 	.word	0x20000234
 800060c:	40026410 	.word	0x40026410

08000610 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <MX_GPIO_Init+0x15c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4f      	ldr	r2, [pc, #316]	; (800076c <MX_GPIO_Init+0x15c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <MX_GPIO_Init+0x15c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <MX_GPIO_Init+0x15c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a48      	ldr	r2, [pc, #288]	; (800076c <MX_GPIO_Init+0x15c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <MX_GPIO_Init+0x15c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x15c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <MX_GPIO_Init+0x15c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <MX_GPIO_Init+0x15c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <MX_GPIO_Init+0x15c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a3a      	ldr	r2, [pc, #232]	; (800076c <MX_GPIO_Init+0x15c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <MX_GPIO_Init+0x15c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b34      	ldr	r3, [pc, #208]	; (800076c <MX_GPIO_Init+0x15c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a33      	ldr	r2, [pc, #204]	; (800076c <MX_GPIO_Init+0x15c>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <MX_GPIO_Init+0x15c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80006b2:	2200      	movs	r2, #0
 80006b4:	f242 0127 	movw	r1, #8231	; 0x2027
 80006b8:	482d      	ldr	r0, [pc, #180]	; (8000770 <MX_GPIO_Init+0x160>)
 80006ba:	f002 fb62 	bl	8002d82 <HAL_GPIO_WritePin>
                          |Out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out1_Pin|Out6_Pin|Out5_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f248 4110 	movw	r1, #33808	; 0x8410
 80006c4:	482b      	ldr	r0, [pc, #172]	; (8000774 <MX_GPIO_Init+0x164>)
 80006c6:	f002 fb5c 	bl	8002d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2110      	movs	r1, #16
 80006ce:	4828      	ldr	r0, [pc, #160]	; (8000770 <MX_GPIO_Init+0x160>)
 80006d0:	f002 fb57 	bl	8002d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80006d4:	f242 0337 	movw	r3, #8247	; 0x2037
 80006d8:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|Out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <MX_GPIO_Init+0x160>)
 80006ee:	f002 f895 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Out1_Pin|Out6_Pin|Out5_Pin;
 80006f2:	f248 4310 	movw	r3, #33808	; 0x8410
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <MX_GPIO_Init+0x164>)
 800070c:	f002 f886 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = In6_Pin|In4_Pin|In3_Pin|In5_Pin;
 8000710:	f24d 0304 	movw	r3, #53252	; 0xd004
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_GPIO_Init+0x168>)
 8000726:	f002 f879 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = In1_Pin|In2_Pin;
 800072a:	23c0      	movs	r3, #192	; 0xc0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_GPIO_Init+0x160>)
 800073e:	f002 f86d 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0x164>)
 8000760:	f002 f85c 	bl	800281c <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020800 	.word	0x40020800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400

0800077c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C2_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C2_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C2_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C2_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C2_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C2_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C2_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C2_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C2_Init+0x50>)
 80007ba:	f002 fafb 	bl	8002db4 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fb30 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000294 	.word	0x20000294
 80007d0:	40005800 	.word	0x40005800
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_I2C_MspInit+0x84>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12c      	bne.n	8000854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000828:	2304      	movs	r3, #4
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_I2C_MspInit+0x8c>)
 8000834:	f001 fff2 	bl	800281c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_I2C_MspInit+0x88>)
 8000842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_I2C_MspInit+0x88>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005800 	.word	0x40005800
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f001 f9cf 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f883 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f7ff fecb 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 800087a:	f7ff fe57 	bl	800052c <MX_DMA_Init>
  MX_SPI1_Init();
 800087e:	f000 fc17 	bl	80010b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000882:	f000 fc4b 	bl	800111c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000886:	f009 fddd 	bl	800a444 <MX_FATFS_Init>
  MX_TIM4_Init();
 800088a:	f000 ff7f 	bl	800178c <MX_TIM4_Init>
  MX_I2C2_Init();
 800088e:	f7ff ff75 	bl	800077c <MX_I2C2_Init>
  MX_RTC_Init();
 8000892:	f000 fb05 	bl	8000ea0 <MX_RTC_Init>
  MX_SPI3_Init();
 8000896:	f000 fc77 	bl	8001188 <MX_SPI3_Init>
  MX_UART4_Init();
 800089a:	f001 f8b7 	bl	8001a0c <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 800089e:	f00b ffdb 	bl	800c858 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80008a2:	f000 ff03 	bl	80016ac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80008a6:	f001 f8db 	bl	8001a60 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80008aa:	f000 fac5 	bl	8000e38 <MX_RNG_Init>
  MX_SDIO_SD_Init();
 80008ae:	f000 fb65 	bl	8000f7c <MX_SDIO_SD_Init>
  MX_CRC_Init();
 80008b2:	f7ff fe07 	bl	80004c4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  	MM_Init();
 80008b6:	f00b fe61 	bl	800c57c <MM_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4927      	ldr	r1, [pc, #156]	; (800095c <main+0xf4>)
 80008be:	4828      	ldr	r0, [pc, #160]	; (8000960 <main+0xf8>)
 80008c0:	f007 f849 	bl	8007956 <HAL_UART_Receive_IT>

#ifdef LORA
	HAL_SPI_DeInit(&hspi3);
 80008c4:	4827      	ldr	r0, [pc, #156]	; (8000964 <main+0xfc>)
 80008c6:	f005 ff49 	bl	800675c <HAL_SPI_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008da:	2338      	movs	r3, #56	; 0x38
 80008dc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	481e      	ldr	r0, [pc, #120]	; (8000968 <main+0x100>)
 80008ee:	f001 ff95 	bl	800281c <HAL_GPIO_Init>
	#define LORA_SET HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
	#define LORA_WORK HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

		LORA_SET
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	481c      	ldr	r0, [pc, #112]	; (8000968 <main+0x100>)
 80008f8:	f002 fa43 	bl	8002d82 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000900:	f001 f9e2 	bl	8001cc8 <HAL_Delay>
		uint8_t prog_string[6] = {0x03, 0x03, 0x62, 0x00, 0x03, 0x03};
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <main+0x104>)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	6018      	str	r0, [r3, #0]
 800090e:	3304      	adds	r3, #4
 8000910:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart2, prog_string, 6, 500);
 8000912:	1d39      	adds	r1, r7, #4
 8000914:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000918:	2206      	movs	r2, #6
 800091a:	4811      	ldr	r0, [pc, #68]	; (8000960 <main+0xf8>)
 800091c:	f006 ff89 	bl	8007832 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000924:	f001 f9d0 	bl	8001cc8 <HAL_Delay>
		LORA_WORK
 8000928:	2200      	movs	r2, #0
 800092a:	2108      	movs	r1, #8
 800092c:	480e      	ldr	r0, [pc, #56]	; (8000968 <main+0x100>)
 800092e:	f002 fa28 	bl	8002d82 <HAL_GPIO_WritePin>

#endif
  	init_OK = 1;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <main+0x108>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  Debug_LED1 = 	RED;
	  Debug_LED1 = BLACK;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <main+0x10c>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	  Debug_LED2 = BLACK;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <main+0x110>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000948:	f001 f9be 	bl	8001cc8 <HAL_Delay>

//	  Debug_LED1 = BLACK;

	  Debug_LED1 = GREEN;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <main+0x10c>)
 800094e:	2203      	movs	r2, #3
 8000950:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000956:	f001 f9b7 	bl	8001cc8 <HAL_Delay>
	  Debug_LED1 = BLACK;
 800095a:	e7ed      	b.n	8000938 <main+0xd0>
 800095c:	200002e8 	.word	0x200002e8
 8000960:	20000684 	.word	0x20000684
 8000964:	20000494 	.word	0x20000494
 8000968:	40020400 	.word	0x40020400
 800096c:	0800d4b0 	.word	0x0800d4b0
 8000970:	2000072f 	.word	0x2000072f
 8000974:	2000072d 	.word	0x2000072d
 8000978:	2000072e 	.word	0x2000072e

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b096      	sub	sp, #88	; 0x58
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00c fcf8 	bl	800d380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009ae:	2309      	movs	r3, #9
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009c4:	2319      	movs	r3, #25
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009c8:	23c0      	movs	r3, #192	; 0xc0
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fc85 	bl	80042e8 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009e4:	f000 fa20 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2103      	movs	r1, #3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 febc 	bl	8004784 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a12:	f000 fa09 	bl	8000e28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a16:	2304      	movs	r3, #4
 8000a18:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 f916 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a2e:	f000 f9fb 	bl	8000e28 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f003 ff8f 	bl	800495c <HAL_RCC_MCOConfig>
}
 8000a3e:	bf00      	nop
 8000a40:	3758      	adds	r7, #88	; 0x58
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	static uint8_t reseive_msg[16] = {0};
	static uint8_t current_byte = 0;
	reseive_msg[current_byte] = rx_byte;
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <HAL_UART_RxCpltCallback+0x13c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b4c      	ldr	r3, [pc, #304]	; (8000b88 <HAL_UART_RxCpltCallback+0x140>)
 8000a58:	7819      	ldrb	r1, [r3, #0]
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000a5c:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4949      	ldr	r1, [pc, #292]	; (8000b88 <HAL_UART_RxCpltCallback+0x140>)
 8000a62:	484b      	ldr	r0, [pc, #300]	; (8000b90 <HAL_UART_RxCpltCallback+0x148>)
 8000a64:	f006 ff77 	bl	8007956 <HAL_UART_Receive_IT>

	Debug_LED2 = RED;
 8000a68:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <HAL_UART_RxCpltCallback+0x14c>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]

	if (current_byte < 7){
 8000a6e:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <HAL_UART_RxCpltCallback+0x13c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d80f      	bhi.n	8000a96 <HAL_UART_RxCpltCallback+0x4e>
		current_byte = (reseive_msg[0] == ModbusReg[0]) ? current_byte + 1 : 0;
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <HAL_UART_RxCpltCallback+0x150>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d104      	bne.n	8000a8e <HAL_UART_RxCpltCallback+0x46>
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <HAL_UART_RxCpltCallback+0x13c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	e000      	b.n	8000a90 <HAL_UART_RxCpltCallback+0x48>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	4a3c      	ldr	r2, [pc, #240]	; (8000b84 <HAL_UART_RxCpltCallback+0x13c>)
 8000a92:	7013      	strb	r3, [r2, #0]
			}
			else {MRTU_Error(3, reseive_msg[1]);}
		}
		else {MRTU_Error(1, reseive_msg[1]);}
	}
}
 8000a94:	e071      	b.n	8000b7a <HAL_UART_RxCpltCallback+0x132>
		current_byte = 0;
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <HAL_UART_RxCpltCallback+0x13c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
		uint16_t tmp = MRTU_CRC(reseive_msg, 6);
 8000a9c:	2106      	movs	r1, #6
 8000a9e:	483b      	ldr	r0, [pc, #236]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000aa0:	f000 f8d0 	bl	8000c44 <MRTU_CRC>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	81fb      	strh	r3, [r7, #14]
		uint8_t CRC1 = (uint8_t)tmp;
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	737b      	strb	r3, [r7, #13]
		uint8_t CRC2 = (uint8_t)(tmp >> 8);
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	733b      	strb	r3, [r7, #12]
		if (reseive_msg[1] == 3){
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d127      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0xc4>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d11c      	bne.n	8000afe <HAL_UART_RxCpltCallback+0xb6>
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000ac6:	78db      	ldrb	r3, [r3, #3]
 8000ac8:	2b1f      	cmp	r3, #31
 8000aca:	d818      	bhi.n	8000afe <HAL_UART_RxCpltCallback+0xb6>
					&& (reseive_msg[4] == 0) && (reseive_msg[5] == 1) \
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d114      	bne.n	8000afe <HAL_UART_RxCpltCallback+0xb6>
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d110      	bne.n	8000afe <HAL_UART_RxCpltCallback+0xb6>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000ade:	799b      	ldrb	r3, [r3, #6]
 8000ae0:	7b7a      	ldrb	r2, [r7, #13]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d10b      	bne.n	8000afe <HAL_UART_RxCpltCallback+0xb6>
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000ae8:	79db      	ldrb	r3, [r3, #7]
 8000aea:	7b3a      	ldrb	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d106      	bne.n	8000afe <HAL_UART_RxCpltCallback+0xb6>
				MRTU_Read(reseive_msg[3]);
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000af2:	78db      	ldrb	r3, [r3, #3]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f8d8 	bl	8000cac <MRTU_Read>
 8000afc:	e03d      	b.n	8000b7a <HAL_UART_RxCpltCallback+0x132>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	4619      	mov	r1, r3
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f959 	bl	8000dbc <MRTU_Error>
}
 8000b0a:	e036      	b.n	8000b7a <HAL_UART_RxCpltCallback+0x132>
		else if (reseive_msg[1] == 6){
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b0e:	785b      	ldrb	r3, [r3, #1]
 8000b10:	2b06      	cmp	r3, #6
 8000b12:	d12b      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x124>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d120      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x116>
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	2b1f      	cmp	r3, #31
 8000b22:	d81c      	bhi.n	8000b5e <HAL_UART_RxCpltCallback+0x116>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b26:	799b      	ldrb	r3, [r3, #6]
 8000b28:	7b7a      	ldrb	r2, [r7, #13]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d117      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x116>
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b30:	79db      	ldrb	r3, [r3, #7]
 8000b32:	7b3a      	ldrb	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d112      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x116>
				MRTU_Write(reseive_msg[3], (((uint16_t)reseive_msg[5]) | (uint16_t)(reseive_msg[4] << 8)));
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b3a:	78db      	ldrb	r3, [r3, #3]
 8000b3c:	b298      	uxth	r0, r3
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b40:	795b      	ldrb	r3, [r3, #5]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	f000 f8ea 	bl	8000d2c <MRTU_Write>
				Update_reg();
 8000b58:	f000 f836 	bl	8000bc8 <Update_reg>
 8000b5c:	e00d      	b.n	8000b7a <HAL_UART_RxCpltCallback+0x132>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	4619      	mov	r1, r3
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f929 	bl	8000dbc <MRTU_Error>
}
 8000b6a:	e006      	b.n	8000b7a <HAL_UART_RxCpltCallback+0x132>
		else {MRTU_Error(1, reseive_msg[1]);}
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_UART_RxCpltCallback+0x144>)
 8000b6e:	785b      	ldrb	r3, [r3, #1]
 8000b70:	4619      	mov	r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	f000 f922 	bl	8000dbc <MRTU_Error>
}
 8000b78:	e7ff      	b.n	8000b7a <HAL_UART_RxCpltCallback+0x132>
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200002e9 	.word	0x200002e9
 8000b88:	200002e8 	.word	0x200002e8
 8000b8c:	200002ec 	.word	0x200002ec
 8000b90:	20000684 	.word	0x20000684
 8000b94:	2000072e 	.word	0x2000072e
 8000b98:	20000000 	.word	0x20000000

08000b9c <Main_IncTic>:



void Main_IncTic(void){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	static uint8_t timer_5_sec;
	if (timer_5_sec) {timer_5_sec--;}
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <Main_IncTic+0x28>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <Main_IncTic+0x1a>
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <Main_IncTic+0x28>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <Main_IncTic+0x28>)
 8000bb2:	701a      	strb	r2, [r3, #0]
	else {
		Update_reg();
		timer_5_sec = 5000;
	}
}
 8000bb4:	e004      	b.n	8000bc0 <Main_IncTic+0x24>
		Update_reg();
 8000bb6:	f000 f807 	bl	8000bc8 <Update_reg>
		timer_5_sec = 5000;
 8000bba:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <Main_IncTic+0x28>)
 8000bbc:	2288      	movs	r2, #136	; 0x88
 8000bbe:	701a      	strb	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200002fc 	.word	0x200002fc

08000bc8 <Update_reg>:

void Update_reg(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	Set_Out(P_OUT_3, ModbusReg[10]);
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <Update_reg+0x2c>)
 8000bce:	8a9b      	ldrh	r3, [r3, #20]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f00b fcfc 	bl	800c5d0 <Set_Out>
	Set_Out(P_OUT_4, ModbusReg[11]);
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <Update_reg+0x2c>)
 8000bda:	8adb      	ldrh	r3, [r3, #22]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2003      	movs	r0, #3
 8000be0:	f00b fcf6 	bl	800c5d0 <Set_Out>
	Set_Out(P_OUT_5, ModbusReg[12]);
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <Update_reg+0x2c>)
 8000be6:	8b1b      	ldrh	r3, [r3, #24]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2004      	movs	r0, #4
 8000bec:	f00b fcf0 	bl	800c5d0 <Set_Out>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <Buttons_Handler>:



void Buttons_Handler (uint8_t Butt, Button_events_TypeDef Event){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]


	if ((Butt == 0) && (Event == SHORT_CLC)) {
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d111      	bne.n	8000c32 <Buttons_Handler+0x3a>
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d10e      	bne.n	8000c32 <Buttons_Handler+0x3a>

		uint8_t prog_string[6] = {0x03, 0x03, 0x62, 0x00, 0x03, 0x03};
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <Buttons_Handler+0x44>)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1e:	6018      	str	r0, [r3, #0]
 8000c20:	3304      	adds	r3, #4
 8000c22:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart2, prog_string, 6, 50);
 8000c24:	f107 0108 	add.w	r1, r7, #8
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <Buttons_Handler+0x48>)
 8000c2e:	f006 fe00 	bl	8007832 <HAL_UART_Transmit>
	}
	if ((Butt == 0) && (Event == LONG_CLC)) {

	}

}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	0800d4b0 	.word	0x0800d4b0
 8000c40:	20000684 	.word	0x20000684

08000c44 <MRTU_CRC>:
uint16_t MRTU_CRC(uint8_t *data, uint8_t len){
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
    uint8_t uchCRCHi = 0xFF;
 8000c50:	23ff      	movs	r3, #255	; 0xff
 8000c52:	73fb      	strb	r3, [r7, #15]
    uint8_t uchCRCLo = 0xFF;
 8000c54:	23ff      	movs	r3, #255	; 0xff
 8000c56:	73bb      	strb	r3, [r7, #14]
    uint16_t uIndex ;
    while(len--){
 8000c58:	e011      	b.n	8000c7e <MRTU_CRC+0x3a>
        uIndex = uchCRCHi ^ *data++ ;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4053      	eors	r3, r2
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	81bb      	strh	r3, [r7, #12]
        uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <MRTU_CRC+0x60>)
 8000c6e:	5cd2      	ldrb	r2, [r2, r3]
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	4053      	eors	r3, r2
 8000c74:	73fb      	strb	r3, [r7, #15]
        uchCRCLo = auchCRCLo[uIndex] ;
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <MRTU_CRC+0x64>)
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	73bb      	strb	r3, [r7, #14]
    while(len--){
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	70fa      	strb	r2, [r7, #3]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1e8      	bne.n	8000c5a <MRTU_CRC+0x16>
    }
    return (((uint16_t)(uchCRCLo) << 8) | (uint16_t)(uchCRCHi));
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b29b      	uxth	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	0800d4fc 	.word	0x0800d4fc
 8000ca8:	0800d5fc 	.word	0x0800d5fc

08000cac <MRTU_Read>:
void MRTU_Read(uint16_t reg){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MRTU_Read+0x74>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MRTU_Read+0x78>)
 8000cbe:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = 0x03;								//код функции
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MRTU_Read+0x78>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = 2;								//длина пакета
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MRTU_Read+0x78>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <MRTU_Read+0x74>)
 8000cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MRTU_Read+0x78>)
 8000cdc:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)ModbusReg[reg];			//младший
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <MRTU_Read+0x74>)
 8000ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MRTU_Read+0x78>)
 8000cea:	711a      	strb	r2, [r3, #4]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 5);
 8000cec:	2105      	movs	r1, #5
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MRTU_Read+0x78>)
 8000cf0:	f7ff ffa8 	bl	8000c44 <MRTU_CRC>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	81fb      	strh	r3, [r7, #14]
	transmit_msg[5] = (uint8_t)tmp;						//CRC
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MRTU_Read+0x78>)
 8000cfe:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(tmp >> 8);				//
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MRTU_Read+0x78>)
 8000d0a:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000d0c:	2332      	movs	r3, #50	; 0x32
 8000d0e:	2208      	movs	r2, #8
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <MRTU_Read+0x78>)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MRTU_Read+0x7c>)
 8000d14:	f006 fd8d 	bl	8007832 <HAL_UART_Transmit>
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000300 	.word	0x20000300
 8000d28:	20000684 	.word	0x20000684

08000d2c <MRTU_Write>:
void MRTU_Write(uint16_t reg, uint16_t value){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	80fb      	strh	r3, [r7, #6]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	80bb      	strh	r3, [r7, #4]
	static uint8_t transmit_msg[16] = {0};
	ModbusReg[reg] = value;
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	491c      	ldr	r1, [pc, #112]	; (8000db0 <MRTU_Write+0x84>)
 8000d40:	88ba      	ldrh	r2, [r7, #4]
 8000d42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MRTU_Write+0x84>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MRTU_Write+0x88>)
 8000d4e:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = 0x06;								//код функции
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MRTU_Write+0x88>)
 8000d52:	2206      	movs	r2, #6
 8000d54:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = 2;								//длина пакета
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MRTU_Write+0x88>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <MRTU_Write+0x84>)
 8000d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MRTU_Write+0x88>)
 8000d6c:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)ModbusReg[reg];			//младший
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <MRTU_Write+0x84>)
 8000d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MRTU_Write+0x88>)
 8000d7a:	711a      	strb	r2, [r3, #4]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 5);
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MRTU_Write+0x88>)
 8000d80:	f7ff ff60 	bl	8000c44 <MRTU_CRC>
 8000d84:	4603      	mov	r3, r0
 8000d86:	81fb      	strh	r3, [r7, #14]
	transmit_msg[5] = (uint8_t)tmp;						//CRC
 8000d88:	89fb      	ldrh	r3, [r7, #14]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MRTU_Write+0x88>)
 8000d8e:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(tmp >> 8);				//
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MRTU_Write+0x88>)
 8000d9a:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000d9c:	2332      	movs	r3, #50	; 0x32
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4904      	ldr	r1, [pc, #16]	; (8000db4 <MRTU_Write+0x88>)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MRTU_Write+0x8c>)
 8000da4:	f006 fd45 	bl	8007832 <HAL_UART_Transmit>
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000310 	.word	0x20000310
 8000db8:	20000684 	.word	0x20000684

08000dbc <MRTU_Error>:
void MRTU_Error(uint8_t code, uint8_t func){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MRTU_Error+0x60>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MRTU_Error+0x64>)
 8000dd4:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = func | 0x80;						//код функции
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MRTU_Error+0x64>)
 8000de0:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = code;								//длина пакета
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <MRTU_Error+0x64>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	7093      	strb	r3, [r2, #2]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 3);
 8000de8:	2103      	movs	r1, #3
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MRTU_Error+0x64>)
 8000dec:	f7ff ff2a 	bl	8000c44 <MRTU_CRC>
 8000df0:	4603      	mov	r3, r0
 8000df2:	81fb      	strh	r3, [r7, #14]
	transmit_msg[3] = (uint8_t)tmp;						//CRC
 8000df4:	89fb      	ldrh	r3, [r7, #14]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MRTU_Error+0x64>)
 8000dfa:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)(tmp >> 8);				//
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MRTU_Error+0x64>)
 8000e06:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, transmit_msg, 5, 50);
 8000e08:	2332      	movs	r3, #50	; 0x32
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	4904      	ldr	r1, [pc, #16]	; (8000e20 <MRTU_Error+0x64>)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MRTU_Error+0x68>)
 8000e10:	f006 fd0f 	bl	8007832 <HAL_UART_Transmit>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000320 	.word	0x20000320
 8000e24:	20000684 	.word	0x20000684

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Debug_LED2 = RED;
 8000e2c:	4b01      	ldr	r3, [pc, #4]	; (8000e34 <Error_Handler+0xc>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
//  __disable_irq();
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <Error_Handler+0xa>
 8000e34:	2000072e 	.word	0x2000072e

08000e38 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_RNG_Init+0x20>)
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <MX_RNG_Init+0x24>)
 8000e40:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_RNG_Init+0x20>)
 8000e44:	f003 fffc 	bl	8004e40 <HAL_RNG_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e4e:	f7ff ffeb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000330 	.word	0x20000330
 8000e5c:	50060800 	.word	0x50060800

08000e60 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_RNG_MspInit+0x38>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_RNG_MspInit+0x3c>)
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_RNG_MspInit+0x3c>)
 8000e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e80:	6353      	str	r3, [r2, #52]	; 0x34
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_RNG_MspInit+0x3c>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	50060800 	.word	0x50060800
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000eb6:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <MX_RTC_Init+0xac>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000ec2:	227f      	movs	r2, #127	; 0x7f
 8000ec4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000ee0:	f003 ffd8 	bl	8004e94 <HAL_RTC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000eea:	f7ff ff9d 	bl	8000e28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000f0a:	f004 f84d 	bl	8004fa8 <HAL_RTC_SetTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8000f14:	f7ff ff88 	bl	8000e28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_RTC_Init+0xa8>)
 8000f30:	f004 f8f0 	bl	8005114 <HAL_RTC_SetDate>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8000f3a:	f7ff ff75 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000340 	.word	0x20000340
 8000f4c:	40002800 	.word	0x40002800

08000f50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <HAL_RTC_MspInit+0x24>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d102      	bne.n	8000f68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_RTC_MspInit+0x28>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40002800 	.word	0x40002800
 8000f78:	42470e3c 	.word	0x42470e3c

08000f7c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000f82:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <MX_SDIO_SD_Init+0x3c>)
 8000f84:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f9e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 48;
 8000fa6:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <MX_SDIO_SD_Init+0x38>)
 8000fa8:	2230      	movs	r2, #48	; 0x30
 8000faa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000360 	.word	0x20000360
 8000fb8:	40012c00 	.word	0x40012c00

08000fbc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <HAL_SD_MspInit+0xe4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d15b      	bne.n	8001096 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8000fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_SD_MspInit+0xe8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001032:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001044:	230c      	movs	r3, #12
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4816      	ldr	r0, [pc, #88]	; (80010a8 <HAL_SD_MspInit+0xec>)
 8001050:	f001 fbe4 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001066:	230c      	movs	r3, #12
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <HAL_SD_MspInit+0xec>)
 8001072:	f001 fbd3 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001076:	2304      	movs	r3, #4
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001086:	230c      	movs	r3, #12
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <HAL_SD_MspInit+0xf0>)
 8001092:	f001 fbc3 	bl	800281c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_SPI1_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MX_SPI1_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x64>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x64>)
 80010e4:	2220      	movs	r2, #32
 80010e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI1_Init+0x64>)
 80010fc:	220a      	movs	r2, #10
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_SPI1_Init+0x64>)
 8001102:	f005 faa2 	bl	800664a <HAL_SPI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800110c:	f7ff fe8c 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200003e4 	.word	0x200003e4
 8001118:	40013000 	.word	0x40013000

0800111c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_SPI2_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MX_SPI2_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI2_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI2_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI2_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI2_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_SPI2_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_SPI2_Init+0x64>)
 8001150:	2220      	movs	r2, #32
 8001152:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_SPI2_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_SPI2_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_SPI2_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_SPI2_Init+0x64>)
 800116e:	f005 fa6c 	bl	800664a <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001178:	f7ff fe56 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000043c 	.word	0x2000043c
 8001184:	40003800 	.word	0x40003800

08001188 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_SPI3_Init+0x64>)
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <MX_SPI3_Init+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_SPI3_Init+0x64>)
 8001194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001198:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_SPI3_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_SPI3_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_SPI3_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_SPI3_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_SPI3_Init+0x64>)
 80011b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_SPI3_Init+0x64>)
 80011bc:	2218      	movs	r2, #24
 80011be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_SPI3_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_SPI3_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_SPI3_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_SPI3_Init+0x64>)
 80011d4:	220a      	movs	r2, #10
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_SPI3_Init+0x64>)
 80011da:	f005 fa36 	bl	800664a <HAL_SPI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011e4:	f7ff fe20 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000494 	.word	0x20000494
 80011f0:	40003c00 	.word	0x40003c00

080011f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a89      	ldr	r2, [pc, #548]	; (8001438 <HAL_SPI_MspInit+0x244>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d15b      	bne.n	80012ce <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	4b88      	ldr	r3, [pc, #544]	; (800143c <HAL_SPI_MspInit+0x248>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a87      	ldr	r2, [pc, #540]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b85      	ldr	r3, [pc, #532]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b81      	ldr	r3, [pc, #516]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a80      	ldr	r2, [pc, #512]	; (800143c <HAL_SPI_MspInit+0x248>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125e:	2305      	movs	r3, #5
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4875      	ldr	r0, [pc, #468]	; (8001440 <HAL_SPI_MspInit+0x24c>)
 800126a:	f001 fad7 	bl	800281c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800126e:	4b75      	ldr	r3, [pc, #468]	; (8001444 <HAL_SPI_MspInit+0x250>)
 8001270:	4a75      	ldr	r2, [pc, #468]	; (8001448 <HAL_SPI_MspInit+0x254>)
 8001272:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_SPI_MspInit+0x250>)
 8001276:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800127a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800127c:	4b71      	ldr	r3, [pc, #452]	; (8001444 <HAL_SPI_MspInit+0x250>)
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_SPI_MspInit+0x250>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <HAL_SPI_MspInit+0x250>)
 800128a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001290:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_SPI_MspInit+0x250>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001296:	4b6b      	ldr	r3, [pc, #428]	; (8001444 <HAL_SPI_MspInit+0x250>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <HAL_SPI_MspInit+0x250>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012a2:	4b68      	ldr	r3, [pc, #416]	; (8001444 <HAL_SPI_MspInit+0x250>)
 80012a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012aa:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_SPI_MspInit+0x250>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012b0:	4864      	ldr	r0, [pc, #400]	; (8001444 <HAL_SPI_MspInit+0x250>)
 80012b2:	f000 fe57 	bl	8001f64 <HAL_DMA_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80012bc:	f7ff fdb4 	bl	8000e28 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a60      	ldr	r2, [pc, #384]	; (8001444 <HAL_SPI_MspInit+0x250>)
 80012c4:	649a      	str	r2, [r3, #72]	; 0x48
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_SPI_MspInit+0x250>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012cc:	e0af      	b.n	800142e <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5e      	ldr	r2, [pc, #376]	; (800144c <HAL_SPI_MspInit+0x258>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d179      	bne.n	80013cc <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	4b57      	ldr	r3, [pc, #348]	; (800143c <HAL_SPI_MspInit+0x248>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a56      	ldr	r2, [pc, #344]	; (800143c <HAL_SPI_MspInit+0x248>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b54      	ldr	r3, [pc, #336]	; (800143c <HAL_SPI_MspInit+0x248>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_SPI_MspInit+0x248>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_SPI_MspInit+0x248>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b4d      	ldr	r3, [pc, #308]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b49      	ldr	r3, [pc, #292]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_SPI_MspInit+0x248>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800132c:	2308      	movs	r3, #8
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133c:	2305      	movs	r3, #5
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4842      	ldr	r0, [pc, #264]	; (8001450 <HAL_SPI_MspInit+0x25c>)
 8001348:	f001 fa68 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135e:	2305      	movs	r3, #5
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <HAL_SPI_MspInit+0x260>)
 800136a:	f001 fa57 	bl	800281c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_SPI_MspInit+0x264>)
 8001370:	4a3a      	ldr	r2, [pc, #232]	; (800145c <HAL_SPI_MspInit+0x268>)
 8001372:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001374:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_SPI_MspInit+0x264>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_SPI_MspInit+0x264>)
 800137c:	2240      	movs	r2, #64	; 0x40
 800137e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_SPI_MspInit+0x264>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_SPI_MspInit+0x264>)
 8001388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_SPI_MspInit+0x264>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_SPI_MspInit+0x264>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_SPI_MspInit+0x264>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_SPI_MspInit+0x264>)
 80013a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013a6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_SPI_MspInit+0x264>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013ae:	482a      	ldr	r0, [pc, #168]	; (8001458 <HAL_SPI_MspInit+0x264>)
 80013b0:	f000 fdd8 	bl	8001f64 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 80013ba:	f7ff fd35 	bl	8000e28 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a25      	ldr	r2, [pc, #148]	; (8001458 <HAL_SPI_MspInit+0x264>)
 80013c2:	649a      	str	r2, [r3, #72]	; 0x48
 80013c4:	4a24      	ldr	r2, [pc, #144]	; (8001458 <HAL_SPI_MspInit+0x264>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013ca:	e030      	b.n	800142e <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_SPI_MspInit+0x26c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12b      	bne.n	800142e <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_SPI_MspInit+0x248>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_SPI_MspInit+0x248>)
 80013e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_SPI_MspInit+0x248>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_SPI_MspInit+0x248>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_SPI_MspInit+0x248>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_SPI_MspInit+0x248>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800140e:	2338      	movs	r3, #56	; 0x38
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800141e:	2306      	movs	r3, #6
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_SPI_MspInit+0x260>)
 800142a:	f001 f9f7 	bl	800281c <HAL_GPIO_Init>
}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	; 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40013000 	.word	0x40013000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	200004ec 	.word	0x200004ec
 8001448:	40026458 	.word	0x40026458
 800144c:	40003800 	.word	0x40003800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020400 	.word	0x40020400
 8001458:	2000054c 	.word	0x2000054c
 800145c:	40026070 	.word	0x40026070
 8001460:	40003c00 	.word	0x40003c00

08001464 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <HAL_SPI_MspDeInit+0x8c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10f      	bne.n	8001496 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_SPI_MspDeInit+0x90>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <HAL_SPI_MspDeInit+0x90>)
 800147c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8001482:	21a0      	movs	r1, #160	; 0xa0
 8001484:	481c      	ldr	r0, [pc, #112]	; (80014f8 <HAL_SPI_MspDeInit+0x94>)
 8001486:	f001 fb67 	bl	8002b58 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fe16 	bl	80020c0 <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001494:	e028      	b.n	80014e8 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_SPI_MspDeInit+0x98>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d114      	bne.n	80014ca <HAL_SPI_MspDeInit+0x66>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_SPI_MspDeInit+0x90>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <HAL_SPI_MspDeInit+0x90>)
 80014a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 80014ac:	2108      	movs	r1, #8
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <HAL_SPI_MspDeInit+0x9c>)
 80014b0:	f001 fb52 	bl	8002b58 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80014b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <HAL_SPI_MspDeInit+0xa0>)
 80014ba:	f001 fb4d 	bl	8002b58 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fdfc 	bl	80020c0 <HAL_DMA_DeInit>
}
 80014c8:	e00e      	b.n	80014e8 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI3)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_SPI_MspDeInit+0xa4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d109      	bne.n	80014e8 <HAL_SPI_MspDeInit+0x84>
    __HAL_RCC_SPI3_CLK_DISABLE();
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_SPI_MspDeInit+0x90>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_SPI_MspDeInit+0x90>)
 80014da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 80014e0:	2138      	movs	r1, #56	; 0x38
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <HAL_SPI_MspDeInit+0xa0>)
 80014e4:	f001 fb38 	bl	8002b58 <HAL_GPIO_DeInit>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013000 	.word	0x40013000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40003800 	.word	0x40003800
 8001500:	40020800 	.word	0x40020800
 8001504:	40020400 	.word	0x40020400
 8001508:	40003c00 	.word	0x40003c00

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x48>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x48>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x48>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_MspInit+0x48>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_MspInit+0x48>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_MspInit+0x48>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159e:	f00a fff9 	bl	800c594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA1_Stream4_IRQHandler+0x10>)
 80015ae:	f000 fecf 	bl	8002350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000054c 	.word	0x2000054c

080015bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM3_IRQHandler+0x10>)
 80015c2:	f005 fbfb 	bl	8006dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200005b0 	.word	0x200005b0

080015d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM4_IRQHandler+0x10>)
 80015d6:	f005 fbf1 	bl	8006dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200005f8 	.word	0x200005f8

080015e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <USART2_IRQHandler+0x10>)
 80015ea:	f006 f9e5 	bl	80079b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000684 	.word	0x20000684

080015f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <DMA2_Stream0_IRQHandler+0x10>)
 80015fe:	f000 fea7 	bl	8002350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000234 	.word	0x20000234

0800160c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA2_Stream3_IRQHandler+0x10>)
 8001612:	f000 fe9d 	bl	8002350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200004ec 	.word	0x200004ec

08001620 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <OTG_FS_IRQHandler+0x10>)
 8001626:	f001 fe48 	bl	80032ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20003368 	.word	0x20003368

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f00b fea4 	bl	800d3b0 <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20020000 	.word	0x20020000
 8001694:	00000400 	.word	0x00000400
 8001698:	200005ac 	.word	0x200005ac
 800169c:	200038b0 	.word	0x200038b0

080016a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016d0:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <MX_TIM3_Init+0xdc>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_TIM3_Init+0xd8>)
 80016f6:	f005 fa49 	bl	8006b8c <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001700:	f7ff fb92 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4619      	mov	r1, r3
 8001712:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM3_Init+0xd8>)
 8001714:	f005 ffb4 	bl	8007680 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800171e:	f7ff fb83 	bl	8000e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	; 0x60
 8001724:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_TIM3_Init+0xd8>)
 800173a:	f005 fc47 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001744:	f7ff fb70 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2208      	movs	r2, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM3_Init+0xd8>)
 8001750:	f005 fc3c 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800175a:	f7ff fb65 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	220c      	movs	r2, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM3_Init+0xd8>)
 8001766:	f005 fc31 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001770:	f7ff fb5a 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM3_Init+0xd8>)
 8001776:	f000 f8c9 	bl	800190c <HAL_TIM_MspPostInit>

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	; 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200005b0 	.word	0x200005b0
 8001788:	40000400 	.word	0x40000400

0800178c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <MX_TIM4_Init+0xec>)
 80017b0:	4a32      	ldr	r2, [pc, #200]	; (800187c <MX_TIM4_Init+0xf0>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <MX_TIM4_Init+0xec>)
 80017b6:	2230      	movs	r2, #48	; 0x30
 80017b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <MX_TIM4_Init+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <MX_TIM4_Init+0xec>)
 80017c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_TIM4_Init+0xec>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <MX_TIM4_Init+0xec>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017d4:	4828      	ldr	r0, [pc, #160]	; (8001878 <MX_TIM4_Init+0xec>)
 80017d6:	f005 f9d9 	bl	8006b8c <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80017e0:	f7ff fb22 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	4619      	mov	r1, r3
 80017f2:	4821      	ldr	r0, [pc, #132]	; (8001878 <MX_TIM4_Init+0xec>)
 80017f4:	f005 ff44 	bl	8007680 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017fe:	f7ff fb13 	bl	8000e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	4817      	ldr	r0, [pc, #92]	; (8001878 <MX_TIM4_Init+0xec>)
 800181a:	f005 fbd7 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001824:	f7ff fb00 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2204      	movs	r2, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <MX_TIM4_Init+0xec>)
 8001830:	f005 fbcc 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800183a:	f7ff faf5 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2208      	movs	r2, #8
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <MX_TIM4_Init+0xec>)
 8001846:	f005 fbc1 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001850:	f7ff faea 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	220c      	movs	r2, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <MX_TIM4_Init+0xec>)
 800185c:	f005 fbb6 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001866:	f7ff fadf 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800186a:	4803      	ldr	r0, [pc, #12]	; (8001878 <MX_TIM4_Init+0xec>)
 800186c:	f000 f84e 	bl	800190c <HAL_TIM_MspPostInit>

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200005f8 	.word	0x200005f8
 800187c:	40000800 	.word	0x40000800

08001880 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_TIM_PWM_MspInit+0x80>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d116      	bne.n	80018c0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_TIM_PWM_MspInit+0x84>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <HAL_TIM_PWM_MspInit+0x84>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_TIM_PWM_MspInit+0x84>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	201d      	movs	r0, #29
 80018b4:	f000 fb03 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018b8:	201d      	movs	r0, #29
 80018ba:	f000 fb1c 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018be:	e01a      	b.n	80018f6 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM4)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_TIM_PWM_MspInit+0x88>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d115      	bne.n	80018f6 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_TIM_PWM_MspInit+0x84>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <HAL_TIM_PWM_MspInit+0x84>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_TIM_PWM_MspInit+0x84>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201e      	movs	r0, #30
 80018ec:	f000 fae7 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018f0:	201e      	movs	r0, #30
 80018f2:	f000 fb00 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40000400 	.word	0x40000400
 8001904:	40023800 	.word	0x40023800
 8001908:	40000800 	.word	0x40000800

0800190c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_TIM_MspPostInit+0xec>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d13c      	bne.n	80019a8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Pout7_Pin;
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001976:	2302      	movs	r3, #2
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pout7_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	481f      	ldr	r0, [pc, #124]	; (8001a00 <HAL_TIM_MspPostInit+0xf4>)
 8001982:	f000 ff4b 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pout5_Pin|Pout6_Pin;
 8001986:	2303      	movs	r3, #3
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001996:	2302      	movs	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4818      	ldr	r0, [pc, #96]	; (8001a04 <HAL_TIM_MspPostInit+0xf8>)
 80019a2:	f000 ff3b 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019a6:	e023      	b.n	80019f0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <HAL_TIM_MspPostInit+0xfc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11e      	bne.n	80019f0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_TIM_MspPostInit+0xf0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Pout1_Pin|Pout2_Pin|Pout3_Pin|Pout4_Pin;
 80019ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019e0:	2302      	movs	r3, #2
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <HAL_TIM_MspPostInit+0xf8>)
 80019ec:	f000 ff16 	bl	800281c <HAL_GPIO_Init>
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40000800 	.word	0x40000800

08001a0c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_UART4_Init+0x50>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_UART4_Init+0x4c>)
 8001a44:	f005 fea8 	bl	8007798 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a4e:	f7ff f9eb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000640 	.word	0x20000640
 8001a5c:	40004c00 	.word	0x40004c00

08001a60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_USART2_UART_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a98:	f005 fe7e 	bl	8007798 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aa2:	f7ff f9c1 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000684 	.word	0x20000684
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a36      	ldr	r2, [pc, #216]	; (8001bac <HAL_UART_MspInit+0xf8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12c      	bne.n	8001b30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Tx_Pin|Rx_Pin;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	4822      	ldr	r0, [pc, #136]	; (8001bb4 <HAL_UART_MspInit+0x100>)
 8001b2a:	f000 fe77 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b2e:	e038      	b.n	8001ba2 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <HAL_UART_MspInit+0x104>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d133      	bne.n	8001ba2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_UART_MspInit+0xfc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b72:	230c      	movs	r3, #12
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b82:	2307      	movs	r3, #7
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <HAL_UART_MspInit+0x100>)
 8001b8e:	f000 fe45 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f000 f991 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b9c:	2026      	movs	r0, #38	; 0x26
 8001b9e:	f000 f9aa 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40004c00 	.word	0x40004c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40004400 	.word	0x40004400

08001bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc2:	490e      	ldr	r1, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd8:	4c0b      	ldr	r4, [pc, #44]	; (8001c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be6:	f7ff fd5b 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f00b fbe7 	bl	800d3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bee:	f7fe fe3b 	bl	8000868 <main>
  bx  lr    
 8001bf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001c00:	0800d740 	.word	0x0800d740
  ldr r2, =_sbss
 8001c04:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001c08:	200038b0 	.word	0x200038b0

08001c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_Init+0x40>)
 8001c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_Init+0x40>)
 8001c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x40>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f935 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fc62 	bl	800150c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f94d 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f915 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000040 	.word	0x20000040
 8001cac:	20000048 	.word	0x20000048
 8001cb0:	20000044 	.word	0x20000044

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_GetTick+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	200006c8 	.word	0x200006c8

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff fff0 	bl	8001cb4 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffe0 	bl	8001cb4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000048 	.word	0x20000048

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4906      	ldr	r1, [pc, #24]	; (8001da8 <__NVIC_EnableIRQ+0x34>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff90 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff2d 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff42 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff90 	bl	8001e00 <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5f 	bl	8001dac <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff35 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e00e      	b.n	8001f5a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	795b      	ldrb	r3, [r3, #5]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe facd 	bl	80004ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fea0 	bl	8001cb4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e099      	b.n	80020b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa0:	e00f      	b.n	8001fc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa2:	f7ff fe87 	bl	8001cb4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d908      	bls.n	8001fc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e078      	b.n	80020b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e8      	bne.n	8001fa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_DMA_Init+0x158>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b04      	cmp	r3, #4
 800201a:	d107      	bne.n	800202c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4313      	orrs	r3, r2
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b04      	cmp	r3, #4
 8002054:	d117      	bne.n	8002086 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb5d 	bl	8002728 <DMA_CheckFifoParam>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002082:	2301      	movs	r3, #1
 8002084:	e016      	b.n	80020b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb16 	bl	80026c0 <DMA_CalcBaseAndBitshift>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	223f      	movs	r2, #63	; 0x3f
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	f010803f 	.word	0xf010803f

080020c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e050      	b.n	8002174 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d101      	bne.n	80020e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	e048      	b.n	8002174 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2221      	movs	r2, #33	; 0x21
 8002120:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 facc 	bl	80026c0 <DMA_CalcBaseAndBitshift>
 8002128:	4603      	mov	r3, r0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_DMA_Start_IT+0x26>
 800219e:	2302      	movs	r3, #2
 80021a0:	e040      	b.n	8002224 <HAL_DMA_Start_IT+0xa8>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d12f      	bne.n	8002216 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa4a 	bl	8002664 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	223f      	movs	r2, #63	; 0x3f
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0216 	orr.w	r2, r2, #22
 80021ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0208 	orr.w	r2, r2, #8
 8002202:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e005      	b.n	8002222 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002222:	7dfb      	ldrb	r3, [r7, #23]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223a:	f7ff fd3b 	bl	8001cb4 <HAL_GetTick>
 800223e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d008      	beq.n	800225e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e052      	b.n	8002304 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_Abort+0x62>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ae:	e013      	b.n	80022d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b0:	f7ff fd00 	bl	8001cb4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d90c      	bls.n	80022d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e015      	b.n	8002304 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e4      	bne.n	80022b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	223f      	movs	r2, #63	; 0x3f
 80022ec:	409a      	lsls	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d004      	beq.n	800232a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00c      	b.n	8002344 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
	...

08002350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800235c:	4b8e      	ldr	r3, [pc, #568]	; (8002598 <HAL_DMA_IRQHandler+0x248>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a8e      	ldr	r2, [pc, #568]	; (800259c <HAL_DMA_IRQHandler+0x24c>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2208      	movs	r2, #8
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01a      	beq.n	80023bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	2208      	movs	r2, #8
 80023aa:	409a      	lsls	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2201      	movs	r2, #1
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d012      	beq.n	80023f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2201      	movs	r2, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0202 	orr.w	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2204      	movs	r2, #4
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2204      	movs	r2, #4
 8002416:	409a      	lsls	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	2210      	movs	r2, #16
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d043      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03c      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2210      	movs	r2, #16
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d018      	beq.n	8002492 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d024      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
 800247e:	e01f      	b.n	80024c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01b      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e016      	b.n	80024c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0208 	bic.w	r2, r2, #8
 80024ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	2220      	movs	r2, #32
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 808f 	beq.w	80025f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8087 	beq.w	80025f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	2220      	movs	r2, #32
 80024e8:	409a      	lsls	r2, r3
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d136      	bne.n	8002568 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0216 	bic.w	r2, r2, #22
 8002508:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002518:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_DMA_IRQHandler+0x1da>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0208 	bic.w	r2, r2, #8
 8002538:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	223f      	movs	r2, #63	; 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255a:	2b00      	cmp	r3, #0
 800255c:	d07e      	beq.n	800265c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
        }
        return;
 8002566:	e079      	b.n	800265c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	2b00      	cmp	r3, #0
 800258a:	d031      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e02c      	b.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
 8002596:	bf00      	nop
 8002598:	20000040 	.word	0x20000040
 800259c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e01e      	b.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10f      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0210 	bic.w	r2, r2, #16
 80025ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d032      	beq.n	800265e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d022      	beq.n	800264a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2205      	movs	r2, #5
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	3301      	adds	r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	d307      	bcc.n	8002638 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f2      	bne.n	800261c <HAL_DMA_IRQHandler+0x2cc>
 8002636:	e000      	b.n	800263a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002638:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
 800265a:	e000      	b.n	800265e <HAL_DMA_IRQHandler+0x30e>
        return;
 800265c:	bf00      	nop
    }
  }
}
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002680:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d108      	bne.n	80026a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026a2:	e007      	b.n	80026b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
	...

080026c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	3b10      	subs	r3, #16
 80026d0:	4a13      	ldr	r2, [pc, #76]	; (8002720 <DMA_CalcBaseAndBitshift+0x60>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <DMA_CalcBaseAndBitshift+0x64>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d909      	bls.n	8002702 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	1d1a      	adds	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002700:	e007      	b.n	8002712 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	aaaaaaab 	.word	0xaaaaaaab
 8002724:	0800d714 	.word	0x0800d714

08002728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d856      	bhi.n	80027f6 <DMA_CheckFifoParam+0xce>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f7 	.word	0x080027f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d046      	beq.n	80027fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e043      	b.n	80027fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d140      	bne.n	80027fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e03d      	b.n	80027fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d837      	bhi.n	8002802 <DMA_CheckFifoParam+0xda>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e030      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d025      	beq.n	8002806 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e022      	b.n	8002806 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11f      	bne.n	800280a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ce:	e01c      	b.n	800280a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d903      	bls.n	80027de <DMA_CheckFifoParam+0xb6>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d003      	beq.n	80027e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027dc:	e018      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      break;
 80027e2:	e015      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e00b      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027f6:	bf00      	nop
 80027f8:	e00a      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e008      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e006      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e004      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;   
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
    }
  } 
  
  return status; 
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282a:	e16f      	b.n	8002b0c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8161 	beq.w	8002b06 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d005      	beq.n	800285c <HAL_GPIO_Init+0x40>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d130      	bne.n	80028be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002892:	2201      	movs	r2, #1
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0201 	and.w	r2, r3, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d017      	beq.n	80028fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d123      	bne.n	800294e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	6939      	ldr	r1, [r7, #16]
 800294a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80bb 	beq.w	8002b06 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 800299a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299e:	6453      	str	r3, [r2, #68]	; 0x44
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ac:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_GPIO_Init+0x310>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_GPIO_Init+0x314>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d031      	beq.n	8002a3c <HAL_GPIO_Init+0x220>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a56      	ldr	r2, [pc, #344]	; (8002b34 <HAL_GPIO_Init+0x318>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d02b      	beq.n	8002a38 <HAL_GPIO_Init+0x21c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a55      	ldr	r2, [pc, #340]	; (8002b38 <HAL_GPIO_Init+0x31c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d025      	beq.n	8002a34 <HAL_GPIO_Init+0x218>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d01f      	beq.n	8002a30 <HAL_GPIO_Init+0x214>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d019      	beq.n	8002a2c <HAL_GPIO_Init+0x210>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_GPIO_Init+0x328>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_GPIO_Init+0x20c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a51      	ldr	r2, [pc, #324]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <HAL_GPIO_Init+0x208>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d007      	beq.n	8002a20 <HAL_GPIO_Init+0x204>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_GPIO_Init+0x200>
 8002a18:	2308      	movs	r3, #8
 8002a1a:	e010      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a1c:	2309      	movs	r3, #9
 8002a1e:	e00e      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a20:	2307      	movs	r3, #7
 8002a22:	e00c      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a24:	2306      	movs	r3, #6
 8002a26:	e00a      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a28:	2305      	movs	r3, #5
 8002a2a:	e008      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a30:	2303      	movs	r3, #3
 8002a32:	e004      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e002      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a50:	4936      	ldr	r1, [pc, #216]	; (8002b2c <HAL_GPIO_Init+0x310>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a82:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aac:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f47f ae88 	bne.w	800282c <HAL_GPIO_Init+0x10>
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b66:	e0d1      	b.n	8002d0c <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80c4 	beq.w	8002d06 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b7e:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_GPIO_DeInit+0x1d0>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a62      	ldr	r2, [pc, #392]	; (8002d2c <HAL_GPIO_DeInit+0x1d4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_GPIO_DeInit+0xb4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <HAL_GPIO_DeInit+0x1d8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d02b      	beq.n	8002c08 <HAL_GPIO_DeInit+0xb0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a60      	ldr	r2, [pc, #384]	; (8002d34 <HAL_GPIO_DeInit+0x1dc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d025      	beq.n	8002c04 <HAL_GPIO_DeInit+0xac>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a5f      	ldr	r2, [pc, #380]	; (8002d38 <HAL_GPIO_DeInit+0x1e0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01f      	beq.n	8002c00 <HAL_GPIO_DeInit+0xa8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	; (8002d3c <HAL_GPIO_DeInit+0x1e4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d019      	beq.n	8002bfc <HAL_GPIO_DeInit+0xa4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a5d      	ldr	r2, [pc, #372]	; (8002d40 <HAL_GPIO_DeInit+0x1e8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_GPIO_DeInit+0xa0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	; (8002d44 <HAL_GPIO_DeInit+0x1ec>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_GPIO_DeInit+0x9c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a5b      	ldr	r2, [pc, #364]	; (8002d48 <HAL_GPIO_DeInit+0x1f0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <HAL_GPIO_DeInit+0x98>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a5a      	ldr	r2, [pc, #360]	; (8002d4c <HAL_GPIO_DeInit+0x1f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_GPIO_DeInit+0x94>
 8002be8:	2308      	movs	r3, #8
 8002bea:	e010      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002bec:	2309      	movs	r3, #9
 8002bee:	e00e      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	e00c      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	e00a      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	e008      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002c00:	2303      	movs	r3, #3
 8002c02:	e004      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e002      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_GPIO_DeInit+0xb6>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	fa03 f202 	lsl.w	r2, r3, r2
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d132      	bne.n	8002c86 <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c20:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4949      	ldr	r1, [pc, #292]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c2e:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	4946      	ldr	r1, [pc, #280]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c3c:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4942      	ldr	r1, [pc, #264]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	493f      	ldr	r1, [pc, #252]	; (8002d50 <HAL_GPIO_DeInit+0x1f8>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c68:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_GPIO_DeInit+0x1d0>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	482b      	ldr	r0, [pc, #172]	; (8002d28 <HAL_GPIO_DeInit+0x1d0>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	400a      	ands	r2, r1
 8002c80:	3302      	adds	r3, #2
 8002c82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2103      	movs	r1, #3
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	08d2      	lsrs	r2, r2, #3
 8002cbc:	4019      	ands	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2103      	movs	r1, #3
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	401a      	ands	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af27 	bne.w	8002b68 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	807b      	strh	r3, [r7, #2]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d92:	787b      	ldrb	r3, [r7, #1]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	041a      	lsls	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fd fcfc 	bl	80007d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 fed8 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	b08f      	sub	sp, #60	; 0x3c
 8003040:	af0a      	add	r7, sp, #40	; 0x28
 8003042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e10f      	b.n	800326e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f009 fdc1 	bl	800cbf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f005 ff8b 	bl	8008fa8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	687e      	ldr	r6, [r7, #4]
 800309a:	466d      	mov	r5, sp
 800309c:	f106 0410 	add.w	r4, r6, #16
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b0:	1d33      	adds	r3, r6, #4
 80030b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f005 fe6d 	bl	8008d94 <USB_CoreInit>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f005 ff78 	bl	8008fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e04a      	b.n	8003174 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	333c      	adds	r3, #60	; 0x3c
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	b298      	uxth	r0, r3
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3342      	adds	r3, #66	; 0x42
 800311a:	4602      	mov	r2, r0
 800311c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	333f      	adds	r3, #63	; 0x3f
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3344      	adds	r3, #68	; 0x44
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3348      	adds	r3, #72	; 0x48
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3350      	adds	r3, #80	; 0x50
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3301      	adds	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d3af      	bcc.n	80030de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e044      	b.n	800320e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3b5      	bcc.n	8003184 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	687e      	ldr	r6, [r7, #4]
 8003220:	466d      	mov	r5, sp
 8003222:	f106 0410 	add.w	r4, r6, #16
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003232:	e885 0003 	stmia.w	r5, {r0, r1}
 8003236:	1d33      	adds	r3, r6, #4
 8003238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	f005 ff10 	bl	8009060 <USB_DevInit>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00d      	b.n	800326e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f006 ff81 	bl	800a16e <USB_DevDisconnect>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003276 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_PCD_Start+0x16>
 8003288:	2302      	movs	r3, #2
 800328a:	e012      	b.n	80032b2 <HAL_PCD_Start+0x3c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f005 fe75 	bl	8008f88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f006 ff43 	bl	800a12e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032ba:	b590      	push	{r4, r7, lr}
 80032bc:	b08d      	sub	sp, #52	; 0x34
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f006 fffa 	bl	800a2ca <USB_GetMode>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 838f 	bne.w	80039fc <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f006 ff63 	bl	800a1ae <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8385 	beq.w	80039fa <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f006 ff5a 	bl	800a1ae <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d107      	bne.n	8003314 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f002 0202 	and.w	r2, r2, #2
 8003312:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f006 ff48 	bl	800a1ae <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b10      	cmp	r3, #16
 8003326:	d161      	bne.n	80033ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0210 	bic.w	r2, r2, #16
 8003336:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	2b02      	cmp	r3, #2
 8003362:	d124      	bne.n	80033ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d035      	beq.n	80033dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800337a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6a38      	ldr	r0, [r7, #32]
 8003384:	f006 fd85 	bl	8009e92 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a6:	441a      	add	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	619a      	str	r2, [r3, #24]
 80033ac:	e016      	b.n	80033dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	0c5b      	lsrs	r3, r3, #17
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d110      	bne.n	80033dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033c0:	2208      	movs	r2, #8
 80033c2:	4619      	mov	r1, r3
 80033c4:	6a38      	ldr	r0, [r7, #32]
 80033c6:	f006 fd64 	bl	8009e92 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d6:	441a      	add	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0210 	orr.w	r2, r2, #16
 80033ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f006 fedc 	bl	800a1ae <USB_ReadInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003400:	d16e      	bne.n	80034e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f006 fee1 	bl	800a1d2 <USB_ReadDevAllOutEpInterrupt>
 8003410:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003412:	e062      	b.n	80034da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d057      	beq.n	80034ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f006 ff04 	bl	800a236 <USB_ReadDevOutEPInterrupt>
 800342e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2301      	movs	r3, #1
 800344a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800344c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fda2 	bl	8003f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2308      	movs	r3, #8
 800346e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fe9c 	bl	80041b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	2310      	movs	r3, #16
 8003492:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2320      	movs	r3, #32
 80034ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	3301      	adds	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d199      	bne.n	8003414 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f006 fe62 	bl	800a1ae <USB_ReadInterrupts>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034f4:	f040 80c0 	bne.w	8003678 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f006 fe81 	bl	800a204 <USB_ReadDevAllInEpInterrupt>
 8003502:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003508:	e0b2      	b.n	8003670 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a7 	beq.w	8003664 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f006 fea5 	bl	800a270 <USB_ReadDevInEPInterrupt>
 8003526:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d057      	beq.n	80035e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2201      	movs	r2, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	69f9      	ldr	r1, [r7, #28]
 800354e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003552:	4013      	ands	r3, r2
 8003554:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	461a      	mov	r2, r3
 8003564:	2301      	movs	r3, #1
 8003566:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d132      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3348      	adds	r3, #72	; 0x48
 8003580:	6819      	ldr	r1, [r3, #0]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4403      	add	r3, r0
 8003590:	3344      	adds	r3, #68	; 0x44
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4419      	add	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d113      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x31c>
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3350      	adds	r3, #80	; 0x50
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035ce:	461a      	mov	r2, r3
 80035d0:	2101      	movs	r1, #1
 80035d2:	f006 fea9 	bl	800a328 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f009 fb96 	bl	800cd0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f8:	461a      	mov	r2, r3
 80035fa:	2308      	movs	r3, #8
 80035fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	461a      	mov	r2, r3
 8003616:	2310      	movs	r3, #16
 8003618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	461a      	mov	r2, r3
 8003632:	2340      	movs	r3, #64	; 0x40
 8003634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	461a      	mov	r2, r3
 800364e:	2302      	movs	r3, #2
 8003650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800365c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fc0c 	bl	8003e7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	3301      	adds	r3, #1
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	f47f af49 	bne.w	800350a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f006 fd96 	bl	800a1ae <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800368c:	d114      	bne.n	80036b8 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f009 fbaa 	bl	800cdfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f006 fd76 	bl	800a1ae <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036cc:	d112      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d102      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f009 fb66 	bl	800cdb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036f2:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f006 fd58 	bl	800a1ae <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	f040 80c7 	bne.w	800389a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2110      	movs	r1, #16
 8003726:	4618      	mov	r0, r3
 8003728:	f005 fdfe 	bl	8009328 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003730:	e056      	b.n	80037e0 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373e:	461a      	mov	r2, r3
 8003740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003744:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003764:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003784:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003798:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	3301      	adds	r3, #1
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3a3      	bcc.n	8003732 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003816:	f043 030b 	orr.w	r3, r3, #11
 800381a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382c:	f043 030b 	orr.w	r3, r3, #11
 8003830:	6453      	str	r3, [r2, #68]	; 0x44
 8003832:	e015      	b.n	8003860 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003846:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800384a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385a:	f043 030b 	orr.w	r3, r3, #11
 800385e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003872:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003884:	461a      	mov	r2, r3
 8003886:	f006 fd4f 	bl	800a328 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f006 fc85 	bl	800a1ae <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	d124      	bne.n	80038fa <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f006 fd15 	bl	800a2e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f005 fd8e 	bl	80093e0 <USB_GetDevSpeed>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681c      	ldr	r4, [r3, #0]
 80038d0:	f001 f972 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 80038d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	4620      	mov	r0, r4
 80038e0:	f005 fab0 	bl	8008e44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f009 fa3a 	bl	800cd5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f006 fc55 	bl	800a1ae <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d10a      	bne.n	8003924 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f009 fa17 	bl	800cd42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f002 0208 	and.w	r2, r2, #8
 8003922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f006 fc40 	bl	800a1ae <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003938:	d10f      	bne.n	800395a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	b2db      	uxtb	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f009 fa79 	bl	800ce3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f006 fc25 	bl	800a1ae <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800396e:	d10f      	bne.n	8003990 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	b2db      	uxtb	r3, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f009 fa4c 	bl	800ce18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f006 fc0a 	bl	800a1ae <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d10a      	bne.n	80039bc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f009 fa5a 	bl	800ce60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f006 fbf4 	bl	800a1ae <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d115      	bne.n	80039fc <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f009 fa4a 	bl	800ce7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e000      	b.n	80039fc <HAL_PCD_IRQHandler+0x742>
      return;
 80039fa:	bf00      	nop
    }
  }
}
 80039fc:	3734      	adds	r7, #52	; 0x34
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}

08003a02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_PCD_SetAddress+0x1a>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e013      	b.n	8003a44 <HAL_PCD_SetAddress+0x42>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f006 fb55 	bl	800a0e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	4608      	mov	r0, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	70fb      	strb	r3, [r7, #3]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	803b      	strh	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	da0f      	bge.n	8003a92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	3338      	adds	r3, #56	; 0x38
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	705a      	strb	r2, [r3, #1]
 8003a90:	e00f      	b.n	8003ab2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 020f 	and.w	r2, r3, #15
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003abe:	883a      	ldrh	r2, [r7, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	78ba      	ldrb	r2, [r7, #2]
 8003ac8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003adc:	78bb      	ldrb	r3, [r7, #2]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_PCD_EP_Open+0xaa>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e00e      	b.n	8003b14 <HAL_PCD_EP_Open+0xc8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f005 fc8f 	bl	8009428 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b12:	7afb      	ldrb	r3, [r7, #11]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da0f      	bge.n	8003b50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	3338      	adds	r3, #56	; 0x38
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	3304      	adds	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	705a      	strb	r2, [r3, #1]
 8003b4e:	e00f      	b.n	8003b70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	3304      	adds	r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_Close+0x6e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e00e      	b.n	8003ba8 <HAL_PCD_EP_Close+0x8c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f005 fccb 	bl	8009534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	f003 020f 	and.w	r2, r3, #15
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	6979      	ldr	r1, [r7, #20]
 8003c24:	f005 ffa6 	bl	8009b74 <USB_EP0StartXfer>
 8003c28:	e008      	b.n	8003c3c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	f005 fd58 	bl	80096ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c68:	681b      	ldr	r3, [r3, #0]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	460b      	mov	r3, r1
 8003c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c84:	7afb      	ldrb	r3, [r7, #11]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3338      	adds	r3, #56	; 0x38
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb4:	7afb      	ldrb	r3, [r7, #11]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6979      	ldr	r1, [r7, #20]
 8003ce6:	f005 ff45 	bl	8009b74 <USB_EP0StartXfer>
 8003cea:	e008      	b.n	8003cfe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6979      	ldr	r1, [r7, #20]
 8003cfa:	f005 fcf7 	bl	80096ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d901      	bls.n	8003d26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e050      	b.n	8003dc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	da0f      	bge.n	8003d4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	3338      	adds	r3, #56	; 0x38
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	3304      	adds	r3, #4
 8003d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	705a      	strb	r2, [r3, #1]
 8003d4c:	e00d      	b.n	8003d6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_EP_SetStall+0x82>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e01e      	b.n	8003dc8 <HAL_PCD_EP_SetStall+0xc0>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f006 f8d1 	bl	8009f40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	b2d9      	uxtb	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003db8:	461a      	mov	r2, r3
 8003dba:	f006 fab5 	bl	800a328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d901      	bls.n	8003dee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e042      	b.n	8003e74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da0f      	bge.n	8003e16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3338      	adds	r3, #56	; 0x38
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	705a      	strb	r2, [r3, #1]
 8003e14:	e00f      	b.n	8003e36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_PCD_EP_ClrStall+0x86>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e00e      	b.n	8003e74 <HAL_PCD_EP_ClrStall+0xa4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f006 f8d8 	bl	800a01a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	3338      	adds	r3, #56	; 0x38
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d901      	bls.n	8003eb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e06c      	b.n	8003f8e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d902      	bls.n	8003ed0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3303      	adds	r3, #3
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ed8:	e02b      	b.n	8003f32 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d902      	bls.n	8003ef6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3303      	adds	r3, #3
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68d9      	ldr	r1, [r3, #12]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4603      	mov	r3, r0
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f005 ff7f 	bl	8009e18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	441a      	add	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d809      	bhi.n	8003f5c <PCD_WriteEmptyTxFifo+0xe0>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d203      	bcs.n	8003f5c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1be      	bne.n	8003eda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d811      	bhi.n	8003f8c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	6939      	ldr	r1, [r7, #16]
 8003f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f88:	4013      	ands	r3, r2
 8003f8a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	333c      	adds	r3, #60	; 0x3c
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	f040 80a0 	bne.w	8004110 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a72      	ldr	r2, [pc, #456]	; (80041a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	f240 80dd 	bls.w	800419e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80d7 	beq.w	800419e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	6093      	str	r3, [r2, #8]
 8004004:	e0cb      	b.n	800419e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	2320      	movs	r3, #32
 8004020:	6093      	str	r3, [r2, #8]
 8004022:	e0bc      	b.n	800419e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 80b7 	bne.w	800419e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a5d      	ldr	r2, [pc, #372]	; (80041a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d90f      	bls.n	8004058 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	461a      	mov	r2, r3
 8004050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004054:	6093      	str	r3, [r2, #8]
 8004056:	e0a2      	b.n	800419e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800406a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	0159      	lsls	r1, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	440b      	add	r3, r1
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800407e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4403      	add	r3, r0
 800408e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004092:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4403      	add	r3, r0
 80040b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4419      	add	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4403      	add	r3, r0
 80040cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040d0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d114      	bne.n	8004102 <PCD_EP_OutXfrComplete_int+0x16a>
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d108      	bne.n	8004102 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040fa:	461a      	mov	r2, r3
 80040fc:	2101      	movs	r1, #1
 80040fe:	f006 f913 	bl	800a328 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f008 fde5 	bl	800ccd8 <HAL_PCD_DataOutStageCallback>
 800410e:	e046      	b.n	800419e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a26      	ldr	r2, [pc, #152]	; (80041ac <PCD_EP_OutXfrComplete_int+0x214>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d124      	bne.n	8004162 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004134:	6093      	str	r3, [r2, #8]
 8004136:	e032      	b.n	800419e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	461a      	mov	r2, r3
 8004150:	2320      	movs	r3, #32
 8004152:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f008 fdbc 	bl	800ccd8 <HAL_PCD_DataOutStageCallback>
 8004160:	e01d      	b.n	800419e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d114      	bne.n	8004192 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800418a:	461a      	mov	r2, r3
 800418c:	2100      	movs	r1, #0
 800418e:	f006 f8cb 	bl	800a328 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f008 fd9d 	bl	800ccd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	4f54300a 	.word	0x4f54300a
 80041ac:	4f54310a 	.word	0x4f54310a

080041b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	333c      	adds	r3, #60	; 0x3c
 80041c8:	3304      	adds	r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <PCD_EP_OutSetupPacket_int+0x88>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d90e      	bls.n	8004204 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004202:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f008 fd55 	bl	800ccb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <PCD_EP_OutSetupPacket_int+0x88>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d90c      	bls.n	800422c <PCD_EP_OutSetupPacket_int+0x7c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004224:	461a      	mov	r2, r3
 8004226:	2101      	movs	r1, #1
 8004228:	f006 f87e 	bl	800a328 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	4f54300a 	.word	0x4f54300a

0800423c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
 8004248:	4613      	mov	r3, r2
 800424a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800425a:	883b      	ldrh	r3, [r7, #0]
 800425c:	0419      	lsls	r1, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	430a      	orrs	r2, r1
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
 8004268:	e028      	b.n	80042bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4413      	add	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e00d      	b.n	800429a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	3340      	adds	r3, #64	; 0x40
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	3301      	adds	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	3b01      	subs	r3, #1
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d3ec      	bcc.n	800427e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042a4:	883b      	ldrh	r3, [r7, #0]
 80042a6:	0418      	lsls	r0, r3, #16
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6819      	ldr	r1, [r3, #0]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	4302      	orrs	r2, r0
 80042b4:	3340      	adds	r3, #64	; 0x40
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	887a      	ldrh	r2, [r7, #2]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e236      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d050      	beq.n	80043a8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004306:	4b9e      	ldr	r3, [pc, #632]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00c      	beq.n	800432c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b9b      	ldr	r3, [pc, #620]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431a:	2b08      	cmp	r3, #8
 800431c:	d112      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b98      	ldr	r3, [pc, #608]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b94      	ldr	r3, [pc, #592]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d036      	beq.n	80043a6 <HAL_RCC_OscConfig+0xbe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d132      	bne.n	80043a6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e211      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	4b8e      	ldr	r3, [pc, #568]	; (8004584 <HAL_RCC_OscConfig+0x29c>)
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d013      	beq.n	800437e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fd fcad 	bl	8001cb4 <HAL_GetTick>
 800435a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435e:	f7fd fca9 	bl	8001cb4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1fb      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004370:	4b83      	ldr	r3, [pc, #524]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x76>
 800437c:	e014      	b.n	80043a8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fd fc99 	bl	8001cb4 <HAL_GetTick>
 8004382:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004386:	f7fd fc95 	bl	8001cb4 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b64      	cmp	r3, #100	; 0x64
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1e7      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004398:	4b79      	ldr	r3, [pc, #484]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x9e>
 80043a4:	e000      	b.n	80043a8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d077      	beq.n	80044a4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b4:	4b72      	ldr	r3, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c0:	4b6f      	ldr	r3, [pc, #444]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d126      	bne.n	800441a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043cc:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d120      	bne.n	800441a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d8:	4b69      	ldr	r3, [pc, #420]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e1bb      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b63      	ldr	r3, [pc, #396]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	21f8      	movs	r1, #248	; 0xf8
 80043fe:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	fa91 f1a1 	rbit	r1, r1
 8004406:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004408:	6979      	ldr	r1, [r7, #20]
 800440a:	fab1 f181 	clz	r1, r1
 800440e:	b2c9      	uxtb	r1, r1
 8004410:	408b      	lsls	r3, r1
 8004412:	495b      	ldr	r1, [pc, #364]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004418:	e044      	b.n	80044a4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02a      	beq.n	8004478 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004422:	4b59      	ldr	r3, [pc, #356]	; (8004588 <HAL_RCC_OscConfig+0x2a0>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd fc44 	bl	8001cb4 <HAL_GetTick>
 800442c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004430:	f7fd fc40 	bl	8001cb4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e192      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004442:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b4c      	ldr	r3, [pc, #304]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	21f8      	movs	r1, #248	; 0xf8
 800445c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	fa91 f1a1 	rbit	r1, r1
 8004464:	60f9      	str	r1, [r7, #12]
  return result;
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	fab1 f181 	clz	r1, r1
 800446c:	b2c9      	uxtb	r1, r1
 800446e:	408b      	lsls	r3, r1
 8004470:	4943      	ldr	r1, [pc, #268]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]
 8004476:	e015      	b.n	80044a4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004478:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x2a0>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fd fc19 	bl	8001cb4 <HAL_GetTick>
 8004482:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004486:	f7fd fc15 	bl	8001cb4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e167      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d030      	beq.n	8004512 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d016      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_OscConfig+0x2a4>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fd fbf9 	bl	8001cb4 <HAL_GetTick>
 80044c2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fd fbf5 	bl	8001cb4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e147      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1de>
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCC_OscConfig+0x2a4>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ec:	f7fd fbe2 	bl	8001cb4 <HAL_GetTick>
 80044f0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fd fbde 	bl	8001cb4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e130      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8087 	beq.w	800462e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d110      	bne.n	8004554 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_RCC_OscConfig+0x298>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <HAL_RCC_OscConfig+0x2a8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0d      	ldr	r2, [pc, #52]	; (8004590 <HAL_RCC_OscConfig+0x2a8>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_OscConfig+0x2a8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d122      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_RCC_OscConfig+0x2a8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_RCC_OscConfig+0x2a8>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004578:	f7fd fb9c 	bl	8001cb4 <HAL_GetTick>
 800457c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	e012      	b.n	80045a6 <HAL_RCC_OscConfig+0x2be>
 8004580:	40023800 	.word	0x40023800
 8004584:	40023802 	.word	0x40023802
 8004588:	42470000 	.word	0x42470000
 800458c:	42470e80 	.word	0x42470e80
 8004590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fd fb8e 	bl	8001cb4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0e0      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b72      	ldr	r3, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x488>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_RCC_OscConfig+0x48c>)
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c4:	f7fd fb76 	bl	8001cb4 <HAL_GetTick>
 80045c8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fd fb72 	bl	8001cb4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0c2      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ee      	beq.n	80045cc <HAL_RCC_OscConfig+0x2e4>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f0:	f7fd fb60 	bl	8001cb4 <HAL_GetTick>
 80045f4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd fb5c 	bl	8001cb4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0ac      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460e:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ee      	bne.n	80045f8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4b55      	ldr	r3, [pc, #340]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8097 	beq.w	8004766 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004638:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d061      	beq.n	8004708 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d146      	bne.n	80046da <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464c:	4b4b      	ldr	r3, [pc, #300]	; (800477c <HAL_RCC_OscConfig+0x494>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fd fb2f 	bl	8001cb4 <HAL_GetTick>
 8004656:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd fb2b 	bl	8001cb4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	; 0x64
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e07d      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466c:	4b42      	ldr	r3, [pc, #264]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004678:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	4b40      	ldr	r3, [pc, #256]	; (8004780 <HAL_RCC_OscConfig+0x498>)
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	69d1      	ldr	r1, [r2, #28]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6a12      	ldr	r2, [r2, #32]
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468e:	0192      	lsls	r2, r2, #6
 8004690:	4311      	orrs	r1, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004696:	0612      	lsls	r2, r2, #24
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800469e:	0852      	lsrs	r2, r2, #1
 80046a0:	3a01      	subs	r2, #1
 80046a2:	0412      	lsls	r2, r2, #16
 80046a4:	430a      	orrs	r2, r1
 80046a6:	4934      	ldr	r1, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ac:	4b33      	ldr	r3, [pc, #204]	; (800477c <HAL_RCC_OscConfig+0x494>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fd faff 	bl	8001cb4 <HAL_GetTick>
 80046b6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fd fafb 	bl	8001cb4 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b64      	cmp	r3, #100	; 0x64
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e04d      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046cc:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x3d2>
 80046d8:	e045      	b.n	8004766 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_RCC_OscConfig+0x494>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fd fae8 	bl	8001cb4 <HAL_GetTick>
 80046e4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fd fae4 	bl	8001cb4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e036      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x400>
 8004706:	e02e      	b.n	8004766 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e029      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_RCC_OscConfig+0x490>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	429a      	cmp	r2, r3
 8004726:	d11c      	bne.n	8004762 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d115      	bne.n	8004762 <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d10d      	bne.n	8004762 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d106      	bne.n	8004762 <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40007000 	.word	0x40007000
 8004774:	40023870 	.word	0x40023870
 8004778:	40023800 	.word	0x40023800
 800477c:	42470060 	.word	0x42470060
 8004780:	f0bc8000 	.word	0xf0bc8000

08004784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d2      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b6b      	ldr	r3, [pc, #428]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d90c      	bls.n	80047c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b68      	ldr	r3, [pc, #416]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b66      	ldr	r3, [pc, #408]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0be      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d020      	beq.n	800480e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d8:	4b5c      	ldr	r3, [pc, #368]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a5b      	ldr	r2, [pc, #364]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80047f0:	4b56      	ldr	r3, [pc, #344]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a55      	ldr	r2, [pc, #340]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b53      	ldr	r3, [pc, #332]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4950      	ldr	r1, [pc, #320]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d040      	beq.n	800489c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b4a      	ldr	r3, [pc, #296]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d115      	bne.n	800485a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e085      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b44      	ldr	r3, [pc, #272]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e079      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	4b40      	ldr	r3, [pc, #256]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e071      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0203 	bic.w	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4939      	ldr	r1, [pc, #228]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800486c:	f7fd fa22 	bl	8001cb4 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	e00a      	b.n	800488a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004874:	f7fd fa1e 	bl	8001cb4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e059      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 020c 	and.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	429a      	cmp	r2, r3
 800489a:	d1eb      	bne.n	8004874 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489c:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d20c      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b25      	ldr	r3, [pc, #148]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e03c      	b.n	800493e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	491b      	ldr	r1, [pc, #108]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4913      	ldr	r1, [pc, #76]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004902:	f000 f893 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8004906:	4601      	mov	r1, r0
 8004908:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004910:	22f0      	movs	r2, #240	; 0xf0
 8004912:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	fa92 f2a2 	rbit	r2, r2
 800491a:	60fa      	str	r2, [r7, #12]
  return result;
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	fab2 f282 	clz	r2, r2
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	40d3      	lsrs	r3, r2
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <HAL_RCC_ClockConfig+0x1cc>)
 8004928:	5cd3      	ldrb	r3, [r2, r3]
 800492a:	fa21 f303 	lsr.w	r3, r1, r3
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <HAL_RCC_ClockConfig+0x1d0>)
 8004930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCC_ClockConfig+0x1d4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd f98c 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023c00 	.word	0x40023c00
 800494c:	40023800 	.word	0x40023800
 8004950:	0800d6fc 	.word	0x0800d6fc
 8004954:	20000040 	.word	0x20000040
 8004958:	20000044 	.word	0x20000044

0800495c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d129      	bne.n	80049c2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6313      	str	r3, [r2, #48]	; 0x30
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800498a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004994:	2303      	movs	r3, #3
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80049a0:	f107 031c 	add.w	r3, r7, #28
 80049a4:	4619      	mov	r1, r3
 80049a6:	481f      	ldr	r0, [pc, #124]	; (8004a24 <HAL_RCC_MCOConfig+0xc8>)
 80049a8:	f7fd ff38 	bl	800281c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	4919      	ldr	r1, [pc, #100]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
  }
}
 80049c0:	e029      	b.n	8004a16 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	6313      	str	r3, [r2, #48]	; 0x30
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80049de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e4:	2302      	movs	r3, #2
 80049e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e8:	2303      	movs	r3, #3
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80049f4:	f107 031c 	add.w	r3, r7, #28
 80049f8:	4619      	mov	r1, r3
 80049fa:	480b      	ldr	r0, [pc, #44]	; (8004a28 <HAL_RCC_MCOConfig+0xcc>)
 80049fc:	f7fd ff0e 	bl	800281c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	00d9      	lsls	r1, r3, #3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	4903      	ldr	r1, [pc, #12]	; (8004a20 <HAL_RCC_MCOConfig+0xc4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
}
 8004a16:	bf00      	nop
 8004a18:	3730      	adds	r7, #48	; 0x30
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40020000 	.word	0x40020000
 8004a28:	40020800 	.word	0x40020800

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b090      	sub	sp, #64	; 0x40
 8004a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x40>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	f200 80a2 	bhi.w	8004b9a <HAL_RCC_GetSysClockFreq+0x16e>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5e:	e09c      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a64:	e09c      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a6a:	e099      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d027      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	623b      	str	r3, [r7, #32]
 8004a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a94:	2100      	movs	r1, #0
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a98:	fb03 f201 	mul.w	r2, r3, r1
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	fb00 f303 	mul.w	r3, r0, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a43      	ldr	r2, [pc, #268]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa6:	fba0 2102 	umull	r2, r1, r0, r2
 8004aaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004aac:	62ba      	str	r2, [r7, #40]	; 0x28
 8004aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab0:	4413      	add	r3, r2
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	61fa      	str	r2, [r7, #28]
 8004abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ac4:	f7fb fb7e 	bl	80001c4 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad0:	e055      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad2:	4b36      	ldr	r3, [pc, #216]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	2200      	movs	r2, #0
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	617a      	str	r2, [r7, #20]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ae4:	f04f 0b00 	mov.w	fp, #0
 8004ae8:	4652      	mov	r2, sl
 8004aea:	465b      	mov	r3, fp
 8004aec:	f04f 0000 	mov.w	r0, #0
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	0159      	lsls	r1, r3, #5
 8004af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004afa:	0150      	lsls	r0, r2, #5
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	ebb2 080a 	subs.w	r8, r2, sl
 8004b04:	eb63 090b 	sbc.w	r9, r3, fp
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b14:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b18:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b1c:	ebb2 0408 	subs.w	r4, r2, r8
 8004b20:	eb63 0509 	sbc.w	r5, r3, r9
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	00eb      	lsls	r3, r5, #3
 8004b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b32:	00e2      	lsls	r2, r4, #3
 8004b34:	4614      	mov	r4, r2
 8004b36:	461d      	mov	r5, r3
 8004b38:	eb14 030a 	adds.w	r3, r4, sl
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	eb45 030b 	adc.w	r3, r5, fp
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b50:	4629      	mov	r1, r5
 8004b52:	028b      	lsls	r3, r1, #10
 8004b54:	4620      	mov	r0, r4
 8004b56:	4629      	mov	r1, r5
 8004b58:	4604      	mov	r4, r0
 8004b5a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004b5e:	4601      	mov	r1, r0
 8004b60:	028a      	lsls	r2, r1, #10
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	2200      	movs	r2, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	60fa      	str	r2, [r7, #12]
 8004b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b72:	f7fb fb27 	bl	80001c4 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_GetSysClockFreq+0x180>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b98:	e002      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3740      	adds	r7, #64	; 0x40
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	00f42400 	.word	0x00f42400
 8004bb4:	017d7840 	.word	0x017d7840

08004bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bbc:	4b02      	ldr	r3, [pc, #8]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	20000040 	.word	0x20000040

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004bd2:	f7ff fff1 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004be0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004be4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	fa92 f2a2 	rbit	r2, r2
 8004bec:	603a      	str	r2, [r7, #0]
  return result;
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	40d3      	lsrs	r3, r2
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	0800d70c 	.word	0x0800d70c

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004c16:	f7ff ffcf 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c24:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004c28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	fa92 f2a2 	rbit	r2, r2
 8004c30:	603a      	str	r2, [r7, #0]
  return result;
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	fab2 f282 	clz	r2, r2
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	40d3      	lsrs	r3, r2
 8004c3c:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	0800d70c 	.word	0x0800d70c

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d14c      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c78:	4b6d      	ldr	r3, [pc, #436]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7e:	f7fd f819 	bl	8001cb4 <HAL_GetTick>
 8004c82:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c86:	f7fd f815 	bl	8001cb4 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e0c7      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c98:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	fa92 f2a2 	rbit	r2, r2
 8004cb4:	613a      	str	r2, [r7, #16]
  return result;
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	fab2 f282 	clz	r2, r2
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	fa03 f202 	lsl.w	r2, r3, r2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004cca:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	fa91 f1a1 	rbit	r1, r1
 8004cd2:	61b9      	str	r1, [r7, #24]
  return result;
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	fab1 f181 	clz	r1, r1
 8004cda:	b2c9      	uxtb	r1, r1
 8004cdc:	408b      	lsls	r3, r1
 8004cde:	4955      	ldr	r1, [pc, #340]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ce6:	4b52      	ldr	r3, [pc, #328]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cec:	f7fc ffe2 	bl	8001cb4 <HAL_GetTick>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cf4:	f7fc ffde 	bl	8001cb4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e090      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d06:	4b4b      	ldr	r3, [pc, #300]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8083 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	4a42      	ldr	r2, [pc, #264]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d30:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d3c:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d46:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d48:	f7fc ffb4 	bl	8001cb4 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d50:	f7fc ffb0 	bl	8001cb4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e062      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d62:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02f      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	6a3a      	ldr	r2, [r7, #32]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d028      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d94:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d9c:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004da8:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d114      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004db4:	f7fc ff7e 	bl	8001cb4 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dbc:	f7fc ff7a 	bl	8001cb4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e02a      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ee      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dea:	d10d      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	490c      	ldr	r1, [pc, #48]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
 8004e06:	e005      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e20:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3728      	adds	r7, #40	; 0x28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	42470068 	.word	0x42470068
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	42470e40 	.word	0x42470e40

08004e40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e01c      	b.n	8004e8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	795b      	ldrb	r3, [r3, #5]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fb fffc 	bl	8000e60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0204 	orr.w	r2, r2, #4
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07c      	b.n	8004fa0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7f5b      	ldrb	r3, [r3, #29]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fc f84a 	bl	8000f50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	22ca      	movs	r2, #202	; 0xca
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2253      	movs	r2, #83	; 0x53
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9e6 	bl	80052a4 <RTC_EnterInitMode>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	22ff      	movs	r2, #255	; 0xff
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e057      	b.n	8004fa0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f02:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6899      	ldr	r1, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6919      	ldr	r1, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	041a      	lsls	r2, r3, #16
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4e:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f97f 	bl	8005254 <HAL_RTC_WaitForSynchro>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	22ff      	movs	r2, #255	; 0xff
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2204      	movs	r2, #4
 8004f68:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e018      	b.n	8004fa0 <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
  }
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	7f1b      	ldrb	r3, [r3, #28]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RTC_SetTime+0x1c>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e0a3      	b.n	800510c <HAL_RTC_SetTime+0x164>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d126      	bne.n	8005024 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f984 	bl	80052fc <RTC_ByteToBcd2>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f97d 	bl	80052fc <RTC_ByteToBcd2>
 8005002:	4603      	mov	r3, r0
 8005004:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005006:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	789b      	ldrb	r3, [r3, #2]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f975 	bl	80052fc <RTC_ByteToBcd2>
 8005012:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005014:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	78db      	ldrb	r3, [r3, #3]
 800501c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e018      	b.n	8005056 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005044:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800504a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	22ca      	movs	r2, #202	; 0xca
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2253      	movs	r2, #83	; 0x53
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f91c 	bl	80052a4 <RTC_EnterInitMode>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	22ff      	movs	r2, #255	; 0xff
 8005078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2204      	movs	r2, #4
 800507e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e040      	b.n	800510c <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005094:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005098:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050a8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050d0:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f8be 	bl	8005254 <HAL_RTC_WaitForSynchro>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	22ff      	movs	r2, #255	; 0xff
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2204      	movs	r2, #4
 80050ea:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e00a      	b.n	800510c <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	22ff      	movs	r2, #255	; 0xff
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800510a:	2300      	movs	r3, #0
  }
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd90      	pop	{r4, r7, pc}

08005114 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	7f1b      	ldrb	r3, [r3, #28]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_RTC_SetDate+0x1c>
 800512c:	2302      	movs	r3, #2
 800512e:	e08d      	b.n	800524c <HAL_RTC_SetDate+0x138>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2202      	movs	r2, #2
 800513a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10e      	bne.n	8005160 <HAL_RTC_SetDate+0x4c>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	f023 0310 	bic.w	r3, r3, #16
 8005156:	b2db      	uxtb	r3, r3
 8005158:	330a      	adds	r3, #10
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11c      	bne.n	80051a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f8c6 	bl	80052fc <RTC_ByteToBcd2>
 8005170:	4603      	mov	r3, r0
 8005172:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f8bf 	bl	80052fc <RTC_ByteToBcd2>
 800517e:	4603      	mov	r3, r0
 8005180:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005182:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	789b      	ldrb	r3, [r3, #2]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f8b7 	bl	80052fc <RTC_ByteToBcd2>
 800518e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005190:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e00e      	b.n	80051be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	78db      	ldrb	r3, [r3, #3]
 80051a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80051ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80051b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	22ca      	movs	r2, #202	; 0xca
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2253      	movs	r2, #83	; 0x53
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f868 	bl	80052a4 <RTC_EnterInitMode>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2204      	movs	r2, #4
 80051e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e02c      	b.n	800524c <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005210:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f81e 	bl	8005254 <HAL_RTC_WaitForSynchro>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	22ff      	movs	r2, #255	; 0xff
 8005224:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2204      	movs	r2, #4
 800522a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e00a      	b.n	800524c <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	22ff      	movs	r2, #255	; 0xff
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd90      	pop	{r4, r7, pc}

08005254 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800526e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005270:	f7fc fd20 	bl	8001cb4 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005276:	e009      	b.n	800528c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005278:	f7fc fd1c 	bl	8001cb4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005286:	d901      	bls.n	800528c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e007      	b.n	800529c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ee      	beq.n	8005278 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d119      	bne.n	80052f2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052c8:	f7fc fcf4 	bl	8001cb4 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052ce:	e009      	b.n	80052e4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052d0:	f7fc fcf0 	bl	8001cb4 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052de:	d901      	bls.n	80052e4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e007      	b.n	80052f4 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ee      	beq.n	80052d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 800530a:	e005      	b.n	8005318 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	3b0a      	subs	r3, #10
 8005316:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b09      	cmp	r3, #9
 800531c:	d8f6      	bhi.n	800530c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	b2da      	uxtb	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	4313      	orrs	r3, r2
 800532a:	b2db      	uxtb	r3, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr

08005336 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e022      	b.n	800538e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb fe2e 	bl	8000fbc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2203      	movs	r2, #3
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f815 	bl	8005398 <HAL_SD_InitCard>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e00a      	b.n	800538e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005398:	b5b0      	push	{r4, r5, r7, lr}
 800539a:	b08e      	sub	sp, #56	; 0x38
 800539c:	af04      	add	r7, sp, #16
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80053b4:	2376      	movs	r3, #118	; 0x76
 80053b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681d      	ldr	r5, [r3, #0]
 80053bc:	466c      	mov	r4, sp
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d0:	4628      	mov	r0, r5
 80053d2:	f002 ff77 	bl	80082c4 <SDIO_Init>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80053dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e04c      	b.n	8005482 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80053e8:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_SD_InitCard+0xf4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 ffac 	bl	8008350 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80053f8:	4b24      	ldr	r3, [pc, #144]	; (800548c <HAL_SD_InitCard+0xf4>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 ff04 	bl	800620c <SD_PowerON>
 8005404:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00b      	beq.n	8005424 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e02e      	b.n	8005482 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fe23 	bl	8006070 <SD_InitCard>
 800542a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01b      	b.n	8005482 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005452:	4618      	mov	r0, r3
 8005454:	f003 f80a 	bl	800846c <SDMMC_CmdBlockLength>
 8005458:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00f      	beq.n	8005480 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <HAL_SD_InitCard+0xf8>)
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3728      	adds	r7, #40	; 0x28
 8005486:	46bd      	mov	sp, r7
 8005488:	bdb0      	pop	{r4, r5, r7, pc}
 800548a:	bf00      	nop
 800548c:	422580a0 	.word	0x422580a0
 8005490:	004005ff 	.word	0x004005ff

08005494 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b092      	sub	sp, #72	; 0x48
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054a2:	f7fc fc07 	bl	8001cb4 <HAL_GetTick>
 80054a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e1bd      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	f040 81b0 	bne.w	8005834 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80054da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d907      	bls.n	80054f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e1a4      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2203      	movs	r2, #3
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2200      	movs	r2, #0
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	2b01      	cmp	r3, #1
 800550e:	d002      	beq.n	8005516 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	025b      	lsls	r3, r3, #9
 8005514:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	025b      	lsls	r3, r3, #9
 8005520:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005522:	2390      	movs	r3, #144	; 0x90
 8005524:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005526:	2302      	movs	r3, #2
 8005528:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800552a:	2300      	movs	r3, #0
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800552e:	2301      	movs	r3, #1
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f107 0214 	add.w	r2, r7, #20
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f002 ff6a 	bl	8008416 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d90a      	bls.n	800555e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2202      	movs	r2, #2
 800554c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005554:	4618      	mov	r0, r3
 8005556:	f002 ffcd 	bl	80084f4 <SDMMC_CmdReadMultiBlock>
 800555a:	6478      	str	r0, [r7, #68]	; 0x44
 800555c:	e009      	b.n	8005572 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800556a:	4618      	mov	r0, r3
 800556c:	f002 ffa0 	bl	80084b0 <SDMMC_CmdReadSingleBlock>
 8005570:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005574:	2b00      	cmp	r3, #0
 8005576:	d012      	beq.n	800559e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7a      	ldr	r2, [pc, #488]	; (8005768 <HAL_SD_ReadBlocks+0x2d4>)
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005586:	431a      	orrs	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e151      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80055a2:	e061      	b.n	8005668 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03c      	beq.n	800562c <HAL_SD_ReadBlocks+0x198>
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d039      	beq.n	800562c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
 80055bc:	e033      	b.n	8005626 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f002 fea8 	bl	8008318 <SDIO_ReadFIFO>
 80055c8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	3301      	adds	r3, #1
 80055d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	3b01      	subs	r3, #1
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	3301      	adds	r3, #1
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	3b01      	subs	r3, #1
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	0c1b      	lsrs	r3, r3, #16
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	3301      	adds	r3, #1
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	3b01      	subs	r3, #1
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	b2da      	uxtb	r2, r3
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	3301      	adds	r3, #1
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	3b01      	subs	r3, #1
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005622:	3301      	adds	r3, #1
 8005624:	643b      	str	r3, [r7, #64]	; 0x40
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	2b07      	cmp	r3, #7
 800562a:	d9c8      	bls.n	80055be <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800562c:	f7fc fb42 	bl	8001cb4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005638:	429a      	cmp	r2, r3
 800563a:	d902      	bls.n	8005642 <HAL_SD_ReadBlocks+0x1ae>
 800563c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563e:	2b00      	cmp	r3, #0
 8005640:	d112      	bne.n	8005668 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a48      	ldr	r2, [pc, #288]	; (8005768 <HAL_SD_ReadBlocks+0x2d4>)
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e0ec      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566e:	f240 332a 	movw	r3, #810	; 0x32a
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d095      	beq.n	80055a4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d022      	beq.n	80056cc <HAL_SD_ReadBlocks+0x238>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d91f      	bls.n	80056cc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	2b03      	cmp	r3, #3
 8005692:	d01b      	beq.n	80056cc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f002 ff91 	bl	80085c0 <SDMMC_CmdStopTransfer>
 800569e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80056a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d012      	beq.n	80056cc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <HAL_SD_ReadBlocks+0x2d4>)
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0ba      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a22      	ldr	r2, [pc, #136]	; (8005768 <HAL_SD_ReadBlocks+0x2d4>)
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	f043 0208 	orr.w	r2, r3, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0a0      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <HAL_SD_ReadBlocks+0x2d4>)
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	f043 0202 	orr.w	r2, r3, #2
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e086      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d063      	beq.n	800580a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <HAL_SD_ReadBlocks+0x2d4>)
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e06c      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
 8005768:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f002 fdd1 	bl	8008318 <SDIO_ReadFIFO>
 8005776:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	b2da      	uxtb	r2, r3
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	3301      	adds	r3, #1
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	3b01      	subs	r3, #1
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	b2da      	uxtb	r2, r3
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	3301      	adds	r3, #1
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800579c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579e:	3b01      	subs	r3, #1
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	3301      	adds	r3, #1
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b4:	3b01      	subs	r3, #1
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	0e1b      	lsrs	r3, r3, #24
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	3301      	adds	r3, #1
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	3b01      	subs	r3, #1
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80057ce:	f7fc fa71 	bl	8001cb4 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057da:	429a      	cmp	r2, r3
 80057dc:	d902      	bls.n	80057e4 <HAL_SD_ReadBlocks+0x350>
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d112      	bne.n	800580a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_SD_ReadBlocks+0x3b8>)
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e01b      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SD_ReadBlocks+0x38a>
 8005818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1a6      	bne.n	800576c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f240 523a 	movw	r2, #1338	; 0x53a
 8005826:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e006      	b.n	8005842 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3748      	adds	r7, #72	; 0x48
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	004005ff 	.word	0x004005ff

08005850 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b092      	sub	sp, #72	; 0x48
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800585e:	f7fc fa29 	bl	8001cb4 <HAL_GetTick>
 8005862:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e166      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	f040 8159 	bne.w	8005b42 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	441a      	add	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d907      	bls.n	80058b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e14d      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2203      	movs	r2, #3
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d002      	beq.n	80058d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	025b      	lsls	r3, r3, #9
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	025b      	lsls	r3, r3, #9
 80058dc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80058de:	2390      	movs	r3, #144	; 0x90
 80058e0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80058e2:	2300      	movs	r3, #0
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f107 0218 	add.w	r2, r7, #24
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fd8c 	bl	8008416 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d90a      	bls.n	800591a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005910:	4618      	mov	r0, r3
 8005912:	f002 fe33 	bl	800857c <SDMMC_CmdWriteMultiBlock>
 8005916:	6478      	str	r0, [r7, #68]	; 0x44
 8005918:	e009      	b.n	800592e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2210      	movs	r2, #16
 800591e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005926:	4618      	mov	r0, r3
 8005928:	f002 fe06 	bl	8008538 <SDMMC_CmdWriteSingleBlock>
 800592c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800592e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005930:	2b00      	cmp	r3, #0
 8005932:	d012      	beq.n	800595a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a87      	ldr	r2, [pc, #540]	; (8005b58 <HAL_SD_WriteBlocks+0x308>)
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005942:	431a      	orrs	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e0fa      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800595e:	e065      	b.n	8005a2c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d040      	beq.n	80059f0 <HAL_SD_WriteBlocks+0x1a0>
 800596e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d03d      	beq.n	80059f0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005974:	2300      	movs	r3, #0
 8005976:	643b      	str	r3, [r7, #64]	; 0x40
 8005978:	e037      	b.n	80059ea <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	3301      	adds	r3, #1
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	3b01      	subs	r3, #1
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	021a      	lsls	r2, r3, #8
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	3301      	adds	r3, #1
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800599e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a0:	3b01      	subs	r3, #1
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	041a      	lsls	r2, r3, #16
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	3301      	adds	r3, #1
 80059b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	3b01      	subs	r3, #1
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	061a      	lsls	r2, r3, #24
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80059c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ca:	3301      	adds	r3, #1
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	3b01      	subs	r3, #1
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f107 0214 	add.w	r2, r7, #20
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 fca6 	bl	8008330 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80059e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e6:	3301      	adds	r3, #1
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ec:	2b07      	cmp	r3, #7
 80059ee:	d9c4      	bls.n	800597a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80059f0:	f7fc f960 	bl	8001cb4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d902      	bls.n	8005a06 <HAL_SD_WriteBlocks+0x1b6>
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d112      	bne.n	8005a2c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a53      	ldr	r2, [pc, #332]	; (8005b58 <HAL_SD_WriteBlocks+0x308>)
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e091      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a32:	f240 331a 	movw	r3, #794	; 0x31a
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d091      	beq.n	8005960 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d022      	beq.n	8005a90 <HAL_SD_WriteBlocks+0x240>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d91f      	bls.n	8005a90 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d01b      	beq.n	8005a90 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f002 fdaf 	bl	80085c0 <SDMMC_CmdStopTransfer>
 8005a62:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d012      	beq.n	8005a90 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a3a      	ldr	r2, [pc, #232]	; (8005b58 <HAL_SD_WriteBlocks+0x308>)
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e05f      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d012      	beq.n	8005ac4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <HAL_SD_WriteBlocks+0x308>)
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	f043 0208 	orr.w	r2, r3, #8
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e045      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <HAL_SD_WriteBlocks+0x308>)
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e02b      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <HAL_SD_WriteBlocks+0x308>)
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	f043 0210 	orr.w	r2, r3, #16
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e011      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b34:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e006      	b.n	8005b50 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
  }
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3748      	adds	r7, #72	; 0x48
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	004005ff 	.word	0x004005ff

08005b5c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6a:	0f9b      	lsrs	r3, r3, #30
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b76:	0e9b      	lsrs	r3, r3, #26
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbc:	0d1b      	lsrs	r3, r3, #20
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bda:	0bdb      	lsrs	r3, r3, #15
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bec:	0b9b      	lsrs	r3, r3, #14
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bfe:	0b5b      	lsrs	r3, r3, #13
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c10:	0b1b      	lsrs	r3, r3, #12
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d163      	bne.n	8005cf4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c30:	009a      	lsls	r2, r3, #2
 8005c32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c36:	4013      	ands	r3, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005c3c:	0f92      	lsrs	r2, r2, #30
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c48:	0edb      	lsrs	r3, r3, #27
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5a:	0e1b      	lsrs	r3, r3, #24
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	0d5b      	lsrs	r3, r3, #21
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7e:	0c9b      	lsrs	r3, r3, #18
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c90:	0bdb      	lsrs	r3, r3, #15
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	7e1b      	ldrb	r3, [r3, #24]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cbe:	fb03 f202 	mul.w	r2, r3, r2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	7a1b      	ldrb	r3, [r3, #8]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005ce0:	0a52      	lsrs	r2, r2, #9
 8005ce2:	fb03 f202 	mul.w	r2, r3, r2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8005cf2:	e031      	b.n	8005d58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d11d      	bne.n	8005d38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	3301      	adds	r3, #1
 8005d18:	029a      	lsls	r2, r3, #10
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	661a      	str	r2, [r3, #96]	; 0x60
 8005d36:	e00f      	b.n	8005d58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <HAL_SD_GetCardCSD+0x344>)
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e09d      	b.n	8005e94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5c:	0b9b      	lsrs	r3, r3, #14
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6e:	09db      	lsrs	r3, r3, #7
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d90:	0fdb      	lsrs	r3, r3, #31
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9c:	0f5b      	lsrs	r3, r3, #29
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	0e9b      	lsrs	r3, r3, #26
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	0d9b      	lsrs	r3, r3, #22
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	0d5b      	lsrs	r3, r3, #21
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	0bdb      	lsrs	r3, r3, #15
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	0b9b      	lsrs	r3, r3, #14
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	0b5b      	lsrs	r3, r3, #13
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	0b1b      	lsrs	r3, r3, #12
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	0a9b      	lsrs	r3, r3, #10
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	004005ff 	.word	0x004005ff

08005ea4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2203      	movs	r2, #3
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d02e      	beq.n	8005f7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f22:	d106      	bne.n	8005f32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38
 8005f30:	e029      	b.n	8005f86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f38:	d10a      	bne.n	8005f50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa1c 	bl	8006378 <SD_WideBus_Enable>
 8005f40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f4e:	e01a      	b.n	8005f86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa59 	bl	800640e <SD_WideBus_Disable>
 8005f5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
 8005f6a:	e00c      	b.n	8005f86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
 8005f78:	e005      	b.n	8005f86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a26      	ldr	r2, [pc, #152]	; (800602c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fa4:	e01f      	b.n	8005fe6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681d      	ldr	r5, [r3, #0]
 8005fcc:	466c      	mov	r4, sp
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f002 f96f 	bl	80082c4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f002 fa3c 	bl	800846c <SDMMC_CmdBlockLength>
 8005ff4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00c      	beq.n	8006016 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0a      	ldr	r2, [pc, #40]	; (800602c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800601e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bdb0      	pop	{r4, r5, r7, pc}
 800602a:	bf00      	nop
 800602c:	004005ff 	.word	0x004005ff

08006030 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800603c:	f107 030c 	add.w	r3, r7, #12
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f970 	bl	8006328 <SD_SendStatus>
 8006048:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	0a5b      	lsrs	r3, r3, #9
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006066:	693b      	ldr	r3, [r7, #16]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006070:	b5b0      	push	{r4, r5, r7, lr}
 8006072:	b094      	sub	sp, #80	; 0x50
 8006074:	af04      	add	r7, sp, #16
 8006076:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f002 f974 	bl	800836e <SDIO_GetPowerState>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800608c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006090:	e0b8      	b.n	8006204 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	2b03      	cmp	r3, #3
 8006098:	d02f      	beq.n	80060fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 fb98 	bl	80087d4 <SDMMC_CmdSendCID>
 80060a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80060ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ae:	e0a9      	b.n	8006204 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f002 f99b 	bl	80083f2 <SDIO_GetResponse>
 80060bc:	4602      	mov	r2, r0
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2104      	movs	r1, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f002 f992 	bl	80083f2 <SDIO_GetResponse>
 80060ce:	4602      	mov	r2, r0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2108      	movs	r1, #8
 80060da:	4618      	mov	r0, r3
 80060dc:	f002 f989 	bl	80083f2 <SDIO_GetResponse>
 80060e0:	4602      	mov	r2, r0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	210c      	movs	r1, #12
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 f980 	bl	80083f2 <SDIO_GetResponse>
 80060f2:	4602      	mov	r2, r0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d00d      	beq.n	800611e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f107 020e 	add.w	r2, r7, #14
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f002 fb9e 	bl	800884e <SDMMC_CmdSetRelAdd>
 8006112:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <SD_InitCard+0xae>
    {
      return errorstate;
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	e072      	b.n	8006204 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	2b03      	cmp	r3, #3
 8006124:	d036      	beq.n	8006194 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006126:	89fb      	ldrh	r3, [r7, #14]
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f002 fb68 	bl	8008810 <SDMMC_CmdSendCSD>
 8006140:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	e05b      	b.n	8006204 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f002 f94d 	bl	80083f2 <SDIO_GetResponse>
 8006158:	4602      	mov	r2, r0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2104      	movs	r1, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f002 f944 	bl	80083f2 <SDIO_GetResponse>
 800616a:	4602      	mov	r2, r0
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2108      	movs	r1, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f002 f93b 	bl	80083f2 <SDIO_GetResponse>
 800617c:	4602      	mov	r2, r0
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	210c      	movs	r1, #12
 8006188:	4618      	mov	r0, r3
 800618a:	f002 f932 	bl	80083f2 <SDIO_GetResponse>
 800618e:	4602      	mov	r2, r0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2104      	movs	r1, #4
 800619a:	4618      	mov	r0, r3
 800619c:	f002 f929 	bl	80083f2 <SDIO_GetResponse>
 80061a0:	4603      	mov	r3, r0
 80061a2:	0d1a      	lsrs	r2, r3, #20
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061a8:	f107 0310 	add.w	r3, r7, #16
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fcd4 	bl	8005b5c <HAL_SD_GetCardCSD>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061be:	e021      	b.n	8006204 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	2200      	movs	r2, #0
 80061cc:	461c      	mov	r4, r3
 80061ce:	4615      	mov	r5, r2
 80061d0:	4622      	mov	r2, r4
 80061d2:	462b      	mov	r3, r5
 80061d4:	4608      	mov	r0, r1
 80061d6:	f002 fa15 	bl	8008604 <SDMMC_CmdSelDesel>
 80061da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80061e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e4:	e00e      	b.n	8006204 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681d      	ldr	r5, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	466c      	mov	r4, sp
 80061ee:	f103 0210 	add.w	r2, r3, #16
 80061f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80061f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061f8:	3304      	adds	r3, #4
 80061fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061fc:	4628      	mov	r0, r5
 80061fe:	f002 f861 	bl	80082c4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3740      	adds	r7, #64	; 0x40
 8006208:	46bd      	mov	sp, r7
 800620a:	bdb0      	pop	{r4, r5, r7, pc}

0800620c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fa10 	bl	800864a <SDMMC_CmdGoIdleState>
 800622a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	e072      	b.n	800631c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fa23 	bl	8008686 <SDMMC_CmdOperCond>
 8006240:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f002 f9f9 	bl	800864a <SDMMC_CmdGoIdleState>
 8006258:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	e05b      	b.n	800631c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	2b01      	cmp	r3, #1
 8006270:	d137      	bne.n	80062e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f002 fa23 	bl	80086c4 <SDMMC_CmdAppCommand>
 800627e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02d      	beq.n	80062e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800628a:	e047      	b.n	800631c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f002 fa16 	bl	80086c4 <SDMMC_CmdAppCommand>
 8006298:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	e03b      	b.n	800631c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	491e      	ldr	r1, [pc, #120]	; (8006324 <SD_PowerON+0x118>)
 80062aa:	4618      	mov	r0, r3
 80062ac:	f002 fa2c 	bl	8008708 <SDMMC_CmdAppOperCommand>
 80062b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062bc:	e02e      	b.n	800631c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f002 f894 	bl	80083f2 <SDIO_GetResponse>
 80062ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	0fdb      	lsrs	r3, r3, #31
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <SD_PowerON+0xcc>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <SD_PowerON+0xce>
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]

    count++;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	3301      	adds	r3, #1
 80062e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d802      	bhi.n	80062f2 <SD_PowerON+0xe6>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0cc      	beq.n	800628c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d902      	bls.n	8006302 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80062fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006300:	e00c      	b.n	800631c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	645a      	str	r2, [r3, #68]	; 0x44
 8006312:	e002      	b.n	800631a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	c1100000 	.word	0xc1100000

08006328 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800633c:	e018      	b.n	8006370 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f002 faa0 	bl	8008890 <SDMMC_CmdSendStatus>
 8006350:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	e009      	b.n	8006370 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f002 f845 	bl	80083f2 <SDIO_GetResponse>
 8006368:	4602      	mov	r2, r0
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f002 f82f 	bl	80083f2 <SDIO_GetResponse>
 8006394:	4603      	mov	r3, r0
 8006396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800639e:	d102      	bne.n	80063a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80063a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063a4:	e02f      	b.n	8006406 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f879 	bl	80064a4 <SD_FindSCR>
 80063b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	e023      	b.n	8006406 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01c      	beq.n	8006402 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f002 f975 	bl	80086c4 <SDMMC_CmdAppCommand>
 80063da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	e00f      	b.n	8006406 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2102      	movs	r1, #2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f002 f9ae 	bl	800874e <SDMMC_CmdBusWidth>
 80063f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	e003      	b.n	8006406 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80063fe:	2300      	movs	r3, #0
 8006400:	e001      	b.n	8006406 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2100      	movs	r1, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f001 ffe4 	bl	80083f2 <SDIO_GetResponse>
 800642a:	4603      	mov	r3, r0
 800642c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006434:	d102      	bne.n	800643c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800643a:	e02f      	b.n	800649c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f82e 	bl	80064a4 <SD_FindSCR>
 8006448:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	e023      	b.n	800649c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01c      	beq.n	8006498 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f002 f92a 	bl	80086c4 <SDMMC_CmdAppCommand>
 8006470:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	e00f      	b.n	800649c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2100      	movs	r1, #0
 8006482:	4618      	mov	r0, r3
 8006484:	f002 f963 	bl	800874e <SDMMC_CmdBusWidth>
 8006488:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	e003      	b.n	800649c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006494:	2300      	movs	r3, #0
 8006496:	e001      	b.n	800649c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b08f      	sub	sp, #60	; 0x3c
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80064ae:	f7fb fc01 	bl	8001cb4 <HAL_GetTick>
 80064b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80064b8:	2300      	movs	r3, #0
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2108      	movs	r1, #8
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 ffce 	bl	800846c <SDMMC_CmdBlockLength>
 80064d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	e0b2      	b.n	8006642 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	041b      	lsls	r3, r3, #16
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f002 f8eb 	bl	80086c4 <SDMMC_CmdAppCommand>
 80064ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	e0a3      	b.n	8006642 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006500:	2308      	movs	r3, #8
 8006502:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006504:	2330      	movs	r3, #48	; 0x30
 8006506:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006508:	2302      	movs	r3, #2
 800650a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800650c:	2300      	movs	r3, #0
 800650e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006510:	2301      	movs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f107 0210 	add.w	r2, r7, #16
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f001 ff79 	bl	8008416 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f002 f932 	bl	8008792 <SDMMC_CmdSendSCR>
 800652e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02a      	beq.n	800658c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	e083      	b.n	8006642 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00f      	beq.n	8006568 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	f107 0208 	add.w	r2, r7, #8
 8006554:	18d4      	adds	r4, r2, r3
 8006556:	4608      	mov	r0, r1
 8006558:	f001 fede 	bl	8008318 <SDIO_ReadFIFO>
 800655c:	4603      	mov	r3, r0
 800655e:	6023      	str	r3, [r4, #0]
      index++;
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	3301      	adds	r3, #1
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	e006      	b.n	8006576 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d012      	beq.n	800659c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006576:	f7fb fb9d 	bl	8001cb4 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d102      	bne.n	800658c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006586:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800658a:	e05a      	b.n	8006642 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0cf      	beq.n	800653a <SD_FindSCR+0x96>
 800659a:	e000      	b.n	800659e <SD_FindSCR+0xfa>
      break;
 800659c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80065b4:	2308      	movs	r3, #8
 80065b6:	e044      	b.n	8006642 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2202      	movs	r2, #2
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80065ce:	2302      	movs	r3, #2
 80065d0:	e037      	b.n	8006642 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2220      	movs	r2, #32
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80065e8:	2320      	movs	r3, #32
 80065ea:	e02a      	b.n	8006642 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	061a      	lsls	r2, r3, #24
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006602:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800660c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	0e1b      	lsrs	r3, r3, #24
 8006612:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	601a      	str	r2, [r3, #0]
    scr++;
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	3304      	adds	r3, #4
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	061a      	lsls	r2, r3, #24
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800662a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006634:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	373c      	adds	r7, #60	; 0x3c
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}

0800664a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e07b      	b.n	8006754 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d108      	bne.n	8006676 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800666c:	d009      	beq.n	8006682 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	61da      	str	r2, [r3, #28]
 8006674:	e005      	b.n	8006682 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d106      	bne.n	80066a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7fa fda9 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	ea42 0103 	orr.w	r1, r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	f003 0104 	and.w	r1, r3, #4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0210 	and.w	r2, r3, #16
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e01a      	b.n	80067a4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006784:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fa fe6c 	bl	8001464 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_SPI_Transmit_DMA+0x20>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e09b      	b.n	8006904 <HAL_SPI_Transmit_DMA+0x158>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
 80067e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067e4:	e089      	b.n	80068fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_Transmit_DMA+0x46>
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067f6:	e080      	b.n	80068fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2203      	movs	r2, #3
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	88fa      	ldrh	r2, [r7, #6]
 8006816:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683e:	d10f      	bne.n	8006860 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800685e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006864:	4a29      	ldr	r2, [pc, #164]	; (800690c <HAL_SPI_Transmit_DMA+0x160>)
 8006866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686c:	4a28      	ldr	r2, [pc, #160]	; (8006910 <HAL_SPI_Transmit_DMA+0x164>)
 800686e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006874:	4a27      	ldr	r2, [pc, #156]	; (8006914 <HAL_SPI_Transmit_DMA+0x168>)
 8006876:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687c:	2200      	movs	r2, #0
 800687e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	4619      	mov	r1, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006896:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006898:	f7fb fc70 	bl	800217c <HAL_DMA_Start_IT>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00c      	beq.n	80068bc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f043 0210 	orr.w	r2, r3, #16
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80068ba:	e01e      	b.n	80068fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d007      	beq.n	80068da <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0220 	orr.w	r2, r2, #32
 80068e8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0202 	orr.w	r2, r2, #2
 80068f8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	080069e5 	.word	0x080069e5
 8006910:	0800693d 	.word	0x0800693d
 8006914:	08006a01 	.word	0x08006a01

08006918 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800694a:	f7fb f9b3 	bl	8001cb4 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695e:	d03b      	beq.n	80069d8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0220 	bic.w	r2, r2, #32
 800696e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0202 	bic.w	r2, r2, #2
 800697e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	2164      	movs	r1, #100	; 0x64
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	f000 f8e3 	bl	8006b50 <SPI_EndRxTxTransaction>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069d0:	6978      	ldr	r0, [r7, #20]
 80069d2:	f7ff ffaa 	bl	800692a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069d6:	e002      	b.n	80069de <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80069d8:	6978      	ldr	r0, [r7, #20]
 80069da:	f005 ff15 	bl	800c808 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff ff90 	bl	8006918 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0203 	bic.w	r2, r2, #3
 8006a1c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f043 0210 	orr.w	r2, r3, #16
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff ff79 	bl	800692a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a50:	f7fb f930 	bl	8001cb4 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a60:	f7fb f928 	bl	8001cb4 <HAL_GetTick>
 8006a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a66:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	015b      	lsls	r3, r3, #5
 8006a6c:	0d1b      	lsrs	r3, r3, #20
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a76:	e054      	b.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d050      	beq.n	8006b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a80:	f7fb f918 	bl	8001cb4 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d902      	bls.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d13d      	bne.n	8006b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aae:	d111      	bne.n	8006ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab8:	d004      	beq.n	8006ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac2:	d107      	bne.n	8006ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006adc:	d10f      	bne.n	8006afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e017      	b.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	2300      	movne	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d19b      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000040 	.word	0x20000040

08006b50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	2180      	movs	r1, #128	; 0x80
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff ff6a 	bl	8006a40 <SPI_WaitFlagStateUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f043 0220 	orr.w	r2, r3, #32
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e000      	b.n	8006b84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e041      	b.n	8006c22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fa fe64 	bl	8001880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f000 faea 	bl	80071a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <HAL_TIM_PWM_Start+0x24>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	e022      	b.n	8006c96 <HAL_TIM_PWM_Start+0x6a>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d109      	bne.n	8006c6a <HAL_TIM_PWM_Start+0x3e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	e015      	b.n	8006c96 <HAL_TIM_PWM_Start+0x6a>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d109      	bne.n	8006c84 <HAL_TIM_PWM_Start+0x58>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	e008      	b.n	8006c96 <HAL_TIM_PWM_Start+0x6a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	bf14      	ite	ne
 8006c90:	2301      	movne	r3, #1
 8006c92:	2300      	moveq	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e07c      	b.n	8006d98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_PWM_Start+0x82>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cac:	e013      	b.n	8006cd6 <HAL_TIM_PWM_Start+0xaa>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x92>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cbc:	e00b      	b.n	8006cd6 <HAL_TIM_PWM_Start+0xaa>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_PWM_Start+0xa2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ccc:	e003      	b.n	8006cd6 <HAL_TIM_PWM_Start+0xaa>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fcaa 	bl	8007638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a2d      	ldr	r2, [pc, #180]	; (8006da0 <HAL_TIM_PWM_Start+0x174>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d004      	beq.n	8006cf8 <HAL_TIM_PWM_Start+0xcc>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a2c      	ldr	r2, [pc, #176]	; (8006da4 <HAL_TIM_PWM_Start+0x178>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIM_PWM_Start+0xd0>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e000      	b.n	8006cfe <HAL_TIM_PWM_Start+0xd2>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a22      	ldr	r2, [pc, #136]	; (8006da0 <HAL_TIM_PWM_Start+0x174>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d022      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d24:	d01d      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1f      	ldr	r2, [pc, #124]	; (8006da8 <HAL_TIM_PWM_Start+0x17c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d018      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <HAL_TIM_PWM_Start+0x180>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1c      	ldr	r2, [pc, #112]	; (8006db0 <HAL_TIM_PWM_Start+0x184>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <HAL_TIM_PWM_Start+0x178>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <HAL_TIM_PWM_Start+0x188>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x136>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a16      	ldr	r2, [pc, #88]	; (8006db8 <HAL_TIM_PWM_Start+0x18c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d111      	bne.n	8006d86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b06      	cmp	r3, #6
 8006d72:	d010      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d84:	e007      	b.n	8006d96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40001800 	.word	0x40001800

08006dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0202 	mvn.w	r2, #2
 8006de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9b4 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f9a7 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f9b6 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0204 	mvn.w	r2, #4
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f98a 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f97d 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f98c 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0208 	mvn.w	r2, #8
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2204      	movs	r2, #4
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f960 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f953 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f962 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d122      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b10      	cmp	r3, #16
 8006eda:	d11b      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0210 	mvn.w	r2, #16
 8006ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f936 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006f00:	e005      	b.n	8006f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f929 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f938 	bl	800717e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0201 	mvn.w	r2, #1
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f904 	bl	8007148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4a:	2b80      	cmp	r3, #128	; 0x80
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fc0d 	bl	8007786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8fc 	bl	8007190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0220 	mvn.w	r2, #32
 8006fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fbd8 	bl	8007774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e0ac      	b.n	8007140 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b0c      	cmp	r3, #12
 8006ff2:	f200 809f 	bhi.w	8007134 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007031 	.word	0x08007031
 8007000:	08007135 	.word	0x08007135
 8007004:	08007135 	.word	0x08007135
 8007008:	08007135 	.word	0x08007135
 800700c:	08007071 	.word	0x08007071
 8007010:	08007135 	.word	0x08007135
 8007014:	08007135 	.word	0x08007135
 8007018:	08007135 	.word	0x08007135
 800701c:	080070b3 	.word	0x080070b3
 8007020:	08007135 	.word	0x08007135
 8007024:	08007135 	.word	0x08007135
 8007028:	08007135 	.word	0x08007135
 800702c:	080070f3 	.word	0x080070f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f952 	bl	80072e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0208 	orr.w	r2, r2, #8
 800704a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0204 	bic.w	r2, r2, #4
 800705a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6999      	ldr	r1, [r3, #24]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	619a      	str	r2, [r3, #24]
      break;
 800706e:	e062      	b.n	8007136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f9a2 	bl	80073c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6999      	ldr	r1, [r3, #24]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	021a      	lsls	r2, r3, #8
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	619a      	str	r2, [r3, #24]
      break;
 80070b0:	e041      	b.n	8007136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f9f5 	bl	80074a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0208 	orr.w	r2, r2, #8
 80070cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0204 	bic.w	r2, r2, #4
 80070dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69d9      	ldr	r1, [r3, #28]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	61da      	str	r2, [r3, #28]
      break;
 80070f0:	e021      	b.n	8007136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fa49 	bl	8007590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800710c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69d9      	ldr	r1, [r3, #28]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	021a      	lsls	r2, r3, #8
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	61da      	str	r2, [r3, #28]
      break;
 8007132:	e000      	b.n	8007136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr
	...

080071a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a3f      	ldr	r2, [pc, #252]	; (80072b4 <TIM_Base_SetConfig+0x110>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d013      	beq.n	80071e4 <TIM_Base_SetConfig+0x40>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c2:	d00f      	beq.n	80071e4 <TIM_Base_SetConfig+0x40>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a3c      	ldr	r2, [pc, #240]	; (80072b8 <TIM_Base_SetConfig+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_Base_SetConfig+0x40>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a3b      	ldr	r2, [pc, #236]	; (80072bc <TIM_Base_SetConfig+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_Base_SetConfig+0x40>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a3a      	ldr	r2, [pc, #232]	; (80072c0 <TIM_Base_SetConfig+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_Base_SetConfig+0x40>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a39      	ldr	r2, [pc, #228]	; (80072c4 <TIM_Base_SetConfig+0x120>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d108      	bne.n	80071f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2e      	ldr	r2, [pc, #184]	; (80072b4 <TIM_Base_SetConfig+0x110>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d02b      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007204:	d027      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2b      	ldr	r2, [pc, #172]	; (80072b8 <TIM_Base_SetConfig+0x114>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d023      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2a      	ldr	r2, [pc, #168]	; (80072bc <TIM_Base_SetConfig+0x118>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01f      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a29      	ldr	r2, [pc, #164]	; (80072c0 <TIM_Base_SetConfig+0x11c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01b      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a28      	ldr	r2, [pc, #160]	; (80072c4 <TIM_Base_SetConfig+0x120>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d017      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a27      	ldr	r2, [pc, #156]	; (80072c8 <TIM_Base_SetConfig+0x124>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a26      	ldr	r2, [pc, #152]	; (80072cc <TIM_Base_SetConfig+0x128>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00f      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a25      	ldr	r2, [pc, #148]	; (80072d0 <TIM_Base_SetConfig+0x12c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00b      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <TIM_Base_SetConfig+0x130>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d007      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a23      	ldr	r2, [pc, #140]	; (80072d8 <TIM_Base_SetConfig+0x134>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d003      	beq.n	8007256 <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a22      	ldr	r2, [pc, #136]	; (80072dc <TIM_Base_SetConfig+0x138>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d108      	bne.n	8007268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <TIM_Base_SetConfig+0x110>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_Base_SetConfig+0xf8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <TIM_Base_SetConfig+0x120>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d103      	bne.n	80072a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	615a      	str	r2, [r3, #20]
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40000800 	.word	0x40000800
 80072c0:	40000c00 	.word	0x40000c00
 80072c4:	40010400 	.word	0x40010400
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40014400 	.word	0x40014400
 80072d0:	40014800 	.word	0x40014800
 80072d4:	40001800 	.word	0x40001800
 80072d8:	40001c00 	.word	0x40001c00
 80072dc:	40002000 	.word	0x40002000

080072e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f023 0302 	bic.w	r3, r3, #2
 8007328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a20      	ldr	r2, [pc, #128]	; (80073b8 <TIM_OC1_SetConfig+0xd8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC1_SetConfig+0x64>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a1f      	ldr	r2, [pc, #124]	; (80073bc <TIM_OC1_SetConfig+0xdc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d10c      	bne.n	800735e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0308 	bic.w	r3, r3, #8
 800734a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 0304 	bic.w	r3, r3, #4
 800735c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <TIM_OC1_SetConfig+0xd8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d003      	beq.n	800736e <TIM_OC1_SetConfig+0x8e>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a14      	ldr	r2, [pc, #80]	; (80073bc <TIM_OC1_SetConfig+0xdc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d111      	bne.n	8007392 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800737c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	621a      	str	r2, [r3, #32]
}
 80073ac:	bf00      	nop
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40010400 	.word	0x40010400

080073c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f023 0210 	bic.w	r2, r3, #16
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f023 0320 	bic.w	r3, r3, #32
 800740a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <TIM_OC2_SetConfig+0xe0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d003      	beq.n	8007428 <TIM_OC2_SetConfig+0x68>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <TIM_OC2_SetConfig+0xe4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d10d      	bne.n	8007444 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <TIM_OC2_SetConfig+0xe0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_OC2_SetConfig+0x94>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <TIM_OC2_SetConfig+0xe4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d113      	bne.n	800747c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800745a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40010400 	.word	0x40010400

080074a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a21      	ldr	r2, [pc, #132]	; (8007588 <TIM_OC3_SetConfig+0xe0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0x66>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a20      	ldr	r2, [pc, #128]	; (800758c <TIM_OC3_SetConfig+0xe4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10d      	bne.n	800752a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a16      	ldr	r2, [pc, #88]	; (8007588 <TIM_OC3_SetConfig+0xe0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d003      	beq.n	800753a <TIM_OC3_SetConfig+0x92>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <TIM_OC3_SetConfig+0xe4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d113      	bne.n	8007562 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	621a      	str	r2, [r3, #32]
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40010400 	.word	0x40010400

08007590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	031b      	lsls	r3, r3, #12
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a11      	ldr	r2, [pc, #68]	; (8007630 <TIM_OC4_SetConfig+0xa0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_OC4_SetConfig+0x68>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a10      	ldr	r2, [pc, #64]	; (8007634 <TIM_OC4_SetConfig+0xa4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d109      	bne.n	800760c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	019b      	lsls	r3, r3, #6
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400

08007638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2201      	movs	r2, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1a      	ldr	r2, [r3, #32]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	43db      	mvns	r3, r3
 800765a:	401a      	ands	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1a      	ldr	r2, [r3, #32]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	fa01 f303 	lsl.w	r3, r1, r3
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007694:	2302      	movs	r3, #2
 8007696:	e05a      	b.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a20      	ldr	r2, [pc, #128]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e4:	d01d      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1c      	ldr	r2, [pc, #112]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1a      	ldr	r2, [pc, #104]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a19      	ldr	r2, [pc, #100]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a17      	ldr	r2, [pc, #92]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a16      	ldr	r2, [pc, #88]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a14      	ldr	r2, [pc, #80]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d10c      	bne.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr
 8007758:	40010000 	.word	0x40010000
 800775c:	40000400 	.word	0x40000400
 8007760:	40000800 	.word	0x40000800
 8007764:	40000c00 	.word	0x40000c00
 8007768:	40010400 	.word	0x40010400
 800776c:	40014000 	.word	0x40014000
 8007770:	40001800 	.word	0x40001800

08007774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e03f      	b.n	800782a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fa f978 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2224      	movs	r2, #36	; 0x24
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc87 	bl	80080f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b08a      	sub	sp, #40	; 0x28
 8007836:	af02      	add	r7, sp, #8
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b20      	cmp	r3, #32
 8007850:	d17c      	bne.n	800794c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_UART_Transmit+0x2c>
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e075      	b.n	800794e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_UART_Transmit+0x3e>
 800786c:	2302      	movs	r3, #2
 800786e:	e06e      	b.n	800794e <HAL_UART_Transmit+0x11c>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2221      	movs	r2, #33	; 0x21
 8007882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007886:	f7fa fa15 	bl	8001cb4 <HAL_GetTick>
 800788a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	88fa      	ldrh	r2, [r7, #6]
 8007890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	88fa      	ldrh	r2, [r7, #6]
 8007896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a0:	d108      	bne.n	80078b4 <HAL_UART_Transmit+0x82>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	e003      	b.n	80078bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078c4:	e02a      	b.n	800791c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2180      	movs	r1, #128	; 0x80
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fa3a 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e036      	b.n	800794e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	3302      	adds	r3, #2
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	e007      	b.n	800790e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1cf      	bne.n	80078c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	2140      	movs	r1, #64	; 0x40
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fa0a 	bl	8007d4a <UART_WaitOnFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	e000      	b.n	800794e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800794c:	2302      	movs	r3, #2
  }
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b20      	cmp	r3, #32
 800796e:	d11d      	bne.n	80079ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_UART_Receive_IT+0x26>
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e016      	b.n	80079ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007986:	2b01      	cmp	r3, #1
 8007988:	d101      	bne.n	800798e <HAL_UART_Receive_IT+0x38>
 800798a:	2302      	movs	r3, #2
 800798c:	e00f      	b.n	80079ae <HAL_UART_Receive_IT+0x58>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	461a      	mov	r2, r3
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fa1b 	bl	8007dde <UART_Start_Receive_IT>
 80079a8:	4603      	mov	r3, r0
 80079aa:	e000      	b.n	80079ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10d      	bne.n	8007a0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d008      	beq.n	8007a0a <HAL_UART_IRQHandler+0x52>
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 facb 	bl	8007f9e <UART_Receive_IT>
      return;
 8007a08:	e17c      	b.n	8007d04 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80b1 	beq.w	8007b74 <HAL_UART_IRQHandler+0x1bc>
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d105      	bne.n	8007a28 <HAL_UART_IRQHandler+0x70>
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80a6 	beq.w	8007b74 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_UART_IRQHandler+0x90>
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	f043 0201 	orr.w	r2, r3, #1
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_UART_IRQHandler+0xb0>
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	f043 0202 	orr.w	r2, r3, #2
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_UART_IRQHandler+0xd0>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	f043 0204 	orr.w	r2, r3, #4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00f      	beq.n	8007ab2 <HAL_UART_IRQHandler+0xfa>
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_UART_IRQHandler+0xee>
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f043 0208 	orr.w	r2, r3, #8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 811f 	beq.w	8007cfa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x11e>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa64 	bl	8007f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	bf0c      	ite	eq
 8007ae4:	2301      	moveq	r3, #1
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d102      	bne.n	8007afe <HAL_UART_IRQHandler+0x146>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d031      	beq.n	8007b62 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f9a6 	bl	8007e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d123      	bne.n	8007b5a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695a      	ldr	r2, [r3, #20]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d013      	beq.n	8007b52 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	4a77      	ldr	r2, [pc, #476]	; (8007d0c <HAL_UART_IRQHandler+0x354>)
 8007b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fa fbe8 	bl	800230c <HAL_DMA_Abort_IT>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d016      	beq.n	8007b70 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	e00e      	b.n	8007b70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8e5 	bl	8007d22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00a      	b.n	8007b70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8e1 	bl	8007d22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e006      	b.n	8007b70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8dd 	bl	8007d22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b6e:	e0c4      	b.n	8007cfa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	bf00      	nop
    return;
 8007b72:	e0c2      	b.n	8007cfa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f040 80a2 	bne.w	8007cc2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 809c 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8096 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d14f      	bne.n	8007c5a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007bc4:	8a3b      	ldrh	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8099 	beq.w	8007cfe <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bd0:	8a3a      	ldrh	r2, [r7, #16]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	f080 8093 	bcs.w	8007cfe <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8a3a      	ldrh	r2, [r7, #16]
 8007bdc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be8:	d02b      	beq.n	8007c42 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bf8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695a      	ldr	r2, [r3, #20]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0201 	bic.w	r2, r2, #1
 8007c08:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695a      	ldr	r2, [r3, #20]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c18:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0210 	bic.w	r2, r2, #16
 8007c36:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fa faf5 	bl	800222c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f86e 	bl	8007d34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c58:	e051      	b.n	8007cfe <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d047      	beq.n	8007d02 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007c72:	8a7b      	ldrh	r3, [r7, #18]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d044      	beq.n	8007d02 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c86:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0210 	bic.w	r2, r2, #16
 8007cb4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cb6:	8a7b      	ldrh	r3, [r7, #18]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f83a 	bl	8007d34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007cc0:	e01f      	b.n	8007d02 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_UART_IRQHandler+0x326>
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f8fa 	bl	8007ed0 <UART_Transmit_IT>
    return;
 8007cdc:	e012      	b.n	8007d04 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00d      	beq.n	8007d04 <HAL_UART_IRQHandler+0x34c>
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f93b 	bl	8007f6e <UART_EndTransmit_IT>
    return;
 8007cf8:	e004      	b.n	8007d04 <HAL_UART_IRQHandler+0x34c>
    return;
 8007cfa:	bf00      	nop
 8007cfc:	e002      	b.n	8007d04 <HAL_UART_IRQHandler+0x34c>
      return;
 8007cfe:	bf00      	nop
 8007d00:	e000      	b.n	8007d04 <HAL_UART_IRQHandler+0x34c>
      return;
 8007d02:	bf00      	nop
  }
}
 8007d04:	3728      	adds	r7, #40	; 0x28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08007ea9 	.word	0x08007ea9

08007d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr

08007d22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr

08007d34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr

08007d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	603b      	str	r3, [r7, #0]
 8007d56:	4613      	mov	r3, r2
 8007d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5a:	e02c      	b.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d028      	beq.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d007      	beq.n	8007d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6a:	f7f9 ffa3 	bl	8001cb4 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d21d      	bcs.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695a      	ldr	r2, [r3, #20]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0201 	bic.w	r2, r2, #1
 8007d98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e00f      	b.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	bf0c      	ite	eq
 8007dc6:	2301      	moveq	r3, #1
 8007dc8:	2300      	movne	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d0c3      	beq.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	4613      	mov	r3, r2
 8007dea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	88fa      	ldrh	r2, [r7, #6]
 8007dfc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2222      	movs	r2, #34	; 0x22
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e22:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0201 	orr.w	r2, r2, #1
 8007e32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0220 	orr.w	r2, r2, #32
 8007e42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695a      	ldr	r2, [r3, #20]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0201 	bic.w	r2, r2, #1
 8007e76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d107      	bne.n	8007e90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0210 	bic.w	r2, r2, #16
 8007e8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr

08007ea8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff ff2d 	bl	8007d22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b21      	cmp	r3, #33	; 0x21
 8007ee2:	d13e      	bne.n	8007f62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eec:	d114      	bne.n	8007f18 <UART_Transmit_IT+0x48>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d110      	bne.n	8007f18 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	1c9a      	adds	r2, r3, #2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	621a      	str	r2, [r3, #32]
 8007f16:	e008      	b.n	8007f2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	1c59      	adds	r1, r3, #1
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6211      	str	r1, [r2, #32]
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4619      	mov	r1, r3
 8007f38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10f      	bne.n	8007f5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e000      	b.n	8007f64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f62:	2302      	movs	r3, #2
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff febe 	bl	8007d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b22      	cmp	r3, #34	; 0x22
 8007fb0:	f040 8099 	bne.w	80080e6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fbc:	d117      	bne.n	8007fee <UART_Receive_IT+0x50>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d113      	bne.n	8007fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	1c9a      	adds	r2, r3, #2
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
 8007fec:	e026      	b.n	800803c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008000:	d007      	beq.n	8008012 <UART_Receive_IT+0x74>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10a      	bne.n	8008020 <UART_Receive_IT+0x82>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e008      	b.n	8008032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802c:	b2da      	uxtb	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29b      	uxth	r3, r3
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4619      	mov	r1, r3
 800804a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800804c:	2b00      	cmp	r3, #0
 800804e:	d148      	bne.n	80080e2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0220 	bic.w	r2, r2, #32
 800805e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800806e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0201 	bic.w	r2, r2, #1
 800807e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	2b01      	cmp	r3, #1
 800808e:	d123      	bne.n	80080d8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0210 	bic.w	r2, r2, #16
 80080a4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d10a      	bne.n	80080ca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fe2f 	bl	8007d34 <HAL_UARTEx_RxEventCallback>
 80080d6:	e002      	b.n	80080de <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7f8 fcb5 	bl	8000a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e002      	b.n	80080e8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	4313      	orrs	r3, r2
 8008124:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008130:	f023 030c 	bic.w	r3, r3, #12
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	430b      	orrs	r3, r1
 800813c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	699a      	ldr	r2, [r3, #24]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a57      	ldr	r2, [pc, #348]	; (80082b8 <UART_SetConfig+0x1c8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d004      	beq.n	8008168 <UART_SetConfig+0x78>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a56      	ldr	r2, [pc, #344]	; (80082bc <UART_SetConfig+0x1cc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d103      	bne.n	8008170 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008168:	f7fc fd52 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	e002      	b.n	8008176 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008170:	f7fc fd2c 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8008174:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817e:	d14c      	bne.n	800821a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009a      	lsls	r2, r3, #2
 800818a:	441a      	add	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	fbb2 f3f3 	udiv	r3, r2, r3
 8008196:	4a4a      	ldr	r2, [pc, #296]	; (80082c0 <UART_SetConfig+0x1d0>)
 8008198:	fba2 2303 	umull	r2, r3, r2, r3
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	0119      	lsls	r1, r3, #4
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009a      	lsls	r2, r3, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80081b6:	4b42      	ldr	r3, [pc, #264]	; (80082c0 <UART_SetConfig+0x1d0>)
 80081b8:	fba3 0302 	umull	r0, r3, r3, r2
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	2064      	movs	r0, #100	; 0x64
 80081c0:	fb00 f303 	mul.w	r3, r0, r3
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	3332      	adds	r3, #50	; 0x32
 80081ca:	4a3d      	ldr	r2, [pc, #244]	; (80082c0 <UART_SetConfig+0x1d0>)
 80081cc:	fba2 2303 	umull	r2, r3, r2, r3
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081d8:	4419      	add	r1, r3
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009a      	lsls	r2, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f0:	4b33      	ldr	r3, [pc, #204]	; (80082c0 <UART_SetConfig+0x1d0>)
 80081f2:	fba3 0302 	umull	r0, r3, r3, r2
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	2064      	movs	r0, #100	; 0x64
 80081fa:	fb00 f303 	mul.w	r3, r0, r3
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	3332      	adds	r3, #50	; 0x32
 8008204:	4a2e      	ldr	r2, [pc, #184]	; (80082c0 <UART_SetConfig+0x1d0>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	f003 0207 	and.w	r2, r3, #7
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	440a      	add	r2, r1
 8008216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008218:	e04a      	b.n	80082b0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009a      	lsls	r2, r3, #2
 8008224:	441a      	add	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	4a23      	ldr	r2, [pc, #140]	; (80082c0 <UART_SetConfig+0x1d0>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	0119      	lsls	r1, r3, #4
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009a      	lsls	r2, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008250:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <UART_SetConfig+0x1d0>)
 8008252:	fba3 0302 	umull	r0, r3, r3, r2
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	2064      	movs	r0, #100	; 0x64
 800825a:	fb00 f303 	mul.w	r3, r0, r3
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	3332      	adds	r3, #50	; 0x32
 8008264:	4a16      	ldr	r2, [pc, #88]	; (80082c0 <UART_SetConfig+0x1d0>)
 8008266:	fba2 2303 	umull	r2, r3, r2, r3
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008270:	4419      	add	r1, r3
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009a      	lsls	r2, r3, #2
 800827c:	441a      	add	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	fbb2 f2f3 	udiv	r2, r2, r3
 8008288:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <UART_SetConfig+0x1d0>)
 800828a:	fba3 0302 	umull	r0, r3, r3, r2
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	2064      	movs	r0, #100	; 0x64
 8008292:	fb00 f303 	mul.w	r3, r0, r3
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	3332      	adds	r3, #50	; 0x32
 800829c:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <UART_SetConfig+0x1d0>)
 800829e:	fba2 2303 	umull	r2, r3, r2, r3
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	f003 020f 	and.w	r2, r3, #15
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	440a      	add	r2, r1
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40011000 	.word	0x40011000
 80082bc:	40011400 	.word	0x40011400
 80082c0:	51eb851f 	.word	0x51eb851f

080082c4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80082c4:	b084      	sub	sp, #16
 80082c6:	b480      	push	{r7}
 80082c8:	b085      	sub	sp, #20
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	f107 001c 	add.w	r0, r7, #28
 80082d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80082da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80082dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80082de:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80082e2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80082e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80082ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80082ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80082fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	b004      	add	sp, #16
 8008316:	4770      	bx	lr

08008318 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2203      	movs	r2, #3
 800835c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800835e:	2002      	movs	r0, #2
 8008360:	f7f9 fcb2 	bl	8001cc8 <HAL_Delay>
  
  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0303 	and.w	r3, r3, #3
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80083ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80083b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80083c2:	f023 030f 	bic.w	r3, r3, #15
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	b2db      	uxtb	r3, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3314      	adds	r3, #20
 8008400:	461a      	mov	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	4413      	add	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
}  
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr

08008416 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800843c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008442:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008448:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008460:	2300      	movs	r3, #0

}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr

0800846c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800847a:	2310      	movs	r3, #16
 800847c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800847e:	2340      	movs	r3, #64	; 0x40
 8008480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008482:	2300      	movs	r3, #0
 8008484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800848c:	f107 0308 	add.w	r3, r7, #8
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ff78 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008498:	f241 3288 	movw	r2, #5000	; 0x1388
 800849c:	2110      	movs	r1, #16
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa42 	bl	8008928 <SDMMC_GetCmdResp1>
 80084a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084a6:	69fb      	ldr	r3, [r7, #28]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80084be:	2311      	movs	r3, #17
 80084c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084c2:	2340      	movs	r3, #64	; 0x40
 80084c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff ff56 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80084dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e0:	2111      	movs	r1, #17
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa20 	bl	8008928 <SDMMC_GetCmdResp1>
 80084e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ea:	69fb      	ldr	r3, [r7, #28]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008502:	2312      	movs	r3, #18
 8008504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800850e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008512:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7ff ff34 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008520:	f241 3288 	movw	r2, #5000	; 0x1388
 8008524:	2112      	movs	r1, #18
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f9fe 	bl	8008928 <SDMMC_GetCmdResp1>
 800852c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800852e:	69fb      	ldr	r3, [r7, #28]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008546:	2318      	movs	r3, #24
 8008548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800854a:	2340      	movs	r3, #64	; 0x40
 800854c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800854e:	2300      	movs	r3, #0
 8008550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008556:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008558:	f107 0308 	add.w	r3, r7, #8
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff ff12 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008564:	f241 3288 	movw	r2, #5000	; 0x1388
 8008568:	2118      	movs	r1, #24
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9dc 	bl	8008928 <SDMMC_GetCmdResp1>
 8008570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008572:	69fb      	ldr	r3, [r7, #28]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800858a:	2319      	movs	r3, #25
 800858c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800859a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff fef0 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80085a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ac:	2119      	movs	r1, #25
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9ba 	bl	8008928 <SDMMC_GetCmdResp1>
 80085b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085b6:	69fb      	ldr	r3, [r7, #28]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3720      	adds	r7, #32
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80085cc:	230c      	movs	r3, #12
 80085ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff fecf 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80085ea:	4a05      	ldr	r2, [pc, #20]	; (8008600 <SDMMC_CmdStopTransfer+0x40>)
 80085ec:	210c      	movs	r1, #12
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f99a 	bl	8008928 <SDMMC_GetCmdResp1>
 80085f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085f6:	69fb      	ldr	r3, [r7, #28]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	05f5e100 	.word	0x05f5e100

08008604 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08a      	sub	sp, #40	; 0x28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008614:	2307      	movs	r3, #7
 8008616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008618:	2340      	movs	r3, #64	; 0x40
 800861a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008624:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008626:	f107 0310 	add.w	r3, r7, #16
 800862a:	4619      	mov	r1, r3
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff feab 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008632:	f241 3288 	movw	r2, #5000	; 0x1388
 8008636:	2107      	movs	r1, #7
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f975 	bl	8008928 <SDMMC_GetCmdResp1>
 800863e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008642:	4618      	mov	r0, r3
 8008644:	3728      	adds	r7, #40	; 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff fe8a 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f92d 	bl	80088d4 <SDMMC_GetCmdError>
 800867a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800867c:	69fb      	ldr	r3, [r7, #28]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b088      	sub	sp, #32
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800868e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008694:	2308      	movs	r3, #8
 8008696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008698:	2340      	movs	r3, #64	; 0x40
 800869a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086a6:	f107 0308 	add.w	r3, r7, #8
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff fe6b 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb20 	bl	8008cf8 <SDMMC_GetCmdResp7>
 80086b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ba:	69fb      	ldr	r3, [r7, #28]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80086d2:	2337      	movs	r3, #55	; 0x37
 80086d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086e4:	f107 0308 	add.w	r3, r7, #8
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fe4c 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80086f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f4:	2137      	movs	r1, #55	; 0x37
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f916 	bl	8008928 <SDMMC_GetCmdResp1>
 80086fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086fe:	69fb      	ldr	r3, [r7, #28]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3720      	adds	r7, #32
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800871e:	2329      	movs	r3, #41	; 0x29
 8008720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008722:	2340      	movs	r3, #64	; 0x40
 8008724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800872a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800872e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008730:	f107 0308 	add.w	r3, r7, #8
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fe26 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fa29 	bl	8008b94 <SDMMC_GetCmdResp3>
 8008742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008744:	69fb      	ldr	r3, [r7, #28]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b088      	sub	sp, #32
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800875c:	2306      	movs	r3, #6
 800875e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800876e:	f107 0308 	add.w	r3, r7, #8
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff fe07 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800877a:	f241 3288 	movw	r2, #5000	; 0x1388
 800877e:	2106      	movs	r1, #6
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8d1 	bl	8008928 <SDMMC_GetCmdResp1>
 8008786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008788:	69fb      	ldr	r3, [r7, #28]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b088      	sub	sp, #32
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800879e:	2333      	movs	r3, #51	; 0x33
 80087a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087a6:	2300      	movs	r3, #0
 80087a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087b0:	f107 0308 	add.w	r3, r7, #8
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff fde6 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80087bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c0:	2133      	movs	r1, #51	; 0x33
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8b0 	bl	8008928 <SDMMC_GetCmdResp1>
 80087c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087ca:	69fb      	ldr	r3, [r7, #28]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087e0:	2302      	movs	r3, #2
 80087e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087e4:	23c0      	movs	r3, #192	; 0xc0
 80087e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087f2:	f107 0308 	add.w	r3, r7, #8
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff fdc5 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f980 	bl	8008b04 <SDMMC_GetCmdResp2>
 8008804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008806:	69fb      	ldr	r3, [r7, #28]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800881e:	2309      	movs	r3, #9
 8008820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008822:	23c0      	movs	r3, #192	; 0xc0
 8008824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800882a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800882e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008830:	f107 0308 	add.w	r3, r7, #8
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff fda6 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f961 	bl	8008b04 <SDMMC_GetCmdResp2>
 8008842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008844:	69fb      	ldr	r3, [r7, #28]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b088      	sub	sp, #32
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800885c:	2303      	movs	r3, #3
 800885e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008860:	2340      	movs	r3, #64	; 0x40
 8008862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008864:	2300      	movs	r3, #0
 8008866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff fd87 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	2103      	movs	r1, #3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f9c4 	bl	8008c0c <SDMMC_GetCmdResp6>
 8008884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008886:	69fb      	ldr	r3, [r7, #28]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800889e:	230d      	movs	r3, #13
 80088a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088b0:	f107 0308 	add.w	r3, r7, #8
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fd66 	bl	8008388 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80088bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c0:	210d      	movs	r1, #13
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f830 	bl	8008928 <SDMMC_GetCmdResp1>
 80088c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ca:	69fb      	ldr	r3, [r7, #28]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088dc:	4b10      	ldr	r3, [pc, #64]	; (8008920 <SDMMC_GetCmdError+0x4c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a10      	ldr	r2, [pc, #64]	; (8008924 <SDMMC_GetCmdError+0x50>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	0a5b      	lsrs	r3, r3, #9
 80088e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ec:	fb02 f303 	mul.w	r3, r2, r3
 80088f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1e5a      	subs	r2, r3, #1
 80088f6:	60fa      	str	r2, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008900:	e009      	b.n	8008916 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0f1      	beq.n	80088f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	22c5      	movs	r2, #197	; 0xc5
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr
 8008920:	20000040 	.word	0x20000040
 8008924:	10624dd3 	.word	0x10624dd3

08008928 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	460b      	mov	r3, r1
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008936:	4b70      	ldr	r3, [pc, #448]	; (8008af8 <SDMMC_GetCmdResp1+0x1d0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a70      	ldr	r2, [pc, #448]	; (8008afc <SDMMC_GetCmdResp1+0x1d4>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	0a5a      	lsrs	r2, r3, #9
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	1e5a      	subs	r2, r3, #1
 800894e:	61fa      	str	r2, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008958:	e0c9      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0ef      	beq.n	800894a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1ea      	bne.n	800894a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2204      	movs	r2, #4
 8008984:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008986:	2304      	movs	r3, #4
 8008988:	e0b1      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2201      	movs	r2, #1
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800899c:	2301      	movs	r3, #1
 800899e:	e0a6      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	22c5      	movs	r2, #197	; 0xc5
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff fd17 	bl	80083da <SDIO_GetCommandResponse>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d001      	beq.n	80089ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e099      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80089ba:	2100      	movs	r1, #0
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f7ff fd18 	bl	80083f2 <SDIO_GetResponse>
 80089c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	4b4e      	ldr	r3, [pc, #312]	; (8008b00 <SDMMC_GetCmdResp1+0x1d8>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e08d      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da02      	bge.n	80089de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80089d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089dc:	e087      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80089e8:	2340      	movs	r3, #64	; 0x40
 80089ea:	e080      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80089f6:	2380      	movs	r3, #128	; 0x80
 80089f8:	e079      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a08:	e071      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a18:	e069      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a28:	e061      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a38:	e059      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a48:	e051      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a58:	e049      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a68:	e041      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a78:	e039      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a88:	e031      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a98:	e029      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008aa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008aa8:	e021      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008ab4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ab8:	e019      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d002      	beq.n	8008aca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008ac4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ac8:	e011      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008ad4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ad8:	e009      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008ae4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ae8:	e001      	b.n	8008aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000040 	.word	0x20000040
 8008afc:	10624dd3 	.word	0x10624dd3
 8008b00:	fdffe008 	.word	0xfdffe008

08008b04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b0c:	4b1f      	ldr	r3, [pc, #124]	; (8008b8c <SDMMC_GetCmdResp2+0x88>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1f      	ldr	r2, [pc, #124]	; (8008b90 <SDMMC_GetCmdResp2+0x8c>)
 8008b12:	fba2 2303 	umull	r2, r3, r2, r3
 8008b16:	0a5b      	lsrs	r3, r3, #9
 8008b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1c:	fb02 f303 	mul.w	r3, r2, r3
 8008b20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1e5a      	subs	r2, r3, #1
 8008b26:	60fa      	str	r2, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b30:	e026      	b.n	8008b80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0ef      	beq.n	8008b22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ea      	bne.n	8008b22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b5e:	2304      	movs	r3, #4
 8008b60:	e00e      	b.n	8008b80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e003      	b.n	8008b80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	22c5      	movs	r2, #197	; 0xc5
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000040 	.word	0x20000040
 8008b90:	10624dd3 	.word	0x10624dd3

08008b94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b9c:	4b19      	ldr	r3, [pc, #100]	; (8008c04 <SDMMC_GetCmdResp3+0x70>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a19      	ldr	r2, [pc, #100]	; (8008c08 <SDMMC_GetCmdResp3+0x74>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	0a5b      	lsrs	r3, r3, #9
 8008ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
 8008bb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1e5a      	subs	r2, r3, #1
 8008bb6:	60fa      	str	r2, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bc0:	e01b      	b.n	8008bfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0ef      	beq.n	8008bb2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1ea      	bne.n	8008bb2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2204      	movs	r2, #4
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bee:	2304      	movs	r3, #4
 8008bf0:	e003      	b.n	8008bfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	22c5      	movs	r2, #197	; 0xc5
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bc80      	pop	{r7}
 8008c02:	4770      	bx	lr
 8008c04:	20000040 	.word	0x20000040
 8008c08:	10624dd3 	.word	0x10624dd3

08008c0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	460b      	mov	r3, r1
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c1a:	4b35      	ldr	r3, [pc, #212]	; (8008cf0 <SDMMC_GetCmdResp6+0xe4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a35      	ldr	r2, [pc, #212]	; (8008cf4 <SDMMC_GetCmdResp6+0xe8>)
 8008c20:	fba2 2303 	umull	r2, r3, r2, r3
 8008c24:	0a5b      	lsrs	r3, r3, #9
 8008c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2a:	fb02 f303 	mul.w	r3, r2, r3
 8008c2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	1e5a      	subs	r2, r3, #1
 8008c34:	61fa      	str	r2, [r7, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d102      	bne.n	8008c40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c3e:	e052      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0ef      	beq.n	8008c30 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1ea      	bne.n	8008c30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c6c:	2304      	movs	r3, #4
 8008c6e:	e03a      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e02f      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff fba7 	bl	80083da <SDIO_GetCommandResponse>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d001      	beq.n	8008c9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e025      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22c5      	movs	r2, #197	; 0xc5
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f7ff fba5 	bl	80083f2 <SDIO_GetResponse>
 8008ca8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	0c1b      	lsrs	r3, r3, #16
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e011      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cd0:	e009      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ce0:	e001      	b.n	8008ce6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000040 	.word	0x20000040
 8008cf4:	10624dd3 	.word	0x10624dd3

08008cf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d00:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <SDMMC_GetCmdResp7+0x94>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <SDMMC_GetCmdResp7+0x98>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	0a5b      	lsrs	r3, r3, #9
 8008d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d10:	fb02 f303 	mul.w	r3, r2, r3
 8008d14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	60fa      	str	r2, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d24:	e02c      	b.n	8008d80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0ef      	beq.n	8008d16 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1ea      	bne.n	8008d16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2204      	movs	r2, #4
 8008d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d52:	2304      	movs	r3, #4
 8008d54:	e014      	b.n	8008d80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d004      	beq.n	8008d6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e009      	b.n	8008d80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d7e:	2300      	movs	r3, #0
  
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bc80      	pop	{r7}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20000040 	.word	0x20000040
 8008d90:	10624dd3 	.word	0x10624dd3

08008d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d94:	b084      	sub	sp, #16
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	f107 001c 	add.w	r0, r7, #28
 8008da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d122      	bne.n	8008df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d105      	bne.n	8008de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fafa 	bl	800a3e0 <USB_CoreReset>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]
 8008df0:	e010      	b.n	8008e14 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 faee 	bl	800a3e0 <USB_CoreReset>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d10b      	bne.n	8008e32 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f043 0206 	orr.w	r2, r3, #6
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f043 0220 	orr.w	r2, r3, #32
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e3e:	b004      	add	sp, #16
 8008e40:	4770      	bx	lr
	...

08008e44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d165      	bne.n	8008f24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4a41      	ldr	r2, [pc, #260]	; (8008f60 <USB_SetTurnaroundTime+0x11c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d906      	bls.n	8008e6e <USB_SetTurnaroundTime+0x2a>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4a40      	ldr	r2, [pc, #256]	; (8008f64 <USB_SetTurnaroundTime+0x120>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d202      	bcs.n	8008e6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e68:	230f      	movs	r3, #15
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e062      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	4a3c      	ldr	r2, [pc, #240]	; (8008f64 <USB_SetTurnaroundTime+0x120>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d306      	bcc.n	8008e84 <USB_SetTurnaroundTime+0x40>
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	4a3b      	ldr	r2, [pc, #236]	; (8008f68 <USB_SetTurnaroundTime+0x124>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d202      	bcs.n	8008e84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e7e:	230e      	movs	r3, #14
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	e057      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4a38      	ldr	r2, [pc, #224]	; (8008f68 <USB_SetTurnaroundTime+0x124>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d306      	bcc.n	8008e9a <USB_SetTurnaroundTime+0x56>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4a37      	ldr	r2, [pc, #220]	; (8008f6c <USB_SetTurnaroundTime+0x128>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d202      	bcs.n	8008e9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e94:	230d      	movs	r3, #13
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e04c      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	4a33      	ldr	r2, [pc, #204]	; (8008f6c <USB_SetTurnaroundTime+0x128>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d306      	bcc.n	8008eb0 <USB_SetTurnaroundTime+0x6c>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4a32      	ldr	r2, [pc, #200]	; (8008f70 <USB_SetTurnaroundTime+0x12c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d802      	bhi.n	8008eb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008eaa:	230c      	movs	r3, #12
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	e041      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4a2f      	ldr	r2, [pc, #188]	; (8008f70 <USB_SetTurnaroundTime+0x12c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d906      	bls.n	8008ec6 <USB_SetTurnaroundTime+0x82>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4a2e      	ldr	r2, [pc, #184]	; (8008f74 <USB_SetTurnaroundTime+0x130>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d802      	bhi.n	8008ec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ec0:	230b      	movs	r3, #11
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	e036      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <USB_SetTurnaroundTime+0x130>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d906      	bls.n	8008edc <USB_SetTurnaroundTime+0x98>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4a29      	ldr	r2, [pc, #164]	; (8008f78 <USB_SetTurnaroundTime+0x134>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d802      	bhi.n	8008edc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ed6:	230a      	movs	r3, #10
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e02b      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4a26      	ldr	r2, [pc, #152]	; (8008f78 <USB_SetTurnaroundTime+0x134>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d906      	bls.n	8008ef2 <USB_SetTurnaroundTime+0xae>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4a25      	ldr	r2, [pc, #148]	; (8008f7c <USB_SetTurnaroundTime+0x138>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d202      	bcs.n	8008ef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008eec:	2309      	movs	r3, #9
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e020      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	4a21      	ldr	r2, [pc, #132]	; (8008f7c <USB_SetTurnaroundTime+0x138>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d306      	bcc.n	8008f08 <USB_SetTurnaroundTime+0xc4>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4a20      	ldr	r2, [pc, #128]	; (8008f80 <USB_SetTurnaroundTime+0x13c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d802      	bhi.n	8008f08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f02:	2308      	movs	r3, #8
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e015      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	4a1d      	ldr	r2, [pc, #116]	; (8008f80 <USB_SetTurnaroundTime+0x13c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d906      	bls.n	8008f1e <USB_SetTurnaroundTime+0xda>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <USB_SetTurnaroundTime+0x140>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d202      	bcs.n	8008f1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f18:	2307      	movs	r3, #7
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	e00a      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f1e:	2306      	movs	r3, #6
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	e007      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d102      	bne.n	8008f30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e001      	b.n	8008f34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f30:	2309      	movs	r3, #9
 8008f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	029b      	lsls	r3, r3, #10
 8008f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	00d8acbf 	.word	0x00d8acbf
 8008f64:	00e4e1c0 	.word	0x00e4e1c0
 8008f68:	00f42400 	.word	0x00f42400
 8008f6c:	01067380 	.word	0x01067380
 8008f70:	011a499f 	.word	0x011a499f
 8008f74:	01312cff 	.word	0x01312cff
 8008f78:	014ca43f 	.word	0x014ca43f
 8008f7c:	016e3600 	.word	0x016e3600
 8008f80:	01a6ab1f 	.word	0x01a6ab1f
 8008f84:	01e84800 	.word	0x01e84800

08008f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f043 0201 	orr.w	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f023 0201 	bic.w	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr

08008fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d115      	bne.n	8009016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f7f8 fe66 	bl	8001cc8 <HAL_Delay>
      ms++;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3301      	adds	r3, #1
 8009000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f961 	bl	800a2ca <USB_GetMode>
 8009008:	4603      	mov	r3, r0
 800900a:	2b01      	cmp	r3, #1
 800900c:	d01e      	beq.n	800904c <USB_SetCurrentMode+0x84>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b31      	cmp	r3, #49	; 0x31
 8009012:	d9f0      	bls.n	8008ff6 <USB_SetCurrentMode+0x2e>
 8009014:	e01a      	b.n	800904c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d115      	bne.n	8009048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009028:	2001      	movs	r0, #1
 800902a:	f7f8 fe4d 	bl	8001cc8 <HAL_Delay>
      ms++;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3301      	adds	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 f948 	bl	800a2ca <USB_GetMode>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d005      	beq.n	800904c <USB_SetCurrentMode+0x84>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b31      	cmp	r3, #49	; 0x31
 8009044:	d9f0      	bls.n	8009028 <USB_SetCurrentMode+0x60>
 8009046:	e001      	b.n	800904c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e005      	b.n	8009058 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b32      	cmp	r3, #50	; 0x32
 8009050:	d101      	bne.n	8009056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009060:	b084      	sub	sp, #16
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800906e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	e009      	b.n	8009094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3340      	adds	r3, #64	; 0x40
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	2200      	movs	r2, #0
 800908c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3301      	adds	r3, #1
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b0e      	cmp	r3, #14
 8009098:	d9f2      	bls.n	8009080 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800909a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d11c      	bne.n	80090da <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ae:	f043 0302 	orr.w	r3, r3, #2
 80090b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38
 80090d8:	e00b      	b.n	80090f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090f8:	461a      	mov	r2, r3
 80090fa:	2300      	movs	r3, #0
 80090fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009104:	4619      	mov	r1, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910c:	461a      	mov	r2, r3
 800910e:	680b      	ldr	r3, [r1, #0]
 8009110:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	2b01      	cmp	r3, #1
 8009116:	d10c      	bne.n	8009132 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d104      	bne.n	8009128 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800911e:	2100      	movs	r1, #0
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f945 	bl	80093b0 <USB_SetDevSpeed>
 8009126:	e008      	b.n	800913a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009128:	2101      	movs	r1, #1
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f940 	bl	80093b0 <USB_SetDevSpeed>
 8009130:	e003      	b.n	800913a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009132:	2103      	movs	r1, #3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f93b 	bl	80093b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800913a:	2110      	movs	r1, #16
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f8f3 	bl	8009328 <USB_FlushTxFifo>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f90f 	bl	8009370 <USB_FlushRxFifo>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	461a      	mov	r2, r3
 8009164:	2300      	movs	r3, #0
 8009166:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916e:	461a      	mov	r2, r3
 8009170:	2300      	movs	r3, #0
 8009172:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	461a      	mov	r2, r3
 800917c:	2300      	movs	r3, #0
 800917e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009180:	2300      	movs	r3, #0
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	e043      	b.n	800920e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800919c:	d118      	bne.n	80091d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	461a      	mov	r2, r3
 80091b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e013      	b.n	80091e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c6:	461a      	mov	r2, r3
 80091c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e008      	b.n	80091e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	461a      	mov	r2, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	461a      	mov	r2, r3
 80091f0:	2300      	movs	r3, #0
 80091f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009200:	461a      	mov	r2, r3
 8009202:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	3301      	adds	r3, #1
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	429a      	cmp	r2, r3
 8009214:	d3b7      	bcc.n	8009186 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009216:	2300      	movs	r3, #0
 8009218:	613b      	str	r3, [r7, #16]
 800921a:	e043      	b.n	80092a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800922e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009232:	d118      	bne.n	8009266 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10a      	bne.n	8009250 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009246:	461a      	mov	r2, r3
 8009248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	e013      	b.n	8009278 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	461a      	mov	r2, r3
 800925e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009262:	6013      	str	r3, [r2, #0]
 8009264:	e008      	b.n	8009278 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009272:	461a      	mov	r2, r3
 8009274:	2300      	movs	r3, #0
 8009276:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009284:	461a      	mov	r2, r3
 8009286:	2300      	movs	r3, #0
 8009288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	461a      	mov	r2, r3
 8009298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800929c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3301      	adds	r3, #1
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d3b7      	bcc.n	800921c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80092cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d105      	bne.n	80092e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f043 0210 	orr.w	r2, r3, #16
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <USB_DevInit+0x2c4>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f043 0208 	orr.w	r2, r3, #8
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d107      	bne.n	8009314 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800930c:	f043 0304 	orr.w	r3, r3, #4
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009320:	b004      	add	sp, #16
 8009322:	4770      	bx	lr
 8009324:	803c3800 	.word	0x803c3800

08009328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	019b      	lsls	r3, r3, #6
 800933a:	f043 0220 	orr.w	r2, r3, #32
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4a08      	ldr	r2, [pc, #32]	; (800936c <USB_FlushTxFifo+0x44>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d901      	bls.n	8009354 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e006      	b.n	8009362 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b20      	cmp	r3, #32
 800935e:	d0f0      	beq.n	8009342 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	00030d40 	.word	0x00030d40

08009370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2210      	movs	r2, #16
 8009380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3301      	adds	r3, #1
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a08      	ldr	r2, [pc, #32]	; (80093ac <USB_FlushRxFifo+0x3c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d901      	bls.n	8009394 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e006      	b.n	80093a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b10      	cmp	r3, #16
 800939e:	d0f0      	beq.n	8009382 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr
 80093ac:	00030d40 	.word	0x00030d40

080093b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093d0:	4313      	orrs	r3, r2
 80093d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f003 0306 	and.w	r3, r3, #6
 80093f8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009400:	2300      	movs	r3, #0
 8009402:	75fb      	strb	r3, [r7, #23]
 8009404:	e00a      	b.n	800941c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d002      	beq.n	8009412 <USB_GetDevSpeed+0x32>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b06      	cmp	r3, #6
 8009410:	d102      	bne.n	8009418 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009412:	2302      	movs	r3, #2
 8009414:	75fb      	strb	r3, [r7, #23]
 8009416:	e001      	b.n	800941c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009418:	230f      	movs	r3, #15
 800941a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
}
 800941e:	4618      	mov	r0, r3
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr

08009428 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d13a      	bne.n	80094ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	69da      	ldr	r2, [r3, #28]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	2101      	movs	r1, #1
 8009456:	fa01 f303 	lsl.w	r3, r1, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	68f9      	ldr	r1, [r7, #12]
 800945e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009462:	4313      	orrs	r3, r2
 8009464:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d155      	bne.n	8009528 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	78db      	ldrb	r3, [r3, #3]
 8009496:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009498:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	059b      	lsls	r3, r3, #22
 800949e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094a0:	4313      	orrs	r3, r2
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	e036      	b.n	8009528 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c0:	69da      	ldr	r2, [r3, #28]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	2101      	movs	r1, #1
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094d8:	4313      	orrs	r3, r2
 80094da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d11a      	bne.n	8009528 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	78db      	ldrb	r3, [r3, #3]
 800950c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800950e:	430b      	orrs	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009526:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d161      	bne.n	8009614 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009566:	d11f      	bne.n	80095a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	0151      	lsls	r1, r2, #5
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	440a      	add	r2, r1
 800957e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009586:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	440a      	add	r2, r1
 800959e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	2101      	movs	r1, #1
 80095ba:	fa01 f303 	lsl.w	r3, r1, r3
 80095be:	b29b      	uxth	r3, r3
 80095c0:	43db      	mvns	r3, r3
 80095c2:	68f9      	ldr	r1, [r7, #12]
 80095c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095c8:	4013      	ands	r3, r2
 80095ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d2:	69da      	ldr	r2, [r3, #28]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	2101      	movs	r1, #1
 80095de:	fa01 f303 	lsl.w	r3, r1, r3
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	43db      	mvns	r3, r3
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095ec:	4013      	ands	r3, r2
 80095ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	0159      	lsls	r1, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	440b      	add	r3, r1
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	4619      	mov	r1, r3
 800960c:	4b35      	ldr	r3, [pc, #212]	; (80096e4 <USB_DeactivateEndpoint+0x1b0>)
 800960e:	4013      	ands	r3, r2
 8009610:	600b      	str	r3, [r1, #0]
 8009612:	e060      	b.n	80096d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800962a:	d11f      	bne.n	800966c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	0151      	lsls	r1, r2, #5
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	440a      	add	r2, r1
 8009642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009646:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800964a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800966a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	2101      	movs	r1, #1
 800967e:	fa01 f303 	lsl.w	r3, r1, r3
 8009682:	041b      	lsls	r3, r3, #16
 8009684:	43db      	mvns	r3, r3
 8009686:	68f9      	ldr	r1, [r7, #12]
 8009688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800968c:	4013      	ands	r3, r2
 800968e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	2101      	movs	r1, #1
 80096a2:	fa01 f303 	lsl.w	r3, r1, r3
 80096a6:	041b      	lsls	r3, r3, #16
 80096a8:	43db      	mvns	r3, r3
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096b0:	4013      	ands	r3, r2
 80096b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	0159      	lsls	r1, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	440b      	add	r3, r1
 80096ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ce:	4619      	mov	r1, r3
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <USB_DeactivateEndpoint+0x1b4>)
 80096d2:	4013      	ands	r3, r2
 80096d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	ec337800 	.word	0xec337800
 80096e8:	eff37800 	.word	0xeff37800

080096ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08a      	sub	sp, #40	; 0x28
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2b01      	cmp	r3, #1
 800970a:	f040 815c 	bne.w	80099c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d132      	bne.n	800977c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009730:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009734:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	69fa      	ldr	r2, [r7, #28]
 800976e:	440a      	add	r2, r1
 8009770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009774:	0cdb      	lsrs	r3, r3, #19
 8009776:	04db      	lsls	r3, r3, #19
 8009778:	6113      	str	r3, [r2, #16]
 800977a:	e074      	b.n	8009866 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009796:	0cdb      	lsrs	r3, r3, #19
 8009798:	04db      	lsls	r3, r3, #19
 800979a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6959      	ldr	r1, [r3, #20]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	440b      	add	r3, r1
 80097d8:	1e59      	subs	r1, r3, #1
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	fbb1 f3f3 	udiv	r3, r1, r3
 80097e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80097e4:	4b9d      	ldr	r3, [pc, #628]	; (8009a5c <USB_EPStartXfer+0x370>)
 80097e6:	400b      	ands	r3, r1
 80097e8:	69b9      	ldr	r1, [r7, #24]
 80097ea:	0148      	lsls	r0, r1, #5
 80097ec:	69f9      	ldr	r1, [r7, #28]
 80097ee:	4401      	add	r1, r0
 80097f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097f4:	4313      	orrs	r3, r2
 80097f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009804:	691a      	ldr	r2, [r3, #16]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800980e:	69b9      	ldr	r1, [r7, #24]
 8009810:	0148      	lsls	r0, r1, #5
 8009812:	69f9      	ldr	r1, [r7, #28]
 8009814:	4401      	add	r1, r0
 8009816:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800981a:	4313      	orrs	r3, r2
 800981c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	78db      	ldrb	r3, [r3, #3]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d11f      	bne.n	8009866 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009840:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009844:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	0151      	lsls	r1, r2, #5
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	440a      	add	r2, r1
 800985c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009864:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d14b      	bne.n	8009904 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	461a      	mov	r2, r3
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	78db      	ldrb	r3, [r3, #3]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d128      	bne.n	80098e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989c:	2b00      	cmp	r3, #0
 800989e:	d110      	bne.n	80098c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	e00f      	b.n	80098e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	e12f      	b.n	8009b64 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	0151      	lsls	r1, r2, #5
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	440a      	add	r2, r1
 800991a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800991e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009922:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	78db      	ldrb	r3, [r3, #3]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d015      	beq.n	8009958 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 8117 	beq.w	8009b64 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	2101      	movs	r1, #1
 8009948:	fa01 f303 	lsl.w	r3, r1, r3
 800994c:	69f9      	ldr	r1, [r7, #28]
 800994e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009952:	4313      	orrs	r3, r2
 8009954:	634b      	str	r3, [r1, #52]	; 0x34
 8009956:	e105      	b.n	8009b64 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009964:	2b00      	cmp	r3, #0
 8009966:	d110      	bne.n	800998a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69ba      	ldr	r2, [r7, #24]
 8009978:	0151      	lsls	r1, r2, #5
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	440a      	add	r2, r1
 800997e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	e00f      	b.n	80099aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	68d9      	ldr	r1, [r3, #12]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	b298      	uxth	r0, r3
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	4603      	mov	r3, r0
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 fa2a 	bl	8009e18 <USB_WritePacket>
 80099c4:	e0ce      	b.n	8009b64 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e0:	0cdb      	lsrs	r3, r3, #19
 80099e2:	04db      	lsls	r3, r3, #19
 80099e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d126      	bne.n	8009a60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a28:	69b9      	ldr	r1, [r7, #24]
 8009a2a:	0148      	lsls	r0, r1, #5
 8009a2c:	69f9      	ldr	r1, [r7, #28]
 8009a2e:	4401      	add	r1, r0
 8009a30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a34:	4313      	orrs	r3, r2
 8009a36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	0151      	lsls	r1, r2, #5
 8009a4a:	69fa      	ldr	r2, [r7, #28]
 8009a4c:	440a      	add	r2, r1
 8009a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a56:	6113      	str	r3, [r2, #16]
 8009a58:	e036      	b.n	8009ac8 <USB_EPStartXfer+0x3dc>
 8009a5a:	bf00      	nop
 8009a5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	695a      	ldr	r2, [r3, #20]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	4413      	add	r3, r2
 8009a6a:	1e5a      	subs	r2, r3, #1
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a74:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	8afb      	ldrh	r3, [r7, #22]
 8009a86:	04d9      	lsls	r1, r3, #19
 8009a88:	4b39      	ldr	r3, [pc, #228]	; (8009b70 <USB_EPStartXfer+0x484>)
 8009a8a:	400b      	ands	r3, r1
 8009a8c:	69b9      	ldr	r1, [r7, #24]
 8009a8e:	0148      	lsls	r0, r1, #5
 8009a90:	69f9      	ldr	r1, [r7, #28]
 8009a92:	4401      	add	r1, r0
 8009a94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	8af9      	ldrh	r1, [r7, #22]
 8009ab0:	fb01 f303 	mul.w	r3, r1, r3
 8009ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab8:	69b9      	ldr	r1, [r7, #24]
 8009aba:	0148      	lsls	r0, r1, #5
 8009abc:	69f9      	ldr	r1, [r7, #28]
 8009abe:	4401      	add	r1, r0
 8009ac0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d10d      	bne.n	8009aea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d009      	beq.n	8009aea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	68d9      	ldr	r1, [r3, #12]
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae6:	460a      	mov	r2, r1
 8009ae8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	78db      	ldrb	r3, [r3, #3]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d128      	bne.n	8009b44 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d110      	bne.n	8009b24 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	e00f      	b.n	8009b44 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	0151      	lsls	r1, r2, #5
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	440a      	add	r2, r1
 8009b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	1ff80000 	.word	0x1ff80000

08009b74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	f040 80cd 	bne.w	8009d30 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d132      	bne.n	8009c04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	0151      	lsls	r1, r2, #5
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	440a      	add	r2, r1
 8009bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bfc:	0cdb      	lsrs	r3, r3, #19
 8009bfe:	04db      	lsls	r3, r3, #19
 8009c00:	6113      	str	r3, [r2, #16]
 8009c02:	e04e      	b.n	8009ca2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	0151      	lsls	r1, r2, #5
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	440a      	add	r2, r1
 8009c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1e:	0cdb      	lsrs	r3, r3, #19
 8009c20:	04db      	lsls	r3, r3, #19
 8009c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	695a      	ldr	r2, [r3, #20]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	0151      	lsls	r1, r2, #5
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	440a      	add	r2, r1
 8009c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	691a      	ldr	r2, [r3, #16]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c92:	6939      	ldr	r1, [r7, #16]
 8009c94:	0148      	lsls	r0, r1, #5
 8009c96:	6979      	ldr	r1, [r7, #20]
 8009c98:	4401      	add	r1, r0
 8009c9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d11e      	bne.n	8009ce6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d009      	beq.n	8009cc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	e092      	b.n	8009e0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d07e      	beq.n	8009e0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	f003 030f 	and.w	r3, r3, #15
 8009d1e:	2101      	movs	r1, #1
 8009d20:	fa01 f303 	lsl.w	r3, r1, r3
 8009d24:	6979      	ldr	r1, [r7, #20]
 8009d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	634b      	str	r3, [r1, #52]	; 0x34
 8009d2e:	e06d      	b.n	8009e0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4a:	0cdb      	lsrs	r3, r3, #19
 8009d4c:	04db      	lsls	r3, r3, #19
 8009d4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	0151      	lsls	r1, r2, #5
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	440a      	add	r2, r1
 8009d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d72:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	689a      	ldr	r2, [r3, #8]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	0151      	lsls	r1, r2, #5
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	440a      	add	r2, r1
 8009d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009da2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db0:	691a      	ldr	r2, [r3, #16]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dba:	6939      	ldr	r1, [r7, #16]
 8009dbc:	0148      	lsls	r0, r1, #5
 8009dbe:	6979      	ldr	r1, [r7, #20]
 8009dc0:	4401      	add	r1, r0
 8009dc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d10d      	bne.n	8009dec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d009      	beq.n	8009dec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	68d9      	ldr	r1, [r3, #12]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	460a      	mov	r2, r1
 8009dea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr

08009e18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b089      	sub	sp, #36	; 0x24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	4611      	mov	r1, r2
 8009e24:	461a      	mov	r2, r3
 8009e26:	460b      	mov	r3, r1
 8009e28:	71fb      	strb	r3, [r7, #7]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d123      	bne.n	8009e86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e3e:	88bb      	ldrh	r3, [r7, #4]
 8009e40:	3303      	adds	r3, #3
 8009e42:	089b      	lsrs	r3, r3, #2
 8009e44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e46:	2300      	movs	r3, #0
 8009e48:	61bb      	str	r3, [r7, #24]
 8009e4a:	e018      	b.n	8009e7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	031a      	lsls	r2, r3, #12
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	461a      	mov	r2, r3
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	3301      	adds	r3, #1
 8009e64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	3301      	adds	r3, #1
 8009e76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d3e2      	bcc.n	8009e4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3724      	adds	r7, #36	; 0x24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr

08009e92 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b08b      	sub	sp, #44	; 0x2c
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ea8:	88fb      	ldrh	r3, [r7, #6]
 8009eaa:	089b      	lsrs	r3, r3, #2
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009eb0:	88fb      	ldrh	r3, [r7, #6]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	623b      	str	r3, [r7, #32]
 8009ebc:	e014      	b.n	8009ee8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	601a      	str	r2, [r3, #0]
    pDest++;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	3301      	adds	r3, #1
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	3301      	adds	r3, #1
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	3301      	adds	r3, #1
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	623b      	str	r3, [r7, #32]
 8009ee8:	6a3a      	ldr	r2, [r7, #32]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d3e6      	bcc.n	8009ebe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009ef0:	8bfb      	ldrh	r3, [r7, #30]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d01e      	beq.n	8009f34 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f00:	461a      	mov	r2, r3
 8009f02:	f107 0310 	add.w	r3, r7, #16
 8009f06:	6812      	ldr	r2, [r2, #0]
 8009f08:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	fa22 f303 	lsr.w	r3, r2, r3
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	701a      	strb	r2, [r3, #0]
      i++;
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	3301      	adds	r3, #1
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009f28:	8bfb      	ldrh	r3, [r7, #30]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f2e:	8bfb      	ldrh	r3, [r7, #30]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1ea      	bne.n	8009f0a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	372c      	adds	r7, #44	; 0x2c
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bc80      	pop	{r7}
 8009f3e:	4770      	bx	lr

08009f40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d12c      	bne.n	8009fb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	db12      	blt.n	8009f94 <USB_EPSetStall+0x54>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00f      	beq.n	8009f94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	0151      	lsls	r1, r2, #5
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	440a      	add	r2, r1
 8009f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	e02b      	b.n	800a00e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	db12      	blt.n	8009fee <USB_EPSetStall+0xae>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00f      	beq.n	8009fee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a00c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	bc80      	pop	{r7}
 800a018:	4770      	bx	lr

0800a01a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d128      	bne.n	800a088 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	0151      	lsls	r1, r2, #5
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	440a      	add	r2, r1
 800a04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a054:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	78db      	ldrb	r3, [r3, #3]
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d003      	beq.n	800a066 <USB_EPClearStall+0x4c>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	78db      	ldrb	r3, [r3, #3]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d138      	bne.n	800a0d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	e027      	b.n	800a0d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	78db      	ldrb	r3, [r3, #3]
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d003      	beq.n	800a0b8 <USB_EPClearStall+0x9e>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	78db      	ldrb	r3, [r3, #3]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d10f      	bne.n	800a0d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr

0800a0e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a102:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a106:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a11e:	4313      	orrs	r3, r2
 800a120:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	bc80      	pop	{r7}
 800a12c:	4770      	bx	lr

0800a12e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a15c:	f023 0302 	bic.w	r3, r3, #2
 800a160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr

0800a16e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a16e:	b480      	push	{r7}
 800a170:	b085      	sub	sp, #20
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a188:	f023 0303 	bic.w	r3, r3, #3
 800a18c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a19c:	f043 0302 	orr.w	r3, r3, #2
 800a1a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bc80      	pop	{r7}
 800a1ac:	4770      	bx	lr

0800a1ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr

0800a1d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	0c1b      	lsrs	r3, r3, #16
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr

0800a204 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	4013      	ands	r3, r2
 800a226:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	b29b      	uxth	r3, r3
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	bc80      	pop	{r7}
 800a234:	4770      	bx	lr

0800a236 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a236:	b480      	push	{r7}
 800a238:	b085      	sub	sp, #20
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	4013      	ands	r3, r2
 800a262:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a264:	68bb      	ldr	r3, [r7, #8]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a0:	01db      	lsls	r3, r3, #7
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2be:	68bb      	ldr	r3, [r7, #8]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr

0800a2ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	f003 0301 	and.w	r3, r3, #1
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a302:	f023 0307 	bic.w	r3, r3, #7
 800a306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a31a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	bc80      	pop	{r7}
 800a326:	4770      	bx	lr

0800a328 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	460b      	mov	r3, r1
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	333c      	adds	r3, #60	; 0x3c
 800a33e:	3304      	adds	r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4a25      	ldr	r2, [pc, #148]	; (800a3dc <USB_EP0_OutStart+0xb4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d90a      	bls.n	800a362 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a35c:	d101      	bne.n	800a362 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	e037      	b.n	800a3d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a368:	461a      	mov	r2, r3
 800a36a:	2300      	movs	r3, #0
 800a36c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a37c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a390:	f043 0318 	orr.w	r3, r3, #24
 800a394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d10f      	bne.n	800a3d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr
 800a3dc:	4f54300a 	.word	0x4f54300a

0800a3e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4a12      	ldr	r2, [pc, #72]	; (800a440 <USB_CoreReset+0x60>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d901      	bls.n	800a3fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e01b      	b.n	800a436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	daf2      	bge.n	800a3ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	f043 0201 	orr.w	r2, r3, #1
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3301      	adds	r3, #1
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a08      	ldr	r2, [pc, #32]	; (800a440 <USB_CoreReset+0x60>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d901      	bls.n	800a428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e006      	b.n	800a436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b01      	cmp	r3, #1
 800a432:	d0f0      	beq.n	800a416 <USB_CoreReset+0x36>

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr
 800a440:	00030d40 	.word	0x00030d40

0800a444 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a448:	4904      	ldr	r1, [pc, #16]	; (800a45c <MX_FATFS_Init+0x18>)
 800a44a:	4805      	ldr	r0, [pc, #20]	; (800a460 <MX_FATFS_Init+0x1c>)
 800a44c:	f001 fc5e 	bl	800bd0c <FATFS_LinkDriver>
 800a450:	4603      	mov	r3, r0
 800a452:	461a      	mov	r2, r3
 800a454:	4b03      	ldr	r3, [pc, #12]	; (800a464 <MX_FATFS_Init+0x20>)
 800a456:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a458:	bf00      	nop
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	200006d0 	.word	0x200006d0
 800a460:	0800d71c 	.word	0x0800d71c
 800a464:	200006cc 	.word	0x200006cc

0800a468 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a472:	f000 f879 	bl	800a568 <BSP_SD_IsDetected>
 800a476:	4603      	mov	r3, r0
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d001      	beq.n	800a480 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e012      	b.n	800a4a6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a480:	480b      	ldr	r0, [pc, #44]	; (800a4b0 <BSP_SD_Init+0x48>)
 800a482:	f7fa ff58 	bl	8005336 <HAL_SD_Init>
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a494:	4806      	ldr	r0, [pc, #24]	; (800a4b0 <BSP_SD_Init+0x48>)
 800a496:	f7fb fd31 	bl	8005efc <HAL_SD_ConfigWideBusOperation>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000360 	.word	0x20000360

0800a4b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	68f9      	ldr	r1, [r7, #12]
 800a4d0:	4806      	ldr	r0, [pc, #24]	; (800a4ec <BSP_SD_ReadBlocks+0x38>)
 800a4d2:	f7fa ffdf 	bl	8005494 <HAL_SD_ReadBlocks>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3718      	adds	r7, #24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000360 	.word	0x20000360

0800a4f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	68f9      	ldr	r1, [r7, #12]
 800a50c:	4806      	ldr	r0, [pc, #24]	; (800a528 <BSP_SD_WriteBlocks+0x38>)
 800a50e:	f7fb f99f 	bl	8005850 <HAL_SD_WriteBlocks>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000360 	.word	0x20000360

0800a52c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a530:	4805      	ldr	r0, [pc, #20]	; (800a548 <BSP_SD_GetCardState+0x1c>)
 800a532:	f7fb fd7d 	bl	8006030 <HAL_SD_GetCardState>
 800a536:	4603      	mov	r3, r0
 800a538:	2b04      	cmp	r3, #4
 800a53a:	bf14      	ite	ne
 800a53c:	2301      	movne	r3, #1
 800a53e:	2300      	moveq	r3, #0
 800a540:	b2db      	uxtb	r3, r3
}
 800a542:	4618      	mov	r0, r3
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20000360 	.word	0x20000360

0800a54c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	4803      	ldr	r0, [pc, #12]	; (800a564 <BSP_SD_GetCardInfo+0x18>)
 800a558:	f7fb fca4 	bl	8005ea4 <HAL_SD_GetCardInfo>
}
 800a55c:	bf00      	nop
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20000360 	.word	0x20000360

0800a568 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a56e:	2301      	movs	r3, #1
 800a570:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	b2db      	uxtb	r3, r3
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bc80      	pop	{r7}
 800a57e:	4770      	bx	lr

0800a580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	7c1b      	ldrb	r3, [r3, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d115      	bne.n	800a5c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a59c:	2202      	movs	r2, #2
 800a59e:	2181      	movs	r1, #129	; 0x81
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f002 fcde 	bl	800cf62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f002 fcd4 	bl	800cf62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a5c2:	e012      	b.n	800a5ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5c4:	2340      	movs	r3, #64	; 0x40
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	2181      	movs	r1, #129	; 0x81
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f002 fcc9 	bl	800cf62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5d6:	2340      	movs	r3, #64	; 0x40
 800a5d8:	2202      	movs	r2, #2
 800a5da:	2101      	movs	r1, #1
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f002 fcc0 	bl	800cf62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	2203      	movs	r2, #3
 800a5ee:	2182      	movs	r1, #130	; 0x82
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f002 fcb6 	bl	800cf62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a600:	f002 fe02 	bl	800d208 <malloc>
 800a604:	4603      	mov	r3, r0
 800a606:	461a      	mov	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
 800a61c:	e026      	b.n	800a66c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d109      	bne.n	800a65c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a64e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a652:	2101      	movs	r1, #1
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f002 fd74 	bl	800d142 <USBD_LL_PrepareReceive>
 800a65a:	e007      	b.n	800a66c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	2101      	movs	r1, #1
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f002 fd6b 	bl	800d142 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	460b      	mov	r3, r1
 800a680:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a686:	2181      	movs	r1, #129	; 0x81
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f002 fc90 	bl	800cfae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a694:	2101      	movs	r1, #1
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f002 fc89 	bl	800cfae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a6a4:	2182      	movs	r1, #130	; 0x82
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f002 fc81 	bl	800cfae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00e      	beq.n	800a6da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f002 fda3 	bl	800d218 <free>
    pdev->pClassData = NULL;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d039      	beq.n	800a782 <USBD_CDC_Setup+0x9e>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d17f      	bne.n	800a812 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	88db      	ldrh	r3, [r3, #6]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d029      	beq.n	800a76e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	da11      	bge.n	800a748 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a730:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	88d2      	ldrh	r2, [r2, #6]
 800a736:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a738:	6939      	ldr	r1, [r7, #16]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	88db      	ldrh	r3, [r3, #6]
 800a73e:	461a      	mov	r2, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 fa14 	bl	800bb6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a746:	e06b      	b.n	800a820 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	785a      	ldrb	r2, [r3, #1]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	88db      	ldrh	r3, [r3, #6]
 800a756:	b2da      	uxtb	r2, r3
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	88db      	ldrh	r3, [r3, #6]
 800a764:	461a      	mov	r2, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fa2f 	bl	800bbca <USBD_CtlPrepareRx>
      break;
 800a76c:	e058      	b.n	800a820 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	7850      	ldrb	r0, [r2, #1]
 800a77a:	2200      	movs	r2, #0
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	4798      	blx	r3
      break;
 800a780:	e04e      	b.n	800a820 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b0b      	cmp	r3, #11
 800a788:	d02e      	beq.n	800a7e8 <USBD_CDC_Setup+0x104>
 800a78a:	2b0b      	cmp	r3, #11
 800a78c:	dc38      	bgt.n	800a800 <USBD_CDC_Setup+0x11c>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <USBD_CDC_Setup+0xb4>
 800a792:	2b0a      	cmp	r3, #10
 800a794:	d014      	beq.n	800a7c0 <USBD_CDC_Setup+0xdc>
 800a796:	e033      	b.n	800a800 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d107      	bne.n	800a7b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a7a2:	f107 030c 	add.w	r3, r7, #12
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f9df 	bl	800bb6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7b0:	e02e      	b.n	800a810 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 f970 	bl	800ba9a <USBD_CtlError>
            ret = USBD_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7be:	e027      	b.n	800a810 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d107      	bne.n	800a7da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7ca:	f107 030f 	add.w	r3, r7, #15
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f001 f9cb 	bl	800bb6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7d8:	e01a      	b.n	800a810 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 f95c 	bl	800ba9a <USBD_CtlError>
            ret = USBD_FAIL;
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a7e6:	e013      	b.n	800a810 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d00d      	beq.n	800a80e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 f950 	bl	800ba9a <USBD_CtlError>
            ret = USBD_FAIL;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7fe:	e006      	b.n	800a80e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 f949 	bl	800ba9a <USBD_CtlError>
          ret = USBD_FAIL;
 800a808:	2302      	movs	r3, #2
 800a80a:	75fb      	strb	r3, [r7, #23]
          break;
 800a80c:	e000      	b.n	800a810 <USBD_CDC_Setup+0x12c>
          break;
 800a80e:	bf00      	nop
      }
      break;
 800a810:	e006      	b.n	800a820 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f940 	bl	800ba9a <USBD_CtlError>
      ret = USBD_FAIL;
 800a81a:	2302      	movs	r3, #2
 800a81c:	75fb      	strb	r3, [r7, #23]
      break;
 800a81e:	bf00      	nop
  }

  return ret;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a844:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d03a      	beq.n	800a8c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	331c      	adds	r3, #28
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d029      	beq.n	800a8ba <USBD_CDC_DataIn+0x90>
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	6879      	ldr	r1, [r7, #4]
 800a86a:	4613      	mov	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	440b      	add	r3, r1
 800a874:	331c      	adds	r3, #28
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	78f9      	ldrb	r1, [r7, #3]
 800a87a:	68b8      	ldr	r0, [r7, #8]
 800a87c:	460b      	mov	r3, r1
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	1a5b      	subs	r3, r3, r1
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4403      	add	r3, r0
 800a886:	3344      	adds	r3, #68	; 0x44
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	fbb2 f1f3 	udiv	r1, r2, r3
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d110      	bne.n	800a8ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a898:	78fa      	ldrb	r2, [r7, #3]
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	440b      	add	r3, r1
 800a8a6:	331c      	adds	r3, #28
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8ac:	78f9      	ldrb	r1, [r7, #3]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f002 fc22 	bl	800d0fc <USBD_LL_Transmit>
 800a8b8:	e003      	b.n	800a8c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e000      	b.n	800a8c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a8c6:	2302      	movs	r3, #2
  }
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f002 fc4d 	bl	800d188 <USBD_LL_GetRxDataSize>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00d      	beq.n	800a91c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a914:	4611      	mov	r1, r2
 800a916:	4798      	blx	r3

    return USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	e000      	b.n	800a91e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a91c:	2302      	movs	r3, #2
  }
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d015      	beq.n	800a96c <USBD_CDC_EP0_RxReady+0x46>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a946:	2bff      	cmp	r3, #255	; 0xff
 800a948:	d010      	beq.n	800a96c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a958:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a960:	b292      	uxth	r2, r2
 800a962:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	22ff      	movs	r2, #255	; 0xff
 800a968:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2243      	movs	r2, #67	; 0x43
 800a984:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a986:	4b03      	ldr	r3, [pc, #12]	; (800a994 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bc80      	pop	{r7}
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	200000d4 	.word	0x200000d4

0800a998 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2243      	movs	r2, #67	; 0x43
 800a9a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a9a6:	4b03      	ldr	r3, [pc, #12]	; (800a9b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bc80      	pop	{r7}
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000090 	.word	0x20000090

0800a9b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2243      	movs	r2, #67	; 0x43
 800a9c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bc80      	pop	{r7}
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20000118 	.word	0x20000118

0800a9d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	220a      	movs	r2, #10
 800a9e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a9e6:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	2000004c 	.word	0x2000004c

0800a9f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800aa02:	2302      	movs	r3, #2
 800aa04:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d005      	beq.n	800aa18 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr

0800aa24 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa38:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa42:	88fa      	ldrh	r2, [r7, #6]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	371c      	adds	r7, #28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bc80      	pop	{r7}
 800aa54:	4770      	bx	lr

0800aa56 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b085      	sub	sp, #20
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d017      	beq.n	800aac6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	7c1b      	ldrb	r3, [r3, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d109      	bne.n	800aab2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f002 fb49 	bl	800d142 <USBD_LL_PrepareReceive>
 800aab0:	e007      	b.n	800aac2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aab8:	2340      	movs	r3, #64	; 0x40
 800aaba:	2101      	movs	r1, #1
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f002 fb40 	bl	800d142 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e000      	b.n	800aac8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aac6:	2302      	movs	r3, #2
  }
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aae4:	2302      	movs	r3, #2
 800aae6:	e01a      	b.n	800ab1e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d003      	beq.n	800ab08 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	79fa      	ldrb	r2, [r7, #7]
 800ab14:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f002 f9be 	bl	800ce98 <USBD_LL_Init>

  return USBD_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b085      	sub	sp, #20
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d006      	beq.n	800ab48 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]
 800ab46:	e001      	b.n	800ab4c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ab48:	2302      	movs	r3, #2
 800ab4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr

0800ab58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f002 f9e3 	bl	800cf2c <USBD_LL_Start>

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bc80      	pop	{r7}
 800ab82:	4770      	bx	lr

0800ab84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab90:	2302      	movs	r3, #2
 800ab92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00c      	beq.n	800abb8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	4611      	mov	r1, r2
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	460b      	mov	r3, r1
 800abcc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	78fa      	ldrb	r2, [r7, #3]
 800abd8:	4611      	mov	r1, r2
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3

  return USBD_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 ff11 	bl	800ba22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac0e:	461a      	mov	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac1c:	f003 031f 	and.w	r3, r3, #31
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d016      	beq.n	800ac52 <USBD_LL_SetupStage+0x6a>
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d81c      	bhi.n	800ac62 <USBD_LL_SetupStage+0x7a>
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <USBD_LL_SetupStage+0x4a>
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d008      	beq.n	800ac42 <USBD_LL_SetupStage+0x5a>
 800ac30:	e017      	b.n	800ac62 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa04 	bl	800b048 <USBD_StdDevReq>
      break;
 800ac40:	e01a      	b.n	800ac78 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa66 	bl	800b11c <USBD_StdItfReq>
      break;
 800ac50:	e012      	b.n	800ac78 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 faa6 	bl	800b1ac <USBD_StdEPReq>
      break;
 800ac60:	e00a      	b.n	800ac78 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f002 f9bb 	bl	800cfec <USBD_LL_StallEP>
      break;
 800ac76:	bf00      	nop
  }

  return USBD_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b086      	sub	sp, #24
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	607a      	str	r2, [r7, #4]
 800ac8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d14b      	bne.n	800ad2e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d134      	bne.n	800ad12 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d919      	bls.n	800ace8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	68da      	ldr	r2, [r3, #12]
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	1ad2      	subs	r2, r2, r3
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acca:	429a      	cmp	r2, r3
 800accc:	d203      	bcs.n	800acd6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	e002      	b.n	800acdc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acda:	b29b      	uxth	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 ff90 	bl	800bc06 <USBD_CtlContinueRx>
 800ace6:	e038      	b.n	800ad5a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00a      	beq.n	800ad0a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d105      	bne.n	800ad0a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 ff8d 	bl	800bc2a <USBD_CtlSendStatus>
 800ad10:	e023      	b.n	800ad5a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	d11e      	bne.n	800ad5a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ad24:	2100      	movs	r1, #0
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f002 f960 	bl	800cfec <USBD_LL_StallEP>
 800ad2c:	e015      	b.n	800ad5a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00d      	beq.n	800ad56 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d108      	bne.n	800ad56 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	7afa      	ldrb	r2, [r7, #11]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	4798      	blx	r3
 800ad54:	e001      	b.n	800ad5a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad56:	2302      	movs	r3, #2
 800ad58:	e000      	b.n	800ad5c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad72:	7afb      	ldrb	r3, [r7, #11]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d17f      	bne.n	800ae78 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3314      	adds	r3, #20
 800ad7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d15c      	bne.n	800ae42 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d915      	bls.n	800adc0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	1ad2      	subs	r2, r2, r3
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 fefa 	bl	800bba6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adb2:	2300      	movs	r3, #0
 800adb4:	2200      	movs	r2, #0
 800adb6:	2100      	movs	r1, #0
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f002 f9c2 	bl	800d142 <USBD_LL_PrepareReceive>
 800adbe:	e04e      	b.n	800ae5e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	6912      	ldr	r2, [r2, #16]
 800adc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800adcc:	fb01 f202 	mul.w	r2, r1, r2
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d11c      	bne.n	800ae10 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800adde:	429a      	cmp	r2, r3
 800ade0:	d316      	bcc.n	800ae10 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	689a      	ldr	r2, [r3, #8]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800adec:	429a      	cmp	r2, r3
 800adee:	d20f      	bcs.n	800ae10 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adf0:	2200      	movs	r2, #0
 800adf2:	2100      	movs	r1, #0
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fed6 	bl	800bba6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae02:	2300      	movs	r3, #0
 800ae04:	2200      	movs	r2, #0
 800ae06:	2100      	movs	r1, #0
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f002 f99a 	bl	800d142 <USBD_LL_PrepareReceive>
 800ae0e:	e026      	b.n	800ae5e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00a      	beq.n	800ae32 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d105      	bne.n	800ae32 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ae32:	2180      	movs	r1, #128	; 0x80
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f002 f8d9 	bl	800cfec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 ff08 	bl	800bc50 <USBD_CtlReceiveStatus>
 800ae40:	e00d      	b.n	800ae5e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d004      	beq.n	800ae56 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ae56:	2180      	movs	r1, #128	; 0x80
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f002 f8c7 	bl	800cfec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d11d      	bne.n	800aea4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff fe81 	bl	800ab70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae76:	e015      	b.n	800aea4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00d      	beq.n	800aea0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d108      	bne.n	800aea0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	7afa      	ldrb	r2, [r7, #11]
 800ae98:	4611      	mov	r1, r2
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	4798      	blx	r3
 800ae9e:	e001      	b.n	800aea4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aea0:	2302      	movs	r3, #2
 800aea2:	e000      	b.n	800aea6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeb6:	2340      	movs	r3, #64	; 0x40
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2100      	movs	r1, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f002 f850 	bl	800cf62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2240      	movs	r2, #64	; 0x40
 800aece:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aed2:	2340      	movs	r3, #64	; 0x40
 800aed4:	2200      	movs	r2, #0
 800aed6:	2180      	movs	r1, #128	; 0x80
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f002 f842 	bl	800cf62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2240      	movs	r2, #64	; 0x40
 800aee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6852      	ldr	r2, [r2, #4]
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	4611      	mov	r1, r2
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	4798      	blx	r3
  }

  return USBD_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	bc80      	pop	{r7}
 800af4c:	4770      	bx	lr

0800af4e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2204      	movs	r2, #4
 800af66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr

0800af76 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af84:	2b04      	cmp	r3, #4
 800af86:	d105      	bne.n	800af94 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bc80      	pop	{r7}
 800af9e:	4770      	bx	lr

0800afa0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d10b      	bne.n	800afca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bc80      	pop	{r7}
 800afea:	4770      	bx	lr

0800afec <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	bc80      	pop	{r7}
 800b002:	4770      	bx	lr

0800b004 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr

0800b018 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	6852      	ldr	r2, [r2, #4]
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	4611      	mov	r1, r2
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	4798      	blx	r3

  return USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b05e:	2b40      	cmp	r3, #64	; 0x40
 800b060:	d005      	beq.n	800b06e <USBD_StdDevReq+0x26>
 800b062:	2b40      	cmp	r3, #64	; 0x40
 800b064:	d84f      	bhi.n	800b106 <USBD_StdDevReq+0xbe>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d009      	beq.n	800b07e <USBD_StdDevReq+0x36>
 800b06a:	2b20      	cmp	r3, #32
 800b06c:	d14b      	bne.n	800b106 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	4798      	blx	r3
      break;
 800b07c:	e048      	b.n	800b110 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	785b      	ldrb	r3, [r3, #1]
 800b082:	2b09      	cmp	r3, #9
 800b084:	d839      	bhi.n	800b0fa <USBD_StdDevReq+0xb2>
 800b086:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <USBD_StdDevReq+0x44>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b0dd 	.word	0x0800b0dd
 800b090:	0800b0f1 	.word	0x0800b0f1
 800b094:	0800b0fb 	.word	0x0800b0fb
 800b098:	0800b0e7 	.word	0x0800b0e7
 800b09c:	0800b0fb 	.word	0x0800b0fb
 800b0a0:	0800b0bf 	.word	0x0800b0bf
 800b0a4:	0800b0b5 	.word	0x0800b0b5
 800b0a8:	0800b0fb 	.word	0x0800b0fb
 800b0ac:	0800b0d3 	.word	0x0800b0d3
 800b0b0:	0800b0c9 	.word	0x0800b0c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f9dc 	bl	800b474 <USBD_GetDescriptor>
          break;
 800b0bc:	e022      	b.n	800b104 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fb3f 	bl	800b744 <USBD_SetAddress>
          break;
 800b0c6:	e01d      	b.n	800b104 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fb7e 	bl	800b7cc <USBD_SetConfig>
          break;
 800b0d0:	e018      	b.n	800b104 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fc07 	bl	800b8e8 <USBD_GetConfig>
          break;
 800b0da:	e013      	b.n	800b104 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fc37 	bl	800b952 <USBD_GetStatus>
          break;
 800b0e4:	e00e      	b.n	800b104 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fc65 	bl	800b9b8 <USBD_SetFeature>
          break;
 800b0ee:	e009      	b.n	800b104 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fc74 	bl	800b9e0 <USBD_ClrFeature>
          break;
 800b0f8:	e004      	b.n	800b104 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fccc 	bl	800ba9a <USBD_CtlError>
          break;
 800b102:	bf00      	nop
      }
      break;
 800b104:	e004      	b.n	800b110 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fcc6 	bl	800ba9a <USBD_CtlError>
      break;
 800b10e:	bf00      	nop
  }

  return ret;
 800b110:	7bfb      	ldrb	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop

0800b11c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b132:	2b40      	cmp	r3, #64	; 0x40
 800b134:	d005      	beq.n	800b142 <USBD_StdItfReq+0x26>
 800b136:	2b40      	cmp	r3, #64	; 0x40
 800b138:	d82e      	bhi.n	800b198 <USBD_StdItfReq+0x7c>
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <USBD_StdItfReq+0x26>
 800b13e:	2b20      	cmp	r3, #32
 800b140:	d12a      	bne.n	800b198 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b148:	3b01      	subs	r3, #1
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d81d      	bhi.n	800b18a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	889b      	ldrh	r3, [r3, #4]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b01      	cmp	r3, #1
 800b156:	d813      	bhi.n	800b180 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	4798      	blx	r3
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	88db      	ldrh	r3, [r3, #6]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d110      	bne.n	800b194 <USBD_StdItfReq+0x78>
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10d      	bne.n	800b194 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fd56 	bl	800bc2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b17e:	e009      	b.n	800b194 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fc89 	bl	800ba9a <USBD_CtlError>
          break;
 800b188:	e004      	b.n	800b194 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fc84 	bl	800ba9a <USBD_CtlError>
          break;
 800b192:	e000      	b.n	800b196 <USBD_StdItfReq+0x7a>
          break;
 800b194:	bf00      	nop
      }
      break;
 800b196:	e004      	b.n	800b1a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fc7d 	bl	800ba9a <USBD_CtlError>
      break;
 800b1a0:	bf00      	nop
  }

  return USBD_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	889b      	ldrh	r3, [r3, #4]
 800b1be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1c8:	2b40      	cmp	r3, #64	; 0x40
 800b1ca:	d007      	beq.n	800b1dc <USBD_StdEPReq+0x30>
 800b1cc:	2b40      	cmp	r3, #64	; 0x40
 800b1ce:	f200 8146 	bhi.w	800b45e <USBD_StdEPReq+0x2b2>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <USBD_StdEPReq+0x40>
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	f040 8141 	bne.w	800b45e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
      break;
 800b1ea:	e13d      	b.n	800b468 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	d10a      	bne.n	800b20e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
 800b206:	4603      	mov	r3, r0
 800b208:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	e12d      	b.n	800b46a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	785b      	ldrb	r3, [r3, #1]
 800b212:	2b03      	cmp	r3, #3
 800b214:	d007      	beq.n	800b226 <USBD_StdEPReq+0x7a>
 800b216:	2b03      	cmp	r3, #3
 800b218:	f300 811b 	bgt.w	800b452 <USBD_StdEPReq+0x2a6>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d072      	beq.n	800b306 <USBD_StdEPReq+0x15a>
 800b220:	2b01      	cmp	r3, #1
 800b222:	d03a      	beq.n	800b29a <USBD_StdEPReq+0xee>
 800b224:	e115      	b.n	800b452 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d002      	beq.n	800b236 <USBD_StdEPReq+0x8a>
 800b230:	2b03      	cmp	r3, #3
 800b232:	d015      	beq.n	800b260 <USBD_StdEPReq+0xb4>
 800b234:	e02b      	b.n	800b28e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00c      	beq.n	800b256 <USBD_StdEPReq+0xaa>
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	2b80      	cmp	r3, #128	; 0x80
 800b240:	d009      	beq.n	800b256 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 fed0 	bl	800cfec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b24c:	2180      	movs	r1, #128	; 0x80
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fecc 	bl	800cfec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b254:	e020      	b.n	800b298 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fc1e 	bl	800ba9a <USBD_CtlError>
              break;
 800b25e:	e01b      	b.n	800b298 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	885b      	ldrh	r3, [r3, #2]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10e      	bne.n	800b286 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b268:	7bbb      	ldrb	r3, [r7, #14]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <USBD_StdEPReq+0xda>
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	2b80      	cmp	r3, #128	; 0x80
 800b272:	d008      	beq.n	800b286 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	88db      	ldrh	r3, [r3, #6]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d104      	bne.n	800b286 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 feb3 	bl	800cfec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fccf 	bl	800bc2a <USBD_CtlSendStatus>

              break;
 800b28c:	e004      	b.n	800b298 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fc02 	bl	800ba9a <USBD_CtlError>
              break;
 800b296:	bf00      	nop
          }
          break;
 800b298:	e0e0      	b.n	800b45c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d002      	beq.n	800b2aa <USBD_StdEPReq+0xfe>
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d015      	beq.n	800b2d4 <USBD_StdEPReq+0x128>
 800b2a8:	e026      	b.n	800b2f8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00c      	beq.n	800b2ca <USBD_StdEPReq+0x11e>
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
 800b2b2:	2b80      	cmp	r3, #128	; 0x80
 800b2b4:	d009      	beq.n	800b2ca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 fe96 	bl	800cfec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b2c0:	2180      	movs	r1, #128	; 0x80
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 fe92 	bl	800cfec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2c8:	e01c      	b.n	800b304 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fbe4 	bl	800ba9a <USBD_CtlError>
              break;
 800b2d2:	e017      	b.n	800b304 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	885b      	ldrh	r3, [r3, #2]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d112      	bne.n	800b302 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d004      	beq.n	800b2f0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b2e6:	7bbb      	ldrb	r3, [r7, #14]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fe9d 	bl	800d02a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fc9a 	bl	800bc2a <USBD_CtlSendStatus>
              }
              break;
 800b2f6:	e004      	b.n	800b302 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fbcd 	bl	800ba9a <USBD_CtlError>
              break;
 800b300:	e000      	b.n	800b304 <USBD_StdEPReq+0x158>
              break;
 800b302:	bf00      	nop
          }
          break;
 800b304:	e0aa      	b.n	800b45c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d002      	beq.n	800b316 <USBD_StdEPReq+0x16a>
 800b310:	2b03      	cmp	r3, #3
 800b312:	d032      	beq.n	800b37a <USBD_StdEPReq+0x1ce>
 800b314:	e097      	b.n	800b446 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <USBD_StdEPReq+0x180>
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	2b80      	cmp	r3, #128	; 0x80
 800b320:	d004      	beq.n	800b32c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fbb8 	bl	800ba9a <USBD_CtlError>
                break;
 800b32a:	e091      	b.n	800b450 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b330:	2b00      	cmp	r3, #0
 800b332:	da0b      	bge.n	800b34c <USBD_StdEPReq+0x1a0>
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b33a:	4613      	mov	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	3310      	adds	r3, #16
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	4413      	add	r3, r2
 800b348:	3304      	adds	r3, #4
 800b34a:	e00b      	b.n	800b364 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	3304      	adds	r3, #4
 800b364:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2202      	movs	r2, #2
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fbfb 	bl	800bb6e <USBD_CtlSendData>
              break;
 800b378:	e06a      	b.n	800b450 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b37a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	da11      	bge.n	800b3a6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	f003 020f 	and.w	r2, r3, #15
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	3318      	adds	r3, #24
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d117      	bne.n	800b3cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fb7b 	bl	800ba9a <USBD_CtlError>
                  break;
 800b3a4:	e054      	b.n	800b450 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	f003 020f 	and.w	r2, r3, #15
 800b3ac:	6879      	ldr	r1, [r7, #4]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	440b      	add	r3, r1
 800b3b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d104      	bne.n	800b3cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fb68 	bl	800ba9a <USBD_CtlError>
                  break;
 800b3ca:	e041      	b.n	800b450 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da0b      	bge.n	800b3ec <USBD_StdEPReq+0x240>
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3da:	4613      	mov	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	3310      	adds	r3, #16
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	e00b      	b.n	800b404 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
 800b3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	4413      	add	r3, r2
 800b402:	3304      	adds	r3, #4
 800b404:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <USBD_StdEPReq+0x266>
 800b40c:	7bbb      	ldrb	r3, [r7, #14]
 800b40e:	2b80      	cmp	r3, #128	; 0x80
 800b410:	d103      	bne.n	800b41a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	e00e      	b.n	800b438 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f001 fe22 	bl	800d068 <USBD_LL_IsStallEP>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d003      	beq.n	800b432 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2201      	movs	r2, #1
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	e002      	b.n	800b438 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2202      	movs	r2, #2
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fb95 	bl	800bb6e <USBD_CtlSendData>
              break;
 800b444:	e004      	b.n	800b450 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fb26 	bl	800ba9a <USBD_CtlError>
              break;
 800b44e:	bf00      	nop
          }
          break;
 800b450:	e004      	b.n	800b45c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fb20 	bl	800ba9a <USBD_CtlError>
          break;
 800b45a:	bf00      	nop
      }
      break;
 800b45c:	e004      	b.n	800b468 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fb1a 	bl	800ba9a <USBD_CtlError>
      break;
 800b466:	bf00      	nop
  }

  return ret;
 800b468:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	885b      	ldrh	r3, [r3, #2]
 800b48e:	0a1b      	lsrs	r3, r3, #8
 800b490:	b29b      	uxth	r3, r3
 800b492:	3b01      	subs	r3, #1
 800b494:	2b06      	cmp	r3, #6
 800b496:	f200 8128 	bhi.w	800b6ea <USBD_GetDescriptor+0x276>
 800b49a:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <USBD_GetDescriptor+0x2c>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b4bd 	.word	0x0800b4bd
 800b4a4:	0800b4d5 	.word	0x0800b4d5
 800b4a8:	0800b515 	.word	0x0800b515
 800b4ac:	0800b6eb 	.word	0x0800b6eb
 800b4b0:	0800b6eb 	.word	0x0800b6eb
 800b4b4:	0800b68b 	.word	0x0800b68b
 800b4b8:	0800b6b7 	.word	0x0800b6b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	7c12      	ldrb	r2, [r2, #16]
 800b4c8:	f107 0108 	add.w	r1, r7, #8
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	60f8      	str	r0, [r7, #12]
      break;
 800b4d2:	e112      	b.n	800b6fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7c1b      	ldrb	r3, [r3, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10d      	bne.n	800b4f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f107 0208 	add.w	r2, r7, #8
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
 800b4ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4f6:	e100      	b.n	800b6fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b500:	f107 0208 	add.w	r2, r7, #8
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
 800b508:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3301      	adds	r3, #1
 800b50e:	2202      	movs	r2, #2
 800b510:	701a      	strb	r2, [r3, #0]
      break;
 800b512:	e0f2      	b.n	800b6fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	885b      	ldrh	r3, [r3, #2]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b05      	cmp	r3, #5
 800b51c:	f200 80ac 	bhi.w	800b678 <USBD_GetDescriptor+0x204>
 800b520:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <USBD_GetDescriptor+0xb4>)
 800b522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b526:	bf00      	nop
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b575 	.word	0x0800b575
 800b530:	0800b5a9 	.word	0x0800b5a9
 800b534:	0800b5dd 	.word	0x0800b5dd
 800b538:	0800b611 	.word	0x0800b611
 800b53c:	0800b645 	.word	0x0800b645
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00b      	beq.n	800b564 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	7c12      	ldrb	r2, [r2, #16]
 800b558:	f107 0108 	add.w	r1, r7, #8
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3
 800b560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b562:	e091      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fa97 	bl	800ba9a <USBD_CtlError>
            err++;
 800b56c:	7afb      	ldrb	r3, [r7, #11]
 800b56e:	3301      	adds	r3, #1
 800b570:	72fb      	strb	r3, [r7, #11]
          break;
 800b572:	e089      	b.n	800b688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	7c12      	ldrb	r2, [r2, #16]
 800b58c:	f107 0108 	add.w	r1, r7, #8
 800b590:	4610      	mov	r0, r2
 800b592:	4798      	blx	r3
 800b594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b596:	e077      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fa7d 	bl	800ba9a <USBD_CtlError>
            err++;
 800b5a0:	7afb      	ldrb	r3, [r7, #11]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5a6:	e06f      	b.n	800b688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00b      	beq.n	800b5cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	7c12      	ldrb	r2, [r2, #16]
 800b5c0:	f107 0108 	add.w	r1, r7, #8
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4798      	blx	r3
 800b5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ca:	e05d      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fa63 	bl	800ba9a <USBD_CtlError>
            err++;
 800b5d4:	7afb      	ldrb	r3, [r7, #11]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5da:	e055      	b.n	800b688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00b      	beq.n	800b600 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	7c12      	ldrb	r2, [r2, #16]
 800b5f4:	f107 0108 	add.w	r1, r7, #8
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5fe:	e043      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa49 	bl	800ba9a <USBD_CtlError>
            err++;
 800b608:	7afb      	ldrb	r3, [r7, #11]
 800b60a:	3301      	adds	r3, #1
 800b60c:	72fb      	strb	r3, [r7, #11]
          break;
 800b60e:	e03b      	b.n	800b688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	7c12      	ldrb	r2, [r2, #16]
 800b628:	f107 0108 	add.w	r1, r7, #8
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
 800b630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b632:	e029      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa2f 	bl	800ba9a <USBD_CtlError>
            err++;
 800b63c:	7afb      	ldrb	r3, [r7, #11]
 800b63e:	3301      	adds	r3, #1
 800b640:	72fb      	strb	r3, [r7, #11]
          break;
 800b642:	e021      	b.n	800b688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	7c12      	ldrb	r2, [r2, #16]
 800b65c:	f107 0108 	add.w	r1, r7, #8
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b666:	e00f      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa15 	bl	800ba9a <USBD_CtlError>
            err++;
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	3301      	adds	r3, #1
 800b674:	72fb      	strb	r3, [r7, #11]
          break;
 800b676:	e007      	b.n	800b688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa0d 	bl	800ba9a <USBD_CtlError>
          err++;
 800b680:	7afb      	ldrb	r3, [r7, #11]
 800b682:	3301      	adds	r3, #1
 800b684:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b686:	e038      	b.n	800b6fa <USBD_GetDescriptor+0x286>
 800b688:	e037      	b.n	800b6fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7c1b      	ldrb	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d109      	bne.n	800b6a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69a:	f107 0208 	add.w	r2, r7, #8
 800b69e:	4610      	mov	r0, r2
 800b6a0:	4798      	blx	r3
 800b6a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6a4:	e029      	b.n	800b6fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f9f6 	bl	800ba9a <USBD_CtlError>
        err++;
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b6b4:	e021      	b.n	800b6fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7c1b      	ldrb	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10d      	bne.n	800b6da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	f107 0208 	add.w	r2, r7, #8
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	4798      	blx	r3
 800b6ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	2207      	movs	r2, #7
 800b6d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6d8:	e00f      	b.n	800b6fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f9dc 	bl	800ba9a <USBD_CtlError>
        err++;
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6e8:	e007      	b.n	800b6fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f9d4 	bl	800ba9a <USBD_CtlError>
      err++;
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6f8:	bf00      	nop
  }

  if (err != 0U)
 800b6fa:	7afb      	ldrb	r3, [r7, #11]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d11c      	bne.n	800b73a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b700:	893b      	ldrh	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d011      	beq.n	800b72a <USBD_GetDescriptor+0x2b6>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	88db      	ldrh	r3, [r3, #6]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00d      	beq.n	800b72a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	88da      	ldrh	r2, [r3, #6]
 800b712:	893b      	ldrh	r3, [r7, #8]
 800b714:	4293      	cmp	r3, r2
 800b716:	bf28      	it	cs
 800b718:	4613      	movcs	r3, r2
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b71e:	893b      	ldrh	r3, [r7, #8]
 800b720:	461a      	mov	r2, r3
 800b722:	68f9      	ldr	r1, [r7, #12]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fa22 	bl	800bb6e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	88db      	ldrh	r3, [r3, #6]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d104      	bne.n	800b73c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa79 	bl	800bc2a <USBD_CtlSendStatus>
 800b738:	e000      	b.n	800b73c <USBD_GetDescriptor+0x2c8>
    return;
 800b73a:	bf00      	nop
    }
  }
}
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop

0800b744 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	889b      	ldrh	r3, [r3, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d130      	bne.n	800b7b8 <USBD_SetAddress+0x74>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	88db      	ldrh	r3, [r3, #6]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d12c      	bne.n	800b7b8 <USBD_SetAddress+0x74>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	885b      	ldrh	r3, [r3, #2]
 800b762:	2b7f      	cmp	r3, #127	; 0x7f
 800b764:	d828      	bhi.n	800b7b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	885b      	ldrh	r3, [r3, #2]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b770:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b778:	2b03      	cmp	r3, #3
 800b77a:	d104      	bne.n	800b786 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b77c:	6839      	ldr	r1, [r7, #0]
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f98b 	bl	800ba9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b784:	e01d      	b.n	800b7c2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	7bfa      	ldrb	r2, [r7, #15]
 800b78a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 fc93 	bl	800d0be <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fa46 	bl	800bc2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d004      	beq.n	800b7ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ac:	e009      	b.n	800b7c2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b6:	e004      	b.n	800b7c2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f96d 	bl	800ba9a <USBD_CtlError>
  }
}
 800b7c0:	bf00      	nop
 800b7c2:	bf00      	nop
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	885b      	ldrh	r3, [r3, #2]
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	4b41      	ldr	r3, [pc, #260]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b7de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7e0:	4b40      	ldr	r3, [pc, #256]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d904      	bls.n	800b7f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f955 	bl	800ba9a <USBD_CtlError>
 800b7f0:	e075      	b.n	800b8de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d002      	beq.n	800b802 <USBD_SetConfig+0x36>
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d023      	beq.n	800b848 <USBD_SetConfig+0x7c>
 800b800:	e062      	b.n	800b8c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b802:	4b38      	ldr	r3, [pc, #224]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01a      	beq.n	800b840 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b80a:	4b36      	ldr	r3, [pc, #216]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2203      	movs	r2, #3
 800b818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b81c:	4b31      	ldr	r3, [pc, #196]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff f9ae 	bl	800ab84 <USBD_SetClassConfig>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d104      	bne.n	800b838 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f932 	bl	800ba9a <USBD_CtlError>
            return;
 800b836:	e052      	b.n	800b8de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f9f6 	bl	800bc2a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b83e:	e04e      	b.n	800b8de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f9f2 	bl	800bc2a <USBD_CtlSendStatus>
        break;
 800b846:	e04a      	b.n	800b8de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b848:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d112      	bne.n	800b876 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b858:	4b22      	ldr	r3, [pc, #136]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	461a      	mov	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b862:	4b20      	ldr	r3, [pc, #128]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff f9aa 	bl	800abc2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f9db 	bl	800bc2a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b874:	e033      	b.n	800b8de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b876:	4b1b      	ldr	r3, [pc, #108]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d01d      	beq.n	800b8c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff f998 	bl	800abc2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b892:	4b14      	ldr	r3, [pc, #80]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b89c:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff f96e 	bl	800ab84 <USBD_SetClassConfig>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d104      	bne.n	800b8b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f8f2 	bl	800ba9a <USBD_CtlError>
            return;
 800b8b6:	e012      	b.n	800b8de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f9b6 	bl	800bc2a <USBD_CtlSendStatus>
        break;
 800b8be:	e00e      	b.n	800b8de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f9b2 	bl	800bc2a <USBD_CtlSendStatus>
        break;
 800b8c6:	e00a      	b.n	800b8de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f8e5 	bl	800ba9a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b8d0:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <USBD_SetConfig+0x118>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff f973 	bl	800abc2 <USBD_ClrClassConfig>
        break;
 800b8dc:	bf00      	nop
    }
  }
}
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	200006d4 	.word	0x200006d4

0800b8e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	88db      	ldrh	r3, [r3, #6]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d004      	beq.n	800b904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f8cc 	bl	800ba9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b902:	e022      	b.n	800b94a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	dc02      	bgt.n	800b914 <USBD_GetConfig+0x2c>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	dc03      	bgt.n	800b91a <USBD_GetConfig+0x32>
 800b912:	e015      	b.n	800b940 <USBD_GetConfig+0x58>
 800b914:	2b03      	cmp	r3, #3
 800b916:	d00b      	beq.n	800b930 <USBD_GetConfig+0x48>
 800b918:	e012      	b.n	800b940 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3308      	adds	r3, #8
 800b924:	2201      	movs	r2, #1
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f920 	bl	800bb6e <USBD_CtlSendData>
        break;
 800b92e:	e00c      	b.n	800b94a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3304      	adds	r3, #4
 800b934:	2201      	movs	r2, #1
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f918 	bl	800bb6e <USBD_CtlSendData>
        break;
 800b93e:	e004      	b.n	800b94a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f8a9 	bl	800ba9a <USBD_CtlError>
        break;
 800b948:	bf00      	nop
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b962:	3b01      	subs	r3, #1
 800b964:	2b02      	cmp	r3, #2
 800b966:	d81e      	bhi.n	800b9a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	88db      	ldrh	r3, [r3, #6]
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d004      	beq.n	800b97a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f891 	bl	800ba9a <USBD_CtlError>
        break;
 800b978:	e01a      	b.n	800b9b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b986:	2b00      	cmp	r3, #0
 800b988:	d005      	beq.n	800b996 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	f043 0202 	orr.w	r2, r3, #2
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	330c      	adds	r3, #12
 800b99a:	2202      	movs	r2, #2
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f8e5 	bl	800bb6e <USBD_CtlSendData>
      break;
 800b9a4:	e004      	b.n	800b9b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f876 	bl	800ba9a <USBD_CtlError>
      break;
 800b9ae:	bf00      	nop
  }
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	885b      	ldrh	r3, [r3, #2]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d106      	bne.n	800b9d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f929 	bl	800bc2a <USBD_CtlSendStatus>
  }
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d80b      	bhi.n	800ba0e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	885b      	ldrh	r3, [r3, #2]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d10c      	bne.n	800ba18 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f90f 	bl	800bc2a <USBD_CtlSendStatus>
      }
      break;
 800ba0c:	e004      	b.n	800ba18 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f842 	bl	800ba9a <USBD_CtlError>
      break;
 800ba16:	e000      	b.n	800ba1a <USBD_ClrFeature+0x3a>
      break;
 800ba18:	bf00      	nop
  }
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	781a      	ldrb	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	785a      	ldrb	r2, [r3, #1]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	3302      	adds	r3, #2
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	3303      	adds	r3, #3
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	4413      	add	r3, r2
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	3305      	adds	r3, #5
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4413      	add	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	3306      	adds	r3, #6
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	3307      	adds	r3, #7
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	4413      	add	r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	80da      	strh	r2, [r3, #6]

}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc80      	pop	{r7}
 800ba98:	4770      	bx	lr

0800ba9a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b082      	sub	sp, #8
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800baa4:	2180      	movs	r1, #128	; 0x80
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f001 faa0 	bl	800cfec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800baac:	2100      	movs	r1, #0
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 fa9c 	bl	800cfec <USBD_LL_StallEP>
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d032      	beq.n	800bb38 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 f834 	bl	800bb40 <USBD_GetLen>
 800bad8:	4603      	mov	r3, r0
 800bada:	3301      	adds	r3, #1
 800badc:	b29b      	uxth	r3, r3
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	1c5a      	adds	r2, r3, #1
 800baea:	75fa      	strb	r2, [r7, #23]
 800baec:	461a      	mov	r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	4413      	add	r3, r2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	7812      	ldrb	r2, [r2, #0]
 800baf6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	75fa      	strb	r2, [r7, #23]
 800bafe:	461a      	mov	r2, r3
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	4413      	add	r3, r2
 800bb04:	2203      	movs	r2, #3
 800bb06:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bb08:	e012      	b.n	800bb30 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	60fa      	str	r2, [r7, #12]
 800bb10:	7dfa      	ldrb	r2, [r7, #23]
 800bb12:	1c51      	adds	r1, r2, #1
 800bb14:	75f9      	strb	r1, [r7, #23]
 800bb16:	4611      	mov	r1, r2
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	440a      	add	r2, r1
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	75fa      	strb	r2, [r7, #23]
 800bb26:	461a      	mov	r2, r3
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e8      	bne.n	800bb0a <USBD_GetString+0x4e>
    }
  }
}
 800bb38:	bf00      	nop
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bb4c:	e005      	b.n	800bb5a <USBD_GetLen+0x1a>
  {
    len++;
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	3301      	adds	r3, #1
 800bb52:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3301      	adds	r3, #1
 800bb58:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1f5      	bne.n	800bb4e <USBD_GetLen+0xe>
  }

  return len;
 800bb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bc80      	pop	{r7}
 800bb6c:	4770      	bx	lr

0800bb6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	60f8      	str	r0, [r7, #12]
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2202      	movs	r2, #2
 800bb80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb84:	88fa      	ldrh	r2, [r7, #6]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bb8a:	88fa      	ldrh	r2, [r7, #6]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb90:	88fb      	ldrh	r3, [r7, #6]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	2100      	movs	r1, #0
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f001 fab0 	bl	800d0fc <USBD_LL_Transmit>

  return USBD_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	60f8      	str	r0, [r7, #12]
 800bbae:	60b9      	str	r1, [r7, #8]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	2100      	movs	r1, #0
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f001 fa9e 	bl	800d0fc <USBD_LL_Transmit>

  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	60f8      	str	r0, [r7, #12]
 800bbd2:	60b9      	str	r1, [r7, #8]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2203      	movs	r2, #3
 800bbdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbe0:	88fa      	ldrh	r2, [r7, #6]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbf0:	88fb      	ldrh	r3, [r7, #6]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f001 faa3 	bl	800d142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	4613      	mov	r3, r2
 800bc12:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc14:	88fb      	ldrh	r3, [r7, #6]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	2100      	movs	r1, #0
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f001 fa91 	bl	800d142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2204      	movs	r2, #4
 800bc36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 fa5b 	bl	800d0fc <USBD_LL_Transmit>

  return USBD_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2205      	movs	r2, #5
 800bc5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc60:	2300      	movs	r3, #0
 800bc62:	2200      	movs	r2, #0
 800bc64:	2100      	movs	r1, #0
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fa6b 	bl	800d142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	4613      	mov	r3, r2
 800bc84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bc86:	2301      	movs	r3, #1
 800bc88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800bc8e:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bc90:	7a5b      	ldrb	r3, [r3, #9]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d831      	bhi.n	800bcfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bc98:	4b1b      	ldr	r3, [pc, #108]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bc9a:	7a5b      	ldrb	r3, [r3, #9]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	461a      	mov	r2, r3
 800bca0:	4b19      	ldr	r3, [pc, #100]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bca2:	2100      	movs	r1, #0
 800bca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800bca6:	4b18      	ldr	r3, [pc, #96]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bca8:	7a5b      	ldrb	r3, [r3, #9]
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	4a16      	ldr	r2, [pc, #88]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800bcb6:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bcb8:	7a5b      	ldrb	r3, [r3, #9]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bcc0:	4413      	add	r3, r2
 800bcc2:	79fa      	ldrb	r2, [r7, #7]
 800bcc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcc6:	4b10      	ldr	r3, [pc, #64]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bcc8:	7a5b      	ldrb	r3, [r3, #9]
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	b2d1      	uxtb	r1, r2
 800bcd0:	4a0d      	ldr	r2, [pc, #52]	; (800bd08 <FATFS_LinkDriverEx+0x90>)
 800bcd2:	7251      	strb	r1, [r2, #9]
 800bcd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bcd6:	7dbb      	ldrb	r3, [r7, #22]
 800bcd8:	3330      	adds	r3, #48	; 0x30
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	3301      	adds	r3, #1
 800bce4:	223a      	movs	r2, #58	; 0x3a
 800bce6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	3302      	adds	r3, #2
 800bcec:	222f      	movs	r2, #47	; 0x2f
 800bcee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	3303      	adds	r3, #3
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bc80      	pop	{r7}
 800bd06:	4770      	bx	lr
 800bd08:	200006d8 	.word	0x200006d8

0800bd0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd16:	2200      	movs	r2, #0
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff ffac 	bl	800bc78 <FATFS_LinkDriverEx>
 800bd20:	4603      	mov	r3, r0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <SD_initialize+0x38>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800bd3c:	f7fe fb94 	bl	800a468 <BSP_SD_Init>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d107      	bne.n	800bd56 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <SD_initialize+0x38>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	f023 0301 	bic.w	r3, r3, #1
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	4b04      	ldr	r3, [pc, #16]	; (800bd64 <SD_initialize+0x38>)
 800bd54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd56:	4b03      	ldr	r3, [pc, #12]	; (800bd64 <SD_initialize+0x38>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	b2db      	uxtb	r3, r3
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	2000015b 	.word	0x2000015b

0800bd68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <SD_status+0x38>)
 800bd74:	2201      	movs	r2, #1
 800bd76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bd78:	f7fe fbd8 	bl	800a52c <BSP_SD_GetCardState>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d107      	bne.n	800bd92 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd82:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <SD_status+0x38>)
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	f023 0301 	bic.w	r3, r3, #1
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <SD_status+0x38>)
 800bd90:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <SD_status+0x38>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	b2db      	uxtb	r3, r3
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	2000015b 	.word	0x2000015b

0800bda4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <SD_read+0x54>)
 800bdba:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800bdbc:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <SD_read+0x58>)
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	68b8      	ldr	r0, [r7, #8]
 800bdc4:	f7fe fb76 	bl	800a4b4 <BSP_SD_ReadBlocks>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10e      	bne.n	800bdec <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bdce:	e006      	b.n	800bdde <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	1e5a      	subs	r2, r3, #1
 800bdd4:	613a      	str	r2, [r7, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <SD_read+0x3a>
      {
        return RES_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e007      	b.n	800bdee <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bdde:	f7fe fba5 	bl	800a52c <BSP_SD_GetCardState>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1f3      	bne.n	800bdd0 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	000186a0 	.word	0x000186a0
 800bdfc:	05f5e100 	.word	0x05f5e100

0800be00 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	60b9      	str	r1, [r7, #8]
 800be08:	607a      	str	r2, [r7, #4]
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800be14:	4b0f      	ldr	r3, [pc, #60]	; (800be54 <SD_write+0x54>)
 800be16:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <SD_write+0x58>)
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	68b8      	ldr	r0, [r7, #8]
 800be20:	f7fe fb66 	bl	800a4f0 <BSP_SD_WriteBlocks>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10e      	bne.n	800be48 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800be2a:	e006      	b.n	800be3a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	1e5a      	subs	r2, r3, #1
 800be30:	613a      	str	r2, [r7, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <SD_write+0x3a>
      {
        return RES_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e007      	b.n	800be4a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800be3a:	f7fe fb77 	bl	800a52c <BSP_SD_GetCardState>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1f3      	bne.n	800be2c <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	000186a0 	.word	0x000186a0
 800be58:	05f5e100 	.word	0x05f5e100

0800be5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08c      	sub	sp, #48	; 0x30
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	603a      	str	r2, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
 800be68:	460b      	mov	r3, r1
 800be6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <SD_ioctl+0xa8>)
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <SD_ioctl+0x28>
 800be80:	2303      	movs	r3, #3
 800be82:	e03b      	b.n	800befc <SD_ioctl+0xa0>
  
  switch (cmd)
 800be84:	79bb      	ldrb	r3, [r7, #6]
 800be86:	2b03      	cmp	r3, #3
 800be88:	d833      	bhi.n	800bef2 <SD_ioctl+0x96>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <SD_ioctl+0x34>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bea1 	.word	0x0800bea1
 800be94:	0800bea9 	.word	0x0800bea9
 800be98:	0800bec1 	.word	0x0800bec1
 800be9c:	0800bedb 	.word	0x0800bedb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bea6:	e027      	b.n	800bef8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	4618      	mov	r0, r3
 800beae:	f7fe fb4d 	bl	800a54c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800beb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bebe:	e01b      	b.n	800bef8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe fb41 	bl	800a54c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	b29a      	uxth	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bed8:	e00e      	b.n	800bef8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe fb34 	bl	800a54c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800bee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bef0:	e002      	b.n	800bef8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800bef2:	2304      	movs	r3, #4
 800bef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800bef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800befc:	4618      	mov	r0, r3
 800befe:	3730      	adds	r7, #48	; 0x30
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	2000015b 	.word	0x2000015b

0800bf08 <Button_IncTick>:
} ;

struct Button_Struct Button[BUTTONS];


void Button_IncTick(void){
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
	static uint8_t inc_div;
	if (inc_div) {inc_div--;}	//Входной делитель частоты опроса
 800bf0e:	4bb9      	ldr	r3, [pc, #740]	; (800c1f4 <Button_IncTick+0x2ec>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d006      	beq.n	800bf24 <Button_IncTick+0x1c>
 800bf16:	4bb7      	ldr	r3, [pc, #732]	; (800c1f4 <Button_IncTick+0x2ec>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	b2da      	uxtb	r2, r3
 800bf1e:	4bb5      	ldr	r3, [pc, #724]	; (800c1f4 <Button_IncTick+0x2ec>)
 800bf20:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 800bf22:	e186      	b.n	800c232 <Button_IncTick+0x32a>
		inc_div = DIVIDER;		//на 10
 800bf24:	4bb3      	ldr	r3, [pc, #716]	; (800c1f4 <Button_IncTick+0x2ec>)
 800bf26:	220a      	movs	r2, #10
 800bf28:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	71fb      	strb	r3, [r7, #7]
 800bf2e:	e17c      	b.n	800c22a <Button_IncTick+0x322>
			uint8_t tmp = HAL_GPIO_ReadPin(Button[i].Port, Button[i].Pin);
 800bf30:	79fa      	ldrb	r2, [r7, #7]
 800bf32:	49b1      	ldr	r1, [pc, #708]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bf34:	4613      	mov	r3, r2
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	79fa      	ldrb	r2, [r7, #7]
 800bf42:	49ad      	ldr	r1, [pc, #692]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	3304      	adds	r3, #4
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	4619      	mov	r1, r3
 800bf54:	f7f6 fefe 	bl	8002d54 <HAL_GPIO_ReadPin>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	71bb      	strb	r3, [r7, #6]
			if (tmp == Button[i].PinState) {
 800bf5c:	79fa      	ldrb	r2, [r7, #7]
 800bf5e:	49a6      	ldr	r1, [pc, #664]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bf60:	4613      	mov	r3, r2
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	3306      	adds	r3, #6
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	79ba      	ldrb	r2, [r7, #6]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d173      	bne.n	800c05c <Button_IncTick+0x154>
				if (Button[i].Timer) {
 800bf74:	79fa      	ldrb	r2, [r7, #7]
 800bf76:	49a0      	ldr	r1, [pc, #640]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bf78:	4613      	mov	r3, r2
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	440b      	add	r3, r1
 800bf82:	3308      	adds	r3, #8
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 814c 	beq.w	800c224 <Button_IncTick+0x31c>
					Button[i].Timer++;
 800bf8c:	79fa      	ldrb	r2, [r7, #7]
 800bf8e:	499a      	ldr	r1, [pc, #616]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bf90:	4613      	mov	r3, r2
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	881b      	ldrh	r3, [r3, #0]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	b298      	uxth	r0, r3
 800bfa2:	4995      	ldr	r1, [pc, #596]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	4413      	add	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	440b      	add	r3, r1
 800bfae:	3308      	adds	r3, #8
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	801a      	strh	r2, [r3, #0]
					if(Button[i].Timer == SHORT_TIME){
 800bfb4:	79fa      	ldrb	r2, [r7, #7]
 800bfb6:	4990      	ldr	r1, [pc, #576]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bfb8:	4613      	mov	r3, r2
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	440b      	add	r3, r1
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	2b1e      	cmp	r3, #30
 800bfc8:	d123      	bne.n	800c012 <Button_IncTick+0x10a>
						if ((Button[i].Event == SHORT_CLC)||(Button[i].Event == DOUBLE_CLC)){
 800bfca:	79fa      	ldrb	r2, [r7, #7]
 800bfcc:	498a      	ldr	r1, [pc, #552]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bfce:	4613      	mov	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4413      	add	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	330a      	adds	r3, #10
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d00a      	beq.n	800bff6 <Button_IncTick+0xee>
 800bfe0:	79fa      	ldrb	r2, [r7, #7]
 800bfe2:	4985      	ldr	r1, [pc, #532]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	4413      	add	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	440b      	add	r3, r1
 800bfee:	330a      	adds	r3, #10
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d10d      	bne.n	800c012 <Button_IncTick+0x10a>
							Event_Button(i, Button[i].Event);					// отправка по таймеру
 800bff6:	79fa      	ldrb	r2, [r7, #7]
 800bff8:	497f      	ldr	r1, [pc, #508]	; (800c1f8 <Button_IncTick+0x2f0>)
 800bffa:	4613      	mov	r3, r2
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	330a      	adds	r3, #10
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	79fb      	ldrb	r3, [r7, #7]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f917 	bl	800c240 <Event_Button>
					if(Button[i].Timer == LONG_TIME){							// Тут мы если вместо кнопки переключатель
 800c012:	79fa      	ldrb	r2, [r7, #7]
 800c014:	4978      	ldr	r1, [pc, #480]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c016:	4613      	mov	r3, r2
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	4413      	add	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	440b      	add	r3, r1
 800c020:	3308      	adds	r3, #8
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	2b50      	cmp	r3, #80	; 0x50
 800c026:	f040 80fd 	bne.w	800c224 <Button_IncTick+0x31c>
						Button[i].Event = SWITCH;
 800c02a:	79fa      	ldrb	r2, [r7, #7]
 800c02c:	4972      	ldr	r1, [pc, #456]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c02e:	4613      	mov	r3, r2
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	330a      	adds	r3, #10
 800c03a:	2205      	movs	r2, #5
 800c03c:	701a      	strb	r2, [r3, #0]
						Event_Button(i, Button[i].Event);
 800c03e:	79fa      	ldrb	r2, [r7, #7]
 800c040:	496d      	ldr	r1, [pc, #436]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c042:	4613      	mov	r3, r2
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	330a      	adds	r3, #10
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f8f3 	bl	800c240 <Event_Button>
 800c05a:	e0e3      	b.n	800c224 <Button_IncTick+0x31c>
				Button[i].PinState = tmp;
 800c05c:	79fa      	ldrb	r2, [r7, #7]
 800c05e:	4966      	ldr	r1, [pc, #408]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c060:	4613      	mov	r3, r2
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	3306      	adds	r3, #6
 800c06c:	79ba      	ldrb	r2, [r7, #6]
 800c06e:	701a      	strb	r2, [r3, #0]
				if (Button[i].Timer > NOISE_TIME){								// если таймер больше 10 мс.
 800c070:	79fa      	ldrb	r2, [r7, #7]
 800c072:	4961      	ldr	r1, [pc, #388]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c074:	4613      	mov	r3, r2
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	3308      	adds	r3, #8
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	2b02      	cmp	r3, #2
 800c084:	f240 8096 	bls.w	800c1b4 <Button_IncTick+0x2ac>
					if(Button[i].Timer < SHORT_TIME){							// если это меньше 300 мс
 800c088:	79fa      	ldrb	r2, [r7, #7]
 800c08a:	495b      	ldr	r1, [pc, #364]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c08c:	4613      	mov	r3, r2
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	3308      	adds	r3, #8
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	2b1d      	cmp	r3, #29
 800c09c:	d850      	bhi.n	800c140 <Button_IncTick+0x238>
						Button[i].Timer = 1;
 800c09e:	79fa      	ldrb	r2, [r7, #7]
 800c0a0:	4955      	ldr	r1, [pc, #340]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	801a      	strh	r2, [r3, #0]
						if(Button[i].Event == PRESS){							// если в событиях было пусто
 800c0b2:	79fa      	ldrb	r2, [r7, #7]
 800c0b4:	4950      	ldr	r1, [pc, #320]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	440b      	add	r3, r1
 800c0c0:	330a      	adds	r3, #10
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d10a      	bne.n	800c0de <Button_IncTick+0x1d6>
							Button[i].Event = SHORT_CLC;						// То фиксируем первое нажатие. Но не отправляем, а запускаем таймер снова
 800c0c8:	79fa      	ldrb	r2, [r7, #7]
 800c0ca:	494b      	ldr	r1, [pc, #300]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	005b      	lsls	r3, r3, #1
 800c0d0:	4413      	add	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	440b      	add	r3, r1
 800c0d6:	330a      	adds	r3, #10
 800c0d8:	2202      	movs	r2, #2
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e0a2      	b.n	800c224 <Button_IncTick+0x31c>
						else if(Button[i].Event == SHORT_CLC){					// если нажатие уже было
 800c0de:	79fa      	ldrb	r2, [r7, #7]
 800c0e0:	4945      	ldr	r1, [pc, #276]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	330a      	adds	r3, #10
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d10a      	bne.n	800c10a <Button_IncTick+0x202>
							Button[i].Event = DOUBLE_CLC; 						// Фиксируем двойное нажатие
 800c0f4:	79fa      	ldrb	r2, [r7, #7]
 800c0f6:	4940      	ldr	r1, [pc, #256]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	4413      	add	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	440b      	add	r3, r1
 800c102:	330a      	adds	r3, #10
 800c104:	2203      	movs	r2, #3
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	e08c      	b.n	800c224 <Button_IncTick+0x31c>
						else if(Button[i].Event == DOUBLE_CLC){					//
 800c10a:	79fa      	ldrb	r2, [r7, #7]
 800c10c:	493a      	ldr	r1, [pc, #232]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c10e:	4613      	mov	r3, r2
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	440b      	add	r3, r1
 800c118:	330a      	adds	r3, #10
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	f040 8081 	bne.w	800c224 <Button_IncTick+0x31c>
							Event_Button(i, Button[i].Event); 					// Двойное отправляем сразу или по таймеру.
 800c122:	79fa      	ldrb	r2, [r7, #7]
 800c124:	4934      	ldr	r1, [pc, #208]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c126:	4613      	mov	r3, r2
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	440b      	add	r3, r1
 800c130:	330a      	adds	r3, #10
 800c132:	781a      	ldrb	r2, [r3, #0]
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	4611      	mov	r1, r2
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 f881 	bl	800c240 <Event_Button>
 800c13e:	e071      	b.n	800c224 <Button_IncTick+0x31c>
					else if(Button[i].Timer < LONG_TIME){						// Если мы были в нажатом положении больше 200 мс
 800c140:	79fa      	ldrb	r2, [r7, #7]
 800c142:	492d      	ldr	r1, [pc, #180]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c144:	4613      	mov	r3, r2
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	440b      	add	r3, r1
 800c14e:	3308      	adds	r3, #8
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	2b4f      	cmp	r3, #79	; 0x4f
 800c154:	d823      	bhi.n	800c19e <Button_IncTick+0x296>
						if(Button[i].Event == PRESS){							//
 800c156:	79fa      	ldrb	r2, [r7, #7]
 800c158:	4927      	ldr	r1, [pc, #156]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c15a:	4613      	mov	r3, r2
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	4413      	add	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	440b      	add	r3, r1
 800c164:	330a      	adds	r3, #10
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d15b      	bne.n	800c224 <Button_IncTick+0x31c>
							Button[i].Event = LONG_CLC; 						// Фиксируем длинное нажатие
 800c16c:	79fa      	ldrb	r2, [r7, #7]
 800c16e:	4922      	ldr	r1, [pc, #136]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c170:	4613      	mov	r3, r2
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	440b      	add	r3, r1
 800c17a:	330a      	adds	r3, #10
 800c17c:	2204      	movs	r2, #4
 800c17e:	701a      	strb	r2, [r3, #0]
							Event_Button(i, Button[i].Event);
 800c180:	79fa      	ldrb	r2, [r7, #7]
 800c182:	491d      	ldr	r1, [pc, #116]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c184:	4613      	mov	r3, r2
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	4413      	add	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	440b      	add	r3, r1
 800c18e:	330a      	adds	r3, #10
 800c190:	781a      	ldrb	r2, [r3, #0]
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	4611      	mov	r1, r2
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f852 	bl	800c240 <Event_Button>
 800c19c:	e042      	b.n	800c224 <Button_IncTick+0x31c>
						Button[i].Timer = 0;
 800c19e:	79fa      	ldrb	r2, [r7, #7]
 800c1a0:	4915      	ldr	r1, [pc, #84]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	801a      	strh	r2, [r3, #0]
 800c1b2:	e037      	b.n	800c224 <Button_IncTick+0x31c>
					if (Button[i].Timer) {										// если таймер меньше 10 мс.
 800c1b4:	79fa      	ldrb	r2, [r7, #7]
 800c1b6:	4910      	ldr	r1, [pc, #64]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	440b      	add	r3, r1
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d018      	beq.n	800c1fc <Button_IncTick+0x2f4>
						Button[i].Timer = 0;
 800c1ca:	79fa      	ldrb	r2, [r7, #7]
 800c1cc:	490a      	ldr	r1, [pc, #40]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	440b      	add	r3, r1
 800c1d8:	3308      	adds	r3, #8
 800c1da:	2200      	movs	r2, #0
 800c1dc:	801a      	strh	r2, [r3, #0]
						Button[i].Event = NONE;
 800c1de:	79fa      	ldrb	r2, [r7, #7]
 800c1e0:	4905      	ldr	r1, [pc, #20]	; (800c1f8 <Button_IncTick+0x2f0>)
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	4413      	add	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	440b      	add	r3, r1
 800c1ec:	330a      	adds	r3, #10
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	701a      	strb	r2, [r3, #0]
 800c1f2:	e017      	b.n	800c224 <Button_IncTick+0x31c>
 800c1f4:	2000072c 	.word	0x2000072c
 800c1f8:	200006e4 	.word	0x200006e4
						Button[i].Event = PRESS;
 800c1fc:	79fa      	ldrb	r2, [r7, #7]
 800c1fe:	490f      	ldr	r1, [pc, #60]	; (800c23c <Button_IncTick+0x334>)
 800c200:	4613      	mov	r3, r2
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	4413      	add	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	440b      	add	r3, r1
 800c20a:	330a      	adds	r3, #10
 800c20c:	2201      	movs	r2, #1
 800c20e:	701a      	strb	r2, [r3, #0]
						Button[i].Timer = 1;									// Первре срабатывание.
 800c210:	79fa      	ldrb	r2, [r7, #7]
 800c212:	490a      	ldr	r1, [pc, #40]	; (800c23c <Button_IncTick+0x334>)
 800c214:	4613      	mov	r3, r2
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	440b      	add	r3, r1
 800c21e:	3308      	adds	r3, #8
 800c220:	2201      	movs	r2, #1
 800c222:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	3301      	adds	r3, #1
 800c228:	71fb      	strb	r3, [r7, #7]
 800c22a:	79fb      	ldrb	r3, [r7, #7]
 800c22c:	2b05      	cmp	r3, #5
 800c22e:	f67f ae7f 	bls.w	800bf30 <Button_IncTick+0x28>
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	200006e4 	.word	0x200006e4

0800c240 <Event_Button>:
void Event_Button (uint8_t Butt, Button_events_TypeDef Event){
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	460a      	mov	r2, r1
 800c24a:	71fb      	strb	r3, [r7, #7]
 800c24c:	4613      	mov	r3, r2
 800c24e:	71bb      	strb	r3, [r7, #6]


	Buttons_Handler(Butt, Event);
 800c250:	79ba      	ldrb	r2, [r7, #6]
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7f4 fcce 	bl	8000bf8 <Buttons_Handler>
//	uint8_t Send_msg[25] = "Button [x] type [x]\r\n";
//	Send_msg[8] = Butt + 0x30;
//	Send_msg[17] = Event + 0x30;
//	Debug_UART( Send_msg, DBG_BTN,  21);

	Button[Butt].Event = NONE;
 800c25c:	79fa      	ldrb	r2, [r7, #7]
 800c25e:	490b      	ldr	r1, [pc, #44]	; (800c28c <Event_Button+0x4c>)
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	440b      	add	r3, r1
 800c26a:	330a      	adds	r3, #10
 800c26c:	2200      	movs	r2, #0
 800c26e:	701a      	strb	r2, [r3, #0]
	Button[Butt].Timer = 0;
 800c270:	79fa      	ldrb	r2, [r7, #7]
 800c272:	4906      	ldr	r1, [pc, #24]	; (800c28c <Event_Button+0x4c>)
 800c274:	4613      	mov	r3, r2
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	4413      	add	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	440b      	add	r3, r1
 800c27e:	3308      	adds	r3, #8
 800c280:	2200      	movs	r2, #0
 800c282:	801a      	strh	r2, [r3, #0]

}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200006e4 	.word	0x200006e4

0800c290 <Buttons_Init>:


};


void Buttons_Init (void){
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0

	Button[0].Port = In1_GPIO_Port;
 800c294:	4b45      	ldr	r3, [pc, #276]	; (800c3ac <Buttons_Init+0x11c>)
 800c296:	4a46      	ldr	r2, [pc, #280]	; (800c3b0 <Buttons_Init+0x120>)
 800c298:	601a      	str	r2, [r3, #0]
	Button[1].Port = In2_GPIO_Port;
 800c29a:	4b44      	ldr	r3, [pc, #272]	; (800c3ac <Buttons_Init+0x11c>)
 800c29c:	4a44      	ldr	r2, [pc, #272]	; (800c3b0 <Buttons_Init+0x120>)
 800c29e:	60da      	str	r2, [r3, #12]
	Button[2].Port = In3_GPIO_Port;
 800c2a0:	4b42      	ldr	r3, [pc, #264]	; (800c3ac <Buttons_Init+0x11c>)
 800c2a2:	4a44      	ldr	r2, [pc, #272]	; (800c3b4 <Buttons_Init+0x124>)
 800c2a4:	619a      	str	r2, [r3, #24]
	Button[3].Port = In4_GPIO_Port;
 800c2a6:	4b41      	ldr	r3, [pc, #260]	; (800c3ac <Buttons_Init+0x11c>)
 800c2a8:	4a42      	ldr	r2, [pc, #264]	; (800c3b4 <Buttons_Init+0x124>)
 800c2aa:	625a      	str	r2, [r3, #36]	; 0x24
	Button[4].Port = In5_GPIO_Port;
 800c2ac:	4b3f      	ldr	r3, [pc, #252]	; (800c3ac <Buttons_Init+0x11c>)
 800c2ae:	4a41      	ldr	r2, [pc, #260]	; (800c3b4 <Buttons_Init+0x124>)
 800c2b0:	631a      	str	r2, [r3, #48]	; 0x30
	Button[5].Port = In6_GPIO_Port;
 800c2b2:	4b3e      	ldr	r3, [pc, #248]	; (800c3ac <Buttons_Init+0x11c>)
 800c2b4:	4a3f      	ldr	r2, [pc, #252]	; (800c3b4 <Buttons_Init+0x124>)
 800c2b6:	63da      	str	r2, [r3, #60]	; 0x3c

	Button[0].Pin = In1_Pin;
 800c2b8:	4b3c      	ldr	r3, [pc, #240]	; (800c3ac <Buttons_Init+0x11c>)
 800c2ba:	2240      	movs	r2, #64	; 0x40
 800c2bc:	809a      	strh	r2, [r3, #4]
	Button[1].Pin = In2_Pin;
 800c2be:	4b3b      	ldr	r3, [pc, #236]	; (800c3ac <Buttons_Init+0x11c>)
 800c2c0:	2280      	movs	r2, #128	; 0x80
 800c2c2:	821a      	strh	r2, [r3, #16]
	Button[2].Pin = In3_Pin;
 800c2c4:	4b39      	ldr	r3, [pc, #228]	; (800c3ac <Buttons_Init+0x11c>)
 800c2c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c2ca:	839a      	strh	r2, [r3, #28]
	Button[3].Pin = In4_Pin;
 800c2cc:	4b37      	ldr	r3, [pc, #220]	; (800c3ac <Buttons_Init+0x11c>)
 800c2ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c2d2:	851a      	strh	r2, [r3, #40]	; 0x28
	Button[4].Pin = In5_Pin;
 800c2d4:	4b35      	ldr	r3, [pc, #212]	; (800c3ac <Buttons_Init+0x11c>)
 800c2d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c2da:	869a      	strh	r2, [r3, #52]	; 0x34
	Button[5].Pin = In6_Pin;
 800c2dc:	4b33      	ldr	r3, [pc, #204]	; (800c3ac <Buttons_Init+0x11c>)
 800c2de:	2204      	movs	r2, #4
 800c2e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	Button[0].PinState = HAL_GPIO_ReadPin(Button[0].Port, Button[0].Pin);
 800c2e4:	4b31      	ldr	r3, [pc, #196]	; (800c3ac <Buttons_Init+0x11c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a30      	ldr	r2, [pc, #192]	; (800c3ac <Buttons_Init+0x11c>)
 800c2ea:	8892      	ldrh	r2, [r2, #4]
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f6 fd30 	bl	8002d54 <HAL_GPIO_ReadPin>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	4b2c      	ldr	r3, [pc, #176]	; (800c3ac <Buttons_Init+0x11c>)
 800c2fa:	719a      	strb	r2, [r3, #6]
	Button[1].PinState = HAL_GPIO_ReadPin(Button[1].Port, Button[1].Pin);
 800c2fc:	4b2b      	ldr	r3, [pc, #172]	; (800c3ac <Buttons_Init+0x11c>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	4a2a      	ldr	r2, [pc, #168]	; (800c3ac <Buttons_Init+0x11c>)
 800c302:	8a12      	ldrh	r2, [r2, #16]
 800c304:	4611      	mov	r1, r2
 800c306:	4618      	mov	r0, r3
 800c308:	f7f6 fd24 	bl	8002d54 <HAL_GPIO_ReadPin>
 800c30c:	4603      	mov	r3, r0
 800c30e:	461a      	mov	r2, r3
 800c310:	4b26      	ldr	r3, [pc, #152]	; (800c3ac <Buttons_Init+0x11c>)
 800c312:	749a      	strb	r2, [r3, #18]
	Button[2].PinState = HAL_GPIO_ReadPin(Button[2].Port, Button[2].Pin);
 800c314:	4b25      	ldr	r3, [pc, #148]	; (800c3ac <Buttons_Init+0x11c>)
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	4a24      	ldr	r2, [pc, #144]	; (800c3ac <Buttons_Init+0x11c>)
 800c31a:	8b92      	ldrh	r2, [r2, #28]
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f6 fd18 	bl	8002d54 <HAL_GPIO_ReadPin>
 800c324:	4603      	mov	r3, r0
 800c326:	461a      	mov	r2, r3
 800c328:	4b20      	ldr	r3, [pc, #128]	; (800c3ac <Buttons_Init+0x11c>)
 800c32a:	779a      	strb	r2, [r3, #30]
	Button[3].PinState = HAL_GPIO_ReadPin(Button[3].Port, Button[3].Pin);
 800c32c:	4b1f      	ldr	r3, [pc, #124]	; (800c3ac <Buttons_Init+0x11c>)
 800c32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c330:	4a1e      	ldr	r2, [pc, #120]	; (800c3ac <Buttons_Init+0x11c>)
 800c332:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7f6 fd0c 	bl	8002d54 <HAL_GPIO_ReadPin>
 800c33c:	4603      	mov	r3, r0
 800c33e:	461a      	mov	r2, r3
 800c340:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <Buttons_Init+0x11c>)
 800c342:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Button[4].PinState = HAL_GPIO_ReadPin(Button[4].Port, Button[4].Pin);
 800c346:	4b19      	ldr	r3, [pc, #100]	; (800c3ac <Buttons_Init+0x11c>)
 800c348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34a:	4a18      	ldr	r2, [pc, #96]	; (800c3ac <Buttons_Init+0x11c>)
 800c34c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800c34e:	4611      	mov	r1, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f7f6 fcff 	bl	8002d54 <HAL_GPIO_ReadPin>
 800c356:	4603      	mov	r3, r0
 800c358:	461a      	mov	r2, r3
 800c35a:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <Buttons_Init+0x11c>)
 800c35c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Button[5].PinState = HAL_GPIO_ReadPin(Button[5].Port, Button[5].Pin);
 800c360:	4b12      	ldr	r3, [pc, #72]	; (800c3ac <Buttons_Init+0x11c>)
 800c362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c364:	4a11      	ldr	r2, [pc, #68]	; (800c3ac <Buttons_Init+0x11c>)
 800c366:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800c36a:	4611      	mov	r1, r2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7f6 fcf1 	bl	8002d54 <HAL_GPIO_ReadPin>
 800c372:	4603      	mov	r3, r0
 800c374:	461a      	mov	r2, r3
 800c376:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <Buttons_Init+0x11c>)
 800c378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	Button[0].Event = NONE;
 800c37c:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <Buttons_Init+0x11c>)
 800c37e:	2200      	movs	r2, #0
 800c380:	729a      	strb	r2, [r3, #10]
	Button[1].Event = NONE;
 800c382:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <Buttons_Init+0x11c>)
 800c384:	2200      	movs	r2, #0
 800c386:	759a      	strb	r2, [r3, #22]
	Button[2].Event = NONE;
 800c388:	4b08      	ldr	r3, [pc, #32]	; (800c3ac <Buttons_Init+0x11c>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Button[3].Event = NONE;
 800c390:	4b06      	ldr	r3, [pc, #24]	; (800c3ac <Buttons_Init+0x11c>)
 800c392:	2200      	movs	r2, #0
 800c394:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Button[4].Event = NONE;
 800c398:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <Buttons_Init+0x11c>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Button[5].Event = NONE;
 800c3a0:	4b02      	ldr	r3, [pc, #8]	; (800c3ac <Buttons_Init+0x11c>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

//	Debug_UART( "Button init\r\n", DBG_OK,  13);

}
 800c3a8:	bf00      	nop
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	200006e4 	.word	0x200006e4
 800c3b0:	40020800 	.word	0x40020800
 800c3b4:	40020400 	.word	0x40020400

0800c3b8 <Debug_LED_IncTic>:
#include "debug_LED.h"

LED_ColorTypeDef Debug_LED1;
LED_ColorTypeDef Debug_LED2;

void Debug_LED_IncTic(void){
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0

	static uint8_t switch_timer = 22;
	switch_timer--;
 800c3bc:	4b63      	ldr	r3, [pc, #396]	; (800c54c <Debug_LED_IncTic+0x194>)
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	4b61      	ldr	r3, [pc, #388]	; (800c54c <Debug_LED_IncTic+0x194>)
 800c3c6:	701a      	strb	r2, [r3, #0]
	if (switch_timer == 11) {
 800c3c8:	4b60      	ldr	r3, [pc, #384]	; (800c54c <Debug_LED_IncTic+0x194>)
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b0b      	cmp	r3, #11
 800c3ce:	d15a      	bne.n	800c486 <Debug_LED_IncTic+0xce>
		switch (Debug_LED1) {
 800c3d0:	4b5f      	ldr	r3, [pc, #380]	; (800c550 <Debug_LED_IncTic+0x198>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d855      	bhi.n	800c484 <Debug_LED_IncTic+0xcc>
 800c3d8:	a201      	add	r2, pc, #4	; (adr r2, 800c3e0 <Debug_LED_IncTic+0x28>)
 800c3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3de:	bf00      	nop
 800c3e0:	0800c46b 	.word	0x0800c46b
 800c3e4:	0800c415 	.word	0x0800c415
 800c3e8:	0800c43b 	.word	0x0800c43b
 800c3ec:	0800c3f1 	.word	0x0800c3f1
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c3f0:	4b58      	ldr	r3, [pc, #352]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a57      	ldr	r2, [pc, #348]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c3f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c3fa:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0; 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;}
 800c3fc:	4b55      	ldr	r3, [pc, #340]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a54      	ldr	r2, [pc, #336]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	2201      	movs	r2, #1
 800c40a:	2110      	movs	r1, #16
 800c40c:	4851      	ldr	r0, [pc, #324]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c40e:	f7f6 fcb8 	bl	8002d82 <HAL_GPIO_WritePin>
 800c412:	e038      	b.n	800c486 <Debug_LED_IncTic+0xce>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800c414:	4b4f      	ldr	r3, [pc, #316]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a4e      	ldr	r2, [pc, #312]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c41a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c41e:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800c420:	4b4c      	ldr	r3, [pc, #304]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a4b      	ldr	r2, [pc, #300]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c42a:	6013      	str	r3, [r2, #0]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c432:	4848      	ldr	r0, [pc, #288]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c434:	f7f6 fca5 	bl	8002d82 <HAL_GPIO_WritePin>
 800c438:	e025      	b.n	800c486 <Debug_LED_IncTic+0xce>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800c43a:	4b46      	ldr	r3, [pc, #280]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a45      	ldr	r2, [pc, #276]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	2201      	movs	r2, #1
 800c448:	2110      	movs	r1, #16
 800c44a:	4842      	ldr	r0, [pc, #264]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c44c:	f7f6 fc99 	bl	8002d82 <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800c450:	4b40      	ldr	r3, [pc, #256]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a3f      	ldr	r2, [pc, #252]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c462:	483c      	ldr	r0, [pc, #240]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c464:	f7f6 fc8d 	bl	8002d82 <HAL_GPIO_WritePin>
 800c468:	e00d      	b.n	800c486 <Debug_LED_IncTic+0xce>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c46a:	4b3a      	ldr	r3, [pc, #232]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a39      	ldr	r2, [pc, #228]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c470:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c474:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800c476:	4b37      	ldr	r3, [pc, #220]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a36      	ldr	r2, [pc, #216]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	e000      	b.n	800c486 <Debug_LED_IncTic+0xce>
			default:		{break;}
 800c484:	bf00      	nop
		}
	}
	if (switch_timer == 0) {
 800c486:	4b31      	ldr	r3, [pc, #196]	; (800c54c <Debug_LED_IncTic+0x194>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d15c      	bne.n	800c548 <Debug_LED_IncTic+0x190>
		switch (Debug_LED2) {
 800c48e:	4b32      	ldr	r3, [pc, #200]	; (800c558 <Debug_LED_IncTic+0x1a0>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b03      	cmp	r3, #3
 800c494:	d854      	bhi.n	800c540 <Debug_LED_IncTic+0x188>
 800c496:	a201      	add	r2, pc, #4	; (adr r2, 800c49c <Debug_LED_IncTic+0xe4>)
 800c498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49c:	0800c527 	.word	0x0800c527
 800c4a0:	0800c4d3 	.word	0x0800c4d3
 800c4a4:	0800c4f7 	.word	0x0800c4f7
 800c4a8:	0800c4ad 	.word	0x0800c4ad
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800c4ac:	4b29      	ldr	r3, [pc, #164]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a28      	ldr	r2, [pc, #160]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4b6:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0; 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800c4b8:	4b26      	ldr	r3, [pc, #152]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a25      	ldr	r2, [pc, #148]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c4ca:	4822      	ldr	r0, [pc, #136]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4cc:	f7f6 fc59 	bl	8002d82 <HAL_GPIO_WritePin>
 800c4d0:	e037      	b.n	800c542 <Debug_LED_IncTic+0x18a>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c4d2:	4b20      	ldr	r3, [pc, #128]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a1f      	ldr	r2, [pc, #124]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c4dc:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;}
 800c4de:	4b1d      	ldr	r3, [pc, #116]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a1c      	ldr	r2, [pc, #112]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4e8:	6013      	str	r3, [r2, #0]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	2110      	movs	r1, #16
 800c4ee:	4819      	ldr	r0, [pc, #100]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4f0:	f7f6 fc47 	bl	8002d82 <HAL_GPIO_WritePin>
 800c4f4:	e025      	b.n	800c542 <Debug_LED_IncTic+0x18a>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800c4f6:	4b17      	ldr	r3, [pc, #92]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a16      	ldr	r2, [pc, #88]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c4fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c500:	6013      	str	r3, [r2, #0]
 800c502:	2200      	movs	r2, #0
 800c504:	2110      	movs	r1, #16
 800c506:	4813      	ldr	r0, [pc, #76]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c508:	f7f6 fc3b 	bl	8002d82 <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800c50c:	4b11      	ldr	r3, [pc, #68]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a10      	ldr	r2, [pc, #64]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	2200      	movs	r2, #0
 800c51a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c51e:	480d      	ldr	r0, [pc, #52]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c520:	f7f6 fc2f 	bl	8002d82 <HAL_GPIO_WritePin>
 800c524:	e00d      	b.n	800c542 <Debug_LED_IncTic+0x18a>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a0a      	ldr	r2, [pc, #40]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c52c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800c530:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800c532:	4b08      	ldr	r3, [pc, #32]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a07      	ldr	r2, [pc, #28]	; (800c554 <Debug_LED_IncTic+0x19c>)
 800c538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	e000      	b.n	800c542 <Debug_LED_IncTic+0x18a>
			default:		{break;}
 800c540:	bf00      	nop
		}
		switch_timer = 22;
 800c542:	4b02      	ldr	r3, [pc, #8]	; (800c54c <Debug_LED_IncTic+0x194>)
 800c544:	2216      	movs	r2, #22
 800c546:	701a      	strb	r2, [r3, #0]
	}

}
 800c548:	bf00      	nop
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	2000015c 	.word	0x2000015c
 800c550:	2000072d 	.word	0x2000072d
 800c554:	40020800 	.word	0x40020800
 800c558:	2000072e 	.word	0x2000072e

0800c55c <Debug_LED_Init>:

}



void Debug_LED_Init (void){
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0

	Debug_LED1 = BLACK;
 800c560:	4b04      	ldr	r3, [pc, #16]	; (800c574 <Debug_LED_Init+0x18>)
 800c562:	2200      	movs	r2, #0
 800c564:	701a      	strb	r2, [r3, #0]
	Debug_LED2 = BLACK;
 800c566:	4b04      	ldr	r3, [pc, #16]	; (800c578 <Debug_LED_Init+0x1c>)
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
//	Debug_UART( "Debug_LED init\r\n", DBG_OK, 16);

}
 800c56c:	bf00      	nop
 800c56e:	46bd      	mov	sp, r7
 800c570:	bc80      	pop	{r7}
 800c572:	4770      	bx	lr
 800c574:	2000072d 	.word	0x2000072d
 800c578:	2000072e 	.word	0x2000072e

0800c57c <MM_Init>:
//{
//	__RBIT(data);
//        return data;
//};

void MM_Init(void){
 800c57c:	b580      	push	{r7, lr}
 800c57e:	af00      	add	r7, sp, #0

	Spi_LED_Init();
 800c580:	f000 f8d8 	bl	800c734 <Spi_LED_Init>
	Buttons_Init();
 800c584:	f7ff fe84 	bl	800c290 <Buttons_Init>
	Debug_LED_Init();
 800c588:	f7ff ffe8 	bl	800c55c <Debug_LED_Init>
	Out_Init();
 800c58c:	f000 f862 	bl	800c654 <Out_Init>

//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\033[36mParametrica.ru\033[0m\r\n", 27, 5);
//	init_OK = 1;
}
 800c590:	bf00      	nop
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_IncTick>:


void HAL_IncTick(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c598:	4b0a      	ldr	r3, [pc, #40]	; (800c5c4 <HAL_IncTick+0x30>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	461a      	mov	r2, r3
 800c59e:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <HAL_IncTick+0x34>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	4a08      	ldr	r2, [pc, #32]	; (800c5c8 <HAL_IncTick+0x34>)
 800c5a6:	6013      	str	r3, [r2, #0]
  if (init_OK){
 800c5a8:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <HAL_IncTick+0x38>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d007      	beq.n	800c5c0 <HAL_IncTick+0x2c>
	  Main_IncTic();
 800c5b0:	f7f4 faf4 	bl	8000b9c <Main_IncTic>
	  Debug_LED_IncTic();
 800c5b4:	f7ff ff00 	bl	800c3b8 <Debug_LED_IncTic>
	  Button_IncTick();
 800c5b8:	f7ff fca6 	bl	800bf08 <Button_IncTick>
	  Spi_LED_IncTick();
 800c5bc:	f000 f86e 	bl	800c69c <Spi_LED_IncTick>

  }
}
 800c5c0:	bf00      	nop
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20000048 	.word	0x20000048
 800c5c8:	200006c8 	.word	0x200006c8
 800c5cc:	2000072f 	.word	0x2000072f

0800c5d0 <Set_Out>:

#include "out.h"
#include "tim.h"
#include "debug_LED.h"

void Set_Out(PowerChannelTypeDef Channel, uint16_t volume){
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	460a      	mov	r2, r1
 800c5da:	71fb      	strb	r3, [r7, #7]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	80bb      	strh	r3, [r7, #4]
if (volume > 1000) {volume = 1000;}
 800c5e0:	88bb      	ldrh	r3, [r7, #4]
 800c5e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5e6:	d902      	bls.n	800c5ee <Set_Out+0x1e>
 800c5e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5ec:	80bb      	strh	r3, [r7, #4]
	if (Channel == P_OUT_1){TIM4->CCR1 = volume;}
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d102      	bne.n	800c5fa <Set_Out+0x2a>
 800c5f4:	4a15      	ldr	r2, [pc, #84]	; (800c64c <Set_Out+0x7c>)
 800c5f6:	88bb      	ldrh	r3, [r7, #4]
 800c5f8:	6353      	str	r3, [r2, #52]	; 0x34
	if (Channel == P_OUT_2){TIM4->CCR2 = volume;}
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d102      	bne.n	800c606 <Set_Out+0x36>
 800c600:	4a12      	ldr	r2, [pc, #72]	; (800c64c <Set_Out+0x7c>)
 800c602:	88bb      	ldrh	r3, [r7, #4]
 800c604:	6393      	str	r3, [r2, #56]	; 0x38
	if (Channel == P_OUT_3){TIM4->CCR3 = volume;}
 800c606:	79fb      	ldrb	r3, [r7, #7]
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d102      	bne.n	800c612 <Set_Out+0x42>
 800c60c:	4a0f      	ldr	r2, [pc, #60]	; (800c64c <Set_Out+0x7c>)
 800c60e:	88bb      	ldrh	r3, [r7, #4]
 800c610:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Channel == P_OUT_4){TIM4->CCR4 = volume;}
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	2b03      	cmp	r3, #3
 800c616:	d102      	bne.n	800c61e <Set_Out+0x4e>
 800c618:	4a0c      	ldr	r2, [pc, #48]	; (800c64c <Set_Out+0x7c>)
 800c61a:	88bb      	ldrh	r3, [r7, #4]
 800c61c:	6413      	str	r3, [r2, #64]	; 0x40
	if (Channel == P_OUT_5){TIM3->CCR3 = volume;}
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	2b04      	cmp	r3, #4
 800c622:	d102      	bne.n	800c62a <Set_Out+0x5a>
 800c624:	4a0a      	ldr	r2, [pc, #40]	; (800c650 <Set_Out+0x80>)
 800c626:	88bb      	ldrh	r3, [r7, #4]
 800c628:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Channel == P_OUT_6){TIM3->CCR4 = volume;}
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	2b05      	cmp	r3, #5
 800c62e:	d102      	bne.n	800c636 <Set_Out+0x66>
 800c630:	4a07      	ldr	r2, [pc, #28]	; (800c650 <Set_Out+0x80>)
 800c632:	88bb      	ldrh	r3, [r7, #4]
 800c634:	6413      	str	r3, [r2, #64]	; 0x40
	if (Channel == P_OUT_7){TIM3->CCR1 = volume;}
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	2b06      	cmp	r3, #6
 800c63a:	d102      	bne.n	800c642 <Set_Out+0x72>
 800c63c:	4a04      	ldr	r2, [pc, #16]	; (800c650 <Set_Out+0x80>)
 800c63e:	88bb      	ldrh	r3, [r7, #4]
 800c640:	6353      	str	r3, [r2, #52]	; 0x34

}
 800c642:	bf00      	nop
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	bc80      	pop	{r7}
 800c64a:	4770      	bx	lr
 800c64c:	40000800 	.word	0x40000800
 800c650:	40000400 	.word	0x40000400

0800c654 <Out_Init>:
	if (Channel == P_OUT_1234){TIM4->PSC = volume;}
	if (Channel == P_OUT_567){TIM3->PSC = volume;}


}
void Out_Init(void){
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim4);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800c658:	2100      	movs	r1, #0
 800c65a:	480e      	ldr	r0, [pc, #56]	; (800c694 <Out_Init+0x40>)
 800c65c:	f7fa fae6 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800c660:	2104      	movs	r1, #4
 800c662:	480c      	ldr	r0, [pc, #48]	; (800c694 <Out_Init+0x40>)
 800c664:	f7fa fae2 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800c668:	2108      	movs	r1, #8
 800c66a:	480a      	ldr	r0, [pc, #40]	; (800c694 <Out_Init+0x40>)
 800c66c:	f7fa fade 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800c670:	210c      	movs	r1, #12
 800c672:	4808      	ldr	r0, [pc, #32]	; (800c694 <Out_Init+0x40>)
 800c674:	f7fa fada 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800c678:	2100      	movs	r1, #0
 800c67a:	4807      	ldr	r0, [pc, #28]	; (800c698 <Out_Init+0x44>)
 800c67c:	f7fa fad6 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800c680:	2108      	movs	r1, #8
 800c682:	4805      	ldr	r0, [pc, #20]	; (800c698 <Out_Init+0x44>)
 800c684:	f7fa fad2 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800c688:	210c      	movs	r1, #12
 800c68a:	4803      	ldr	r0, [pc, #12]	; (800c698 <Out_Init+0x44>)
 800c68c:	f7fa face 	bl	8006c2c <HAL_TIM_PWM_Start>

//	Debug_UART((uint8_t *) "Out init\r\n", DBG_OK, 10);

}
 800c690:	bf00      	nop
 800c692:	bd80      	pop	{r7, pc}
 800c694:	200005f8 	.word	0x200005f8
 800c698:	200005b0 	.word	0x200005b0

0800c69c <Spi_LED_IncTick>:


//=========================================================================================================

void Spi_LED_IncTick(void)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0

//-------------------------------------------------------------
	Frame_Delay--;
 800c6a0:	4b1e      	ldr	r3, [pc, #120]	; (800c71c <Spi_LED_IncTick+0x80>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	4b1c      	ldr	r3, [pc, #112]	; (800c71c <Spi_LED_IncTick+0x80>)
 800c6aa:	801a      	strh	r2, [r3, #0]

	if (Frame_Delay == 2) {
 800c6ac:	4b1b      	ldr	r3, [pc, #108]	; (800c71c <Spi_LED_IncTick+0x80>)
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d112      	bne.n	800c6da <Spi_LED_IncTick+0x3e>
		if (Spi_LED_Cmplt_Frame_Flag & 0x01){
 800c6b4:	4b1a      	ldr	r3, [pc, #104]	; (800c720 <Spi_LED_IncTick+0x84>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00c      	beq.n	800c6da <Spi_LED_IncTick+0x3e>
			//HAL_SPI_Transmit(&hspi1, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi1, &OutputArray[0][0].Green , LED_MAX * 3);
 800c6c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c6c4:	4917      	ldr	r1, [pc, #92]	; (800c724 <Spi_LED_IncTick+0x88>)
 800c6c6:	4818      	ldr	r0, [pc, #96]	; (800c728 <Spi_LED_IncTick+0x8c>)
 800c6c8:	f7fa f870 	bl	80067ac <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x01;
 800c6cc:	4b14      	ldr	r3, [pc, #80]	; (800c720 <Spi_LED_IncTick+0x84>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	f023 0301 	bic.w	r3, r3, #1
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	4b12      	ldr	r3, [pc, #72]	; (800c720 <Spi_LED_IncTick+0x84>)
 800c6d8:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 1) {
 800c6da:	4b10      	ldr	r3, [pc, #64]	; (800c71c <Spi_LED_IncTick+0x80>)
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d112      	bne.n	800c708 <Spi_LED_IncTick+0x6c>
		if (Spi_LED_Cmplt_Frame_Flag & 0x02){
 800c6e2:	4b0f      	ldr	r3, [pc, #60]	; (800c720 <Spi_LED_IncTick+0x84>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	f003 0302 	and.w	r3, r3, #2
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00c      	beq.n	800c708 <Spi_LED_IncTick+0x6c>
			//HAL_SPI_Transmit(&hspi2, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi2, &OutputArray[1][0].Green , LED_MAX * 3);
 800c6ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c6f2:	490e      	ldr	r1, [pc, #56]	; (800c72c <Spi_LED_IncTick+0x90>)
 800c6f4:	480e      	ldr	r0, [pc, #56]	; (800c730 <Spi_LED_IncTick+0x94>)
 800c6f6:	f7fa f859 	bl	80067ac <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x02;
 800c6fa:	4b09      	ldr	r3, [pc, #36]	; (800c720 <Spi_LED_IncTick+0x84>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	f023 0302 	bic.w	r3, r3, #2
 800c702:	b2da      	uxtb	r2, r3
 800c704:	4b06      	ldr	r3, [pc, #24]	; (800c720 <Spi_LED_IncTick+0x84>)
 800c706:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 0) {
 800c708:	4b04      	ldr	r3, [pc, #16]	; (800c71c <Spi_LED_IncTick+0x80>)
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d102      	bne.n	800c716 <Spi_LED_IncTick+0x7a>
		Frame_Delay = 1000 / SPI_FREQ;
 800c710:	4b02      	ldr	r3, [pc, #8]	; (800c71c <Spi_LED_IncTick+0x80>)
 800c712:	2232      	movs	r2, #50	; 0x32
 800c714:	801a      	strh	r2, [r3, #0]
	}
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	2000015e 	.word	0x2000015e
 800c720:	20000730 	.word	0x20000730
 800c724:	20000734 	.word	0x20000734
 800c728:	200003e4 	.word	0x200003e4
 800c72c:	200012ec 	.word	0x200012ec
 800c730:	2000043c 	.word	0x2000043c

0800c734 <Spi_LED_Init>:
//=========================================================================================================
void Spi_LED_Init(void){
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
	Spi_LED_Cmplt_Frame_Flag |= 0x01 | 0x02;
 800c73a:	4b2f      	ldr	r3, [pc, #188]	; (800c7f8 <Spi_LED_Init+0xc4>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f043 0303 	orr.w	r3, r3, #3
 800c742:	b2da      	uxtb	r2, r3
 800c744:	4b2c      	ldr	r3, [pc, #176]	; (800c7f8 <Spi_LED_Init+0xc4>)
 800c746:	701a      	strb	r2, [r3, #0]

	extern DMA_HandleTypeDef hdma_spi1_tx;
	extern DMA_HandleTypeDef hdma_spi2_tx;

	HAL_DMA_Init(&hdma_spi1_tx);
 800c748:	482c      	ldr	r0, [pc, #176]	; (800c7fc <Spi_LED_Init+0xc8>)
 800c74a:	f7f5 fc0b 	bl	8001f64 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi2_tx);
 800c74e:	482c      	ldr	r0, [pc, #176]	; (800c800 <Spi_LED_Init+0xcc>)
 800c750:	f7f5 fc08 	bl	8001f64 <HAL_DMA_Init>

	for (uint16_t i = 0; i < LED_MAX; i++){
 800c754:	2300      	movs	r3, #0
 800c756:	80fb      	strh	r3, [r7, #6]
 800c758:	e01c      	b.n	800c794 <Spi_LED_Init+0x60>
		OutputArray[0][i].Green = g;
 800c75a:	88fa      	ldrh	r2, [r7, #6]
 800c75c:	4929      	ldr	r1, [pc, #164]	; (800c804 <Spi_LED_Init+0xd0>)
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	440b      	add	r3, r1
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Red 	= r;
 800c76a:	88fa      	ldrh	r2, [r7, #6]
 800c76c:	4925      	ldr	r1, [pc, #148]	; (800c804 <Spi_LED_Init+0xd0>)
 800c76e:	4613      	mov	r3, r2
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	4413      	add	r3, r2
 800c774:	440b      	add	r3, r1
 800c776:	3301      	adds	r3, #1
 800c778:	2200      	movs	r2, #0
 800c77a:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Blue 	= b;
 800c77c:	88fa      	ldrh	r2, [r7, #6]
 800c77e:	4921      	ldr	r1, [pc, #132]	; (800c804 <Spi_LED_Init+0xd0>)
 800c780:	4613      	mov	r3, r2
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	4413      	add	r3, r2
 800c786:	440b      	add	r3, r1
 800c788:	3302      	adds	r3, #2
 800c78a:	2200      	movs	r2, #0
 800c78c:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800c78e:	88fb      	ldrh	r3, [r7, #6]
 800c790:	3301      	adds	r3, #1
 800c792:	80fb      	strh	r3, [r7, #6]
 800c794:	88fb      	ldrh	r3, [r7, #6]
 800c796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c79a:	d3de      	bcc.n	800c75a <Spi_LED_Init+0x26>
	}

	for (uint16_t i = 0; i < LED_MAX; i++){
 800c79c:	2300      	movs	r3, #0
 800c79e:	80bb      	strh	r3, [r7, #4]
 800c7a0:	e020      	b.n	800c7e4 <Spi_LED_Init+0xb0>
		OutputArray[1][i].Green =	g;
 800c7a2:	88ba      	ldrh	r2, [r7, #4]
 800c7a4:	4917      	ldr	r1, [pc, #92]	; (800c804 <Spi_LED_Init+0xd0>)
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	440b      	add	r3, r1
 800c7ae:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Red 	=	r;
 800c7b6:	88ba      	ldrh	r2, [r7, #4]
 800c7b8:	4912      	ldr	r1, [pc, #72]	; (800c804 <Spi_LED_Init+0xd0>)
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	4413      	add	r3, r2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Blue 	=	b;
 800c7ca:	88ba      	ldrh	r2, [r7, #4]
 800c7cc:	490d      	ldr	r1, [pc, #52]	; (800c804 <Spi_LED_Init+0xd0>)
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4413      	add	r3, r2
 800c7d4:	440b      	add	r3, r1
 800c7d6:	f603 33ba 	addw	r3, r3, #3002	; 0xbba
 800c7da:	2200      	movs	r2, #0
 800c7dc:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800c7de:	88bb      	ldrh	r3, [r7, #4]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	80bb      	strh	r3, [r7, #4]
 800c7e4:	88bb      	ldrh	r3, [r7, #4]
 800c7e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7ea:	d3da      	bcc.n	800c7a2 <Spi_LED_Init+0x6e>


//	Debug_UART((uint8_t *) "SPI_LED init\r\n", DBG_OK, 14);


}
 800c7ec:	bf00      	nop
 800c7ee:	bf00      	nop
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20000730 	.word	0x20000730
 800c7fc:	200004ec 	.word	0x200004ec
 800c800:	2000054c 	.word	0x2000054c
 800c804:	20000734 	.word	0x20000734

0800c808 <HAL_SPI_TxCpltCallback>:
//=========================================================================================================
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1){Spi_LED_Cmplt_Frame_Flag |= 0x01;}
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a0d      	ldr	r2, [pc, #52]	; (800c84c <HAL_SPI_TxCpltCallback+0x44>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d106      	bne.n	800c828 <HAL_SPI_TxCpltCallback+0x20>
 800c81a:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <HAL_SPI_TxCpltCallback+0x48>)
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	f043 0301 	orr.w	r3, r3, #1
 800c822:	b2da      	uxtb	r2, r3
 800c824:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <HAL_SPI_TxCpltCallback+0x48>)
 800c826:	701a      	strb	r2, [r3, #0]
	if (hspi->Instance == SPI2){Spi_LED_Cmplt_Frame_Flag |= 0x02;}
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a09      	ldr	r2, [pc, #36]	; (800c854 <HAL_SPI_TxCpltCallback+0x4c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d106      	bne.n	800c840 <HAL_SPI_TxCpltCallback+0x38>
 800c832:	4b07      	ldr	r3, [pc, #28]	; (800c850 <HAL_SPI_TxCpltCallback+0x48>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	f043 0302 	orr.w	r3, r3, #2
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	4b04      	ldr	r3, [pc, #16]	; (800c850 <HAL_SPI_TxCpltCallback+0x48>)
 800c83e:	701a      	strb	r2, [r3, #0]
//	itoa(tmp, string + 2, 16);
//	string[14] = Spi_LED_Cmplt_Frame_Flag + 0x30;
//	if (string[15] == *" ") {string[15] = *".";} else {string[15] = *" ";}
//	HAL_UART_Transmit(&huart2, string, 16, 2);

}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	bc80      	pop	{r7}
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	40013000 	.word	0x40013000
 800c850:	20000730 	.word	0x20000730
 800c854:	40003800 	.word	0x40003800

0800c858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c85c:	2200      	movs	r2, #0
 800c85e:	4912      	ldr	r1, [pc, #72]	; (800c8a8 <MX_USB_DEVICE_Init+0x50>)
 800c860:	4812      	ldr	r0, [pc, #72]	; (800c8ac <MX_USB_DEVICE_Init+0x54>)
 800c862:	f7fe f935 	bl	800aad0 <USBD_Init>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c86c:	f7f4 fadc 	bl	8000e28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c870:	490f      	ldr	r1, [pc, #60]	; (800c8b0 <MX_USB_DEVICE_Init+0x58>)
 800c872:	480e      	ldr	r0, [pc, #56]	; (800c8ac <MX_USB_DEVICE_Init+0x54>)
 800c874:	f7fe f957 	bl	800ab26 <USBD_RegisterClass>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c87e:	f7f4 fad3 	bl	8000e28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c882:	490c      	ldr	r1, [pc, #48]	; (800c8b4 <MX_USB_DEVICE_Init+0x5c>)
 800c884:	4809      	ldr	r0, [pc, #36]	; (800c8ac <MX_USB_DEVICE_Init+0x54>)
 800c886:	f7fe f8b7 	bl	800a9f8 <USBD_CDC_RegisterInterface>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c890:	f7f4 faca 	bl	8000e28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c894:	4805      	ldr	r0, [pc, #20]	; (800c8ac <MX_USB_DEVICE_Init+0x54>)
 800c896:	f7fe f95f 	bl	800ab58 <USBD_Start>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c8a0:	f7f4 fac2 	bl	8000e28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c8a4:	bf00      	nop
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20000170 	.word	0x20000170
 800c8ac:	20001ea4 	.word	0x20001ea4
 800c8b0:	20000058 	.word	0x20000058
 800c8b4:	20000160 	.word	0x20000160

0800c8b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4905      	ldr	r1, [pc, #20]	; (800c8d4 <CDC_Init_FS+0x1c>)
 800c8c0:	4805      	ldr	r0, [pc, #20]	; (800c8d8 <CDC_Init_FS+0x20>)
 800c8c2:	f7fe f8af 	bl	800aa24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8c6:	4905      	ldr	r1, [pc, #20]	; (800c8dc <CDC_Init_FS+0x24>)
 800c8c8:	4803      	ldr	r0, [pc, #12]	; (800c8d8 <CDC_Init_FS+0x20>)
 800c8ca:	f7fe f8c4 	bl	800aa56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20002968 	.word	0x20002968
 800c8d8:	20001ea4 	.word	0x20001ea4
 800c8dc:	20002168 	.word	0x20002168

0800c8e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bc80      	pop	{r7}
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	6039      	str	r1, [r7, #0]
 800c8fa:	71fb      	strb	r3, [r7, #7]
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	2b23      	cmp	r3, #35	; 0x23
 800c904:	d84a      	bhi.n	800c99c <CDC_Control_FS+0xac>
 800c906:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <CDC_Control_FS+0x1c>)
 800c908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90c:	0800c99d 	.word	0x0800c99d
 800c910:	0800c99d 	.word	0x0800c99d
 800c914:	0800c99d 	.word	0x0800c99d
 800c918:	0800c99d 	.word	0x0800c99d
 800c91c:	0800c99d 	.word	0x0800c99d
 800c920:	0800c99d 	.word	0x0800c99d
 800c924:	0800c99d 	.word	0x0800c99d
 800c928:	0800c99d 	.word	0x0800c99d
 800c92c:	0800c99d 	.word	0x0800c99d
 800c930:	0800c99d 	.word	0x0800c99d
 800c934:	0800c99d 	.word	0x0800c99d
 800c938:	0800c99d 	.word	0x0800c99d
 800c93c:	0800c99d 	.word	0x0800c99d
 800c940:	0800c99d 	.word	0x0800c99d
 800c944:	0800c99d 	.word	0x0800c99d
 800c948:	0800c99d 	.word	0x0800c99d
 800c94c:	0800c99d 	.word	0x0800c99d
 800c950:	0800c99d 	.word	0x0800c99d
 800c954:	0800c99d 	.word	0x0800c99d
 800c958:	0800c99d 	.word	0x0800c99d
 800c95c:	0800c99d 	.word	0x0800c99d
 800c960:	0800c99d 	.word	0x0800c99d
 800c964:	0800c99d 	.word	0x0800c99d
 800c968:	0800c99d 	.word	0x0800c99d
 800c96c:	0800c99d 	.word	0x0800c99d
 800c970:	0800c99d 	.word	0x0800c99d
 800c974:	0800c99d 	.word	0x0800c99d
 800c978:	0800c99d 	.word	0x0800c99d
 800c97c:	0800c99d 	.word	0x0800c99d
 800c980:	0800c99d 	.word	0x0800c99d
 800c984:	0800c99d 	.word	0x0800c99d
 800c988:	0800c99d 	.word	0x0800c99d
 800c98c:	0800c99d 	.word	0x0800c99d
 800c990:	0800c99d 	.word	0x0800c99d
 800c994:	0800c99d 	.word	0x0800c99d
 800c998:	0800c99d 	.word	0x0800c99d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c99c:	bf00      	nop
  }

  return (USBD_OK);
 800c99e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bc80      	pop	{r7}
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop

0800c9ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9b6:	6879      	ldr	r1, [r7, #4]
 800c9b8:	4805      	ldr	r0, [pc, #20]	; (800c9d0 <CDC_Receive_FS+0x24>)
 800c9ba:	f7fe f84c 	bl	800aa56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9be:	4804      	ldr	r0, [pc, #16]	; (800c9d0 <CDC_Receive_FS+0x24>)
 800c9c0:	f7fe f85c 	bl	800aa7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c9c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20001ea4 	.word	0x20001ea4

0800c9d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	6039      	str	r1, [r7, #0]
 800c9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	2212      	movs	r2, #18
 800c9e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c9e6:	4b03      	ldr	r3, [pc, #12]	; (800c9f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	2000018c 	.word	0x2000018c

0800c9f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2204      	movs	r2, #4
 800ca08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca0a:	4b03      	ldr	r3, [pc, #12]	; (800ca18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bc80      	pop	{r7}
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	200001a0 	.word	0x200001a0

0800ca1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	6039      	str	r1, [r7, #0]
 800ca26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d105      	bne.n	800ca3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	4907      	ldr	r1, [pc, #28]	; (800ca50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca32:	4808      	ldr	r0, [pc, #32]	; (800ca54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca34:	f7ff f842 	bl	800babc <USBD_GetString>
 800ca38:	e004      	b.n	800ca44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4904      	ldr	r1, [pc, #16]	; (800ca50 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca3e:	4805      	ldr	r0, [pc, #20]	; (800ca54 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca40:	f7ff f83c 	bl	800babc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca44:	4b02      	ldr	r3, [pc, #8]	; (800ca50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	20003168 	.word	0x20003168
 800ca54:	0800d4b8 	.word	0x0800d4b8

0800ca58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	6039      	str	r1, [r7, #0]
 800ca62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	4904      	ldr	r1, [pc, #16]	; (800ca78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca68:	4804      	ldr	r0, [pc, #16]	; (800ca7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca6a:	f7ff f827 	bl	800babc <USBD_GetString>
  return USBD_StrDesc;
 800ca6e:	4b02      	ldr	r3, [pc, #8]	; (800ca78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20003168 	.word	0x20003168
 800ca7c:	0800d4cc 	.word	0x0800d4cc

0800ca80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	6039      	str	r1, [r7, #0]
 800ca8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	221a      	movs	r2, #26
 800ca90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca92:	f000 f843 	bl	800cb1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca96:	4b02      	ldr	r3, [pc, #8]	; (800caa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	200001a4 	.word	0x200001a4

0800caa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	6039      	str	r1, [r7, #0]
 800caae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d105      	bne.n	800cac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	4907      	ldr	r1, [pc, #28]	; (800cad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800caba:	4808      	ldr	r0, [pc, #32]	; (800cadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cabc:	f7fe fffe 	bl	800babc <USBD_GetString>
 800cac0:	e004      	b.n	800cacc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	4904      	ldr	r1, [pc, #16]	; (800cad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cac6:	4805      	ldr	r0, [pc, #20]	; (800cadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cac8:	f7fe fff8 	bl	800babc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cacc:	4b02      	ldr	r3, [pc, #8]	; (800cad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20003168 	.word	0x20003168
 800cadc:	0800d4e0 	.word	0x0800d4e0

0800cae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	6039      	str	r1, [r7, #0]
 800caea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d105      	bne.n	800cafe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	4907      	ldr	r1, [pc, #28]	; (800cb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caf6:	4808      	ldr	r0, [pc, #32]	; (800cb18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800caf8:	f7fe ffe0 	bl	800babc <USBD_GetString>
 800cafc:	e004      	b.n	800cb08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cafe:	683a      	ldr	r2, [r7, #0]
 800cb00:	4904      	ldr	r1, [pc, #16]	; (800cb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb02:	4805      	ldr	r0, [pc, #20]	; (800cb18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb04:	f7fe ffda 	bl	800babc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb08:	4b02      	ldr	r3, [pc, #8]	; (800cb14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20003168 	.word	0x20003168
 800cb18:	0800d4ec 	.word	0x0800d4ec

0800cb1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb22:	4b0f      	ldr	r3, [pc, #60]	; (800cb60 <Get_SerialNum+0x44>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb28:	4b0e      	ldr	r3, [pc, #56]	; (800cb64 <Get_SerialNum+0x48>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	; (800cb68 <Get_SerialNum+0x4c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4413      	add	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d009      	beq.n	800cb56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb42:	2208      	movs	r2, #8
 800cb44:	4909      	ldr	r1, [pc, #36]	; (800cb6c <Get_SerialNum+0x50>)
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 f814 	bl	800cb74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb4c:	2204      	movs	r2, #4
 800cb4e:	4908      	ldr	r1, [pc, #32]	; (800cb70 <Get_SerialNum+0x54>)
 800cb50:	68b8      	ldr	r0, [r7, #8]
 800cb52:	f000 f80f 	bl	800cb74 <IntToUnicode>
  }
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	1fff7a10 	.word	0x1fff7a10
 800cb64:	1fff7a14 	.word	0x1fff7a14
 800cb68:	1fff7a18 	.word	0x1fff7a18
 800cb6c:	200001a6 	.word	0x200001a6
 800cb70:	200001b6 	.word	0x200001b6

0800cb74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb86:	2300      	movs	r3, #0
 800cb88:	75fb      	strb	r3, [r7, #23]
 800cb8a:	e027      	b.n	800cbdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	0f1b      	lsrs	r3, r3, #28
 800cb90:	2b09      	cmp	r3, #9
 800cb92:	d80b      	bhi.n	800cbac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	0f1b      	lsrs	r3, r3, #28
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	7dfb      	ldrb	r3, [r7, #23]
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	4619      	mov	r1, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	440b      	add	r3, r1
 800cba4:	3230      	adds	r2, #48	; 0x30
 800cba6:	b2d2      	uxtb	r2, r2
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	e00a      	b.n	800cbc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	0f1b      	lsrs	r3, r3, #28
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	440b      	add	r3, r1
 800cbbc:	3237      	adds	r2, #55	; 0x37
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	3301      	adds	r3, #1
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	75fb      	strb	r3, [r7, #23]
 800cbdc:	7dfa      	ldrb	r2, [r7, #23]
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d3d3      	bcc.n	800cb8c <IntToUnicode+0x18>
  }
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bc80      	pop	{r7}
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08a      	sub	sp, #40	; 0x28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbf8:	f107 0314 	add.w	r3, r7, #20
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	605a      	str	r2, [r3, #4]
 800cc02:	609a      	str	r2, [r3, #8]
 800cc04:	60da      	str	r2, [r3, #12]
 800cc06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc10:	d147      	bne.n	800cca2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc12:	2300      	movs	r3, #0
 800cc14:	613b      	str	r3, [r7, #16]
 800cc16:	4b25      	ldr	r3, [pc, #148]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1a:	4a24      	ldr	r2, [pc, #144]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc1c:	f043 0301 	orr.w	r3, r3, #1
 800cc20:	6313      	str	r3, [r2, #48]	; 0x30
 800cc22:	4b22      	ldr	r3, [pc, #136]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	613b      	str	r3, [r7, #16]
 800cc2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cc2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc34:	2300      	movs	r3, #0
 800cc36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc3c:	f107 0314 	add.w	r3, r7, #20
 800cc40:	4619      	mov	r1, r3
 800cc42:	481b      	ldr	r0, [pc, #108]	; (800ccb0 <HAL_PCD_MspInit+0xc0>)
 800cc44:	f7f5 fdea 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cc4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc4e:	2302      	movs	r3, #2
 800cc50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc56:	2303      	movs	r3, #3
 800cc58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cc5a:	230a      	movs	r3, #10
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc5e:	f107 0314 	add.w	r3, r7, #20
 800cc62:	4619      	mov	r1, r3
 800cc64:	4812      	ldr	r0, [pc, #72]	; (800ccb0 <HAL_PCD_MspInit+0xc0>)
 800cc66:	f7f5 fdd9 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc6a:	4b10      	ldr	r3, [pc, #64]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6e:	4a0f      	ldr	r2, [pc, #60]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc74:	6353      	str	r3, [r2, #52]	; 0x34
 800cc76:	2300      	movs	r3, #0
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc7e:	4a0b      	ldr	r2, [pc, #44]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc84:	6453      	str	r3, [r2, #68]	; 0x44
 800cc86:	4b09      	ldr	r3, [pc, #36]	; (800ccac <HAL_PCD_MspInit+0xbc>)
 800cc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc8e:	60fb      	str	r3, [r7, #12]
 800cc90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc92:	2200      	movs	r2, #0
 800cc94:	2100      	movs	r1, #0
 800cc96:	2043      	movs	r0, #67	; 0x43
 800cc98:	f7f5 f911 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc9c:	2043      	movs	r0, #67	; 0x43
 800cc9e:	f7f5 f92a 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cca2:	bf00      	nop
 800cca4:	3728      	adds	r7, #40	; 0x28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	40023800 	.word	0x40023800
 800ccb0:	40020000 	.word	0x40020000

0800ccb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4610      	mov	r0, r2
 800cccc:	f7fd ff8c 	bl	800abe8 <USBD_LL_SetupStage>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ccea:	78fa      	ldrb	r2, [r7, #3]
 800ccec:	6879      	ldr	r1, [r7, #4]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	1a9b      	subs	r3, r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	440b      	add	r3, r1
 800ccf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	78fb      	ldrb	r3, [r7, #3]
 800cd00:	4619      	mov	r1, r3
 800cd02:	f7fd ffbe 	bl	800ac82 <USBD_LL_DataOutStage>
}
 800cd06:	bf00      	nop
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b082      	sub	sp, #8
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	460b      	mov	r3, r1
 800cd18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cd20:	78fa      	ldrb	r2, [r7, #3]
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	4613      	mov	r3, r2
 800cd26:	00db      	lsls	r3, r3, #3
 800cd28:	1a9b      	subs	r3, r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	440b      	add	r3, r1
 800cd2e:	3348      	adds	r3, #72	; 0x48
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	4619      	mov	r1, r3
 800cd36:	f7fe f815 	bl	800ad64 <USBD_LL_DataInStage>
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b082      	sub	sp, #8
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe f925 	bl	800afa0 <USBD_LL_SOF>
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd66:	2301      	movs	r3, #1
 800cd68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d102      	bne.n	800cd78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]
 800cd76:	e008      	b.n	800cd8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d102      	bne.n	800cd86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cd80:	2301      	movs	r3, #1
 800cd82:	73fb      	strb	r3, [r7, #15]
 800cd84:	e001      	b.n	800cd8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cd86:	f7f4 f84f 	bl	8000e28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cd90:	7bfa      	ldrb	r2, [r7, #15]
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fe f8cb 	bl	800af30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe f884 	bl	800aeae <USBD_LL_Reset>
}
 800cda6:	bf00      	nop
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe f8c5 	bl	800af4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6812      	ldr	r2, [r2, #0]
 800cdd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdd6:	f043 0301 	orr.w	r3, r3, #1
 800cdda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a1b      	ldr	r3, [r3, #32]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d005      	beq.n	800cdf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cde4:	4b04      	ldr	r3, [pc, #16]	; (800cdf8 <HAL_PCD_SuspendCallback+0x48>)
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	4a03      	ldr	r2, [pc, #12]	; (800cdf8 <HAL_PCD_SuspendCallback+0x48>)
 800cdea:	f043 0306 	orr.w	r3, r3, #6
 800cdee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cdf0:	bf00      	nop
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	e000ed00 	.word	0xe000ed00

0800cdfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe f8b3 	bl	800af76 <USBD_LL_Resume>
}
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ce2a:	78fa      	ldrb	r2, [r7, #3]
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe f8dc 	bl	800afec <USBD_LL_IsoOUTIncomplete>
}
 800ce34:	bf00      	nop
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ce4e:	78fa      	ldrb	r2, [r7, #3]
 800ce50:	4611      	mov	r1, r2
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe f8be 	bl	800afd4 <USBD_LL_IsoINIncomplete>
}
 800ce58:	bf00      	nop
 800ce5a:	3708      	adds	r7, #8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe f8c8 	bl	800b004 <USBD_LL_DevConnected>
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe f8c4 	bl	800b018 <USBD_LL_DevDisconnected>
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d139      	bne.n	800cf1c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cea8:	4a1f      	ldr	r2, [pc, #124]	; (800cf28 <USBD_LL_Init+0x90>)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a1d      	ldr	r2, [pc, #116]	; (800cf28 <USBD_LL_Init+0x90>)
 800ceb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ceb8:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <USBD_LL_Init+0x90>)
 800ceba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cebe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cec0:	4b19      	ldr	r3, [pc, #100]	; (800cf28 <USBD_LL_Init+0x90>)
 800cec2:	2204      	movs	r2, #4
 800cec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cec6:	4b18      	ldr	r3, [pc, #96]	; (800cf28 <USBD_LL_Init+0x90>)
 800cec8:	2202      	movs	r2, #2
 800ceca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cecc:	4b16      	ldr	r3, [pc, #88]	; (800cf28 <USBD_LL_Init+0x90>)
 800cece:	2200      	movs	r2, #0
 800ced0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ced2:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <USBD_LL_Init+0x90>)
 800ced4:	2202      	movs	r2, #2
 800ced6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ced8:	4b13      	ldr	r3, [pc, #76]	; (800cf28 <USBD_LL_Init+0x90>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cede:	4b12      	ldr	r3, [pc, #72]	; (800cf28 <USBD_LL_Init+0x90>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cee4:	4b10      	ldr	r3, [pc, #64]	; (800cf28 <USBD_LL_Init+0x90>)
 800cee6:	2201      	movs	r2, #1
 800cee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ceea:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <USBD_LL_Init+0x90>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cef0:	480d      	ldr	r0, [pc, #52]	; (800cf28 <USBD_LL_Init+0x90>)
 800cef2:	f7f6 f8a3 	bl	800303c <HAL_PCD_Init>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800cefc:	f7f3 ff94 	bl	8000e28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cf00:	2180      	movs	r1, #128	; 0x80
 800cf02:	4809      	ldr	r0, [pc, #36]	; (800cf28 <USBD_LL_Init+0x90>)
 800cf04:	f7f7 f9e0 	bl	80042c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cf08:	2240      	movs	r2, #64	; 0x40
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	4806      	ldr	r0, [pc, #24]	; (800cf28 <USBD_LL_Init+0x90>)
 800cf0e:	f7f7 f995 	bl	800423c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf12:	2280      	movs	r2, #128	; 0x80
 800cf14:	2101      	movs	r1, #1
 800cf16:	4804      	ldr	r0, [pc, #16]	; (800cf28 <USBD_LL_Init+0x90>)
 800cf18:	f7f7 f990 	bl	800423c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	20003368 	.word	0x20003368

0800cf2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7f6 f997 	bl	8003276 <HAL_PCD_Start>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 f92e 	bl	800d1b0 <USBD_Get_USB_Status>
 800cf54:	4603      	mov	r3, r0
 800cf56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b084      	sub	sp, #16
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	461a      	mov	r2, r3
 800cf70:	4603      	mov	r3, r0
 800cf72:	70fb      	strb	r3, [r7, #3]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70bb      	strb	r3, [r7, #2]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf8a:	78bb      	ldrb	r3, [r7, #2]
 800cf8c:	883a      	ldrh	r2, [r7, #0]
 800cf8e:	78f9      	ldrb	r1, [r7, #3]
 800cf90:	f7f6 fd5c 	bl	8003a4c <HAL_PCD_EP_Open>
 800cf94:	4603      	mov	r3, r0
 800cf96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 f908 	bl	800d1b0 <USBD_Get_USB_Status>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b084      	sub	sp, #16
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfc8:	78fa      	ldrb	r2, [r7, #3]
 800cfca:	4611      	mov	r1, r2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7f6 fda5 	bl	8003b1c <HAL_PCD_EP_Close>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 f8e9 	bl	800d1b0 <USBD_Get_USB_Status>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d006:	78fa      	ldrb	r2, [r7, #3]
 800d008:	4611      	mov	r1, r2
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7f6 fe7c 	bl	8003d08 <HAL_PCD_EP_SetStall>
 800d010:	4603      	mov	r3, r0
 800d012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f8ca 	bl	800d1b0 <USBD_Get_USB_Status>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d020:	7bbb      	ldrb	r3, [r7, #14]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b084      	sub	sp, #16
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	460b      	mov	r3, r1
 800d034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d044:	78fa      	ldrb	r2, [r7, #3]
 800d046:	4611      	mov	r1, r2
 800d048:	4618      	mov	r0, r3
 800d04a:	f7f6 fec1 	bl	8003dd0 <HAL_PCD_EP_ClrStall>
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d052:	7bfb      	ldrb	r3, [r7, #15]
 800d054:	4618      	mov	r0, r3
 800d056:	f000 f8ab 	bl	800d1b0 <USBD_Get_USB_Status>
 800d05a:	4603      	mov	r3, r0
 800d05c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d05e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d07a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d07c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d080:	2b00      	cmp	r3, #0
 800d082:	da0b      	bge.n	800d09c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d084:	78fb      	ldrb	r3, [r7, #3]
 800d086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d08a:	68f9      	ldr	r1, [r7, #12]
 800d08c:	4613      	mov	r3, r2
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	1a9b      	subs	r3, r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	440b      	add	r3, r1
 800d096:	333e      	adds	r3, #62	; 0x3e
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	e00b      	b.n	800d0b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	00db      	lsls	r3, r3, #3
 800d0a8:	1a9b      	subs	r3, r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	440b      	add	r3, r1
 800d0ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bc80      	pop	{r7}
 800d0bc:	4770      	bx	lr

0800d0be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0d8:	78fa      	ldrb	r2, [r7, #3]
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f6 fc90 	bl	8003a02 <HAL_PCD_SetAddress>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 f861 	bl	800d1b0 <USBD_Get_USB_Status>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	461a      	mov	r2, r3
 800d108:	460b      	mov	r3, r1
 800d10a:	72fb      	strb	r3, [r7, #11]
 800d10c:	4613      	mov	r3, r2
 800d10e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d11e:	893b      	ldrh	r3, [r7, #8]
 800d120:	7af9      	ldrb	r1, [r7, #11]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	f7f6 fda6 	bl	8003c74 <HAL_PCD_EP_Transmit>
 800d128:	4603      	mov	r3, r0
 800d12a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d12c:	7dfb      	ldrb	r3, [r7, #23]
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 f83e 	bl	800d1b0 <USBD_Get_USB_Status>
 800d134:	4603      	mov	r3, r0
 800d136:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d138:	7dbb      	ldrb	r3, [r7, #22]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b086      	sub	sp, #24
 800d146:	af00      	add	r7, sp, #0
 800d148:	60f8      	str	r0, [r7, #12]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	461a      	mov	r2, r3
 800d14e:	460b      	mov	r3, r1
 800d150:	72fb      	strb	r3, [r7, #11]
 800d152:	4613      	mov	r3, r2
 800d154:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d164:	893b      	ldrh	r3, [r7, #8]
 800d166:	7af9      	ldrb	r1, [r7, #11]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	f7f6 fd21 	bl	8003bb0 <HAL_PCD_EP_Receive>
 800d16e:	4603      	mov	r3, r0
 800d170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d172:	7dfb      	ldrb	r3, [r7, #23]
 800d174:	4618      	mov	r0, r3
 800d176:	f000 f81b 	bl	800d1b0 <USBD_Get_USB_Status>
 800d17a:	4603      	mov	r3, r0
 800d17c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d17e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	460b      	mov	r3, r1
 800d192:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d19a:	78fa      	ldrb	r2, [r7, #3]
 800d19c:	4611      	mov	r1, r2
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f6 fd51 	bl	8003c46 <HAL_PCD_EP_GetRxCount>
 800d1a4:	4603      	mov	r3, r0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d817      	bhi.n	800d1f4 <USBD_Get_USB_Status+0x44>
 800d1c4:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <USBD_Get_USB_Status+0x1c>)
 800d1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ca:	bf00      	nop
 800d1cc:	0800d1dd 	.word	0x0800d1dd
 800d1d0:	0800d1e3 	.word	0x0800d1e3
 800d1d4:	0800d1e9 	.word	0x0800d1e9
 800d1d8:	0800d1ef 	.word	0x0800d1ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e0:	e00b      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e6:	e008      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ec:	e005      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f2:	e002      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f8:	bf00      	nop
  }
  return usb_status;
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	bc80      	pop	{r7}
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop

0800d208 <malloc>:
 800d208:	4b02      	ldr	r3, [pc, #8]	; (800d214 <malloc+0xc>)
 800d20a:	4601      	mov	r1, r0
 800d20c:	6818      	ldr	r0, [r3, #0]
 800d20e:	f000 b82b 	b.w	800d268 <_malloc_r>
 800d212:	bf00      	nop
 800d214:	2000020c 	.word	0x2000020c

0800d218 <free>:
 800d218:	4b02      	ldr	r3, [pc, #8]	; (800d224 <free+0xc>)
 800d21a:	4601      	mov	r1, r0
 800d21c:	6818      	ldr	r0, [r3, #0]
 800d21e:	f000 b8f3 	b.w	800d408 <_free_r>
 800d222:	bf00      	nop
 800d224:	2000020c 	.word	0x2000020c

0800d228 <sbrk_aligned>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	4e0e      	ldr	r6, [pc, #56]	; (800d264 <sbrk_aligned+0x3c>)
 800d22c:	460c      	mov	r4, r1
 800d22e:	6831      	ldr	r1, [r6, #0]
 800d230:	4605      	mov	r5, r0
 800d232:	b911      	cbnz	r1, 800d23a <sbrk_aligned+0x12>
 800d234:	f000 f8ac 	bl	800d390 <_sbrk_r>
 800d238:	6030      	str	r0, [r6, #0]
 800d23a:	4621      	mov	r1, r4
 800d23c:	4628      	mov	r0, r5
 800d23e:	f000 f8a7 	bl	800d390 <_sbrk_r>
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	d00a      	beq.n	800d25c <sbrk_aligned+0x34>
 800d246:	1cc4      	adds	r4, r0, #3
 800d248:	f024 0403 	bic.w	r4, r4, #3
 800d24c:	42a0      	cmp	r0, r4
 800d24e:	d007      	beq.n	800d260 <sbrk_aligned+0x38>
 800d250:	1a21      	subs	r1, r4, r0
 800d252:	4628      	mov	r0, r5
 800d254:	f000 f89c 	bl	800d390 <_sbrk_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	d101      	bne.n	800d260 <sbrk_aligned+0x38>
 800d25c:	f04f 34ff 	mov.w	r4, #4294967295
 800d260:	4620      	mov	r0, r4
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	2000376c 	.word	0x2000376c

0800d268 <_malloc_r>:
 800d268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d26c:	1ccd      	adds	r5, r1, #3
 800d26e:	f025 0503 	bic.w	r5, r5, #3
 800d272:	3508      	adds	r5, #8
 800d274:	2d0c      	cmp	r5, #12
 800d276:	bf38      	it	cc
 800d278:	250c      	movcc	r5, #12
 800d27a:	2d00      	cmp	r5, #0
 800d27c:	4607      	mov	r7, r0
 800d27e:	db01      	blt.n	800d284 <_malloc_r+0x1c>
 800d280:	42a9      	cmp	r1, r5
 800d282:	d905      	bls.n	800d290 <_malloc_r+0x28>
 800d284:	230c      	movs	r3, #12
 800d286:	2600      	movs	r6, #0
 800d288:	603b      	str	r3, [r7, #0]
 800d28a:	4630      	mov	r0, r6
 800d28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d290:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d364 <_malloc_r+0xfc>
 800d294:	f000 f868 	bl	800d368 <__malloc_lock>
 800d298:	f8d8 3000 	ldr.w	r3, [r8]
 800d29c:	461c      	mov	r4, r3
 800d29e:	bb5c      	cbnz	r4, 800d2f8 <_malloc_r+0x90>
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	f7ff ffc0 	bl	800d228 <sbrk_aligned>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	d155      	bne.n	800d35a <_malloc_r+0xf2>
 800d2ae:	f8d8 4000 	ldr.w	r4, [r8]
 800d2b2:	4626      	mov	r6, r4
 800d2b4:	2e00      	cmp	r6, #0
 800d2b6:	d145      	bne.n	800d344 <_malloc_r+0xdc>
 800d2b8:	2c00      	cmp	r4, #0
 800d2ba:	d048      	beq.n	800d34e <_malloc_r+0xe6>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	4631      	mov	r1, r6
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	eb04 0903 	add.w	r9, r4, r3
 800d2c6:	f000 f863 	bl	800d390 <_sbrk_r>
 800d2ca:	4581      	cmp	r9, r0
 800d2cc:	d13f      	bne.n	800d34e <_malloc_r+0xe6>
 800d2ce:	6821      	ldr	r1, [r4, #0]
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	1a6d      	subs	r5, r5, r1
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7ff ffa7 	bl	800d228 <sbrk_aligned>
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d037      	beq.n	800d34e <_malloc_r+0xe6>
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	442b      	add	r3, r5
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d038      	beq.n	800d35e <_malloc_r+0xf6>
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	42a2      	cmp	r2, r4
 800d2f0:	d12b      	bne.n	800d34a <_malloc_r+0xe2>
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	605a      	str	r2, [r3, #4]
 800d2f6:	e00f      	b.n	800d318 <_malloc_r+0xb0>
 800d2f8:	6822      	ldr	r2, [r4, #0]
 800d2fa:	1b52      	subs	r2, r2, r5
 800d2fc:	d41f      	bmi.n	800d33e <_malloc_r+0xd6>
 800d2fe:	2a0b      	cmp	r2, #11
 800d300:	d917      	bls.n	800d332 <_malloc_r+0xca>
 800d302:	1961      	adds	r1, r4, r5
 800d304:	42a3      	cmp	r3, r4
 800d306:	6025      	str	r5, [r4, #0]
 800d308:	bf18      	it	ne
 800d30a:	6059      	strne	r1, [r3, #4]
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	bf08      	it	eq
 800d310:	f8c8 1000 	streq.w	r1, [r8]
 800d314:	5162      	str	r2, [r4, r5]
 800d316:	604b      	str	r3, [r1, #4]
 800d318:	4638      	mov	r0, r7
 800d31a:	f104 060b 	add.w	r6, r4, #11
 800d31e:	f000 f829 	bl	800d374 <__malloc_unlock>
 800d322:	f026 0607 	bic.w	r6, r6, #7
 800d326:	1d23      	adds	r3, r4, #4
 800d328:	1af2      	subs	r2, r6, r3
 800d32a:	d0ae      	beq.n	800d28a <_malloc_r+0x22>
 800d32c:	1b9b      	subs	r3, r3, r6
 800d32e:	50a3      	str	r3, [r4, r2]
 800d330:	e7ab      	b.n	800d28a <_malloc_r+0x22>
 800d332:	42a3      	cmp	r3, r4
 800d334:	6862      	ldr	r2, [r4, #4]
 800d336:	d1dd      	bne.n	800d2f4 <_malloc_r+0x8c>
 800d338:	f8c8 2000 	str.w	r2, [r8]
 800d33c:	e7ec      	b.n	800d318 <_malloc_r+0xb0>
 800d33e:	4623      	mov	r3, r4
 800d340:	6864      	ldr	r4, [r4, #4]
 800d342:	e7ac      	b.n	800d29e <_malloc_r+0x36>
 800d344:	4634      	mov	r4, r6
 800d346:	6876      	ldr	r6, [r6, #4]
 800d348:	e7b4      	b.n	800d2b4 <_malloc_r+0x4c>
 800d34a:	4613      	mov	r3, r2
 800d34c:	e7cc      	b.n	800d2e8 <_malloc_r+0x80>
 800d34e:	230c      	movs	r3, #12
 800d350:	4638      	mov	r0, r7
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	f000 f80e 	bl	800d374 <__malloc_unlock>
 800d358:	e797      	b.n	800d28a <_malloc_r+0x22>
 800d35a:	6025      	str	r5, [r4, #0]
 800d35c:	e7dc      	b.n	800d318 <_malloc_r+0xb0>
 800d35e:	605b      	str	r3, [r3, #4]
 800d360:	deff      	udf	#255	; 0xff
 800d362:	bf00      	nop
 800d364:	20003768 	.word	0x20003768

0800d368 <__malloc_lock>:
 800d368:	4801      	ldr	r0, [pc, #4]	; (800d370 <__malloc_lock+0x8>)
 800d36a:	f000 b84b 	b.w	800d404 <__retarget_lock_acquire_recursive>
 800d36e:	bf00      	nop
 800d370:	200038ac 	.word	0x200038ac

0800d374 <__malloc_unlock>:
 800d374:	4801      	ldr	r0, [pc, #4]	; (800d37c <__malloc_unlock+0x8>)
 800d376:	f000 b846 	b.w	800d406 <__retarget_lock_release_recursive>
 800d37a:	bf00      	nop
 800d37c:	200038ac 	.word	0x200038ac

0800d380 <memset>:
 800d380:	4603      	mov	r3, r0
 800d382:	4402      	add	r2, r0
 800d384:	4293      	cmp	r3, r2
 800d386:	d100      	bne.n	800d38a <memset+0xa>
 800d388:	4770      	bx	lr
 800d38a:	f803 1b01 	strb.w	r1, [r3], #1
 800d38e:	e7f9      	b.n	800d384 <memset+0x4>

0800d390 <_sbrk_r>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	2300      	movs	r3, #0
 800d394:	4d05      	ldr	r5, [pc, #20]	; (800d3ac <_sbrk_r+0x1c>)
 800d396:	4604      	mov	r4, r0
 800d398:	4608      	mov	r0, r1
 800d39a:	602b      	str	r3, [r5, #0]
 800d39c:	f7f4 f94a 	bl	8001634 <_sbrk>
 800d3a0:	1c43      	adds	r3, r0, #1
 800d3a2:	d102      	bne.n	800d3aa <_sbrk_r+0x1a>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	b103      	cbz	r3, 800d3aa <_sbrk_r+0x1a>
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	bd38      	pop	{r3, r4, r5, pc}
 800d3ac:	200038a8 	.word	0x200038a8

0800d3b0 <__errno>:
 800d3b0:	4b01      	ldr	r3, [pc, #4]	; (800d3b8 <__errno+0x8>)
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	2000020c 	.word	0x2000020c

0800d3bc <__libc_init_array>:
 800d3bc:	b570      	push	{r4, r5, r6, lr}
 800d3be:	2600      	movs	r6, #0
 800d3c0:	4d0c      	ldr	r5, [pc, #48]	; (800d3f4 <__libc_init_array+0x38>)
 800d3c2:	4c0d      	ldr	r4, [pc, #52]	; (800d3f8 <__libc_init_array+0x3c>)
 800d3c4:	1b64      	subs	r4, r4, r5
 800d3c6:	10a4      	asrs	r4, r4, #2
 800d3c8:	42a6      	cmp	r6, r4
 800d3ca:	d109      	bne.n	800d3e0 <__libc_init_array+0x24>
 800d3cc:	f000 f864 	bl	800d498 <_init>
 800d3d0:	2600      	movs	r6, #0
 800d3d2:	4d0a      	ldr	r5, [pc, #40]	; (800d3fc <__libc_init_array+0x40>)
 800d3d4:	4c0a      	ldr	r4, [pc, #40]	; (800d400 <__libc_init_array+0x44>)
 800d3d6:	1b64      	subs	r4, r4, r5
 800d3d8:	10a4      	asrs	r4, r4, #2
 800d3da:	42a6      	cmp	r6, r4
 800d3dc:	d105      	bne.n	800d3ea <__libc_init_array+0x2e>
 800d3de:	bd70      	pop	{r4, r5, r6, pc}
 800d3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e4:	4798      	blx	r3
 800d3e6:	3601      	adds	r6, #1
 800d3e8:	e7ee      	b.n	800d3c8 <__libc_init_array+0xc>
 800d3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ee:	4798      	blx	r3
 800d3f0:	3601      	adds	r6, #1
 800d3f2:	e7f2      	b.n	800d3da <__libc_init_array+0x1e>
 800d3f4:	0800d738 	.word	0x0800d738
 800d3f8:	0800d738 	.word	0x0800d738
 800d3fc:	0800d738 	.word	0x0800d738
 800d400:	0800d73c 	.word	0x0800d73c

0800d404 <__retarget_lock_acquire_recursive>:
 800d404:	4770      	bx	lr

0800d406 <__retarget_lock_release_recursive>:
 800d406:	4770      	bx	lr

0800d408 <_free_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4605      	mov	r5, r0
 800d40c:	2900      	cmp	r1, #0
 800d40e:	d040      	beq.n	800d492 <_free_r+0x8a>
 800d410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d414:	1f0c      	subs	r4, r1, #4
 800d416:	2b00      	cmp	r3, #0
 800d418:	bfb8      	it	lt
 800d41a:	18e4      	addlt	r4, r4, r3
 800d41c:	f7ff ffa4 	bl	800d368 <__malloc_lock>
 800d420:	4a1c      	ldr	r2, [pc, #112]	; (800d494 <_free_r+0x8c>)
 800d422:	6813      	ldr	r3, [r2, #0]
 800d424:	b933      	cbnz	r3, 800d434 <_free_r+0x2c>
 800d426:	6063      	str	r3, [r4, #4]
 800d428:	6014      	str	r4, [r2, #0]
 800d42a:	4628      	mov	r0, r5
 800d42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d430:	f7ff bfa0 	b.w	800d374 <__malloc_unlock>
 800d434:	42a3      	cmp	r3, r4
 800d436:	d908      	bls.n	800d44a <_free_r+0x42>
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	1821      	adds	r1, r4, r0
 800d43c:	428b      	cmp	r3, r1
 800d43e:	bf01      	itttt	eq
 800d440:	6819      	ldreq	r1, [r3, #0]
 800d442:	685b      	ldreq	r3, [r3, #4]
 800d444:	1809      	addeq	r1, r1, r0
 800d446:	6021      	streq	r1, [r4, #0]
 800d448:	e7ed      	b.n	800d426 <_free_r+0x1e>
 800d44a:	461a      	mov	r2, r3
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	b10b      	cbz	r3, 800d454 <_free_r+0x4c>
 800d450:	42a3      	cmp	r3, r4
 800d452:	d9fa      	bls.n	800d44a <_free_r+0x42>
 800d454:	6811      	ldr	r1, [r2, #0]
 800d456:	1850      	adds	r0, r2, r1
 800d458:	42a0      	cmp	r0, r4
 800d45a:	d10b      	bne.n	800d474 <_free_r+0x6c>
 800d45c:	6820      	ldr	r0, [r4, #0]
 800d45e:	4401      	add	r1, r0
 800d460:	1850      	adds	r0, r2, r1
 800d462:	4283      	cmp	r3, r0
 800d464:	6011      	str	r1, [r2, #0]
 800d466:	d1e0      	bne.n	800d42a <_free_r+0x22>
 800d468:	6818      	ldr	r0, [r3, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	4408      	add	r0, r1
 800d46e:	6010      	str	r0, [r2, #0]
 800d470:	6053      	str	r3, [r2, #4]
 800d472:	e7da      	b.n	800d42a <_free_r+0x22>
 800d474:	d902      	bls.n	800d47c <_free_r+0x74>
 800d476:	230c      	movs	r3, #12
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	e7d6      	b.n	800d42a <_free_r+0x22>
 800d47c:	6820      	ldr	r0, [r4, #0]
 800d47e:	1821      	adds	r1, r4, r0
 800d480:	428b      	cmp	r3, r1
 800d482:	bf01      	itttt	eq
 800d484:	6819      	ldreq	r1, [r3, #0]
 800d486:	685b      	ldreq	r3, [r3, #4]
 800d488:	1809      	addeq	r1, r1, r0
 800d48a:	6021      	streq	r1, [r4, #0]
 800d48c:	6063      	str	r3, [r4, #4]
 800d48e:	6054      	str	r4, [r2, #4]
 800d490:	e7cb      	b.n	800d42a <_free_r+0x22>
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	20003768 	.word	0x20003768

0800d498 <_init>:
 800d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49a:	bf00      	nop
 800d49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49e:	bc08      	pop	{r3}
 800d4a0:	469e      	mov	lr, r3
 800d4a2:	4770      	bx	lr

0800d4a4 <_fini>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	bf00      	nop
 800d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4aa:	bc08      	pop	{r3}
 800d4ac:	469e      	mov	lr, r3
 800d4ae:	4770      	bx	lr
