
fw-002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da98  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea0  0800dea0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea0  0800dea0  0001dea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dea8  0800dea8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dea8  0800dea8  0001dea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800deb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036e8  20000210  0800e0c0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f8  0800e0c0  000238f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY
 13 .debug_info   000255f0  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ea4  00000000  00000000  0004586c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f8  00000000  00000000  0004c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a20  00000000  00000000  0004e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a2e  00000000  00000000  00050328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000317d9  00000000  00000000  00078d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2233  00000000  00000000  000aa52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008df0  00000000  00000000  0017c764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00185554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000210 	.word	0x20000210
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800dc04 	.word	0x0800dc04

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000214 	.word	0x20000214
 80001c0:	0800dc04 	.word	0x0800dc04

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	; (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_ADC1_Init+0x98>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_ADC1_Init+0x98>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_ADC1_Init+0x98>)
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_ADC1_Init+0xa0>)
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_ADC1_Init+0x98>)
 8000510:	2201      	movs	r2, #1
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <MX_ADC1_Init+0x98>)
 8000524:	f001 fc84 	bl	8001e30 <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 fd0b 	bl	8000f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000532:	2312      	movs	r3, #18
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800053a:	2303      	movs	r3, #3
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <MX_ADC1_Init+0x98>)
 8000544:	f001 fd74 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f000 fcfb 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000022c 	.word	0x2000022c
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <HAL_ADC_MspInit+0x38>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d10d      	bne.n	8000596 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_ADC_MspInit+0x3c>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_ADC_MspInit+0x3c>)
 8000584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000588:	6453      	str	r3, [r2, #68]	; 0x44
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_ADC_MspInit+0x3c>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40012000 	.word	0x40012000
 80005a4:	40023800 	.word	0x40023800

080005a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_CRC_Init+0x20>)
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <MX_CRC_Init+0x24>)
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_CRC_Init+0x20>)
 80005b4:	f002 f86f 	bl	8002696 <HAL_CRC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005be:	f000 fcc3 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000274 	.word	0x20000274
 80005cc:	40023000 	.word	0x40023000

080005d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <HAL_CRC_MspInit+0x38>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d10d      	bne.n	80005fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_CRC_MspInit+0x3c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <HAL_CRC_MspInit+0x3c>)
 80005ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_CRC_MspInit+0x3c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40023000 	.word	0x40023000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <MX_DMA_Init+0xd8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <MX_DMA_Init+0xd8>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_DMA_Init+0xd8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_DMA_Init+0xdc>)
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <MX_DMA_Init+0xe0>)
 8000652:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_DMA_Init+0xdc>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_DMA_Init+0xdc>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_DMA_Init+0xdc>)
 8000662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000666:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_DMA_Init+0xdc>)
 800066a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_DMA_Init+0xdc>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_DMA_Init+0xdc>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_DMA_Init+0xdc>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_DMA_Init+0xdc>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_DMA_Init+0xdc>)
 800068a:	2204      	movs	r2, #4
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_DMA_Init+0xdc>)
 8000690:	2203      	movs	r2, #3
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_DMA_Init+0xdc>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA_Init+0xdc>)
 800069c:	2200      	movs	r2, #0
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <MX_DMA_Init+0xdc>)
 80006a2:	f002 f815 	bl	80026d0 <HAL_DMA_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 80006ac:	f000 fc4c 	bl	8000f48 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2101      	movs	r1, #1
 80006b4:	200f      	movs	r0, #15
 80006b6:	f001 ffb8 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f001 ffd1 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2038      	movs	r0, #56	; 0x38
 80006c6:	f001 ffb0 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ca:	2038      	movs	r0, #56	; 0x38
 80006cc:	f001 ffc9 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	203b      	movs	r0, #59	; 0x3b
 80006d6:	f001 ffa8 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006da:	203b      	movs	r0, #59	; 0x3b
 80006dc:	f001 ffc1 	bl	8002662 <HAL_NVIC_EnableIRQ>

}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	2000027c 	.word	0x2000027c
 80006f0:	40026410 	.word	0x40026410

080006f4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b50      	ldr	r3, [pc, #320]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a4f      	ldr	r2, [pc, #316]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <MX_GPIO_Init+0x15c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <MX_GPIO_Init+0x15c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <MX_GPIO_Init+0x15c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <MX_GPIO_Init+0x15c>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_GPIO_Init+0x15c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 8000796:	2200      	movs	r2, #0
 8000798:	f242 0127 	movw	r1, #8231	; 0x2027
 800079c:	482d      	ldr	r0, [pc, #180]	; (8000854 <MX_GPIO_Init+0x160>)
 800079e:	f002 fea6 	bl	80034ee <HAL_GPIO_WritePin>
                          |Out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out1_Pin|Out6_Pin|Out5_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f248 4110 	movw	r1, #33808	; 0x8410
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <MX_GPIO_Init+0x164>)
 80007aa:	f002 fea0 	bl	80034ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4828      	ldr	r0, [pc, #160]	; (8000854 <MX_GPIO_Init+0x160>)
 80007b4:	f002 fe9b 	bl	80034ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|Out2_Pin|Out3_Pin|Out4_Pin
 80007b8:	f242 0337 	movw	r3, #8247	; 0x2037
 80007bc:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|Out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4820      	ldr	r0, [pc, #128]	; (8000854 <MX_GPIO_Init+0x160>)
 80007d2:	f002 fbd9 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Out1_Pin|Out6_Pin|Out5_Pin;
 80007d6:	f248 4310 	movw	r3, #33808	; 0x8410
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0x164>)
 80007f0:	f002 fbca 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = In6_Pin|In4_Pin|In3_Pin|In5_Pin;
 80007f4:	f24d 0304 	movw	r3, #53252	; 0xd004
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_GPIO_Init+0x168>)
 800080a:	f002 fbbd 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = In1_Pin|In2_Pin;
 800080e:	23c0      	movs	r3, #192	; 0xc0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0x160>)
 8000822:	f002 fbb1 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_GPIO_Init+0x164>)
 8000844:	f002 fba0 	bl	8002f88 <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400

08000860 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2C2_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C2_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_I2C2_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2C2_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2C2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2C2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C2_Init+0x50>)
 800089e:	f002 fe3f 	bl	8003520 <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 fb4e 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200002dc 	.word	0x200002dc
 80008b4:	40005800 	.word	0x40005800
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <HAL_I2C_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12c      	bne.n	8000938 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000900:	2312      	movs	r3, #18
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800090c:	2304      	movs	r3, #4
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <HAL_I2C_MspInit+0x8c>)
 8000918:	f002 fb36 	bl	8002f88 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_I2C_MspInit+0x88>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_I2C_MspInit+0x88>)
 8000926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_I2C_MspInit+0x88>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005800 	.word	0x40005800
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f001 f9ed 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f887 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f7ff fecb 	bl	80006f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800095e:	f7ff fe57 	bl	8000610 <MX_DMA_Init>
  MX_SPI1_Init();
 8000962:	f000 fc35 	bl	80011d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000966:	f000 fc69 	bl	800123c <MX_SPI2_Init>
  MX_FATFS_Init();
 800096a:	f00a f921 	bl	800abb0 <MX_FATFS_Init>
  MX_TIM4_Init();
 800096e:	f000 ff9d 	bl	80018ac <MX_TIM4_Init>
  MX_I2C2_Init();
 8000972:	f7ff ff75 	bl	8000860 <MX_I2C2_Init>
  MX_RTC_Init();
 8000976:	f000 fb23 	bl	8000fc0 <MX_RTC_Init>
  MX_SPI3_Init();
 800097a:	f000 fc95 	bl	80012a8 <MX_SPI3_Init>
  MX_UART4_Init();
 800097e:	f001 f8d5 	bl	8001b2c <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000982:	f00c fb1f 	bl	800cfc4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000986:	f000 ff21 	bl	80017cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800098a:	f001 f8f9 	bl	8001b80 <MX_USART2_UART_Init>
  MX_RNG_Init();
 800098e:	f000 fae3 	bl	8000f58 <MX_RNG_Init>
  MX_SDIO_SD_Init();
 8000992:	f000 fb83 	bl	800109c <MX_SDIO_SD_Init>
  MX_CRC_Init();
 8000996:	f7ff fe07 	bl	80005a8 <MX_CRC_Init>
  MX_ADC1_Init();
 800099a:	f7ff fd93 	bl	80004c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	MM_Init();
 800099e:	f00c f9a3 	bl	800cce8 <MM_Init>
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	4928      	ldr	r1, [pc, #160]	; (8000a48 <main+0xfc>)
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <main+0x100>)
 80009a8:	f007 fb8b 	bl	80080c2 <HAL_UART_Receive_IT>

#ifdef LORA
	HAL_SPI_DeInit(&hspi3);
 80009ac:	4828      	ldr	r0, [pc, #160]	; (8000a50 <main+0x104>)
 80009ae:	f006 fa8b 	bl	8006ec8 <HAL_SPI_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009c2:	2338      	movs	r3, #56	; 0x38
 80009c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	481f      	ldr	r0, [pc, #124]	; (8000a54 <main+0x108>)
 80009d6:	f002 fad7 	bl	8002f88 <HAL_GPIO_Init>
#define LORA_SET HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
#define LORA_WORK HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

		LORA_SET
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	481d      	ldr	r0, [pc, #116]	; (8000a54 <main+0x108>)
 80009e0:	f002 fd85 	bl	80034ee <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f001 f9fe 	bl	8001de8 <HAL_Delay>
		uint8_t prog_string[9] = {0xc0, 0x00, 0x06, 0x03, 0x03, 0x62, 0x00, 0x03, 0x03};
 80009ec:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <main+0x10c>)
 80009ee:	463b      	mov	r3, r7
 80009f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f2:	c303      	stmia	r3!, {r0, r1}
 80009f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, prog_string, 9, 50);
 80009f6:	4639      	mov	r1, r7
 80009f8:	2332      	movs	r3, #50	; 0x32
 80009fa:	2209      	movs	r2, #9
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <main+0x100>)
 80009fe:	f007 face 	bl	8007f9e <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a06:	f001 f9ef 	bl	8001de8 <HAL_Delay>
		LORA_WORK
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <main+0x108>)
 8000a10:	f002 fd6d 	bl	80034ee <HAL_GPIO_WritePin>



	  LORA_WORK
 8000a14:	2200      	movs	r2, #0
 8000a16:	2108      	movs	r1, #8
 8000a18:	480e      	ldr	r0, [pc, #56]	; (8000a54 <main+0x108>)
 8000a1a:	f002 fd68 	bl	80034ee <HAL_GPIO_WritePin>

#endif
  	init_OK = 1;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <main+0x110>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  Debug_LED1 = 	RED;
	  Debug_LED1 = BLACK;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <main+0x114>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	  Debug_LED2 = BLACK;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <main+0x118>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f001 f9d8 	bl	8001de8 <HAL_Delay>

//	  Debug_LED1 = BLACK;

	  Debug_LED1 = GREEN;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <main+0x114>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a42:	f001 f9d1 	bl	8001de8 <HAL_Delay>
	  Debug_LED1 = BLACK;
 8000a46:	e7ed      	b.n	8000a24 <main+0xd8>
 8000a48:	20000330 	.word	0x20000330
 8000a4c:	200006cc 	.word	0x200006cc
 8000a50:	200004dc 	.word	0x200004dc
 8000a54:	40020400 	.word	0x40020400
 8000a58:	0800dc1c 	.word	0x0800dc1c
 8000a5c:	20000777 	.word	0x20000777
 8000a60:	20000775 	.word	0x20000775
 8000a64:	20000776 	.word	0x20000776

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	; 0x58
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00d f838 	bl	800daec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ab0:	2319      	movs	r3, #25
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 ffc5 	bl	8004a54 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ad0:	f000 fa3a 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2103      	movs	r1, #3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 f9fc 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afe:	f000 fa23 	bl	8000f48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b02:	2304      	movs	r3, #4
 8000b04:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fc56 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b1a:	f000 fa15 	bl	8000f48 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000b24:	2000      	movs	r0, #0
 8000b26:	f004 facf 	bl	80050c8 <HAL_RCC_MCOConfig>
}
 8000b2a:	bf00      	nop
 8000b2c:	3758      	adds	r7, #88	; 0x58
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	static uint8_t reseive_msg[16] = {0};
	static uint8_t current_byte = 0;
	reseive_msg[current_byte] = rx_byte;
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <HAL_UART_RxCpltCallback+0x140>)
 8000b44:	7819      	ldrb	r1, [r3, #0]
 8000b46:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000b48:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4949      	ldr	r1, [pc, #292]	; (8000c74 <HAL_UART_RxCpltCallback+0x140>)
 8000b4e:	484b      	ldr	r0, [pc, #300]	; (8000c7c <HAL_UART_RxCpltCallback+0x148>)
 8000b50:	f007 fab7 	bl	80080c2 <HAL_UART_Receive_IT>

	Debug_LED2 = RED;
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <HAL_UART_RxCpltCallback+0x14c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]

	if (current_byte < 7){
 8000b5a:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d80f      	bhi.n	8000b82 <HAL_UART_RxCpltCallback+0x4e>
		current_byte = (reseive_msg[0] == ModbusReg[0]) ? current_byte + 1 : 0;
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <HAL_UART_RxCpltCallback+0x150>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d104      	bne.n	8000b7a <HAL_UART_RxCpltCallback+0x46>
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	e000      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x48>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4a3c      	ldr	r2, [pc, #240]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b7e:	7013      	strb	r3, [r2, #0]
			}
			else {MRTU_Error(3, reseive_msg[1]);}
		}
		else {MRTU_Error(1, reseive_msg[1]);}
	}
}
 8000b80:	e071      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
		current_byte = 0;
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <HAL_UART_RxCpltCallback+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
		uint16_t tmp = MRTU_CRC(reseive_msg, 6);
 8000b88:	2106      	movs	r1, #6
 8000b8a:	483b      	ldr	r0, [pc, #236]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000b8c:	f000 f8ea 	bl	8000d64 <MRTU_CRC>
 8000b90:	4603      	mov	r3, r0
 8000b92:	81fb      	strh	r3, [r7, #14]
		uint8_t CRC1 = (uint8_t)tmp;
 8000b94:	89fb      	ldrh	r3, [r7, #14]
 8000b96:	737b      	strb	r3, [r7, #13]
		uint8_t CRC2 = (uint8_t)(tmp >> 8);
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	733b      	strb	r3, [r7, #12]
		if (reseive_msg[1] == 3){
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d127      	bne.n	8000bf8 <HAL_UART_RxCpltCallback+0xc4>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000ba8:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d11c      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d818      	bhi.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
					&& (reseive_msg[4] == 0) && (reseive_msg[5] == 1) \
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d114      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d110      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bca:	799b      	ldrb	r3, [r3, #6]
 8000bcc:	7b7a      	ldrb	r2, [r7, #13]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d10b      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bd4:	79db      	ldrb	r3, [r3, #7]
 8000bd6:	7b3a      	ldrb	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d106      	bne.n	8000bea <HAL_UART_RxCpltCallback+0xb6>
				MRTU_Read(reseive_msg[3]);
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bde:	78db      	ldrb	r3, [r3, #3]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f8f2 	bl	8000dcc <MRTU_Read>
 8000be8:	e03d      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bec:	785b      	ldrb	r3, [r3, #1]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f973 	bl	8000edc <MRTU_Error>
}
 8000bf6:	e036      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
		else if (reseive_msg[1] == 6){
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d12b      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x124>
			if (	   (reseive_msg[2] == 0) && (reseive_msg[3] < 32) \
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d120      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c0a:	78db      	ldrb	r3, [r3, #3]
 8000c0c:	2b1f      	cmp	r3, #31
 8000c0e:	d81c      	bhi.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
					&& (reseive_msg[6] == CRC1) && (reseive_msg[7] == CRC2)){
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c12:	799b      	ldrb	r3, [r3, #6]
 8000c14:	7b7a      	ldrb	r2, [r7, #13]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d117      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c1c:	79db      	ldrb	r3, [r3, #7]
 8000c1e:	7b3a      	ldrb	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d112      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x116>
				MRTU_Write(reseive_msg[3], (((uint16_t)reseive_msg[5]) | (uint16_t)(reseive_msg[4] << 8)));
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	b298      	uxth	r0, r3
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f000 f904 	bl	8000e4c <MRTU_Write>
				Update_reg();
 8000c44:	f000 f836 	bl	8000cb4 <Update_reg>
 8000c48:	e00d      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
			else {MRTU_Error(3, reseive_msg[1]);}
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f943 	bl	8000edc <MRTU_Error>
}
 8000c56:	e006      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
		else {MRTU_Error(1, reseive_msg[1]);}
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_UART_RxCpltCallback+0x144>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 f93c 	bl	8000edc <MRTU_Error>
}
 8000c64:	e7ff      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x132>
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000331 	.word	0x20000331
 8000c74:	20000330 	.word	0x20000330
 8000c78:	20000334 	.word	0x20000334
 8000c7c:	200006cc 	.word	0x200006cc
 8000c80:	20000776 	.word	0x20000776
 8000c84:	20000000 	.word	0x20000000

08000c88 <Main_IncTic>:



void Main_IncTic(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	static uint8_t timer_5_sec;
	if (timer_5_sec) {timer_5_sec--;}
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <Main_IncTic+0x28>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <Main_IncTic+0x1a>
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <Main_IncTic+0x28>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <Main_IncTic+0x28>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	else {
		Update_reg();
		timer_5_sec = 5000;
	}
}
 8000ca0:	e004      	b.n	8000cac <Main_IncTic+0x24>
		Update_reg();
 8000ca2:	f000 f807 	bl	8000cb4 <Update_reg>
		timer_5_sec = 5000;
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <Main_IncTic+0x28>)
 8000ca8:	2288      	movs	r2, #136	; 0x88
 8000caa:	701a      	strb	r2, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000344 	.word	0x20000344

08000cb4 <Update_reg>:

void Update_reg(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	if (ModbusReg[14]) {
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <Update_reg+0x8c>)
 8000cbc:	8b9b      	ldrh	r3, [r3, #28]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00e      	beq.n	8000ce0 <Update_reg+0x2c>
		ModbusReg[14] = 0;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <Update_reg+0x8c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	839a      	strh	r2, [r3, #28]
		ModbusReg[13] = 0;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <Update_reg+0x8c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	835a      	strh	r2, [r3, #26]
		ModbusReg[12] = 0;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <Update_reg+0x8c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	831a      	strh	r2, [r3, #24]
		ModbusReg[11] = 0;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <Update_reg+0x8c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	82da      	strh	r2, [r3, #22]
		ModbusReg[10] = 0;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <Update_reg+0x8c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	829a      	strh	r2, [r3, #20]
	}
	Set_Out(P_OUT_2, ModbusReg[10]);
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <Update_reg+0x8c>)
 8000ce2:	8a9b      	ldrh	r3, [r3, #20]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f00c f828 	bl	800cd3c <Set_Out>
	Set_Out(P_OUT_3, ModbusReg[11]);
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <Update_reg+0x8c>)
 8000cee:	8adb      	ldrh	r3, [r3, #22]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f00c f822 	bl	800cd3c <Set_Out>
	Set_Out(P_OUT_4, ModbusReg[12]);
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <Update_reg+0x8c>)
 8000cfa:	8b1b      	ldrh	r3, [r3, #24]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f00c f81c 	bl	800cd3c <Set_Out>
	Set_Out(P_OUT_5, ModbusReg[13]);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <Update_reg+0x8c>)
 8000d06:	8b5b      	ldrh	r3, [r3, #26]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f00c f816 	bl	800cd3c <Set_Out>
	uint16_t tmp = HAL_ADC_GetValue(&hadc1);
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <Update_reg+0x90>)
 8000d12:	f001 f981 	bl	8002018 <HAL_ADC_GetValue>
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
	ModbusReg[20] = (tmp * 5) + (tmp >> 3);
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <Update_reg+0x8c>)
 8000d30:	851a      	strh	r2, [r3, #40]	; 0x28
	HAL_ADC_Start(&hadc1);
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <Update_reg+0x90>)
 8000d34:	f001 f8c0 	bl	8001eb8 <HAL_ADC_Start>

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	2000022c 	.word	0x2000022c

08000d48 <Buttons_Handler>:



void Buttons_Handler (uint8_t Butt, Button_events_TypeDef Event){
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	if ((Butt == 0) && (Event == LONG_CLC)) {


	}

}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <MRTU_CRC>:
uint16_t MRTU_CRC(uint8_t *data, uint8_t len){
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
    uint8_t uchCRCHi = 0xFF;
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	73fb      	strb	r3, [r7, #15]
    uint8_t uchCRCLo = 0xFF;
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	73bb      	strb	r3, [r7, #14]
    uint16_t uIndex ;
    while(len--){
 8000d78:	e011      	b.n	8000d9e <MRTU_CRC+0x3a>
        uIndex = uchCRCHi ^ *data++ ;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	4053      	eors	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	81bb      	strh	r3, [r7, #12]
        uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
 8000d8a:	89bb      	ldrh	r3, [r7, #12]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <MRTU_CRC+0x60>)
 8000d8e:	5cd2      	ldrb	r2, [r2, r3]
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	4053      	eors	r3, r2
 8000d94:	73fb      	strb	r3, [r7, #15]
        uchCRCLo = auchCRCLo[uIndex] ;
 8000d96:	89bb      	ldrh	r3, [r7, #12]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MRTU_CRC+0x64>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	73bb      	strb	r3, [r7, #14]
    while(len--){
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	70fa      	strb	r2, [r7, #3]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e8      	bne.n	8000d7a <MRTU_CRC+0x16>
    }
    return (((uint16_t)(uchCRCLo) << 8) | (uint16_t)(uchCRCHi));
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	b29b      	uxth	r3, r3
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	0800dc6c 	.word	0x0800dc6c
 8000dc8:	0800dd6c 	.word	0x0800dd6c

08000dcc <MRTU_Read>:
void MRTU_Read(uint16_t reg){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MRTU_Read+0x74>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MRTU_Read+0x78>)
 8000dde:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = 0x03;								//код функции
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MRTU_Read+0x78>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = 2;								//длина пакета
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MRTU_Read+0x78>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <MRTU_Read+0x74>)
 8000df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MRTU_Read+0x78>)
 8000dfc:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)ModbusReg[reg];			//младший
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <MRTU_Read+0x74>)
 8000e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MRTU_Read+0x78>)
 8000e0a:	711a      	strb	r2, [r3, #4]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 5);
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MRTU_Read+0x78>)
 8000e10:	f7ff ffa8 	bl	8000d64 <MRTU_CRC>
 8000e14:	4603      	mov	r3, r0
 8000e16:	81fb      	strh	r3, [r7, #14]
	transmit_msg[5] = (uint8_t)tmp;						//CRC
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MRTU_Read+0x78>)
 8000e1e:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(tmp >> 8);				//
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MRTU_Read+0x78>)
 8000e2a:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000e2c:	2332      	movs	r3, #50	; 0x32
 8000e2e:	2208      	movs	r2, #8
 8000e30:	4904      	ldr	r1, [pc, #16]	; (8000e44 <MRTU_Read+0x78>)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MRTU_Read+0x7c>)
 8000e34:	f007 f8b3 	bl	8007f9e <HAL_UART_Transmit>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000348 	.word	0x20000348
 8000e48:	200006cc 	.word	0x200006cc

08000e4c <MRTU_Write>:
void MRTU_Write(uint16_t reg, uint16_t value){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80bb      	strh	r3, [r7, #4]
	static uint8_t transmit_msg[16] = {0};
	ModbusReg[reg] = value;
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	491c      	ldr	r1, [pc, #112]	; (8000ed0 <MRTU_Write+0x84>)
 8000e60:	88ba      	ldrh	r2, [r7, #4]
 8000e62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MRTU_Write+0x84>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MRTU_Write+0x88>)
 8000e6e:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = 0x06;								//код функции
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MRTU_Write+0x88>)
 8000e72:	2206      	movs	r2, #6
 8000e74:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = 2;								//длина пакета
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MRTU_Write+0x88>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	709a      	strb	r2, [r3, #2]
	transmit_msg[3] = (uint8_t)(ModbusReg[reg] >> 8);	//передаваемый регистр при чтении старший байт
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <MRTU_Write+0x84>)
 8000e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MRTU_Write+0x88>)
 8000e8c:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)ModbusReg[reg];			//младший
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <MRTU_Write+0x84>)
 8000e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MRTU_Write+0x88>)
 8000e9a:	711a      	strb	r2, [r3, #4]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 5);
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MRTU_Write+0x88>)
 8000ea0:	f7ff ff60 	bl	8000d64 <MRTU_CRC>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	81fb      	strh	r3, [r7, #14]
	transmit_msg[5] = (uint8_t)tmp;						//CRC
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MRTU_Write+0x88>)
 8000eae:	715a      	strb	r2, [r3, #5]
	transmit_msg[6] = (uint8_t)(tmp >> 8);				//
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MRTU_Write+0x88>)
 8000eba:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit(&huart2, transmit_msg, 8, 50);
 8000ebc:	2332      	movs	r3, #50	; 0x32
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <MRTU_Write+0x88>)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MRTU_Write+0x8c>)
 8000ec4:	f007 f86b 	bl	8007f9e <HAL_UART_Transmit>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000358 	.word	0x20000358
 8000ed8:	200006cc 	.word	0x200006cc

08000edc <MRTU_Error>:
void MRTU_Error(uint8_t code, uint8_t func){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
	static uint8_t transmit_msg[16] = {0};

//	transmit_msg[0] = (uint8_t)(ModbusReg[7] >> 8);		//
//	transmit_msg[1] = (uint8_t)ModbusReg[7];			//адрес LorA хост
//	transmit_msg[2] = (uint8_t)ModbusReg[8];			//канал LoRa
	transmit_msg[0] = (uint8_t)ModbusReg[0];			//MRTU адрес
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MRTU_Error+0x60>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MRTU_Error+0x64>)
 8000ef4:	701a      	strb	r2, [r3, #0]
	transmit_msg[1] = func | 0x80;						//код функции
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MRTU_Error+0x64>)
 8000f00:	705a      	strb	r2, [r3, #1]
	transmit_msg[2] = code;								//длина пакета
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <MRTU_Error+0x64>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	7093      	strb	r3, [r2, #2]
	uint16_t tmp = MRTU_CRC(&transmit_msg[0], 3);
 8000f08:	2103      	movs	r1, #3
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MRTU_Error+0x64>)
 8000f0c:	f7ff ff2a 	bl	8000d64 <MRTU_CRC>
 8000f10:	4603      	mov	r3, r0
 8000f12:	81fb      	strh	r3, [r7, #14]
	transmit_msg[3] = (uint8_t)tmp;						//CRC
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MRTU_Error+0x64>)
 8000f1a:	70da      	strb	r2, [r3, #3]
	transmit_msg[4] = (uint8_t)(tmp >> 8);				//
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MRTU_Error+0x64>)
 8000f26:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, transmit_msg, 5, 50);
 8000f28:	2332      	movs	r3, #50	; 0x32
 8000f2a:	2205      	movs	r2, #5
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <MRTU_Error+0x64>)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MRTU_Error+0x68>)
 8000f30:	f007 f835 	bl	8007f9e <HAL_UART_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000368 	.word	0x20000368
 8000f44:	200006cc 	.word	0x200006cc

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Debug_LED2 = RED;
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <Error_Handler+0xc>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
//  __disable_irq();
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <Error_Handler+0xa>
 8000f54:	20000776 	.word	0x20000776

08000f58 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_RNG_Init+0x20>)
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <MX_RNG_Init+0x24>)
 8000f60:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_RNG_Init+0x20>)
 8000f64:	f004 fb22 	bl	80055ac <HAL_RNG_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000f6e:	f7ff ffeb 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000378 	.word	0x20000378
 8000f7c:	50060800 	.word	0x50060800

08000f80 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_RNG_MspInit+0x38>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10d      	bne.n	8000fae <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_RNG_MspInit+0x3c>)
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_RNG_MspInit+0x3c>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	6353      	str	r3, [r2, #52]	; 0x34
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_RNG_MspInit+0x3c>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	50060800 	.word	0x50060800
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_RTC_Init+0xa8>)
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <MX_RTC_Init+0xac>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_RTC_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_RTC_Init+0xa8>)
 8000fe2:	227f      	movs	r2, #127	; 0x7f
 8000fe4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_RTC_Init+0xa8>)
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_RTC_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_RTC_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_RTC_Init+0xa8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffe:	481a      	ldr	r0, [pc, #104]	; (8001068 <MX_RTC_Init+0xa8>)
 8001000:	f004 fafe 	bl	8005600 <HAL_RTC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 800100a:	f7ff ff9d 	bl	8000f48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_RTC_Init+0xa8>)
 800102a:	f004 fb73 	bl	8005714 <HAL_RTC_SetTime>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8001034:	f7ff ff88 	bl	8000f48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001038:	2301      	movs	r3, #1
 800103a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800103c:	2301      	movs	r3, #1
 800103e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_RTC_Init+0xa8>)
 8001050:	f004 fc16 	bl	8005880 <HAL_RTC_SetDate>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 800105a:	f7ff ff75 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000388 	.word	0x20000388
 800106c:	40002800 	.word	0x40002800

08001070 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RTC_MspInit+0x24>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d102      	bne.n	8001088 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_RTC_MspInit+0x28>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40002800 	.word	0x40002800
 8001098:	42470e3c 	.word	0x42470e3c

0800109c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <MX_SDIO_SD_Init+0x3c>)
 80010a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010be:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 48;
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <MX_SDIO_SD_Init+0x38>)
 80010c8:	2230      	movs	r2, #48	; 0x30
 80010ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	200003a8 	.word	0x200003a8
 80010d8:	40012c00 	.word	0x40012c00

080010dc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <HAL_SD_MspInit+0xe4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d15b      	bne.n	80011b6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_SD_MspInit+0xe8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001152:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001164:	230c      	movs	r3, #12
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4816      	ldr	r0, [pc, #88]	; (80011c8 <HAL_SD_MspInit+0xec>)
 8001170:	f001 ff0a 	bl	8002f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001186:	230c      	movs	r3, #12
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <HAL_SD_MspInit+0xec>)
 8001192:	f001 fef9 	bl	8002f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001196:	2304      	movs	r3, #4
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011a6:	230c      	movs	r3, #12
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_SD_MspInit+0xf0>)
 80011b2:	f001 fee9 	bl	8002f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_SPI1_Init+0x64>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <MX_SPI1_Init+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_SPI1_Init+0x64>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_SPI1_Init+0x64>)
 80011fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_SPI1_Init+0x64>)
 8001204:	2220      	movs	r2, #32
 8001206:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_SPI1_Init+0x64>)
 800121c:	220a      	movs	r2, #10
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_SPI1_Init+0x64>)
 8001222:	f005 fdc8 	bl	8006db6 <HAL_SPI_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800122c:	f7ff fe8c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000042c 	.word	0x2000042c
 8001238:	40013000 	.word	0x40013000

0800123c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <MX_SPI2_Init+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001248:	f44f 7282 	mov.w	r2, #260	; 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI2_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001270:	2220      	movs	r2, #32
 8001272:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI2_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI2_Init+0x64>)
 8001288:	220a      	movs	r2, #10
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_SPI2_Init+0x64>)
 800128e:	f005 fd92 	bl	8006db6 <HAL_SPI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001298:	f7ff fe56 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000484 	.word	0x20000484
 80012a4:	40003800 	.word	0x40003800

080012a8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_SPI3_Init+0x64>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MX_SPI3_Init+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_SPI3_Init+0x64>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_SPI3_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_SPI3_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_SPI3_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_SPI3_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_SPI3_Init+0x64>)
 80012d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_SPI3_Init+0x64>)
 80012dc:	2218      	movs	r2, #24
 80012de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_SPI3_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_SPI3_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_SPI3_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_SPI3_Init+0x64>)
 80012f4:	220a      	movs	r2, #10
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_SPI3_Init+0x64>)
 80012fa:	f005 fd5c 	bl	8006db6 <HAL_SPI_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001304:	f7ff fe20 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200004dc 	.word	0x200004dc
 8001310:	40003c00 	.word	0x40003c00

08001314 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a89      	ldr	r2, [pc, #548]	; (8001558 <HAL_SPI_MspInit+0x244>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d15b      	bne.n	80013ee <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_SPI_MspInit+0x248>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a87      	ldr	r2, [pc, #540]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b85      	ldr	r3, [pc, #532]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a80      	ldr	r2, [pc, #512]	; (800155c <HAL_SPI_MspInit+0x248>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	4875      	ldr	r0, [pc, #468]	; (8001560 <HAL_SPI_MspInit+0x24c>)
 800138a:	f001 fdfd 	bl	8002f88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800138e:	4b75      	ldr	r3, [pc, #468]	; (8001564 <HAL_SPI_MspInit+0x250>)
 8001390:	4a75      	ldr	r2, [pc, #468]	; (8001568 <HAL_SPI_MspInit+0x254>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001394:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_SPI_MspInit+0x250>)
 8001396:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800139a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139c:	4b71      	ldr	r3, [pc, #452]	; (8001564 <HAL_SPI_MspInit+0x250>)
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a2:	4b70      	ldr	r3, [pc, #448]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b6e      	ldr	r3, [pc, #440]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013bc:	4b69      	ldr	r3, [pc, #420]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013c2:	4b68      	ldr	r3, [pc, #416]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ca:	4b66      	ldr	r3, [pc, #408]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013d0:	4864      	ldr	r0, [pc, #400]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013d2:	f001 f97d 	bl	80026d0 <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80013dc:	f7ff fdb4 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a60      	ldr	r2, [pc, #384]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013e4:	649a      	str	r2, [r3, #72]	; 0x48
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <HAL_SPI_MspInit+0x250>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013ec:	e0af      	b.n	800154e <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_SPI_MspInit+0x258>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d179      	bne.n	80014ec <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	4b57      	ldr	r3, [pc, #348]	; (800155c <HAL_SPI_MspInit+0x248>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a56      	ldr	r2, [pc, #344]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b54      	ldr	r3, [pc, #336]	; (800155c <HAL_SPI_MspInit+0x248>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_SPI_MspInit+0x248>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a4f      	ldr	r2, [pc, #316]	; (800155c <HAL_SPI_MspInit+0x248>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	4b49      	ldr	r3, [pc, #292]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_SPI_MspInit+0x248>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800144c:	2308      	movs	r3, #8
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145c:	2305      	movs	r3, #5
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4842      	ldr	r0, [pc, #264]	; (8001570 <HAL_SPI_MspInit+0x25c>)
 8001468:	f001 fd8e 	bl	8002f88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147e:	2305      	movs	r3, #5
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	483a      	ldr	r0, [pc, #232]	; (8001574 <HAL_SPI_MspInit+0x260>)
 800148a:	f001 fd7d 	bl	8002f88 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_SPI_MspInit+0x264>)
 8001490:	4a3a      	ldr	r2, [pc, #232]	; (800157c <HAL_SPI_MspInit+0x268>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_SPI_MspInit+0x264>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_SPI_MspInit+0x264>)
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b4:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014ce:	482a      	ldr	r0, [pc, #168]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014d0:	f001 f8fe 	bl	80026d0 <HAL_DMA_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_SPI_MspInit+0x1ca>
      Error_Handler();
 80014da:	f7ff fd35 	bl	8000f48 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014e2:	649a      	str	r2, [r3, #72]	; 0x48
 80014e4:	4a24      	ldr	r2, [pc, #144]	; (8001578 <HAL_SPI_MspInit+0x264>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80014ea:	e030      	b.n	800154e <HAL_SPI_MspInit+0x23a>
  else if(spiHandle->Instance==SPI3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a23      	ldr	r2, [pc, #140]	; (8001580 <HAL_SPI_MspInit+0x26c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_SPI_MspInit+0x248>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_SPI_MspInit+0x248>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_SPI_MspInit+0x248>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800152e:	2338      	movs	r3, #56	; 0x38
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800153e:	2306      	movs	r3, #6
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_SPI_MspInit+0x260>)
 800154a:	f001 fd1d 	bl	8002f88 <HAL_GPIO_Init>
}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	; 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40013000 	.word	0x40013000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	20000534 	.word	0x20000534
 8001568:	40026458 	.word	0x40026458
 800156c:	40003800 	.word	0x40003800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020400 	.word	0x40020400
 8001578:	20000594 	.word	0x20000594
 800157c:	40026070 	.word	0x40026070
 8001580:	40003c00 	.word	0x40003c00

08001584 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_SPI_MspDeInit+0x8c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10f      	bne.n	80015b6 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_SPI_MspDeInit+0x90>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_SPI_MspDeInit+0x90>)
 800159c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80015a2:	21a0      	movs	r1, #160	; 0xa0
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <HAL_SPI_MspDeInit+0x94>)
 80015a6:	f001 fe8d 	bl	80032c4 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f93c 	bl	800282c <HAL_DMA_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 80015b4:	e028      	b.n	8001608 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <HAL_SPI_MspDeInit+0x98>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d114      	bne.n	80015ea <HAL_SPI_MspDeInit+0x66>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_SPI_MspDeInit+0x90>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_SPI_MspDeInit+0x90>)
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 80015cc:	2108      	movs	r1, #8
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <HAL_SPI_MspDeInit+0x9c>)
 80015d0:	f001 fe78 	bl	80032c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <HAL_SPI_MspDeInit+0xa0>)
 80015da:	f001 fe73 	bl	80032c4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f922 	bl	800282c <HAL_DMA_DeInit>
}
 80015e8:	e00e      	b.n	8001608 <HAL_SPI_MspDeInit+0x84>
  else if(spiHandle->Instance==SPI3)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_SPI_MspDeInit+0xa4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d109      	bne.n	8001608 <HAL_SPI_MspDeInit+0x84>
    __HAL_RCC_SPI3_CLK_DISABLE();
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_SPI_MspDeInit+0x90>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_SPI_MspDeInit+0x90>)
 80015fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015fe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8001600:	2138      	movs	r1, #56	; 0x38
 8001602:	4808      	ldr	r0, [pc, #32]	; (8001624 <HAL_SPI_MspDeInit+0xa0>)
 8001604:	f001 fe5e 	bl	80032c4 <HAL_GPIO_DeInit>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40013000 	.word	0x40013000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020000 	.word	0x40020000
 800161c:	40003800 	.word	0x40003800
 8001620:	40020800 	.word	0x40020800
 8001624:	40020400 	.word	0x40020400
 8001628:	40003c00 	.word	0x40003c00

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x48>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_MspInit+0x48>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_MspInit+0x48>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_MspInit+0x48>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_MspInit+0x48>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_MspInit+0x48>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40023800 	.word	0x40023800

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f00b fb1f 	bl	800cd00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA1_Stream4_IRQHandler+0x10>)
 80016ce:	f001 f9f5 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000594 	.word	0x20000594

080016dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <TIM3_IRQHandler+0x10>)
 80016e2:	f005 ff21 	bl	8007528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200005f8 	.word	0x200005f8

080016f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM4_IRQHandler+0x10>)
 80016f6:	f005 ff17 	bl	8007528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000640 	.word	0x20000640

08001704 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USART2_IRQHandler+0x10>)
 800170a:	f006 fd0b 	bl	8008124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200006cc 	.word	0x200006cc

08001718 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA2_Stream0_IRQHandler+0x10>)
 800171e:	f001 f9cd 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000027c 	.word	0x2000027c

0800172c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA2_Stream3_IRQHandler+0x10>)
 8001732:	f001 f9c3 	bl	8002abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000534 	.word	0x20000534

08001740 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <OTG_FS_IRQHandler+0x10>)
 8001746:	f002 f96e 	bl	8003a26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200033b0 	.word	0x200033b0

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f00c f9ca 	bl	800db1c <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20020000 	.word	0x20020000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200005f4 	.word	0x200005f4
 80017bc:	200038f8 	.word	0x200038f8

080017c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <MX_TIM3_Init+0xd8>)
 80017f0:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <MX_TIM3_Init+0xdc>)
 80017f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <MX_TIM3_Init+0xd8>)
 80017f6:	2230      	movs	r2, #48	; 0x30
 80017f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <MX_TIM3_Init+0xd8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001806:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001814:	4823      	ldr	r0, [pc, #140]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001816:	f005 fd6f 	bl	80072f8 <HAL_TIM_PWM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001820:	f7ff fb92 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4619      	mov	r1, r3
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001834:	f006 fada 	bl	8007dec <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800183e:	f7ff fb83 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2360      	movs	r3, #96	; 0x60
 8001844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_TIM3_Init+0xd8>)
 800185a:	f005 ff6d 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001864:	f7ff fb70 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2208      	movs	r2, #8
 800186c:	4619      	mov	r1, r3
 800186e:	480d      	ldr	r0, [pc, #52]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001870:	f005 ff62 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800187a:	f7ff fb65 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	220c      	movs	r2, #12
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001886:	f005 ff57 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001890:	f7ff fb5a 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <MX_TIM3_Init+0xd8>)
 8001896:	f000 f8c9 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200005f8 	.word	0x200005f8
 80018a8:	40000400 	.word	0x40000400

080018ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <MX_TIM4_Init+0xec>)
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <MX_TIM4_Init+0xf0>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <MX_TIM4_Init+0xec>)
 80018d6:	2230      	movs	r2, #48	; 0x30
 80018d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <MX_TIM4_Init+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_TIM4_Init+0xec>)
 80018e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <MX_TIM4_Init+0xec>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_TIM4_Init+0xec>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018f4:	4828      	ldr	r0, [pc, #160]	; (8001998 <MX_TIM4_Init+0xec>)
 80018f6:	f005 fcff 	bl	80072f8 <HAL_TIM_PWM_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001900:	f7ff fb22 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4619      	mov	r1, r3
 8001912:	4821      	ldr	r0, [pc, #132]	; (8001998 <MX_TIM4_Init+0xec>)
 8001914:	f006 fa6a 	bl	8007dec <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800191e:	f7ff fb13 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	; 0x60
 8001924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <MX_TIM4_Init+0xec>)
 800193a:	f005 fefd 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001944:	f7ff fb00 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2204      	movs	r2, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4812      	ldr	r0, [pc, #72]	; (8001998 <MX_TIM4_Init+0xec>)
 8001950:	f005 fef2 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800195a:	f7ff faf5 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2208      	movs	r2, #8
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_TIM4_Init+0xec>)
 8001966:	f005 fee7 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001970:	f7ff faea 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	220c      	movs	r2, #12
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_TIM4_Init+0xec>)
 800197c:	f005 fedc 	bl	8007738 <HAL_TIM_PWM_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001986:	f7ff fadf 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800198a:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_TIM4_Init+0xec>)
 800198c:	f000 f84e 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000640 	.word	0x20000640
 800199c:	40000800 	.word	0x40000800

080019a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_TIM_PWM_MspInit+0x80>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d116      	bne.n	80019e0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_TIM_PWM_MspInit+0x84>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_TIM_PWM_MspInit+0x84>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_TIM_PWM_MspInit+0x84>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	201d      	movs	r0, #29
 80019d4:	f000 fe29 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d8:	201d      	movs	r0, #29
 80019da:	f000 fe42 	bl	8002662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019de:	e01a      	b.n	8001a16 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM4)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_TIM_PWM_MspInit+0x88>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d115      	bne.n	8001a16 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_PWM_MspInit+0x84>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_TIM_PWM_MspInit+0x84>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_TIM_PWM_MspInit+0x84>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	201e      	movs	r0, #30
 8001a0c:	f000 fe0d 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a10:	201e      	movs	r0, #30
 8001a12:	f000 fe26 	bl	8002662 <HAL_NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40000800 	.word	0x40000800

08001a2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <HAL_TIM_MspPostInit+0xec>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d13c      	bne.n	8001ac8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Pout7_Pin;
 8001a86:	2340      	movs	r3, #64	; 0x40
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a96:	2302      	movs	r3, #2
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pout7_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	481f      	ldr	r0, [pc, #124]	; (8001b20 <HAL_TIM_MspPostInit+0xf4>)
 8001aa2:	f001 fa71 	bl	8002f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pout5_Pin|Pout6_Pin;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4818      	ldr	r0, [pc, #96]	; (8001b24 <HAL_TIM_MspPostInit+0xf8>)
 8001ac2:	f001 fa61 	bl	8002f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ac6:	e023      	b.n	8001b10 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_TIM_MspPostInit+0xfc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11e      	bne.n	8001b10 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_TIM_MspPostInit+0xf0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Pout1_Pin|Pout2_Pin|Pout3_Pin|Pout4_Pin;
 8001aee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b00:	2302      	movs	r3, #2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <HAL_TIM_MspPostInit+0xf8>)
 8001b0c:	f001 fa3c 	bl	8002f88 <HAL_GPIO_Init>
}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40000800 	.word	0x40000800

08001b2c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_UART4_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_UART4_Init+0x4c>)
 8001b64:	f006 f9ce 	bl	8007f04 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f7ff f9eb 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000688 	.word	0x20000688
 8001b7c:	40004c00 	.word	0x40004c00

08001b80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART2_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bb8:	f006 f9a4 	bl	8007f04 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bc2:	f7ff f9c1 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200006cc 	.word	0x200006cc
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a36      	ldr	r2, [pc, #216]	; (8001ccc <HAL_UART_MspInit+0xf8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12c      	bne.n	8001c50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Tx_Pin|Rx_Pin;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4822      	ldr	r0, [pc, #136]	; (8001cd4 <HAL_UART_MspInit+0x100>)
 8001c4a:	f001 f99d 	bl	8002f88 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c4e:	e038      	b.n	8001cc2 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_UART_MspInit+0x104>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d133      	bne.n	8001cc2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_UART_MspInit+0xfc>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c92:	230c      	movs	r3, #12
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <HAL_UART_MspInit+0x100>)
 8001cae:	f001 f96b 	bl	8002f88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2026      	movs	r0, #38	; 0x26
 8001cb8:	f000 fcb7 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cbc:	2026      	movs	r0, #38	; 0x26
 8001cbe:	f000 fcd0 	bl	8002662 <HAL_NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	; 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004c00 	.word	0x40004c00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40004400 	.word	0x40004400

08001cdc <Reset_Handler>:
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopFillZerobss+0x12>
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopFillZerobss+0x16>)
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <LoopFillZerobss+0x1a>)
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <LoopFillZerobss+0x1e>)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:
 8001cea:	58d4      	ldr	r4, [r2, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:
 8001cf0:	18c4      	adds	r4, r0, r3
 8001cf2:	428c      	cmp	r4, r1
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <LoopFillZerobss+0x22>)
 8001cf8:	4c0b      	ldr	r4, [pc, #44]	; (8001d28 <LoopFillZerobss+0x26>)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:
 8001d02:	42a2      	cmp	r2, r4
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>
 8001d06:	f7ff fd5b 	bl	80017c0 <SystemInit>
 8001d0a:	f00b ff0d 	bl	800db28 <__libc_init_array>
 8001d0e:	f7fe fe1d 	bl	800094c <main>
 8001d12:	4770      	bx	lr
 8001d14:	20020000 	.word	0x20020000
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000210 	.word	0x20000210
 8001d20:	0800deb0 	.word	0x0800deb0
 8001d24:	20000210 	.word	0x20000210
 8001d28:	200038f8 	.word	0x200038f8

08001d2c <ADC_IRQHandler>:
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 fc5b 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	2004      	movs	r0, #4
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fc62 	bl	800162c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fc73 	bl	800267e <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 fc3b 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000040 	.word	0x20000040
 8001dcc:	20000048 	.word	0x20000048
 8001dd0:	20000044 	.word	0x20000044

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <HAL_GetTick+0x10>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000710 	.word	0x20000710

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffe0 	bl	8001dd4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000048 	.word	0x20000048

08001e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e033      	b.n	8001eae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fb8a 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e76:	f023 0302 	bic.w	r3, r3, #2
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f9f4 	bl	8002270 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f023 0303 	bic.w	r3, r3, #3
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9e:	e001      	b.n	8001ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Start+0x1a>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e095      	b.n	8001ffe <HAL_ADC_Start+0x146>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d018      	beq.n	8001f1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_ADC_Start+0x150>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a43      	ldr	r2, [pc, #268]	; (800200c <HAL_ADC_Start+0x154>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9a      	lsrs	r2, r3, #18
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d15d      	bne.n	8001fe4 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f023 0206 	bic.w	r2, r3, #6
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_ADC_Start+0x158>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10f      	bne.n	8001fba <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d129      	bne.n	8001ffc <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	e020      	b.n	8001ffc <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_ADC_Start+0x15c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d11b      	bne.n	8001ffc <HAL_ADC_Start+0x144>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d114      	bne.n	8001ffc <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	e00b      	b.n	8001ffc <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0210 	orr.w	r2, r3, #16
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000040 	.word	0x20000040
 800200c:	431bde83 	.word	0x431bde83
 8002010:	40012300 	.word	0x40012300
 8002014:	40012000 	.word	0x40012000

08002018 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1c>
 8002048:	2302      	movs	r3, #2
 800204a:	e103      	b.n	8002254 <HAL_ADC_ConfigChannel+0x224>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d925      	bls.n	80020a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	3b1e      	subs	r3, #30
 8002072:	2207      	movs	r2, #7
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43da      	mvns	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	400a      	ands	r2, r1
 8002080:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68d9      	ldr	r1, [r3, #12]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	4603      	mov	r3, r0
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4403      	add	r3, r0
 800209a:	3b1e      	subs	r3, #30
 800209c:	409a      	lsls	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	e022      	b.n	80020ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6919      	ldr	r1, [r3, #16]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	2207      	movs	r2, #7
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	400a      	ands	r2, r1
 80020ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4403      	add	r3, r0
 80020e4:	409a      	lsls	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d824      	bhi.n	8002140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3b05      	subs	r3, #5
 8002108:	221f      	movs	r2, #31
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	400a      	ands	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	4618      	mov	r0, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b05      	subs	r3, #5
 8002132:	fa00 f203 	lsl.w	r2, r0, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
 800213e:	e04c      	b.n	80021da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	d824      	bhi.n	8002192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3b23      	subs	r3, #35	; 0x23
 800215a:	221f      	movs	r2, #31
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43da      	mvns	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	400a      	ands	r2, r1
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b23      	subs	r3, #35	; 0x23
 8002184:	fa00 f203 	lsl.w	r2, r0, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
 8002190:	e023      	b.n	80021da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b41      	subs	r3, #65	; 0x41
 80021a4:	221f      	movs	r2, #31
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	400a      	ands	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b41      	subs	r3, #65	; 0x41
 80021ce:	fa00 f203 	lsl.w	r2, r0, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <HAL_ADC_ConfigChannel+0x230>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_ADC_ConfigChannel+0x234>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <HAL_ADC_ConfigChannel+0x234>)
 80021f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_ADC_ConfigChannel+0x230>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d123      	bne.n	800224a <HAL_ADC_ConfigChannel+0x21a>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d003      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x1e2>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b11      	cmp	r3, #17
 8002210:	d11b      	bne.n	800224a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_ADC_ConfigChannel+0x234>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_ADC_ConfigChannel+0x234>)
 8002218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800221c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d111      	bne.n	800224a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_ADC_ConfigChannel+0x238>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <HAL_ADC_ConfigChannel+0x23c>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	0c9a      	lsrs	r2, r3, #18
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800223c:	e002      	b.n	8002244 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3b01      	subs	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f9      	bne.n	800223e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40012000 	.word	0x40012000
 8002264:	40012300 	.word	0x40012300
 8002268:	20000040 	.word	0x20000040
 800226c:	431bde83 	.word	0x431bde83

08002270 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002278:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <ADC_Init+0x204>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a7d      	ldr	r2, [pc, #500]	; (8002474 <ADC_Init+0x204>)
 800227e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002282:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002284:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <ADC_Init+0x204>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4979      	ldr	r1, [pc, #484]	; (8002474 <ADC_Init+0x204>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <ADC_Init+0x208>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d022      	beq.n	800234a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e00f      	b.n	800236a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0202 	bic.w	r2, r2, #2
 8002378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
 8002384:	005a      	lsls	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d027      	beq.n	80023e8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	3b01      	subs	r3, #1
 80023be:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80023c2:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	fa03 f102 	lsl.w	r1, r3, r2
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	e007      	b.n	80023f8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	3b01      	subs	r3, #1
 8002414:	051a      	lsls	r2, r3, #20
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800242c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243a:	025a      	lsls	r2, r3, #9
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	029a      	lsls	r2, r3, #10
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40012300 	.word	0x40012300
 8002478:	0f000001 	.word	0x0f000001

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4906      	ldr	r1, [pc, #24]	; (8002514 <__NVIC_EnableIRQ+0x34>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff90 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff2d 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263c:	f7ff ff42 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7ff ff90 	bl	800256c <NVIC_EncodePriority>
 800264c:	4602      	mov	r2, r0
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5f 	bl	8002518 <__NVIC_SetPriority>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff35 	bl	80024e0 <__NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffa2 	bl	80025d0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e00e      	b.n	80026c6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	795b      	ldrb	r3, [r3, #5]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fd ff89 	bl	80005d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff fb7a 	bl	8001dd4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e099      	b.n	8002820 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270c:	e00f      	b.n	800272e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270e:	f7ff fb61 	bl	8001dd4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b05      	cmp	r3, #5
 800271a:	d908      	bls.n	800272e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2203      	movs	r2, #3
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e078      	b.n	8002820 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e8      	bne.n	800270e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4b38      	ldr	r3, [pc, #224]	; (8002828 <HAL_DMA_Init+0x158>)
 8002748:	4013      	ands	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2b04      	cmp	r3, #4
 8002786:	d107      	bne.n	8002798 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4313      	orrs	r3, r2
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0307 	bic.w	r3, r3, #7
 80027ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d117      	bne.n	80027f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00e      	beq.n	80027f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb5d 	bl	8002e94 <DMA_CheckFifoParam>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ee:	2301      	movs	r3, #1
 80027f0:	e016      	b.n	8002820 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fb16 	bl	8002e2c <DMA_CalcBaseAndBitshift>
 8002800:	4603      	mov	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	223f      	movs	r2, #63	; 0x3f
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	f010803f 	.word	0xf010803f

0800282c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e050      	b.n	80028e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d101      	bne.n	800284e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	e048      	b.n	80028e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2221      	movs	r2, #33	; 0x21
 800288c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 facc 	bl	8002e2c <DMA_CalcBaseAndBitshift>
 8002894:	4603      	mov	r3, r0
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	223f      	movs	r2, #63	; 0x3f
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_DMA_Start_IT+0x26>
 800290a:	2302      	movs	r3, #2
 800290c:	e040      	b.n	8002990 <HAL_DMA_Start_IT+0xa8>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d12f      	bne.n	8002982 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa4a 	bl	8002dd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	223f      	movs	r2, #63	; 0x3f
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0216 	orr.w	r2, r2, #22
 8002956:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e005      	b.n	800298e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a6:	f7ff fa15 	bl	8001dd4 <HAL_GetTick>
 80029aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d008      	beq.n	80029ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e052      	b.n	8002a70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0216 	bic.w	r2, r2, #22
 80029d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_DMA_Abort+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1a:	e013      	b.n	8002a44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1c:	f7ff f9da 	bl	8001dd4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d90c      	bls.n	8002a44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e015      	b.n	8002a70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e4      	bne.n	8002a1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	223f      	movs	r2, #63	; 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d004      	beq.n	8002a96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e00c      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2205      	movs	r2, #5
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ac8:	4b8e      	ldr	r3, [pc, #568]	; (8002d04 <HAL_DMA_IRQHandler+0x248>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8e      	ldr	r2, [pc, #568]	; (8002d08 <HAL_DMA_IRQHandler+0x24c>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01a      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2208      	movs	r2, #8
 8002b16:	409a      	lsls	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	2204      	movs	r2, #4
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d012      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2204      	movs	r2, #4
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0204 	orr.w	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2210      	movs	r2, #16
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d043      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d03c      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d024      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e01f      	b.n	8002c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e016      	b.n	8002c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0208 	bic.w	r2, r2, #8
 8002c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	2220      	movs	r2, #32
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 808f 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8087 	beq.w	8002d5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	2220      	movs	r2, #32
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d136      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0216 	bic.w	r2, r2, #22
 8002c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x1da>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0208 	bic.w	r2, r2, #8
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	223f      	movs	r2, #63	; 0x3f
 8002cac:	409a      	lsls	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07e      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
        }
        return;
 8002cd2:	e079      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d031      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
 8002d00:	e02c      	b.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
 8002d02:	bf00      	nop
 8002d04:	20000040 	.word	0x20000040
 8002d08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e01e      	b.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0210 	bic.w	r2, r2, #16
 8002d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d032      	beq.n	8002dca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d022      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2205      	movs	r2, #5
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d307      	bcc.n	8002da4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f2      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x2cc>
 8002da2:	e000      	b.n	8002da6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002da4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
 8002dc6:	e000      	b.n	8002dca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dc8:	bf00      	nop
    }
  }
}
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d108      	bne.n	8002e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e0e:	e007      	b.n	8002e20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	3b10      	subs	r3, #16
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <DMA_CalcBaseAndBitshift+0x60>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <DMA_CalcBaseAndBitshift+0x64>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d909      	bls.n	8002e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	1d1a      	adds	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e6c:	e007      	b.n	8002e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	aaaaaaab 	.word	0xaaaaaaab
 8002e90:	0800de84 	.word	0x0800de84

08002e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11f      	bne.n	8002eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d856      	bhi.n	8002f62 <DMA_CheckFifoParam+0xce>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <DMA_CheckFifoParam+0x28>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edf 	.word	0x08002edf
 8002ec4:	08002ecd 	.word	0x08002ecd
 8002ec8:	08002f63 	.word	0x08002f63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d046      	beq.n	8002f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e043      	b.n	8002f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee6:	d140      	bne.n	8002f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e03d      	b.n	8002f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	d121      	bne.n	8002f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d837      	bhi.n	8002f6e <DMA_CheckFifoParam+0xda>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <DMA_CheckFifoParam+0x70>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f1b 	.word	0x08002f1b
 8002f0c:	08002f15 	.word	0x08002f15
 8002f10:	08002f2d 	.word	0x08002f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e030      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d025      	beq.n	8002f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e022      	b.n	8002f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f34:	d11f      	bne.n	8002f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f3a:	e01c      	b.n	8002f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d903      	bls.n	8002f4a <DMA_CheckFifoParam+0xb6>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d003      	beq.n	8002f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f48:	e018      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4e:	e015      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e00b      	b.n	8002f7a <DMA_CheckFifoParam+0xe6>
      break;
 8002f62:	bf00      	nop
 8002f64:	e00a      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
 8002f68:	e008      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e006      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <DMA_CheckFifoParam+0xe8>
      break;
 8002f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	e16f      	b.n	8003278 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8161 	beq.w	8003272 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d005      	beq.n	8002fc8 <HAL_GPIO_Init+0x40>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d130      	bne.n	800302a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffe:	2201      	movs	r2, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0201 	and.w	r2, r3, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d017      	beq.n	8003066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d123      	bne.n	80030ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	6939      	ldr	r1, [r7, #16]
 80030b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80bb 	beq.w	8003272 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_GPIO_Init+0x30c>)
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_GPIO_Init+0x30c>)
 8003106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310a:	6453      	str	r3, [r2, #68]	; 0x44
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_GPIO_Init+0x30c>)
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003118:	4a5f      	ldr	r2, [pc, #380]	; (8003298 <HAL_GPIO_Init+0x310>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a57      	ldr	r2, [pc, #348]	; (800329c <HAL_GPIO_Init+0x314>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d031      	beq.n	80031a8 <HAL_GPIO_Init+0x220>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_GPIO_Init+0x318>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d02b      	beq.n	80031a4 <HAL_GPIO_Init+0x21c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a55      	ldr	r2, [pc, #340]	; (80032a4 <HAL_GPIO_Init+0x31c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d025      	beq.n	80031a0 <HAL_GPIO_Init+0x218>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a54      	ldr	r2, [pc, #336]	; (80032a8 <HAL_GPIO_Init+0x320>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01f      	beq.n	800319c <HAL_GPIO_Init+0x214>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a53      	ldr	r2, [pc, #332]	; (80032ac <HAL_GPIO_Init+0x324>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d019      	beq.n	8003198 <HAL_GPIO_Init+0x210>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_GPIO_Init+0x328>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_GPIO_Init+0x20c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_GPIO_Init+0x32c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00d      	beq.n	8003190 <HAL_GPIO_Init+0x208>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <HAL_GPIO_Init+0x330>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <HAL_GPIO_Init+0x204>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a4f      	ldr	r2, [pc, #316]	; (80032bc <HAL_GPIO_Init+0x334>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_GPIO_Init+0x200>
 8003184:	2308      	movs	r3, #8
 8003186:	e010      	b.n	80031aa <HAL_GPIO_Init+0x222>
 8003188:	2309      	movs	r3, #9
 800318a:	e00e      	b.n	80031aa <HAL_GPIO_Init+0x222>
 800318c:	2307      	movs	r3, #7
 800318e:	e00c      	b.n	80031aa <HAL_GPIO_Init+0x222>
 8003190:	2306      	movs	r3, #6
 8003192:	e00a      	b.n	80031aa <HAL_GPIO_Init+0x222>
 8003194:	2305      	movs	r3, #5
 8003196:	e008      	b.n	80031aa <HAL_GPIO_Init+0x222>
 8003198:	2304      	movs	r3, #4
 800319a:	e006      	b.n	80031aa <HAL_GPIO_Init+0x222>
 800319c:	2303      	movs	r3, #3
 800319e:	e004      	b.n	80031aa <HAL_GPIO_Init+0x222>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e002      	b.n	80031aa <HAL_GPIO_Init+0x222>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_GPIO_Init+0x222>
 80031a8:	2300      	movs	r3, #0
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	f002 0203 	and.w	r2, r2, #3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4093      	lsls	r3, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031bc:	4936      	ldr	r1, [pc, #216]	; (8003298 <HAL_GPIO_Init+0x310>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_GPIO_Init+0x338>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031ee:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <HAL_GPIO_Init+0x338>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <HAL_GPIO_Init+0x338>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003218:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_GPIO_Init+0x338>)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321e:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_GPIO_Init+0x338>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003242:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_GPIO_Init+0x338>)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_GPIO_Init+0x338>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800326c:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <HAL_GPIO_Init+0x338>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	f47f ae88 	bne.w	8002f98 <HAL_GPIO_Init+0x10>
  }
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40021400 	.word	0x40021400
 80032b4:	40021800 	.word	0x40021800
 80032b8:	40021c00 	.word	0x40021c00
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40013c00 	.word	0x40013c00

080032c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80032d2:	e0d1      	b.n	8003478 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80032d4:	2201      	movs	r2, #1
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80c4 	beq.w	8003472 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80032ea:	4a6a      	ldr	r2, [pc, #424]	; (8003494 <HAL_GPIO_DeInit+0x1d0>)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a62      	ldr	r2, [pc, #392]	; (8003498 <HAL_GPIO_DeInit+0x1d4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d031      	beq.n	8003378 <HAL_GPIO_DeInit+0xb4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a61      	ldr	r2, [pc, #388]	; (800349c <HAL_GPIO_DeInit+0x1d8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d02b      	beq.n	8003374 <HAL_GPIO_DeInit+0xb0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a60      	ldr	r2, [pc, #384]	; (80034a0 <HAL_GPIO_DeInit+0x1dc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d025      	beq.n	8003370 <HAL_GPIO_DeInit+0xac>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a5f      	ldr	r2, [pc, #380]	; (80034a4 <HAL_GPIO_DeInit+0x1e0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01f      	beq.n	800336c <HAL_GPIO_DeInit+0xa8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a5e      	ldr	r2, [pc, #376]	; (80034a8 <HAL_GPIO_DeInit+0x1e4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d019      	beq.n	8003368 <HAL_GPIO_DeInit+0xa4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a5d      	ldr	r2, [pc, #372]	; (80034ac <HAL_GPIO_DeInit+0x1e8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_GPIO_DeInit+0xa0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a5c      	ldr	r2, [pc, #368]	; (80034b0 <HAL_GPIO_DeInit+0x1ec>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00d      	beq.n	8003360 <HAL_GPIO_DeInit+0x9c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a5b      	ldr	r2, [pc, #364]	; (80034b4 <HAL_GPIO_DeInit+0x1f0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <HAL_GPIO_DeInit+0x98>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a5a      	ldr	r2, [pc, #360]	; (80034b8 <HAL_GPIO_DeInit+0x1f4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_GPIO_DeInit+0x94>
 8003354:	2308      	movs	r3, #8
 8003356:	e010      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003358:	2309      	movs	r3, #9
 800335a:	e00e      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 800335c:	2307      	movs	r3, #7
 800335e:	e00c      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003360:	2306      	movs	r3, #6
 8003362:	e00a      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003364:	2305      	movs	r3, #5
 8003366:	e008      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003368:	2304      	movs	r3, #4
 800336a:	e006      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 800336c:	2303      	movs	r3, #3
 800336e:	e004      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003370:	2302      	movs	r3, #2
 8003372:	e002      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_GPIO_DeInit+0xb6>
 8003378:	2300      	movs	r3, #0
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	f002 0203 	and.w	r2, r2, #3
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	fa03 f202 	lsl.w	r2, r3, r2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d132      	bne.n	80033f2 <HAL_GPIO_DeInit+0x12e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800338c:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	4949      	ldr	r1, [pc, #292]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 8003396:	4013      	ands	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800339a:	4b48      	ldr	r3, [pc, #288]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4946      	ldr	r1, [pc, #280]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80033a8:	4b44      	ldr	r3, [pc, #272]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4942      	ldr	r1, [pc, #264]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033b6:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	493f      	ldr	r1, [pc, #252]	; (80034bc <HAL_GPIO_DeInit+0x1f8>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	220f      	movs	r2, #15
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80033d4:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <HAL_GPIO_DeInit+0x1d0>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	482b      	ldr	r0, [pc, #172]	; (8003494 <HAL_GPIO_DeInit+0x1d0>)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	400a      	ands	r2, r1
 80033ec:	3302      	adds	r3, #2
 80033ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2103      	movs	r1, #3
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	08d2      	lsrs	r2, r2, #3
 8003428:	4019      	ands	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2103      	movs	r1, #3
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	2101      	movs	r1, #1
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2103      	movs	r1, #3
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	401a      	ands	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	f47f af27 	bne.w	80032d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40013800 	.word	0x40013800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020400 	.word	0x40020400
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020c00 	.word	0x40020c00
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40021400 	.word	0x40021400
 80034b0:	40021800 	.word	0x40021800
 80034b4:	40021c00 	.word	0x40021c00
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40013c00 	.word	0x40013c00

080034c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e001      	b.n	80034e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	807b      	strh	r3, [r7, #2]
 80034fa:	4613      	mov	r3, r2
 80034fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034fe:	787b      	ldrb	r3, [r7, #1]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800350a:	e003      	b.n	8003514 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	041a      	lsls	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
	...

08003520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e12b      	b.n	800378a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd f9b8 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003584:	f001 fed8 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 8003588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4a81      	ldr	r2, [pc, #516]	; (8003794 <HAL_I2C_Init+0x274>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d807      	bhi.n	80035a4 <HAL_I2C_Init+0x84>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4a80      	ldr	r2, [pc, #512]	; (8003798 <HAL_I2C_Init+0x278>)
 8003598:	4293      	cmp	r3, r2
 800359a:	bf94      	ite	ls
 800359c:	2301      	movls	r3, #1
 800359e:	2300      	movhi	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e006      	b.n	80035b2 <HAL_I2C_Init+0x92>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a7d      	ldr	r2, [pc, #500]	; (800379c <HAL_I2C_Init+0x27c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bf94      	ite	ls
 80035ac:	2301      	movls	r3, #1
 80035ae:	2300      	movhi	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0e7      	b.n	800378a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a78      	ldr	r2, [pc, #480]	; (80037a0 <HAL_I2C_Init+0x280>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0c9b      	lsrs	r3, r3, #18
 80035c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a6a      	ldr	r2, [pc, #424]	; (8003794 <HAL_I2C_Init+0x274>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d802      	bhi.n	80035f4 <HAL_I2C_Init+0xd4>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3301      	adds	r3, #1
 80035f2:	e009      	b.n	8003608 <HAL_I2C_Init+0xe8>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	4a69      	ldr	r2, [pc, #420]	; (80037a4 <HAL_I2C_Init+0x284>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	3301      	adds	r3, #1
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	430b      	orrs	r3, r1
 800360e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800361a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	495c      	ldr	r1, [pc, #368]	; (8003794 <HAL_I2C_Init+0x274>)
 8003624:	428b      	cmp	r3, r1
 8003626:	d819      	bhi.n	800365c <HAL_I2C_Init+0x13c>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e59      	subs	r1, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fbb1 f3f3 	udiv	r3, r1, r3
 8003636:	1c59      	adds	r1, r3, #1
 8003638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800363c:	400b      	ands	r3, r1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_I2C_Init+0x138>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1e59      	subs	r1, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003656:	e051      	b.n	80036fc <HAL_I2C_Init+0x1dc>
 8003658:	2304      	movs	r3, #4
 800365a:	e04f      	b.n	80036fc <HAL_I2C_Init+0x1dc>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d111      	bne.n	8003688 <HAL_I2C_Init+0x168>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e58      	subs	r0, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	440b      	add	r3, r1
 8003672:	fbb0 f3f3 	udiv	r3, r0, r3
 8003676:	3301      	adds	r3, #1
 8003678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e012      	b.n	80036ae <HAL_I2C_Init+0x18e>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e58      	subs	r0, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	0099      	lsls	r1, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Init+0x196>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e022      	b.n	80036fc <HAL_I2C_Init+0x1dc>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10e      	bne.n	80036dc <HAL_I2C_Init+0x1bc>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e58      	subs	r0, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	440b      	add	r3, r1
 80036cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036da:	e00f      	b.n	80036fc <HAL_I2C_Init+0x1dc>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1e58      	subs	r0, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	0099      	lsls	r1, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	6809      	ldr	r1, [r1, #0]
 8003700:	4313      	orrs	r3, r2
 8003702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800372a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6911      	ldr	r1, [r2, #16]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	4311      	orrs	r1, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	430b      	orrs	r3, r1
 800373e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	000186a0 	.word	0x000186a0
 8003798:	001e847f 	.word	0x001e847f
 800379c:	003d08ff 	.word	0x003d08ff
 80037a0:	431bde83 	.word	0x431bde83
 80037a4:	10624dd3 	.word	0x10624dd3

080037a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037aa:	b08f      	sub	sp, #60	; 0x3c
 80037ac:	af0a      	add	r7, sp, #40	; 0x28
 80037ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e10f      	b.n	80039da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f009 fdc1 	bl	800d35c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f005 ff8b 	bl	8009714 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	687e      	ldr	r6, [r7, #4]
 8003806:	466d      	mov	r5, sp
 8003808:	f106 0410 	add.w	r4, r6, #16
 800380c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800380e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003814:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003818:	e885 0003 	stmia.w	r5, {r0, r1}
 800381c:	1d33      	adds	r3, r6, #4
 800381e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	f005 fe6d 	bl	8009500 <USB_CoreInit>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0d0      	b.n	80039da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f005 ff78 	bl	8009734 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	e04a      	b.n	80038e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	333d      	adds	r3, #61	; 0x3d
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	333c      	adds	r3, #60	; 0x3c
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	b298      	uxth	r0, r3
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3342      	adds	r3, #66	; 0x42
 8003886:	4602      	mov	r2, r0
 8003888:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	333f      	adds	r3, #63	; 0x3f
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3344      	adds	r3, #68	; 0x44
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3348      	adds	r3, #72	; 0x48
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3350      	adds	r3, #80	; 0x50
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	3301      	adds	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3af      	bcc.n	800384a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e044      	b.n	800397a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	3301      	adds	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d3b5      	bcc.n	80038f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	687e      	ldr	r6, [r7, #4]
 800398c:	466d      	mov	r5, sp
 800398e:	f106 0410 	add.w	r4, r6, #16
 8003992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800399e:	e885 0003 	stmia.w	r5, {r0, r1}
 80039a2:	1d33      	adds	r3, r6, #4
 80039a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a6:	6838      	ldr	r0, [r7, #0]
 80039a8:	f005 ff10 	bl	80097cc <USB_DevInit>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00d      	b.n	80039da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f006 ff81 	bl	800a8da <USB_DevDisconnect>

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_PCD_Start+0x16>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e012      	b.n	8003a1e <HAL_PCD_Start+0x3c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f005 fe75 	bl	80096f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f006 ff43 	bl	800a89a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a26:	b590      	push	{r4, r7, lr}
 8003a28:	b08d      	sub	sp, #52	; 0x34
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f006 fffa 	bl	800aa36 <USB_GetMode>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f040 838f 	bne.w	8004168 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f006 ff63 	bl	800a91a <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8385 	beq.w	8004166 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f006 ff5a 	bl	800a91a <USB_ReadInterrupts>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f002 0202 	and.w	r2, r2, #2
 8003a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f006 ff48 	bl	800a91a <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d161      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0210 	bic.w	r2, r2, #16
 8003aa2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	0c5b      	lsrs	r3, r3, #17
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d124      	bne.n	8003b1a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d035      	beq.n	8003b48 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	6a38      	ldr	r0, [r7, #32]
 8003af0:	f006 fd85 	bl	800a5fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b00:	441a      	add	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b12:	441a      	add	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	619a      	str	r2, [r3, #24]
 8003b18:	e016      	b.n	8003b48 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	0c5b      	lsrs	r3, r3, #17
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d110      	bne.n	8003b48 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6a38      	ldr	r0, [r7, #32]
 8003b32:	f006 fd64 	bl	800a5fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b42:	441a      	add	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0210 	orr.w	r2, r2, #16
 8003b56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f006 fedc 	bl	800a91a <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b6c:	d16e      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f006 fee1 	bl	800a93e <USB_ReadDevAllOutEpInterrupt>
 8003b7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b7e:	e062      	b.n	8003c46 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d057      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f006 ff04 	bl	800a9a2 <USB_ReadDevOutEPInterrupt>
 8003b9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fda2 	bl	8004704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2308      	movs	r3, #8
 8003bda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fe9c 	bl	800491c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	2320      	movs	r3, #32
 8003c1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	461a      	mov	r2, r3
 8003c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d199      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f006 fe62 	bl	800a91a <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c60:	f040 80c0 	bne.w	8003de4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f006 fe81 	bl	800a970 <USB_ReadDevAllInEpInterrupt>
 8003c6e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c74:	e0b2      	b.n	8003ddc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a7 	beq.w	8003dd0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f006 fea5 	bl	800a9dc <USB_ReadDevInEPInterrupt>
 8003c92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d057      	beq.n	8003d4e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69f9      	ldr	r1, [r7, #28]
 8003cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d132      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3348      	adds	r3, #72	; 0x48
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4403      	add	r3, r0
 8003cfc:	3344      	adds	r3, #68	; 0x44
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4419      	add	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4403      	add	r3, r0
 8003d10:	3348      	adds	r3, #72	; 0x48
 8003d12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d113      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x31c>
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3350      	adds	r3, #80	; 0x50
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d108      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	f006 fea9 	bl	800aa94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f009 fb96 	bl	800d47a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d64:	461a      	mov	r2, r3
 8003d66:	2308      	movs	r3, #8
 8003d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	2310      	movs	r3, #16
 8003d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2340      	movs	r3, #64	; 0x40
 8003da0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	461a      	mov	r2, r3
 8003dba:	2302      	movs	r3, #2
 8003dbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fc0c 	bl	80045e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f47f af49 	bne.w	8003c76 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f006 fd96 	bl	800a91a <USB_ReadInterrupts>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df8:	d114      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f009 fbaa 	bl	800d568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f006 fd76 	bl	800a91a <USB_ReadInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e38:	d112      	bne.n	8003e60 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f009 fb66 	bl	800d51c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e5e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f006 fd58 	bl	800a91a <USB_ReadInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	f040 80c7 	bne.w	8004006 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2110      	movs	r1, #16
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 fdfe 	bl	8009a94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9c:	e056      	b.n	8003f4c <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ecc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ed0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ef0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	461a      	mov	r2, r3
 8003f00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	3301      	adds	r3, #1
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3a3      	bcc.n	8003e9e <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d016      	beq.n	8003fa0 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f82:	f043 030b 	orr.w	r3, r3, #11
 8003f86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f98:	f043 030b 	orr.w	r3, r3, #11
 8003f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9e:	e015      	b.n	8003fcc <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fb2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fb6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc6:	f043 030b 	orr.w	r3, r3, #11
 8003fca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f006 fd4f 	bl	800aa94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f006 fc85 	bl	800a91a <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401a:	d124      	bne.n	8004066 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f006 fd15 	bl	800aa50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f005 fd8e 	bl	8009b4c <USB_GetDevSpeed>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	f001 f972 	bl	8005324 <HAL_RCC_GetHCLKFreq>
 8004040:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4620      	mov	r0, r4
 800404c:	f005 fab0 	bl	80095b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f009 fa3a 	bl	800d4ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004064:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f006 fc55 	bl	800a91a <USB_ReadInterrupts>
 8004070:	4603      	mov	r3, r0
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b08      	cmp	r3, #8
 8004078:	d10a      	bne.n	8004090 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f009 fa17 	bl	800d4ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f002 0208 	and.w	r2, r2, #8
 800408e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f006 fc40 	bl	800a91a <USB_ReadInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a4:	d10f      	bne.n	80040c6 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f009 fa79 	bl	800d5a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f006 fc25 	bl	800a91a <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040da:	d10f      	bne.n	80040fc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f009 fa4c 	bl	800d584 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f006 fc0a 	bl	800a91a <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d10a      	bne.n	8004128 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f009 fa5a 	bl	800d5cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f006 fbf4 	bl	800a91a <USB_ReadInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d115      	bne.n	8004168 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f009 fa4a 	bl	800d5e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	e000      	b.n	8004168 <HAL_PCD_IRQHandler+0x742>
      return;
 8004166:	bf00      	nop
    }
  }
}
 8004168:	3734      	adds	r7, #52	; 0x34
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_PCD_SetAddress+0x1a>
 8004184:	2302      	movs	r3, #2
 8004186:	e013      	b.n	80041b0 <HAL_PCD_SetAddress+0x42>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f006 fb55 	bl	800a850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	70fb      	strb	r3, [r7, #3]
 80041ca:	460b      	mov	r3, r1
 80041cc:	803b      	strh	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da0f      	bge.n	80041fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	4613      	mov	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	3338      	adds	r3, #56	; 0x38
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	3304      	adds	r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	705a      	strb	r2, [r3, #1]
 80041fc:	e00f      	b.n	800421e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	f003 020f 	and.w	r2, r3, #15
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800422a:	883a      	ldrh	r2, [r7, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	78ba      	ldrb	r2, [r7, #2]
 8004234:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004248:	78bb      	ldrb	r3, [r7, #2]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d102      	bne.n	8004254 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_PCD_EP_Open+0xaa>
 800425e:	2302      	movs	r3, #2
 8004260:	e00e      	b.n	8004280 <HAL_PCD_EP_Open+0xc8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	4618      	mov	r0, r3
 8004272:	f005 fc8f 	bl	8009b94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800427e:	7afb      	ldrb	r3, [r7, #11]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004298:	2b00      	cmp	r3, #0
 800429a:	da0f      	bge.n	80042bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3338      	adds	r3, #56	; 0x38
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	705a      	strb	r2, [r3, #1]
 80042ba:	e00f      	b.n	80042dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 020f 	and.w	r2, r3, #15
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_PCD_EP_Close+0x6e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e00e      	b.n	8004314 <HAL_PCD_EP_Close+0x8c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	4618      	mov	r0, r3
 8004306:	f005 fccb 	bl	8009ca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	460b      	mov	r3, r1
 800432a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435e:	7afb      	ldrb	r3, [r7, #11]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d102      	bne.n	8004378 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	f005 ffa6 	bl	800a2e0 <USB_EP0StartXfer>
 8004394:	e008      	b.n	80043a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	f005 fd58 	bl	8009e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 020f 	and.w	r2, r3, #15
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043d4:	681b      	ldr	r3, [r3, #0]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	460b      	mov	r3, r1
 80043ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	3338      	adds	r3, #56	; 0x38
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2201      	movs	r2, #1
 800441e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004420:	7afb      	ldrb	r3, [r7, #11]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	b2da      	uxtb	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d102      	bne.n	800443a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800443a:	7afb      	ldrb	r3, [r7, #11]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	f005 ff45 	bl	800a2e0 <USB_EP0StartXfer>
 8004456:	e008      	b.n	800446a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	f005 fcf7 	bl	8009e58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d901      	bls.n	8004492 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e050      	b.n	8004534 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da0f      	bge.n	80044ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	705a      	strb	r2, [r3, #1]
 80044b8:	e00d      	b.n	80044d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	3304      	adds	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_PCD_EP_SetStall+0x82>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e01e      	b.n	8004534 <HAL_PCD_EP_SetStall+0xc0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	4618      	mov	r0, r3
 8004506:	f006 f8d1 	bl	800a6ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	b2d9      	uxtb	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004524:	461a      	mov	r2, r3
 8004526:	f006 fab5 	bl	800aa94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d901      	bls.n	800455a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800455a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	da0f      	bge.n	8004582 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	3338      	adds	r3, #56	; 0x38
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	3304      	adds	r3, #4
 8004578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	705a      	strb	r2, [r3, #1]
 8004580:	e00f      	b.n	80045a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_PCD_EP_ClrStall+0x86>
 80045be:	2302      	movs	r3, #2
 80045c0:	e00e      	b.n	80045e0 <HAL_PCD_EP_ClrStall+0xa4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f006 f8d8 	bl	800a786 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3338      	adds	r3, #56	; 0x38
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	3304      	adds	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	d901      	bls.n	8004620 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e06c      	b.n	80046fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	429a      	cmp	r2, r3
 8004634:	d902      	bls.n	800463c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3303      	adds	r3, #3
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004644:	e02b      	b.n	800469e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	429a      	cmp	r2, r3
 800465a:	d902      	bls.n	8004662 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3303      	adds	r3, #3
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68d9      	ldr	r1, [r3, #12]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800467a:	b2db      	uxtb	r3, r3
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4603      	mov	r3, r0
 8004680:	6978      	ldr	r0, [r7, #20]
 8004682:	f005 ff7f 	bl	800a584 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	441a      	add	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	441a      	add	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d809      	bhi.n	80046c8 <PCD_WriteEmptyTxFifo+0xe0>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046bc:	429a      	cmp	r2, r3
 80046be:	d203      	bcs.n	80046c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1be      	bne.n	8004646 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d811      	bhi.n	80046f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	2201      	movs	r2, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f4:	4013      	ands	r3, r2
 80046f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	333c      	adds	r3, #60	; 0x3c
 800471c:	3304      	adds	r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b01      	cmp	r3, #1
 8004738:	f040 80a0 	bne.w	800487c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a72      	ldr	r2, [pc, #456]	; (8004914 <PCD_EP_OutXfrComplete_int+0x210>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f240 80dd 	bls.w	800490a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80d7 	beq.w	800490a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476e:	6093      	str	r3, [r2, #8]
 8004770:	e0cb      	b.n	800490a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	2320      	movs	r3, #32
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	e0bc      	b.n	800490a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80b7 	bne.w	800490a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a5d      	ldr	r2, [pc, #372]	; (8004914 <PCD_EP_OutXfrComplete_int+0x210>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d90f      	bls.n	80047c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c0:	6093      	str	r3, [r2, #8]
 80047c2:	e0a2      	b.n	800490a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	0159      	lsls	r1, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	440b      	add	r3, r1
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4403      	add	r3, r0
 80047fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4403      	add	r3, r0
 8004822:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4419      	add	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4403      	add	r3, r0
 8004838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800483c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d114      	bne.n	800486e <PCD_EP_OutXfrComplete_int+0x16a>
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d108      	bne.n	800486e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004866:	461a      	mov	r2, r3
 8004868:	2101      	movs	r1, #1
 800486a:	f006 f913 	bl	800aa94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f008 fde5 	bl	800d444 <HAL_PCD_DataOutStageCallback>
 800487a:	e046      	b.n	800490a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <PCD_EP_OutXfrComplete_int+0x214>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d124      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	461a      	mov	r2, r3
 800489c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a0:	6093      	str	r3, [r2, #8]
 80048a2:	e032      	b.n	800490a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	2320      	movs	r3, #32
 80048be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f008 fdbc 	bl	800d444 <HAL_PCD_DataOutStageCallback>
 80048cc:	e01d      	b.n	800490a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d114      	bne.n	80048fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048f6:	461a      	mov	r2, r3
 80048f8:	2100      	movs	r1, #0
 80048fa:	f006 f8cb 	bl	800aa94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f008 fd9d 	bl	800d444 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	4f54300a 	.word	0x4f54300a
 8004918:	4f54310a 	.word	0x4f54310a

0800491c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	333c      	adds	r3, #60	; 0x3c
 8004934:	3304      	adds	r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d90e      	bls.n	8004970 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	461a      	mov	r2, r3
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f008 fd55 	bl	800d420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d90c      	bls.n	8004998 <PCD_EP_OutSetupPacket_int+0x7c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004990:	461a      	mov	r2, r3
 8004992:	2101      	movs	r1, #1
 8004994:	f006 f87e 	bl	800aa94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	4f54300a 	.word	0x4f54300a

080049a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	70fb      	strb	r3, [r7, #3]
 80049b4:	4613      	mov	r3, r2
 80049b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049c6:	883b      	ldrh	r3, [r7, #0]
 80049c8:	0419      	lsls	r1, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
 80049d4:	e028      	b.n	8004a28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e00d      	b.n	8004a06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	3301      	adds	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d3ec      	bcc.n	80049ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a10:	883b      	ldrh	r3, [r7, #0]
 8004a12:	0418      	lsls	r0, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6819      	ldr	r1, [r3, #0]
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	4302      	orrs	r2, r0
 8004a20:	3340      	adds	r3, #64	; 0x40
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	887a      	ldrh	r2, [r7, #2]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e236      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d050      	beq.n	8004b14 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	4b9e      	ldr	r3, [pc, #632]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d00c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4b9b      	ldr	r3, [pc, #620]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d112      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8a:	4b98      	ldr	r3, [pc, #608]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	4b94      	ldr	r3, [pc, #592]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d036      	beq.n	8004b12 <HAL_RCC_OscConfig+0xbe>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d132      	bne.n	8004b12 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e211      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4b8e      	ldr	r3, [pc, #568]	; (8004cf0 <HAL_RCC_OscConfig+0x29c>)
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d013      	beq.n	8004aea <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fd f987 	bl	8001dd4 <HAL_GetTick>
 8004ac6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aca:	f7fd f983 	bl	8001dd4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b64      	cmp	r3, #100	; 0x64
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1fb      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004adc:	4b83      	ldr	r3, [pc, #524]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x76>
 8004ae8:	e014      	b.n	8004b14 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fd f973 	bl	8001dd4 <HAL_GetTick>
 8004aee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af2:	f7fd f96f 	bl	8001dd4 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b64      	cmp	r3, #100	; 0x64
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1e7      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b04:	4b79      	ldr	r3, [pc, #484]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x9e>
 8004b10:	e000      	b.n	8004b14 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d077      	beq.n	8004c10 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b20:	4b72      	ldr	r3, [pc, #456]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2c:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d126      	bne.n	8004b86 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b38:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d120      	bne.n	8004b86 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b44:	4b69      	ldr	r3, [pc, #420]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x108>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e1bb      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5c:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	21f8      	movs	r1, #248	; 0xf8
 8004b6a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	fa91 f1a1 	rbit	r1, r1
 8004b72:	6179      	str	r1, [r7, #20]
  return result;
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	fab1 f181 	clz	r1, r1
 8004b7a:	b2c9      	uxtb	r1, r1
 8004b7c:	408b      	lsls	r3, r1
 8004b7e:	495b      	ldr	r1, [pc, #364]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b84:	e044      	b.n	8004c10 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02a      	beq.n	8004be4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8e:	4b59      	ldr	r3, [pc, #356]	; (8004cf4 <HAL_RCC_OscConfig+0x2a0>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fd f91e 	bl	8001dd4 <HAL_GetTick>
 8004b98:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fd f91a 	bl	8001dd4 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e192      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b4c      	ldr	r3, [pc, #304]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	21f8      	movs	r1, #248	; 0xf8
 8004bc8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	fa91 f1a1 	rbit	r1, r1
 8004bd0:	60f9      	str	r1, [r7, #12]
  return result;
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	fab1 f181 	clz	r1, r1
 8004bd8:	b2c9      	uxtb	r1, r1
 8004bda:	408b      	lsls	r3, r1
 8004bdc:	4943      	ldr	r1, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
 8004be2:	e015      	b.n	8004c10 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCC_OscConfig+0x2a0>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fd f8f3 	bl	8001dd4 <HAL_GetTick>
 8004bee:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fd f8ef 	bl	8001dd4 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e167      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c04:	4b39      	ldr	r3, [pc, #228]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d030      	beq.n	8004c7e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d016      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c24:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_RCC_OscConfig+0x2a4>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd f8d3 	bl	8001dd4 <HAL_GetTick>
 8004c2e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c32:	f7fd f8cf 	bl	8001dd4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e147      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c44:	4b29      	ldr	r3, [pc, #164]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1de>
 8004c50:	e015      	b.n	8004c7e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c52:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <HAL_RCC_OscConfig+0x2a4>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c58:	f7fd f8bc 	bl	8001dd4 <HAL_GetTick>
 8004c5c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fd f8b8 	bl	8001dd4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e130      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8087 	beq.w	8004d9a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b16      	ldr	r3, [pc, #88]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	4a11      	ldr	r2, [pc, #68]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6413      	str	r3, [r2, #64]	; 0x40
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCC_OscConfig+0x298>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_RCC_OscConfig+0x2a8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <HAL_RCC_OscConfig+0x2a8>)
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cca:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCC_OscConfig+0x2a8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d122      	bne.n	8004d1e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <HAL_RCC_OscConfig+0x2a8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <HAL_RCC_OscConfig+0x2a8>)
 8004cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce4:	f7fd f876 	bl	8001dd4 <HAL_GetTick>
 8004ce8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	e012      	b.n	8004d12 <HAL_RCC_OscConfig+0x2be>
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40023802 	.word	0x40023802
 8004cf4:	42470000 	.word	0x42470000
 8004cf8:	42470e80 	.word	0x42470e80
 8004cfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d00:	f7fd f868 	bl	8001dd4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0e0      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d12:	4b72      	ldr	r3, [pc, #456]	; (8004edc <HAL_RCC_OscConfig+0x488>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_OscConfig+0x48c>)
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d30:	f7fd f850 	bl	8001dd4 <HAL_GetTick>
 8004d34:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fd f84c 	bl	8001dd4 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0c2      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ee      	beq.n	8004d38 <HAL_RCC_OscConfig+0x2e4>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5c:	f7fd f83a 	bl	8001dd4 <HAL_GetTick>
 8004d60:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fd f836 	bl	8001dd4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0ac      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7a:	4b5a      	ldr	r3, [pc, #360]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ee      	bne.n	8004d64 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b55      	ldr	r3, [pc, #340]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8097 	beq.w	8004ed2 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da4:	4b4f      	ldr	r3, [pc, #316]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d061      	beq.n	8004e74 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d146      	bne.n	8004e46 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db8:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <HAL_RCC_OscConfig+0x494>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd f809 	bl	8001dd4 <HAL_GetTick>
 8004dc2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd f805 	bl	8001dd4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b64      	cmp	r3, #100	; 0x64
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e07d      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd8:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de4:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4b40      	ldr	r3, [pc, #256]	; (8004eec <HAL_RCC_OscConfig+0x498>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	69d1      	ldr	r1, [r2, #28]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6a12      	ldr	r2, [r2, #32]
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dfa:	0192      	lsls	r2, r2, #6
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e02:	0612      	lsls	r2, r2, #24
 8004e04:	4311      	orrs	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e0a:	0852      	lsrs	r2, r2, #1
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	0412      	lsls	r2, r2, #16
 8004e10:	430a      	orrs	r2, r1
 8004e12:	4934      	ldr	r1, [pc, #208]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_RCC_OscConfig+0x494>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fc ffd9 	bl	8001dd4 <HAL_GetTick>
 8004e22:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fc ffd5 	bl	8001dd4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	; 0x64
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e04d      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e38:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x3d2>
 8004e44:	e045      	b.n	8004ed2 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_RCC_OscConfig+0x494>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fc ffc2 	bl	8001dd4 <HAL_GetTick>
 8004e50:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fc ffbe 	bl	8001dd4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	; 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e036      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	4b1f      	ldr	r3, [pc, #124]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x400>
 8004e72:	e02e      	b.n	8004ed2 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e029      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <HAL_RCC_OscConfig+0x490>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d11c      	bne.n	8004ece <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d115      	bne.n	8004ece <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	099b      	lsrs	r3, r3, #6
 8004ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d10d      	bne.n	8004ece <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d106      	bne.n	8004ece <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d001      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3728      	adds	r7, #40	; 0x28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	40023870 	.word	0x40023870
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	42470060 	.word	0x42470060
 8004eec:	f0bc8000 	.word	0xf0bc8000

08004ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0d2      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b6b      	ldr	r3, [pc, #428]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90c      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b68      	ldr	r3, [pc, #416]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0be      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f44:	4b5c      	ldr	r3, [pc, #368]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a5b      	ldr	r2, [pc, #364]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004f5c:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a55      	ldr	r2, [pc, #340]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4950      	ldr	r1, [pc, #320]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d040      	beq.n	8005008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d115      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e085      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa6:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e079      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb6:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e071      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 0203 	bic.w	r2, r3, #3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4939      	ldr	r1, [pc, #228]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fd8:	f7fc fefc 	bl	8001dd4 <HAL_GetTick>
 8004fdc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe0:	f7fc fef8 	bl	8001dd4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e059      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	4b30      	ldr	r3, [pc, #192]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 020c 	and.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	429a      	cmp	r2, r3
 8005006:	d1eb      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d20c      	bcs.n	8005030 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e03c      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800503c:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	491b      	ldr	r1, [pc, #108]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800505a:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4913      	ldr	r1, [pc, #76]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800506e:	f000 f893 	bl	8005198 <HAL_RCC_GetSysClockFreq>
 8005072:	4601      	mov	r1, r0
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507c:	22f0      	movs	r2, #240	; 0xf0
 800507e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	fa92 f2a2 	rbit	r2, r2
 8005086:	60fa      	str	r2, [r7, #12]
  return result;
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	fab2 f282 	clz	r2, r2
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	40d3      	lsrs	r3, r2
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <HAL_RCC_ClockConfig+0x1cc>)
 8005094:	5cd3      	ldrb	r3, [r2, r3]
 8005096:	fa21 f303 	lsr.w	r3, r1, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <HAL_RCC_ClockConfig+0x1d0>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x1d4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fe66 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023c00 	.word	0x40023c00
 80050b8:	40023800 	.word	0x40023800
 80050bc:	0800de6c 	.word	0x0800de6c
 80050c0:	20000040 	.word	0x20000040
 80050c4:	20000044 	.word	0x20000044

080050c8 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d129      	bne.n	800512e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ea:	4b28      	ldr	r3, [pc, #160]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80050f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fc:	2302      	movs	r3, #2
 80050fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005100:	2303      	movs	r3, #3
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	2300      	movs	r3, #0
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800510c:	f107 031c 	add.w	r3, r7, #28
 8005110:	4619      	mov	r1, r3
 8005112:	481f      	ldr	r0, [pc, #124]	; (8005190 <HAL_RCC_MCOConfig+0xc8>)
 8005114:	f7fd ff38 	bl	8002f88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005118:	4b1c      	ldr	r3, [pc, #112]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	430b      	orrs	r3, r1
 8005126:	4919      	ldr	r1, [pc, #100]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
  }
}
 800512c:	e029      	b.n	8005182 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	4b16      	ldr	r3, [pc, #88]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800514a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005150:	2302      	movs	r3, #2
 8005152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005154:	2303      	movs	r3, #3
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800515c:	2300      	movs	r3, #0
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005160:	f107 031c 	add.w	r3, r7, #28
 8005164:	4619      	mov	r1, r3
 8005166:	480b      	ldr	r0, [pc, #44]	; (8005194 <HAL_RCC_MCOConfig+0xcc>)
 8005168:	f7fd ff0e 	bl	8002f88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	00d9      	lsls	r1, r3, #3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	430b      	orrs	r3, r1
 800517c:	4903      	ldr	r1, [pc, #12]	; (800518c <HAL_RCC_MCOConfig+0xc4>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
}
 8005182:	bf00      	nop
 8005184:	3730      	adds	r7, #48	; 0x30
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	40020000 	.word	0x40020000
 8005194:	40020800 	.word	0x40020800

08005198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800519c:	b090      	sub	sp, #64	; 0x40
 800519e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	637b      	str	r3, [r7, #52]	; 0x34
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	2300      	movs	r3, #0
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d00d      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x40>
 80051bc:	2b08      	cmp	r3, #8
 80051be:	f200 80a2 	bhi.w	8005306 <HAL_RCC_GetSysClockFreq+0x16e>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x34>
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d003      	beq.n	80051d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ca:	e09c      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b53      	ldr	r3, [pc, #332]	; (800531c <HAL_RCC_GetSysClockFreq+0x184>)
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051d0:	e09c      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051d2:	4b53      	ldr	r3, [pc, #332]	; (8005320 <HAL_RCC_GetSysClockFreq+0x188>)
 80051d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d6:	e099      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d8:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e2:	4b4d      	ldr	r3, [pc, #308]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d027      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	2200      	movs	r2, #0
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	627a      	str	r2, [r7, #36]	; 0x24
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005200:	2100      	movs	r1, #0
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <HAL_RCC_GetSysClockFreq+0x188>)
 8005204:	fb03 f201 	mul.w	r2, r3, r1
 8005208:	2300      	movs	r3, #0
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	4413      	add	r3, r2
 8005210:	4a43      	ldr	r2, [pc, #268]	; (8005320 <HAL_RCC_GetSysClockFreq+0x188>)
 8005212:	fba0 2102 	umull	r2, r1, r0, r2
 8005216:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005218:	62ba      	str	r2, [r7, #40]	; 0x28
 800521a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800521c:	4413      	add	r3, r2
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	2200      	movs	r2, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	61fa      	str	r2, [r7, #28]
 8005228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800522c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005230:	f7fa ffc8 	bl	80001c4 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4613      	mov	r3, r2
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	e055      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523e:	4b36      	ldr	r3, [pc, #216]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	2200      	movs	r2, #0
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	617a      	str	r2, [r7, #20]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005250:	f04f 0b00 	mov.w	fp, #0
 8005254:	4652      	mov	r2, sl
 8005256:	465b      	mov	r3, fp
 8005258:	f04f 0000 	mov.w	r0, #0
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	0159      	lsls	r1, r3, #5
 8005262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005266:	0150      	lsls	r0, r2, #5
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	ebb2 080a 	subs.w	r8, r2, sl
 8005270:	eb63 090b 	sbc.w	r9, r3, fp
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005280:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005284:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005288:	ebb2 0408 	subs.w	r4, r2, r8
 800528c:	eb63 0509 	sbc.w	r5, r3, r9
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	00eb      	lsls	r3, r5, #3
 800529a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800529e:	00e2      	lsls	r2, r4, #3
 80052a0:	4614      	mov	r4, r2
 80052a2:	461d      	mov	r5, r3
 80052a4:	eb14 030a 	adds.w	r3, r4, sl
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	eb45 030b 	adc.w	r3, r5, fp
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052bc:	4629      	mov	r1, r5
 80052be:	028b      	lsls	r3, r1, #10
 80052c0:	4620      	mov	r0, r4
 80052c2:	4629      	mov	r1, r5
 80052c4:	4604      	mov	r4, r0
 80052c6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80052ca:	4601      	mov	r1, r0
 80052cc:	028a      	lsls	r2, r1, #10
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	2200      	movs	r2, #0
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	60fa      	str	r2, [r7, #12]
 80052da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052de:	f7fa ff71 	bl	80001c4 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4613      	mov	r3, r2
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	3301      	adds	r3, #1
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80052fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005304:	e002      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetSysClockFreq+0x184>)
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800530a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800530e:	4618      	mov	r0, r3
 8005310:	3740      	adds	r7, #64	; 0x40
 8005312:	46bd      	mov	sp, r7
 8005314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005318:	40023800 	.word	0x40023800
 800531c:	00f42400 	.word	0x00f42400
 8005320:	017d7840 	.word	0x017d7840

08005324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005328:	4b02      	ldr	r3, [pc, #8]	; (8005334 <HAL_RCC_GetHCLKFreq+0x10>)
 800532a:	681b      	ldr	r3, [r3, #0]
}
 800532c:	4618      	mov	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	20000040 	.word	0x20000040

08005338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800533e:	f7ff fff1 	bl	8005324 <HAL_RCC_GetHCLKFreq>
 8005342:	4601      	mov	r1, r0
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800534c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005350:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	fa92 f2a2 	rbit	r2, r2
 8005358:	603a      	str	r2, [r7, #0]
  return result;
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	fab2 f282 	clz	r2, r2
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	40d3      	lsrs	r3, r2
 8005364:	4a04      	ldr	r2, [pc, #16]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800de7c 	.word	0x0800de7c

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005382:	f7ff ffcf 	bl	8005324 <HAL_RCC_GetHCLKFreq>
 8005386:	4601      	mov	r1, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005390:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005394:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	fa92 f2a2 	rbit	r2, r2
 800539c:	603a      	str	r2, [r7, #0]
  return result;
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	fab2 f282 	clz	r2, r2
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	40d3      	lsrs	r3, r2
 80053a8:	4a04      	ldr	r2, [pc, #16]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40023800 	.word	0x40023800
 80053bc:	0800de7c 	.word	0x0800de7c

080053c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d14c      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053e4:	4b6d      	ldr	r3, [pc, #436]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ea:	f7fc fcf3 	bl	8001dd4 <HAL_GetTick>
 80053ee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f0:	e008      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053f2:	f7fc fcef 	bl	8001dd4 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e0c7      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005404:	4b66      	ldr	r3, [pc, #408]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f0      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	fa92 f2a2 	rbit	r2, r2
 8005420:	613a      	str	r2, [r7, #16]
  return result;
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	fab2 f282 	clz	r2, r2
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	fa03 f202 	lsl.w	r2, r3, r2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8005436:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	69f9      	ldr	r1, [r7, #28]
 800543a:	fa91 f1a1 	rbit	r1, r1
 800543e:	61b9      	str	r1, [r7, #24]
  return result;
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	fab1 f181 	clz	r1, r1
 8005446:	b2c9      	uxtb	r1, r1
 8005448:	408b      	lsls	r3, r1
 800544a:	4955      	ldr	r1, [pc, #340]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005452:	4b52      	ldr	r3, [pc, #328]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005454:	2201      	movs	r2, #1
 8005456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005458:	f7fc fcbc 	bl	8001dd4 <HAL_GetTick>
 800545c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005460:	f7fc fcb8 	bl	8001dd4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e090      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005472:	4b4b      	ldr	r3, [pc, #300]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8083 	beq.w	8005592 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	4b43      	ldr	r3, [pc, #268]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	4a42      	ldr	r2, [pc, #264]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549a:	6413      	str	r3, [r2, #64]	; 0x40
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a3d      	ldr	r2, [pc, #244]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80054b4:	f7fc fc8e 	bl	8001dd4 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fc fc8a 	bl	8001dd4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e062      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054ce:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054da:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02f      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d028      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f8:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005502:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800550e:	4a24      	ldr	r2, [pc, #144]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005514:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d114      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005520:	f7fc fc58 	bl	8001dd4 <HAL_GetTick>
 8005524:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	e00a      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fc fc54 	bl	8001dd4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e02a      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ee      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005556:	d10d      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	490c      	ldr	r1, [pc, #48]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
 8005572:	e005      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005574:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800557a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800557e:	6093      	str	r3, [r2, #8]
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	4904      	ldr	r1, [pc, #16]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800558e:	4313      	orrs	r3, r2
 8005590:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	42470068 	.word	0x42470068
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40007000 	.word	0x40007000
 80055a8:	42470e40 	.word	0x42470e40

080055ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e01c      	b.n	80055f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	795b      	ldrb	r3, [r3, #5]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fb fcd6 	bl	8000f80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0204 	orr.w	r2, r2, #4
 80055e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e07c      	b.n	800570c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7f5b      	ldrb	r3, [r3, #29]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb fd24 	bl	8001070 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	22ca      	movs	r2, #202	; 0xca
 8005634:	625a      	str	r2, [r3, #36]	; 0x24
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2253      	movs	r2, #83	; 0x53
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9e6 	bl	8005a10 <RTC_EnterInitMode>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d008      	beq.n	800565c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e057      	b.n	800570c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800566a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6919      	ldr	r1, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	041a      	lsls	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ba:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f97f 	bl	80059c0 <HAL_RTC_WaitForSynchro>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RTC_Init+0xda>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	22ff      	movs	r2, #255	; 0xff
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2204      	movs	r2, #4
 80056d4:	775a      	strb	r2, [r3, #29]

      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e018      	b.n	800570c <HAL_RTC_Init+0x10c>
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	22ff      	movs	r2, #255	; 0xff
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800570a:	2300      	movs	r3, #0
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	7f1b      	ldrb	r3, [r3, #28]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_RTC_SetTime+0x1c>
 800572c:	2302      	movs	r3, #2
 800572e:	e0a3      	b.n	8005878 <HAL_RTC_SetTime+0x164>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d126      	bne.n	8005790 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f984 	bl	8005a68 <RTC_ByteToBcd2>
 8005760:	4603      	mov	r3, r0
 8005762:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f97d 	bl	8005a68 <RTC_ByteToBcd2>
 800576e:	4603      	mov	r3, r0
 8005770:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005772:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	789b      	ldrb	r3, [r3, #2]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f975 	bl	8005a68 <RTC_ByteToBcd2>
 800577e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005780:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	78db      	ldrb	r3, [r3, #3]
 8005788:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e018      	b.n	80057c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2200      	movs	r2, #0
 80057a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80057b0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80057b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	78db      	ldrb	r3, [r3, #3]
 80057bc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	22ca      	movs	r2, #202	; 0xca
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2253      	movs	r2, #83	; 0x53
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f91c 	bl	8005a10 <RTC_EnterInitMode>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	22ff      	movs	r2, #255	; 0xff
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e040      	b.n	8005878 <HAL_RTC_SetTime+0x164>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005800:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005804:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005814:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800583c:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f8be 	bl	80059c0 <HAL_RTC_WaitForSynchro>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_RTC_SetTime+0x14e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	22ff      	movs	r2, #255	; 0xff
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2204      	movs	r2, #4
 8005856:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e00a      	b.n	8005878 <HAL_RTC_SetTime+0x164>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ff      	movs	r2, #255	; 0xff
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005876:	2300      	movs	r3, #0
  }
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd90      	pop	{r4, r7, pc}

08005880 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	7f1b      	ldrb	r3, [r3, #28]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_RTC_SetDate+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e08d      	b.n	80059b8 <HAL_RTC_SetDate+0x138>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2202      	movs	r2, #2
 80058a6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10e      	bne.n	80058cc <HAL_RTC_SetDate+0x4c>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~0x10) + (uint8_t)0x0A);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	f023 0310 	bic.w	r3, r3, #16
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	330a      	adds	r3, #10
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11c      	bne.n	800590c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f8c6 	bl	8005a68 <RTC_ByteToBcd2>
 80058dc:	4603      	mov	r3, r0
 80058de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f8bf 	bl	8005a68 <RTC_ByteToBcd2>
 80058ea:	4603      	mov	r3, r0
 80058ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	789b      	ldrb	r3, [r3, #2]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f8b7 	bl	8005a68 <RTC_ByteToBcd2>
 80058fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e00e      	b.n	800592a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	78db      	ldrb	r3, [r3, #3]
 8005910:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005918:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800591e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	22ca      	movs	r2, #202	; 0xca
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2253      	movs	r2, #83	; 0x53
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f868 	bl	8005a10 <RTC_EnterInitMode>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22ff      	movs	r2, #255	; 0xff
 800594c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2204      	movs	r2, #4
 8005952:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e02c      	b.n	80059b8 <HAL_RTC_SetDate+0x138>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800596c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597c:	60da      	str	r2, [r3, #12]

    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f81e 	bl	80059c0 <HAL_RTC_WaitForSynchro>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_RTC_SetDate+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	22ff      	movs	r2, #255	; 0xff
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2204      	movs	r2, #4
 8005996:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e00a      	b.n	80059b8 <HAL_RTC_SetDate+0x138>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	22ff      	movs	r2, #255	; 0xff
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80059b6:	2300      	movs	r3, #0
  }
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd90      	pop	{r4, r7, pc}

080059c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059dc:	f7fc f9fa 	bl	8001dd4 <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059e2:	e009      	b.n	80059f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059e4:	f7fc f9f6 	bl	8001dd4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059f2:	d901      	bls.n	80059f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e007      	b.n	8005a08 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ee      	beq.n	80059e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d119      	bne.n	8005a5e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fc f9ce 	bl	8001dd4 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a3a:	e009      	b.n	8005a50 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a3c:	f7fc f9ca 	bl	8001dd4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a4a:	d901      	bls.n	8005a50 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e007      	b.n	8005a60 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0ee      	beq.n	8005a3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]

  while (Value >= 10)
 8005a76:	e005      	b.n	8005a84 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	3b0a      	subs	r3, #10
 8005a82:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b09      	cmp	r3, #9
 8005a88:	d8f6      	bhi.n	8005a78 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	b2db      	uxtb	r3, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e022      	b.n	8005afa <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fb fb08 	bl	80010dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f815 	bl	8005b04 <HAL_SD_InitCard>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e00a      	b.n	8005afa <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b04:	b5b0      	push	{r4, r5, r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af04      	add	r7, sp, #16
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005b20:	2376      	movs	r3, #118	; 0x76
 8005b22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681d      	ldr	r5, [r3, #0]
 8005b28:	466c      	mov	r4, sp
 8005b2a:	f107 0314 	add.w	r3, r7, #20
 8005b2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f002 ff77 	bl	8008a30 <SDIO_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e04c      	b.n	8005bee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005b54:	4b28      	ldr	r3, [pc, #160]	; (8005bf8 <HAL_SD_InitCard+0xf4>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f002 ffac 	bl	8008abc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_SD_InitCard+0xf4>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 ff04 	bl	8006978 <SD_PowerON>
 8005b70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e02e      	b.n	8005bee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fe23 	bl	80067dc <SD_InitCard>
 8005b96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e01b      	b.n	8005bee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f003 f80a 	bl	8008bd8 <SDMMC_CmdBlockLength>
 8005bc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00f      	beq.n	8005bec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <HAL_SD_InitCard+0xf8>)
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3728      	adds	r7, #40	; 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	422580a0 	.word	0x422580a0
 8005bfc:	004005ff 	.word	0x004005ff

08005c00 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b092      	sub	sp, #72	; 0x48
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c0e:	f7fc f8e1 	bl	8001dd4 <HAL_GetTick>
 8005c12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e1bd      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	f040 81b0 	bne.w	8005fa0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d907      	bls.n	8005c64 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e1a4      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2203      	movs	r2, #3
 8005c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2200      	movs	r2, #0
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d002      	beq.n	8005c82 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	025b      	lsls	r3, r3, #9
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005c8e:	2390      	movs	r3, #144	; 0x90
 8005c90:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005c92:	2302      	movs	r3, #2
 8005c94:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f107 0214 	add.w	r2, r7, #20
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f002 ff6a 	bl	8008b82 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d90a      	bls.n	8005cca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f002 ffcd 	bl	8008c60 <SDMMC_CmdReadMultiBlock>
 8005cc6:	6478      	str	r0, [r7, #68]	; 0x44
 8005cc8:	e009      	b.n	8005cde <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f002 ffa0 	bl	8008c1c <SDMMC_CmdReadSingleBlock>
 8005cdc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d012      	beq.n	8005d0a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a7a      	ldr	r2, [pc, #488]	; (8005ed4 <HAL_SD_ReadBlocks+0x2d4>)
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e151      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d0e:	e061      	b.n	8005dd4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d03c      	beq.n	8005d98 <HAL_SD_ReadBlocks+0x198>
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d039      	beq.n	8005d98 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40
 8005d28:	e033      	b.n	8005d92 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f002 fea8 	bl	8008a84 <SDIO_ReadFIFO>
 8005d34:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	3301      	adds	r3, #1
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	3b01      	subs	r3, #1
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	0a1b      	lsrs	r3, r3, #8
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d56:	3301      	adds	r3, #1
 8005d58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d72:	3b01      	subs	r3, #1
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	0e1b      	lsrs	r3, r3, #24
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	3301      	adds	r3, #1
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8e:	3301      	adds	r3, #1
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	2b07      	cmp	r3, #7
 8005d96:	d9c8      	bls.n	8005d2a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d98:	f7fc f81c 	bl	8001dd4 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d902      	bls.n	8005dae <HAL_SD_ReadBlocks+0x1ae>
 8005da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d112      	bne.n	8005dd4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a48      	ldr	r2, [pc, #288]	; (8005ed4 <HAL_SD_ReadBlocks+0x2d4>)
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0ec      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dda:	f240 332a 	movw	r3, #810	; 0x32a
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d095      	beq.n	8005d10 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d022      	beq.n	8005e38 <HAL_SD_ReadBlocks+0x238>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d91f      	bls.n	8005e38 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d01b      	beq.n	8005e38 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f002 ff91 	bl	8008d2c <SDMMC_CmdStopTransfer>
 8005e0a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d012      	beq.n	8005e38 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <HAL_SD_ReadBlocks+0x2d4>)
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0ba      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d012      	beq.n	8005e6c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <HAL_SD_ReadBlocks+0x2d4>)
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f043 0208 	orr.w	r2, r3, #8
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0a0      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d012      	beq.n	8005ea0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <HAL_SD_ReadBlocks+0x2d4>)
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e086      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d063      	beq.n	8005f76 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <HAL_SD_ReadBlocks+0x2d4>)
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f043 0220 	orr.w	r2, r3, #32
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e06c      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
 8005ed4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f002 fdd1 	bl	8008a84 <SDIO_ReadFIFO>
 8005ee2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eee:	3301      	adds	r3, #1
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	3301      	adds	r3, #1
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	0c1b      	lsrs	r3, r3, #16
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	3b01      	subs	r3, #1
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	0e1b      	lsrs	r3, r3, #24
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	3301      	adds	r3, #1
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f36:	3b01      	subs	r3, #1
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f3a:	f7fb ff4b 	bl	8001dd4 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d902      	bls.n	8005f50 <HAL_SD_ReadBlocks+0x350>
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d112      	bne.n	8005f76 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_SD_ReadBlocks+0x3b8>)
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e01b      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_SD_ReadBlocks+0x38a>
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1a6      	bne.n	8005ed8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e006      	b.n	8005fae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3748      	adds	r7, #72	; 0x48
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	004005ff 	.word	0x004005ff

08005fbc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b092      	sub	sp, #72	; 0x48
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fca:	f7fb ff03 	bl	8001dd4 <HAL_GetTick>
 8005fce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e166      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	f040 8159 	bne.w	80062ae <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	441a      	add	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	429a      	cmp	r2, r3
 800600e:	d907      	bls.n	8006020 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e14d      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2203      	movs	r2, #3
 8006024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2200      	movs	r2, #0
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006034:	2b01      	cmp	r3, #1
 8006036:	d002      	beq.n	800603e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	025b      	lsls	r3, r3, #9
 800603c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
 8006042:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	025b      	lsls	r3, r3, #9
 8006048:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800604a:	2390      	movs	r3, #144	; 0x90
 800604c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006052:	2300      	movs	r3, #0
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006056:	2301      	movs	r3, #1
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f107 0218 	add.w	r2, r7, #24
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f002 fd8c 	bl	8008b82 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d90a      	bls.n	8006086 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800607c:	4618      	mov	r0, r3
 800607e:	f002 fe33 	bl	8008ce8 <SDMMC_CmdWriteMultiBlock>
 8006082:	6478      	str	r0, [r7, #68]	; 0x44
 8006084:	e009      	b.n	800609a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2210      	movs	r2, #16
 800608a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006092:	4618      	mov	r0, r3
 8006094:	f002 fe06 	bl	8008ca4 <SDMMC_CmdWriteSingleBlock>
 8006098:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800609a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609c:	2b00      	cmp	r3, #0
 800609e:	d012      	beq.n	80060c6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a87      	ldr	r2, [pc, #540]	; (80062c4 <HAL_SD_WriteBlocks+0x308>)
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	431a      	orrs	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e0fa      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80060ca:	e065      	b.n	8006198 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d040      	beq.n	800615c <HAL_SD_WriteBlocks+0x1a0>
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d03d      	beq.n	800615c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	643b      	str	r3, [r7, #64]	; 0x40
 80060e4:	e037      	b.n	8006156 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80060e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	3301      	adds	r3, #1
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f4:	3b01      	subs	r3, #1
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80060f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	021a      	lsls	r2, r3, #8
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	3301      	adds	r3, #1
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610c:	3b01      	subs	r3, #1
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	041a      	lsls	r2, r3, #16
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611e:	3301      	adds	r3, #1
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006124:	3b01      	subs	r3, #1
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	061a      	lsls	r2, r3, #24
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	3301      	adds	r3, #1
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800613a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613c:	3b01      	subs	r3, #1
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f107 0214 	add.w	r2, r7, #20
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f002 fca6 	bl	8008a9c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006152:	3301      	adds	r3, #1
 8006154:	643b      	str	r3, [r7, #64]	; 0x40
 8006156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006158:	2b07      	cmp	r3, #7
 800615a:	d9c4      	bls.n	80060e6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800615c:	f7fb fe3a 	bl	8001dd4 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006168:	429a      	cmp	r2, r3
 800616a:	d902      	bls.n	8006172 <HAL_SD_WriteBlocks+0x1b6>
 800616c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616e:	2b00      	cmp	r3, #0
 8006170:	d112      	bne.n	8006198 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a53      	ldr	r2, [pc, #332]	; (80062c4 <HAL_SD_WriteBlocks+0x308>)
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006180:	431a      	orrs	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e091      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619e:	f240 331a 	movw	r3, #794	; 0x31a
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d091      	beq.n	80060cc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d022      	beq.n	80061fc <HAL_SD_WriteBlocks+0x240>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d91f      	bls.n	80061fc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d01b      	beq.n	80061fc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f002 fdaf 	bl	8008d2c <SDMMC_CmdStopTransfer>
 80061ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80061d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d012      	beq.n	80061fc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <HAL_SD_WriteBlocks+0x308>)
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e4:	431a      	orrs	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e05f      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d012      	beq.n	8006230 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <HAL_SD_WriteBlocks+0x308>)
 8006210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f043 0208 	orr.w	r2, r3, #8
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e045      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d012      	beq.n	8006264 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a20      	ldr	r2, [pc, #128]	; (80062c4 <HAL_SD_WriteBlocks+0x308>)
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	f043 0202 	orr.w	r2, r3, #2
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e02b      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d012      	beq.n	8006298 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a13      	ldr	r2, [pc, #76]	; (80062c4 <HAL_SD_WriteBlocks+0x308>)
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	f043 0210 	orr.w	r2, r3, #16
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e011      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f240 523a 	movw	r2, #1338	; 0x53a
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	e006      	b.n	80062bc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
  }
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3748      	adds	r7, #72	; 0x48
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	004005ff 	.word	0x004005ff

080062c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d6:	0f9b      	lsrs	r3, r3, #30
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e2:	0e9b      	lsrs	r3, r3, #26
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006306:	0c1b      	lsrs	r3, r3, #16
 8006308:	b2da      	uxtb	r2, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	b2da      	uxtb	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631e:	b2da      	uxtb	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006328:	0d1b      	lsrs	r3, r3, #20
 800632a:	b29a      	uxth	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	b2da      	uxtb	r2, r3
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006346:	0bdb      	lsrs	r3, r3, #15
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006358:	0b9b      	lsrs	r3, r3, #14
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	b2da      	uxtb	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636a:	0b5b      	lsrs	r3, r3, #13
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637c:	0b1b      	lsrs	r3, r3, #12
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006394:	2b00      	cmp	r3, #0
 8006396:	d163      	bne.n	8006460 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800639c:	009a      	lsls	r2, r3, #2
 800639e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063a8:	0f92      	lsrs	r2, r2, #30
 80063aa:	431a      	orrs	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b4:	0edb      	lsrs	r3, r3, #27
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c6:	0e1b      	lsrs	r3, r3, #24
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d8:	0d5b      	lsrs	r3, r3, #21
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ea:	0c9b      	lsrs	r3, r3, #18
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fc:	0bdb      	lsrs	r3, r3, #15
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	b2da      	uxtb	r2, r3
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	7e1b      	ldrb	r3, [r3, #24]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	3302      	adds	r3, #2
 8006420:	2201      	movs	r2, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800642a:	fb03 f202 	mul.w	r2, r3, r2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	7a1b      	ldrb	r3, [r3, #8]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2201      	movs	r2, #1
 800643e:	409a      	lsls	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800644c:	0a52      	lsrs	r2, r2, #9
 800644e:	fb03 f202 	mul.w	r2, r3, r2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800645c:	661a      	str	r2, [r3, #96]	; 0x60
 800645e:	e031      	b.n	80064c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	2b01      	cmp	r3, #1
 8006466:	d11d      	bne.n	80064a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646c:	041b      	lsls	r3, r3, #16
 800646e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006476:	0c1b      	lsrs	r3, r3, #16
 8006478:	431a      	orrs	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	3301      	adds	r3, #1
 8006484:	029a      	lsls	r2, r3, #10
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006498:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	661a      	str	r2, [r3, #96]	; 0x60
 80064a2:	e00f      	b.n	80064c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a58      	ldr	r2, [pc, #352]	; (800660c <HAL_SD_GetCardCSD+0x344>)
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e09d      	b.n	8006600 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c8:	0b9b      	lsrs	r3, r3, #14
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064da:	09db      	lsrs	r3, r3, #7
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	0fdb      	lsrs	r3, r3, #31
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	0f5b      	lsrs	r3, r3, #29
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	b2da      	uxtb	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	0e9b      	lsrs	r3, r3, #26
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	b2da      	uxtb	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	0d9b      	lsrs	r3, r3, #22
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	b2da      	uxtb	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	0d5b      	lsrs	r3, r3, #21
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	0bdb      	lsrs	r3, r3, #15
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	b2da      	uxtb	r2, r3
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	0b9b      	lsrs	r3, r3, #14
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	0b5b      	lsrs	r3, r3, #13
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	0b1b      	lsrs	r3, r3, #12
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065be:	0a9b      	lsrs	r3, r3, #10
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	004005ff 	.word	0x004005ff

08006610 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
	...

08006668 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006668:	b5b0      	push	{r4, r5, r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af04      	add	r7, sp, #16
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2203      	movs	r2, #3
 800667c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006684:	2b03      	cmp	r3, #3
 8006686:	d02e      	beq.n	80066e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668e:	d106      	bne.n	800669e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
 800669c:	e029      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a4:	d10a      	bne.n	80066bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa1c 	bl	8006ae4 <SD_WideBus_Enable>
 80066ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
 80066ba:	e01a      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa59 	bl	8006b7a <SD_WideBus_Disable>
 80066c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
 80066d6:	e00c      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
 80066e4:	e005      	b.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a26      	ldr	r2, [pc, #152]	; (8006798 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006710:	e01f      	b.n	8006752 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681d      	ldr	r5, [r3, #0]
 8006738:	466c      	mov	r4, sp
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800674c:	4628      	mov	r0, r5
 800674e:	f002 f96f 	bl	8008a30 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800675a:	4618      	mov	r0, r3
 800675c:	f002 fa3c 	bl	8008bd8 <SDMMC_CmdBlockLength>
 8006760:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a0a      	ldr	r2, [pc, #40]	; (8006798 <HAL_SD_ConfigWideBusOperation+0x130>)
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800678a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800678e:	4618      	mov	r0, r3
 8006790:	3728      	adds	r7, #40	; 0x28
 8006792:	46bd      	mov	sp, r7
 8006794:	bdb0      	pop	{r4, r5, r7, pc}
 8006796:	bf00      	nop
 8006798:	004005ff 	.word	0x004005ff

0800679c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80067a8:	f107 030c 	add.w	r3, r7, #12
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f970 	bl	8006a94 <SD_SendStatus>
 80067b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	0a5b      	lsrs	r3, r3, #9
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80067d2:	693b      	ldr	r3, [r7, #16]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067dc:	b5b0      	push	{r4, r5, r7, lr}
 80067de:	b094      	sub	sp, #80	; 0x50
 80067e0:	af04      	add	r7, sp, #16
 80067e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80067e4:	2301      	movs	r3, #1
 80067e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 f974 	bl	8008ada <SDIO_GetPowerState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067fc:	e0b8      	b.n	8006970 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	2b03      	cmp	r3, #3
 8006804:	d02f      	beq.n	8006866 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f002 fb98 	bl	8008f40 <SDMMC_CmdSendCID>
 8006810:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <SD_InitCard+0x40>
    {
      return errorstate;
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681a:	e0a9      	b.n	8006970 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f002 f99b 	bl	8008b5e <SDIO_GetResponse>
 8006828:	4602      	mov	r2, r0
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2104      	movs	r1, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f002 f992 	bl	8008b5e <SDIO_GetResponse>
 800683a:	4602      	mov	r2, r0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2108      	movs	r1, #8
 8006846:	4618      	mov	r0, r3
 8006848:	f002 f989 	bl	8008b5e <SDIO_GetResponse>
 800684c:	4602      	mov	r2, r0
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	210c      	movs	r1, #12
 8006858:	4618      	mov	r0, r3
 800685a:	f002 f980 	bl	8008b5e <SDIO_GetResponse>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	2b03      	cmp	r3, #3
 800686c:	d00d      	beq.n	800688a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f107 020e 	add.w	r2, r7, #14
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f002 fb9e 	bl	8008fba <SDMMC_CmdSetRelAdd>
 800687e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <SD_InitCard+0xae>
    {
      return errorstate;
 8006886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006888:	e072      	b.n	8006970 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	2b03      	cmp	r3, #3
 8006890:	d036      	beq.n	8006900 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006892:	89fb      	ldrh	r3, [r7, #14]
 8006894:	461a      	mov	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f002 fb68 	bl	8008f7c <SDMMC_CmdSendCSD>
 80068ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80068b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b6:	e05b      	b.n	8006970 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f002 f94d 	bl	8008b5e <SDIO_GetResponse>
 80068c4:	4602      	mov	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2104      	movs	r1, #4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f002 f944 	bl	8008b5e <SDIO_GetResponse>
 80068d6:	4602      	mov	r2, r0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2108      	movs	r1, #8
 80068e2:	4618      	mov	r0, r3
 80068e4:	f002 f93b 	bl	8008b5e <SDIO_GetResponse>
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	210c      	movs	r1, #12
 80068f4:	4618      	mov	r0, r3
 80068f6:	f002 f932 	bl	8008b5e <SDIO_GetResponse>
 80068fa:	4602      	mov	r2, r0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2104      	movs	r1, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f002 f929 	bl	8008b5e <SDIO_GetResponse>
 800690c:	4603      	mov	r3, r0
 800690e:	0d1a      	lsrs	r2, r3, #20
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006914:	f107 0310 	add.w	r3, r7, #16
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fcd4 	bl	80062c8 <HAL_SD_GetCardCSD>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800692a:	e021      	b.n	8006970 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6819      	ldr	r1, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	041b      	lsls	r3, r3, #16
 8006936:	2200      	movs	r2, #0
 8006938:	461c      	mov	r4, r3
 800693a:	4615      	mov	r5, r2
 800693c:	4622      	mov	r2, r4
 800693e:	462b      	mov	r3, r5
 8006940:	4608      	mov	r0, r1
 8006942:	f002 fa15 	bl	8008d70 <SDMMC_CmdSelDesel>
 8006946:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <SD_InitCard+0x176>
  {
    return errorstate;
 800694e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006950:	e00e      	b.n	8006970 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	466c      	mov	r4, sp
 800695a:	f103 0210 	add.w	r2, r3, #16
 800695e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006964:	3304      	adds	r3, #4
 8006966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006968:	4628      	mov	r0, r5
 800696a:	f002 f861 	bl	8008a30 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3740      	adds	r7, #64	; 0x40
 8006974:	46bd      	mov	sp, r7
 8006976:	bdb0      	pop	{r4, r5, r7, pc}

08006978 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	2300      	movs	r3, #0
 800698a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f002 fa10 	bl	8008db6 <SDMMC_CmdGoIdleState>
 8006996:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	e072      	b.n	8006a88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f002 fa23 	bl	8008df2 <SDMMC_CmdOperCond>
 80069ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00d      	beq.n	80069d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 f9f9 	bl	8008db6 <SDMMC_CmdGoIdleState>
 80069c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	e05b      	b.n	8006a88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d137      	bne.n	8006a4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f002 fa23 	bl	8008e30 <SDMMC_CmdAppCommand>
 80069ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02d      	beq.n	8006a4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069f6:	e047      	b.n	8006a88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f002 fa16 	bl	8008e30 <SDMMC_CmdAppCommand>
 8006a04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <SD_PowerON+0x98>
    {
      return errorstate;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	e03b      	b.n	8006a88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	491e      	ldr	r1, [pc, #120]	; (8006a90 <SD_PowerON+0x118>)
 8006a16:	4618      	mov	r0, r3
 8006a18:	f002 fa2c 	bl	8008e74 <SDMMC_CmdAppOperCommand>
 8006a1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a28:	e02e      	b.n	8006a88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	4618      	mov	r0, r3
 8006a32:	f002 f894 	bl	8008b5e <SDIO_GetResponse>
 8006a36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	0fdb      	lsrs	r3, r3, #31
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <SD_PowerON+0xcc>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <SD_PowerON+0xce>
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]

    count++;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d802      	bhi.n	8006a5e <SD_PowerON+0xe6>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0cc      	beq.n	80069f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d902      	bls.n	8006a6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a6c:	e00c      	b.n	8006a88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
 8006a7e:	e002      	b.n	8006a86 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	c1100000 	.word	0xc1100000

08006a94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006aa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aa8:	e018      	b.n	8006adc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f002 faa0 	bl	8008ffc <SDMMC_CmdSendStatus>
 8006abc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	e009      	b.n	8006adc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f002 f845 	bl	8008b5e <SDIO_GetResponse>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 f82f 	bl	8008b5e <SDIO_GetResponse>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b0a:	d102      	bne.n	8006b12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b10:	e02f      	b.n	8006b72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f879 	bl	8006c10 <SD_FindSCR>
 8006b1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	e023      	b.n	8006b72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01c      	beq.n	8006b6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	041b      	lsls	r3, r3, #16
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f002 f975 	bl	8008e30 <SDMMC_CmdAppCommand>
 8006b46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	e00f      	b.n	8006b72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 f9ae 	bl	8008eba <SDMMC_CmdBusWidth>
 8006b5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	e003      	b.n	8006b72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e001      	b.n	8006b72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 ffe4 	bl	8008b5e <SDIO_GetResponse>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba0:	d102      	bne.n	8006ba8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ba6:	e02f      	b.n	8006c08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ba8:	f107 030c 	add.w	r3, r7, #12
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f82e 	bl	8006c10 <SD_FindSCR>
 8006bb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	e023      	b.n	8006c08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01c      	beq.n	8006c04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f002 f92a 	bl	8008e30 <SDMMC_CmdAppCommand>
 8006bdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	e00f      	b.n	8006c08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f002 f963 	bl	8008eba <SDMMC_CmdBusWidth>
 8006bf4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	e003      	b.n	8006c08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e001      	b.n	8006c08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b08f      	sub	sp, #60	; 0x3c
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c1a:	f7fb f8db 	bl	8001dd4 <HAL_GetTick>
 8006c1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006c24:	2300      	movs	r3, #0
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2108      	movs	r1, #8
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 ffce 	bl	8008bd8 <SDMMC_CmdBlockLength>
 8006c3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	e0b2      	b.n	8006dae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f002 f8eb 	bl	8008e30 <SDMMC_CmdAppCommand>
 8006c5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	e0a3      	b.n	8006dae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006c70:	2330      	movs	r3, #48	; 0x30
 8006c72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c74:	2302      	movs	r3, #2
 8006c76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f107 0210 	add.w	r2, r7, #16
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 ff79 	bl	8008b82 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 f932 	bl	8008efe <SDMMC_CmdSendSCR>
 8006c9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02a      	beq.n	8006cf8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	e083      	b.n	8006dae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00f      	beq.n	8006cd4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	f107 0208 	add.w	r2, r7, #8
 8006cc0:	18d4      	adds	r4, r2, r3
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	f001 fede 	bl	8008a84 <SDIO_ReadFIFO>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	6023      	str	r3, [r4, #0]
      index++;
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	3301      	adds	r3, #1
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	e006      	b.n	8006ce2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d012      	beq.n	8006d08 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ce2:	f7fb f877 	bl	8001dd4 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d102      	bne.n	8006cf8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006cf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cf6:	e05a      	b.n	8006dae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0cf      	beq.n	8006ca6 <SD_FindSCR+0x96>
 8006d06:	e000      	b.n	8006d0a <SD_FindSCR+0xfa>
      break;
 8006d08:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d20:	2308      	movs	r3, #8
 8006d22:	e044      	b.n	8006dae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2202      	movs	r2, #2
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e037      	b.n	8006dae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2220      	movs	r2, #32
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006d54:	2320      	movs	r3, #32
 8006d56:	e02a      	b.n	8006dae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d60:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	061a      	lsls	r2, r3, #24
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	601a      	str	r2, [r3, #0]
    scr++;
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	3304      	adds	r3, #4
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	061a      	lsls	r2, r3, #24
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	0a1b      	lsrs	r3, r3, #8
 8006d9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006da0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	0e1b      	lsrs	r3, r3, #24
 8006da6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	373c      	adds	r7, #60	; 0x3c
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd90      	pop	{r4, r7, pc}

08006db6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e07b      	b.n	8006ec0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd8:	d009      	beq.n	8006dee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	61da      	str	r2, [r3, #28]
 8006de0:	e005      	b.n	8006dee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fa fa83 	bl	8001314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e72:	ea42 0103 	orr.w	r1, r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	f003 0104 	and.w	r1, r3, #4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	f003 0210 	and.w	r2, r3, #16
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e01a      	b.n	8006f10 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa fb46 	bl	8001584 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_SPI_Transmit_DMA+0x20>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e09b      	b.n	8007070 <HAL_SPI_Transmit_DMA+0x158>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d002      	beq.n	8006f52 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f50:	e089      	b.n	8007066 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <HAL_SPI_Transmit_DMA+0x46>
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f62:	e080      	b.n	8007066 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2203      	movs	r2, #3
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006faa:	d10f      	bne.n	8006fcc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd0:	4a29      	ldr	r2, [pc, #164]	; (8007078 <HAL_SPI_Transmit_DMA+0x160>)
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd8:	4a28      	ldr	r2, [pc, #160]	; (800707c <HAL_SPI_Transmit_DMA+0x164>)
 8006fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe0:	4a27      	ldr	r2, [pc, #156]	; (8007080 <HAL_SPI_Transmit_DMA+0x168>)
 8006fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe8:	2200      	movs	r2, #0
 8006fea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007002:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007004:	f7fb fc70 	bl	80028e8 <HAL_DMA_Start_IT>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00c      	beq.n	8007028 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	f043 0210 	orr.w	r2, r3, #16
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007026:	e01e      	b.n	8007066 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d007      	beq.n	8007046 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007044:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0220 	orr.w	r2, r2, #32
 8007054:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0202 	orr.w	r2, r2, #2
 8007064:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800706e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	08007151 	.word	0x08007151
 800707c:	080070a9 	.word	0x080070a9
 8007080:	0800716d 	.word	0x0800716d

08007084 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070b6:	f7fa fe8d 	bl	8001dd4 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ca:	d03b      	beq.n	8007144 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0220 	bic.w	r2, r2, #32
 80070da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 0202 	bic.w	r2, r2, #2
 80070ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	2164      	movs	r1, #100	; 0x64
 80070f0:	6978      	ldr	r0, [r7, #20]
 80070f2:	f000 f8e3 	bl	80072bc <SPI_EndRxTxTransaction>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	f043 0220 	orr.w	r2, r3, #32
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2200      	movs	r2, #0
 800712a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800713c:	6978      	ldr	r0, [r7, #20]
 800713e:	f7ff ffaa 	bl	8007096 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007142:	e002      	b.n	800714a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007144:	6978      	ldr	r0, [r7, #20]
 8007146:	f005 ff15 	bl	800cf74 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff ff90 	bl	8007084 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0203 	bic.w	r2, r2, #3
 8007188:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718e:	f043 0210 	orr.w	r2, r3, #16
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ff79 	bl	8007096 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071bc:	f7fa fe0a 	bl	8001dd4 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071cc:	f7fa fe02 	bl	8001dd4 <HAL_GetTick>
 80071d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071d2:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	015b      	lsls	r3, r3, #5
 80071d8:	0d1b      	lsrs	r3, r3, #20
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071e2:	e054      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d050      	beq.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071ec:	f7fa fdf2 	bl	8001dd4 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d902      	bls.n	8007202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13d      	bne.n	800727e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800721a:	d111      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007224:	d004      	beq.n	8007230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722e:	d107      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007248:	d10f      	bne.n	800726a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e017      	b.n	80072ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3b01      	subs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4013      	ands	r3, r2
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d19b      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000040 	.word	0x20000040

080072bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff ff6a 	bl	80071ac <SPI_WaitFlagStateUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e000      	b.n	80072f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e041      	b.n	800738e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fa fb3e 	bl	80019a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f000 faea 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <HAL_TIM_PWM_Start+0x24>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	bf14      	ite	ne
 80073b4:	2301      	movne	r3, #1
 80073b6:	2300      	moveq	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	e022      	b.n	8007402 <HAL_TIM_PWM_Start+0x6a>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d109      	bne.n	80073d6 <HAL_TIM_PWM_Start+0x3e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	bf14      	ite	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	2300      	moveq	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	e015      	b.n	8007402 <HAL_TIM_PWM_Start+0x6a>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d109      	bne.n	80073f0 <HAL_TIM_PWM_Start+0x58>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	bf14      	ite	ne
 80073e8:	2301      	movne	r3, #1
 80073ea:	2300      	moveq	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	e008      	b.n	8007402 <HAL_TIM_PWM_Start+0x6a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	bf14      	ite	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	2300      	moveq	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e07c      	b.n	8007504 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d104      	bne.n	800741a <HAL_TIM_PWM_Start+0x82>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007418:	e013      	b.n	8007442 <HAL_TIM_PWM_Start+0xaa>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b04      	cmp	r3, #4
 800741e:	d104      	bne.n	800742a <HAL_TIM_PWM_Start+0x92>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007428:	e00b      	b.n	8007442 <HAL_TIM_PWM_Start+0xaa>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d104      	bne.n	800743a <HAL_TIM_PWM_Start+0xa2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007438:	e003      	b.n	8007442 <HAL_TIM_PWM_Start+0xaa>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2201      	movs	r2, #1
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fcaa 	bl	8007da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2d      	ldr	r2, [pc, #180]	; (800750c <HAL_TIM_PWM_Start+0x174>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_TIM_PWM_Start+0xcc>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2c      	ldr	r2, [pc, #176]	; (8007510 <HAL_TIM_PWM_Start+0x178>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d101      	bne.n	8007468 <HAL_TIM_PWM_Start+0xd0>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <HAL_TIM_PWM_Start+0xd2>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800747c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a22      	ldr	r2, [pc, #136]	; (800750c <HAL_TIM_PWM_Start+0x174>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d022      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007490:	d01d      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <HAL_TIM_PWM_Start+0x17c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d018      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <HAL_TIM_PWM_Start+0x180>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d013      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1c      	ldr	r2, [pc, #112]	; (800751c <HAL_TIM_PWM_Start+0x184>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a16      	ldr	r2, [pc, #88]	; (8007510 <HAL_TIM_PWM_Start+0x178>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <HAL_TIM_PWM_Start+0x188>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <HAL_TIM_PWM_Start+0x136>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <HAL_TIM_PWM_Start+0x18c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d111      	bne.n	80074f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d010      	beq.n	8007502 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f0:	e007      	b.n	8007502 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0201 	orr.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40010000 	.word	0x40010000
 8007510:	40010400 	.word	0x40010400
 8007514:	40000400 	.word	0x40000400
 8007518:	40000800 	.word	0x40000800
 800751c:	40000c00 	.word	0x40000c00
 8007520:	40014000 	.word	0x40014000
 8007524:	40001800 	.word	0x40001800

08007528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b02      	cmp	r3, #2
 800753c:	d122      	bne.n	8007584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d11b      	bne.n	8007584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0202 	mvn.w	r2, #2
 8007554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f9b4 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9a7 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9b6 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b04      	cmp	r3, #4
 8007590:	d122      	bne.n	80075d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b04      	cmp	r3, #4
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0204 	mvn.w	r2, #4
 80075a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2202      	movs	r2, #2
 80075ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f98a 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f97d 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f98c 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d122      	bne.n	800762c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d11b      	bne.n	800762c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0208 	mvn.w	r2, #8
 80075fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2204      	movs	r2, #4
 8007602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f960 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 8007618:	e005      	b.n	8007626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f953 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f962 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b10      	cmp	r3, #16
 8007638:	d122      	bne.n	8007680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b10      	cmp	r3, #16
 8007646:	d11b      	bne.n	8007680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0210 	mvn.w	r2, #16
 8007650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2208      	movs	r2, #8
 8007656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f936 	bl	80078d8 <HAL_TIM_IC_CaptureCallback>
 800766c:	e005      	b.n	800767a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f929 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f938 	bl	80078ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10e      	bne.n	80076ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d107      	bne.n	80076ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0201 	mvn.w	r2, #1
 80076a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f904 	bl	80078b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d10e      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d107      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fc0d 	bl	8007ef2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d10e      	bne.n	8007704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d107      	bne.n	8007704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8fc 	bl	80078fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b20      	cmp	r3, #32
 8007710:	d10e      	bne.n	8007730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b20      	cmp	r3, #32
 800771e:	d107      	bne.n	8007730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0220 	mvn.w	r2, #32
 8007728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fbd8 	bl	8007ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800774e:	2302      	movs	r3, #2
 8007750:	e0ac      	b.n	80078ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b0c      	cmp	r3, #12
 800775e:	f200 809f 	bhi.w	80078a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	0800779d 	.word	0x0800779d
 800776c:	080078a1 	.word	0x080078a1
 8007770:	080078a1 	.word	0x080078a1
 8007774:	080078a1 	.word	0x080078a1
 8007778:	080077dd 	.word	0x080077dd
 800777c:	080078a1 	.word	0x080078a1
 8007780:	080078a1 	.word	0x080078a1
 8007784:	080078a1 	.word	0x080078a1
 8007788:	0800781f 	.word	0x0800781f
 800778c:	080078a1 	.word	0x080078a1
 8007790:	080078a1 	.word	0x080078a1
 8007794:	080078a1 	.word	0x080078a1
 8007798:	0800785f 	.word	0x0800785f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f952 	bl	8007a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0208 	orr.w	r2, r2, #8
 80077b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0204 	bic.w	r2, r2, #4
 80077c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6999      	ldr	r1, [r3, #24]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	619a      	str	r2, [r3, #24]
      break;
 80077da:	e062      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f9a2 	bl	8007b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6999      	ldr	r1, [r3, #24]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	021a      	lsls	r2, r3, #8
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	619a      	str	r2, [r3, #24]
      break;
 800781c:	e041      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f9f5 	bl	8007c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0208 	orr.w	r2, r2, #8
 8007838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0204 	bic.w	r2, r2, #4
 8007848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69d9      	ldr	r1, [r3, #28]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	61da      	str	r2, [r3, #28]
      break;
 800785c:	e021      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fa49 	bl	8007cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69d9      	ldr	r1, [r3, #28]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	021a      	lsls	r2, r3, #8
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	61da      	str	r2, [r3, #28]
      break;
 800789e:	e000      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80078a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr

080078ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr
	...

08007910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a3f      	ldr	r2, [pc, #252]	; (8007a20 <TIM_Base_SetConfig+0x110>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792e:	d00f      	beq.n	8007950 <TIM_Base_SetConfig+0x40>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a3c      	ldr	r2, [pc, #240]	; (8007a24 <TIM_Base_SetConfig+0x114>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00b      	beq.n	8007950 <TIM_Base_SetConfig+0x40>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a3b      	ldr	r2, [pc, #236]	; (8007a28 <TIM_Base_SetConfig+0x118>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_Base_SetConfig+0x40>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a3a      	ldr	r2, [pc, #232]	; (8007a2c <TIM_Base_SetConfig+0x11c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_Base_SetConfig+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a39      	ldr	r2, [pc, #228]	; (8007a30 <TIM_Base_SetConfig+0x120>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d108      	bne.n	8007962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2e      	ldr	r2, [pc, #184]	; (8007a20 <TIM_Base_SetConfig+0x110>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d02b      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d027      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2b      	ldr	r2, [pc, #172]	; (8007a24 <TIM_Base_SetConfig+0x114>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d023      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <TIM_Base_SetConfig+0x118>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01f      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a29      	ldr	r2, [pc, #164]	; (8007a2c <TIM_Base_SetConfig+0x11c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d01b      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a28      	ldr	r2, [pc, #160]	; (8007a30 <TIM_Base_SetConfig+0x120>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d017      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a27      	ldr	r2, [pc, #156]	; (8007a34 <TIM_Base_SetConfig+0x124>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a26      	ldr	r2, [pc, #152]	; (8007a38 <TIM_Base_SetConfig+0x128>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00f      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a25      	ldr	r2, [pc, #148]	; (8007a3c <TIM_Base_SetConfig+0x12c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a24      	ldr	r2, [pc, #144]	; (8007a40 <TIM_Base_SetConfig+0x130>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d007      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a23      	ldr	r2, [pc, #140]	; (8007a44 <TIM_Base_SetConfig+0x134>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <TIM_Base_SetConfig+0x138>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d108      	bne.n	80079d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a09      	ldr	r2, [pc, #36]	; (8007a20 <TIM_Base_SetConfig+0x110>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_Base_SetConfig+0xf8>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a0b      	ldr	r2, [pc, #44]	; (8007a30 <TIM_Base_SetConfig+0x120>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d103      	bne.n	8007a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	615a      	str	r2, [r3, #20]
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40000800 	.word	0x40000800
 8007a2c:	40000c00 	.word	0x40000c00
 8007a30:	40010400 	.word	0x40010400
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40014400 	.word	0x40014400
 8007a3c:	40014800 	.word	0x40014800
 8007a40:	40001800 	.word	0x40001800
 8007a44:	40001c00 	.word	0x40001c00
 8007a48:	40002000 	.word	0x40002000

08007a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f023 0201 	bic.w	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f023 0302 	bic.w	r3, r3, #2
 8007a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a20      	ldr	r2, [pc, #128]	; (8007b24 <TIM_OC1_SetConfig+0xd8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_OC1_SetConfig+0x64>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1f      	ldr	r2, [pc, #124]	; (8007b28 <TIM_OC1_SetConfig+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10c      	bne.n	8007aca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f023 0308 	bic.w	r3, r3, #8
 8007ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 0304 	bic.w	r3, r3, #4
 8007ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <TIM_OC1_SetConfig+0xd8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d003      	beq.n	8007ada <TIM_OC1_SetConfig+0x8e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <TIM_OC1_SetConfig+0xdc>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d111      	bne.n	8007afe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	621a      	str	r2, [r3, #32]
}
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40010400 	.word	0x40010400

08007b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f023 0210 	bic.w	r2, r3, #16
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0320 	bic.w	r3, r3, #32
 8007b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <TIM_OC2_SetConfig+0xe0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d003      	beq.n	8007b94 <TIM_OC2_SetConfig+0x68>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <TIM_OC2_SetConfig+0xe4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d10d      	bne.n	8007bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <TIM_OC2_SetConfig+0xe0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d003      	beq.n	8007bc0 <TIM_OC2_SetConfig+0x94>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <TIM_OC2_SetConfig+0xe4>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d113      	bne.n	8007be8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	621a      	str	r2, [r3, #32]
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr
 8007c0c:	40010000 	.word	0x40010000
 8007c10:	40010400 	.word	0x40010400

08007c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a21      	ldr	r2, [pc, #132]	; (8007cf4 <TIM_OC3_SetConfig+0xe0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d003      	beq.n	8007c7a <TIM_OC3_SetConfig+0x66>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a20      	ldr	r2, [pc, #128]	; (8007cf8 <TIM_OC3_SetConfig+0xe4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d10d      	bne.n	8007c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <TIM_OC3_SetConfig+0xe0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d003      	beq.n	8007ca6 <TIM_OC3_SetConfig+0x92>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <TIM_OC3_SetConfig+0xe4>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d113      	bne.n	8007cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	621a      	str	r2, [r3, #32]
}
 8007ce8:	bf00      	nop
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40010400 	.word	0x40010400

08007cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <TIM_OC4_SetConfig+0xa0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_OC4_SetConfig+0x68>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <TIM_OC4_SetConfig+0xa4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d109      	bne.n	8007d78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	019b      	lsls	r3, r3, #6
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40010400 	.word	0x40010400

08007da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2201      	movs	r2, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc80      	pop	{r7}
 8007dea:	4770      	bx	lr

08007dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e05a      	b.n	8007eba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a20      	ldr	r2, [pc, #128]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d022      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e50:	d01d      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a1c      	ldr	r2, [pc, #112]	; (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d018      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a1a      	ldr	r2, [pc, #104]	; (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d013      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a19      	ldr	r2, [pc, #100]	; (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00e      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d009      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d004      	beq.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a14      	ldr	r2, [pc, #80]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40000400 	.word	0x40000400
 8007ecc:	40000800 	.word	0x40000800
 8007ed0:	40000c00 	.word	0x40000c00
 8007ed4:	40010400 	.word	0x40010400
 8007ed8:	40014000 	.word	0x40014000
 8007edc:	40001800 	.word	0x40001800

08007ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr

08007f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e03f      	b.n	8007f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d106      	bne.n	8007f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7f9 fe52 	bl	8001bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2224      	movs	r2, #36	; 0x24
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc87 	bl	800885c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695a      	ldr	r2, [r3, #20]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b08a      	sub	sp, #40	; 0x28
 8007fa2:	af02      	add	r7, sp, #8
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d17c      	bne.n	80080b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_UART_Transmit+0x2c>
 8007fc4:	88fb      	ldrh	r3, [r7, #6]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e075      	b.n	80080ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_UART_Transmit+0x3e>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e06e      	b.n	80080ba <HAL_UART_Transmit+0x11c>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2221      	movs	r2, #33	; 0x21
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ff2:	f7f9 feef 	bl	8001dd4 <HAL_GetTick>
 8007ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800c:	d108      	bne.n	8008020 <HAL_UART_Transmit+0x82>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e003      	b.n	8008028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008024:	2300      	movs	r3, #0
 8008026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008030:	e02a      	b.n	8008088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2200      	movs	r2, #0
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 fa3a 	bl	80084b6 <UART_WaitOnFlagUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e036      	b.n	80080ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10b      	bne.n	800806a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	3302      	adds	r3, #2
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	e007      	b.n	800807a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3301      	adds	r3, #1
 8008078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1cf      	bne.n	8008032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2200      	movs	r2, #0
 800809a:	2140      	movs	r1, #64	; 0x40
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 fa0a 	bl	80084b6 <UART_WaitOnFlagUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e006      	b.n	80080ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e000      	b.n	80080ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080b8:	2302      	movs	r3, #2
  }
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	4613      	mov	r3, r2
 80080ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d11d      	bne.n	8008118 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_UART_Receive_IT+0x26>
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e016      	b.n	800811a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_UART_Receive_IT+0x38>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e00f      	b.n	800811a <HAL_UART_Receive_IT+0x58>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	461a      	mov	r2, r3
 800810c:	68b9      	ldr	r1, [r7, #8]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fa1b 	bl	800854a <UART_Start_Receive_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	e000      	b.n	800811a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008118:	2302      	movs	r3, #2
  }
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	; 0x28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008144:	2300      	movs	r3, #0
 8008146:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10d      	bne.n	8008176 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_UART_IRQHandler+0x52>
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 facb 	bl	800870a <UART_Receive_IT>
      return;
 8008174:	e17c      	b.n	8008470 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80b1 	beq.w	80082e0 <HAL_UART_IRQHandler+0x1bc>
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d105      	bne.n	8008194 <HAL_UART_IRQHandler+0x70>
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 80a6 	beq.w	80082e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <HAL_UART_IRQHandler+0x90>
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	f043 0201 	orr.w	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <HAL_UART_IRQHandler+0xb0>
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	f043 0202 	orr.w	r2, r3, #2
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_UART_IRQHandler+0xd0>
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	f043 0204 	orr.w	r2, r3, #4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <HAL_UART_IRQHandler+0xfa>
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_UART_IRQHandler+0xee>
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	f043 0208 	orr.w	r2, r3, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 811f 	beq.w	8008466 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <HAL_UART_IRQHandler+0x11e>
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa64 	bl	800870a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <HAL_UART_IRQHandler+0x146>
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d031      	beq.n	80082ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f9a6 	bl	80085bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	d123      	bne.n	80082c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695a      	ldr	r2, [r3, #20]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	4a77      	ldr	r2, [pc, #476]	; (8008478 <HAL_UART_IRQHandler+0x354>)
 800829c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fa fbe8 	bl	8002a78 <HAL_DMA_Abort_IT>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d016      	beq.n	80082dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	e00e      	b.n	80082dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f8e5 	bl	800848e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c4:	e00a      	b.n	80082dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8e1 	bl	800848e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082cc:	e006      	b.n	80082dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8dd 	bl	800848e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082da:	e0c4      	b.n	8008466 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082dc:	bf00      	nop
    return;
 80082de:	e0c2      	b.n	8008466 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	f040 80a2 	bne.w	800842e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 809c 	beq.w	800842e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8096 	beq.w	800842e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d14f      	bne.n	80083c6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008330:	8a3b      	ldrh	r3, [r7, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8099 	beq.w	800846a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800833c:	8a3a      	ldrh	r2, [r7, #16]
 800833e:	429a      	cmp	r2, r3
 8008340:	f080 8093 	bcs.w	800846a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8a3a      	ldrh	r2, [r7, #16]
 8008348:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008354:	d02b      	beq.n	80083ae <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008364:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695a      	ldr	r2, [r3, #20]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0201 	bic.w	r2, r2, #1
 8008374:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695a      	ldr	r2, [r3, #20]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008384:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0210 	bic.w	r2, r2, #16
 80083a2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fa faf5 	bl	8002998 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f86e 	bl	80084a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80083c4:	e051      	b.n	800846a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d047      	beq.n	800846e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80083de:	8a7b      	ldrh	r3, [r7, #18]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d044      	beq.n	800846e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083f2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695a      	ldr	r2, [r3, #20]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0210 	bic.w	r2, r2, #16
 8008420:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008422:	8a7b      	ldrh	r3, [r7, #18]
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f83a 	bl	80084a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800842c:	e01f      	b.n	800846e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <HAL_UART_IRQHandler+0x326>
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f8fa 	bl	800863c <UART_Transmit_IT>
    return;
 8008448:	e012      	b.n	8008470 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00d      	beq.n	8008470 <HAL_UART_IRQHandler+0x34c>
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f93b 	bl	80086da <UART_EndTransmit_IT>
    return;
 8008464:	e004      	b.n	8008470 <HAL_UART_IRQHandler+0x34c>
    return;
 8008466:	bf00      	nop
 8008468:	e002      	b.n	8008470 <HAL_UART_IRQHandler+0x34c>
      return;
 800846a:	bf00      	nop
 800846c:	e000      	b.n	8008470 <HAL_UART_IRQHandler+0x34c>
      return;
 800846e:	bf00      	nop
  }
}
 8008470:	3728      	adds	r7, #40	; 0x28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	08008615 	.word	0x08008615

0800847c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	4613      	mov	r3, r2
 80084c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c6:	e02c      	b.n	8008522 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ce:	d028      	beq.n	8008522 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80084d6:	f7f9 fc7d 	bl	8001dd4 <HAL_GetTick>
 80084da:	4602      	mov	r2, r0
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d21d      	bcs.n	8008522 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e00f      	b.n	8008542 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4013      	ands	r3, r2
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	429a      	cmp	r2, r3
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	429a      	cmp	r2, r3
 800853e:	d0c3      	beq.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	4613      	mov	r3, r2
 8008556:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	88fa      	ldrh	r2, [r7, #6]
 8008562:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2222      	movs	r2, #34	; 0x22
 8008574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800858e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695a      	ldr	r2, [r3, #20]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0201 	orr.w	r2, r2, #1
 800859e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0220 	orr.w	r2, r2, #32
 80085ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0201 	bic.w	r2, r2, #1
 80085e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d107      	bne.n	80085fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0210 	bic.w	r2, r2, #16
 80085fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr

08008614 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff ff2d 	bl	800848e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008634:	bf00      	nop
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b21      	cmp	r3, #33	; 0x21
 800864e:	d13e      	bne.n	80086ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008658:	d114      	bne.n	8008684 <UART_Transmit_IT+0x48>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d110      	bne.n	8008684 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008676:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	1c9a      	adds	r2, r3, #2
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	621a      	str	r2, [r3, #32]
 8008682:	e008      	b.n	8008696 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	1c59      	adds	r1, r3, #1
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6211      	str	r1, [r2, #32]
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29b      	uxth	r3, r3
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	4619      	mov	r1, r3
 80086a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10f      	bne.n	80086ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e000      	b.n	80086d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086ce:	2302      	movs	r3, #2
  }
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr

080086da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff febe 	bl	800847c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b22      	cmp	r3, #34	; 0x22
 800871c:	f040 8099 	bne.w	8008852 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008728:	d117      	bne.n	800875a <UART_Receive_IT+0x50>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d113      	bne.n	800875a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	b29b      	uxth	r3, r3
 8008744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008748:	b29a      	uxth	r2, r3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	1c9a      	adds	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	; 0x28
 8008758:	e026      	b.n	80087a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876c:	d007      	beq.n	800877e <UART_Receive_IT+0x74>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <UART_Receive_IT+0x82>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2da      	uxtb	r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	701a      	strb	r2, [r3, #0]
 800878a:	e008      	b.n	800879e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008798:	b2da      	uxtb	r2, r3
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	4619      	mov	r1, r3
 80087b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d148      	bne.n	800884e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0220 	bic.w	r2, r2, #32
 80087ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695a      	ldr	r2, [r3, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0201 	bic.w	r2, r2, #1
 80087ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d123      	bne.n	8008844 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0210 	bic.w	r2, r2, #16
 8008810:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b10      	cmp	r3, #16
 800881e:	d10a      	bne.n	8008836 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fe2f 	bl	80084a0 <HAL_UARTEx_RxEventCallback>
 8008842:	e002      	b.n	800884a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7f8 f975 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	e002      	b.n	8008854 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	4313      	orrs	r3, r2
 8008890:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800889c:	f023 030c 	bic.w	r3, r3, #12
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	430b      	orrs	r3, r1
 80088a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a57      	ldr	r2, [pc, #348]	; (8008a24 <UART_SetConfig+0x1c8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d004      	beq.n	80088d4 <UART_SetConfig+0x78>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a56      	ldr	r2, [pc, #344]	; (8008a28 <UART_SetConfig+0x1cc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d103      	bne.n	80088dc <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088d4:	f7fc fd52 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	e002      	b.n	80088e2 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088dc:	f7fc fd2c 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 80088e0:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ea:	d14c      	bne.n	8008986 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009a      	lsls	r2, r3, #2
 80088f6:	441a      	add	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	4a4a      	ldr	r2, [pc, #296]	; (8008a2c <UART_SetConfig+0x1d0>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	0119      	lsls	r1, r3, #4
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009a      	lsls	r2, r3, #2
 8008916:	441a      	add	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008922:	4b42      	ldr	r3, [pc, #264]	; (8008a2c <UART_SetConfig+0x1d0>)
 8008924:	fba3 0302 	umull	r0, r3, r3, r2
 8008928:	095b      	lsrs	r3, r3, #5
 800892a:	2064      	movs	r0, #100	; 0x64
 800892c:	fb00 f303 	mul.w	r3, r0, r3
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	3332      	adds	r3, #50	; 0x32
 8008936:	4a3d      	ldr	r2, [pc, #244]	; (8008a2c <UART_SetConfig+0x1d0>)
 8008938:	fba2 2303 	umull	r2, r3, r2, r3
 800893c:	095b      	lsrs	r3, r3, #5
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008944:	4419      	add	r1, r3
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009a      	lsls	r2, r3, #2
 8008950:	441a      	add	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	fbb2 f2f3 	udiv	r2, r2, r3
 800895c:	4b33      	ldr	r3, [pc, #204]	; (8008a2c <UART_SetConfig+0x1d0>)
 800895e:	fba3 0302 	umull	r0, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	2064      	movs	r0, #100	; 0x64
 8008966:	fb00 f303 	mul.w	r3, r0, r3
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	3332      	adds	r3, #50	; 0x32
 8008970:	4a2e      	ldr	r2, [pc, #184]	; (8008a2c <UART_SetConfig+0x1d0>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	f003 0207 	and.w	r2, r3, #7
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	440a      	add	r2, r1
 8008982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008984:	e04a      	b.n	8008a1c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009a      	lsls	r2, r3, #2
 8008990:	441a      	add	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	fbb2 f3f3 	udiv	r3, r2, r3
 800899c:	4a23      	ldr	r2, [pc, #140]	; (8008a2c <UART_SetConfig+0x1d0>)
 800899e:	fba2 2303 	umull	r2, r3, r2, r3
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	0119      	lsls	r1, r3, #4
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	009a      	lsls	r2, r3, #2
 80089b0:	441a      	add	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80089bc:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <UART_SetConfig+0x1d0>)
 80089be:	fba3 0302 	umull	r0, r3, r3, r2
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	2064      	movs	r0, #100	; 0x64
 80089c6:	fb00 f303 	mul.w	r3, r0, r3
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	3332      	adds	r3, #50	; 0x32
 80089d0:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <UART_SetConfig+0x1d0>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089dc:	4419      	add	r1, r3
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009a      	lsls	r2, r3, #2
 80089e8:	441a      	add	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <UART_SetConfig+0x1d0>)
 80089f6:	fba3 0302 	umull	r0, r3, r3, r2
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	2064      	movs	r0, #100	; 0x64
 80089fe:	fb00 f303 	mul.w	r3, r0, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	3332      	adds	r3, #50	; 0x32
 8008a08:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <UART_SetConfig+0x1d0>)
 8008a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0e:	095b      	lsrs	r3, r3, #5
 8008a10:	f003 020f 	and.w	r2, r3, #15
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	440a      	add	r2, r1
 8008a1a:	609a      	str	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40011000 	.word	0x40011000
 8008a28:	40011400 	.word	0x40011400
 8008a2c:	51eb851f 	.word	0x51eb851f

08008a30 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008a30:	b084      	sub	sp, #16
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	f107 001c 	add.w	r0, r7, #28
 8008a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008a46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008a48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008a4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008a4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008a52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008a56:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008a5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008a6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	b004      	add	sp, #16
 8008a82:	4770      	bx	lr

08008a84 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr

08008a9c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008aca:	2002      	movs	r0, #2
 8008acc:	f7f9 f98c 	bl	8001de8 <HAL_Delay>
  
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008b18:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008b1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008b2e:	f023 030f 	bic.w	r3, r3, #15
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr

08008b46 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	b2db      	uxtb	r3, r3
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	4413      	add	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
}  
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008ba8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008bae:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008bb4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0

}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr

08008bd8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008be6:	2310      	movs	r3, #16
 8008be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bf8:	f107 0308 	add.w	r3, r7, #8
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff ff78 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c08:	2110      	movs	r1, #16
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fa42 	bl	8009094 <SDMMC_GetCmdResp1>
 8008c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c12:	69fb      	ldr	r3, [r7, #28]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008c2a:	2311      	movs	r3, #17
 8008c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff ff56 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c4c:	2111      	movs	r1, #17
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa20 	bl	8009094 <SDMMC_GetCmdResp1>
 8008c54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c56:	69fb      	ldr	r3, [r7, #28]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c6e:	2312      	movs	r3, #18
 8008c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff ff34 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c90:	2112      	movs	r1, #18
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f9fe 	bl	8009094 <SDMMC_GetCmdResp1>
 8008c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008cb2:	2318      	movs	r3, #24
 8008cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cb6:	2340      	movs	r3, #64	; 0x40
 8008cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff12 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd4:	2118      	movs	r1, #24
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9dc 	bl	8009094 <SDMMC_GetCmdResp1>
 8008cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cde:	69fb      	ldr	r3, [r7, #28]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008cf6:	2319      	movs	r3, #25
 8008cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cfa:	2340      	movs	r3, #64	; 0x40
 8008cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d08:	f107 0308 	add.w	r3, r7, #8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fef0 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d18:	2119      	movs	r1, #25
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f9ba 	bl	8009094 <SDMMC_GetCmdResp1>
 8008d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d22:	69fb      	ldr	r3, [r7, #28]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3720      	adds	r7, #32
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b088      	sub	sp, #32
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008d38:	230c      	movs	r3, #12
 8008d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d40:	2300      	movs	r3, #0
 8008d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d4a:	f107 0308 	add.w	r3, r7, #8
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fecf 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008d56:	4a05      	ldr	r2, [pc, #20]	; (8008d6c <SDMMC_CmdStopTransfer+0x40>)
 8008d58:	210c      	movs	r1, #12
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f99a 	bl	8009094 <SDMMC_GetCmdResp1>
 8008d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d62:	69fb      	ldr	r3, [r7, #28]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	05f5e100 	.word	0x05f5e100

08008d70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d80:	2307      	movs	r3, #7
 8008d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d84:	2340      	movs	r3, #64	; 0x40
 8008d86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d92:	f107 0310 	add.w	r3, r7, #16
 8008d96:	4619      	mov	r1, r3
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff feab 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da2:	2107      	movs	r1, #7
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f975 	bl	8009094 <SDMMC_GetCmdResp1>
 8008daa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3728      	adds	r7, #40	; 0x28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b088      	sub	sp, #32
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dd4:	f107 0308 	add.w	r3, r7, #8
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7ff fe8a 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f92d 	bl	8009040 <SDMMC_GetCmdError>
 8008de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008de8:	69fb      	ldr	r3, [r7, #28]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b088      	sub	sp, #32
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008dfa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008e00:	2308      	movs	r3, #8
 8008e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e04:	2340      	movs	r3, #64	; 0x40
 8008e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fe6b 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fb20 	bl	8009464 <SDMMC_GetCmdResp7>
 8008e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e26:	69fb      	ldr	r3, [r7, #28]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3720      	adds	r7, #32
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e3e:	2337      	movs	r3, #55	; 0x37
 8008e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e42:	2340      	movs	r3, #64	; 0x40
 8008e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e50:	f107 0308 	add.w	r3, r7, #8
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff fe4c 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e60:	2137      	movs	r1, #55	; 0x37
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f916 	bl	8009094 <SDMMC_GetCmdResp1>
 8008e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3720      	adds	r7, #32
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e8a:	2329      	movs	r3, #41	; 0x29
 8008e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e9c:	f107 0308 	add.w	r3, r7, #8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fe26 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fa29 	bl	8009300 <SDMMC_GetCmdResp3>
 8008eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3720      	adds	r7, #32
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b088      	sub	sp, #32
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ec8:	2306      	movs	r3, #6
 8008eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ecc:	2340      	movs	r3, #64	; 0x40
 8008ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008eda:	f107 0308 	add.w	r3, r7, #8
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fe07 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eea:	2106      	movs	r1, #6
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f8d1 	bl	8009094 <SDMMC_GetCmdResp1>
 8008ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b088      	sub	sp, #32
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008f0a:	2333      	movs	r3, #51	; 0x33
 8008f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f0e:	2340      	movs	r3, #64	; 0x40
 8008f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f12:	2300      	movs	r3, #0
 8008f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f1c:	f107 0308 	add.w	r3, r7, #8
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff fde6 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f2c:	2133      	movs	r1, #51	; 0x33
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f8b0 	bl	8009094 <SDMMC_GetCmdResp1>
 8008f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f36:	69fb      	ldr	r3, [r7, #28]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f50:	23c0      	movs	r3, #192	; 0xc0
 8008f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f5e:	f107 0308 	add.w	r3, r7, #8
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff fdc5 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f980 	bl	8009270 <SDMMC_GetCmdResp2>
 8008f70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f72:	69fb      	ldr	r3, [r7, #28]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f8a:	2309      	movs	r3, #9
 8008f8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f8e:	23c0      	movs	r3, #192	; 0xc0
 8008f90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f9c:	f107 0308 	add.w	r3, r7, #8
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff fda6 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f961 	bl	8009270 <SDMMC_GetCmdResp2>
 8008fae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b088      	sub	sp, #32
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff fd87 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	2103      	movs	r1, #3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9c4 	bl	8009378 <SDMMC_GetCmdResp6>
 8008ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800900a:	230d      	movs	r3, #13
 800900c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800900e:	2340      	movs	r3, #64	; 0x40
 8009010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fd66 	bl	8008af4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009028:	f241 3288 	movw	r2, #5000	; 0x1388
 800902c:	210d      	movs	r1, #13
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f830 	bl	8009094 <SDMMC_GetCmdResp1>
 8009034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009036:	69fb      	ldr	r3, [r7, #28]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3720      	adds	r7, #32
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009048:	4b10      	ldr	r3, [pc, #64]	; (800908c <SDMMC_GetCmdError+0x4c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a10      	ldr	r2, [pc, #64]	; (8009090 <SDMMC_GetCmdError+0x50>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	0a5b      	lsrs	r3, r3, #9
 8009054:	f241 3288 	movw	r2, #5000	; 0x1388
 8009058:	fb02 f303 	mul.w	r3, r2, r3
 800905c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	60fa      	str	r2, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800906c:	e009      	b.n	8009082 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f1      	beq.n	800905e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	22c5      	movs	r2, #197	; 0xc5
 800907e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr
 800908c:	20000040 	.word	0x20000040
 8009090:	10624dd3 	.word	0x10624dd3

08009094 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	460b      	mov	r3, r1
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80090a2:	4b70      	ldr	r3, [pc, #448]	; (8009264 <SDMMC_GetCmdResp1+0x1d0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a70      	ldr	r2, [pc, #448]	; (8009268 <SDMMC_GetCmdResp1+0x1d4>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	0a5a      	lsrs	r2, r3, #9
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	fb02 f303 	mul.w	r3, r2, r3
 80090b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	1e5a      	subs	r2, r3, #1
 80090ba:	61fa      	str	r2, [r7, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d102      	bne.n	80090c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090c4:	e0c9      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0ef      	beq.n	80090b6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1ea      	bne.n	80090b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d004      	beq.n	80090f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2204      	movs	r2, #4
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090f2:	2304      	movs	r3, #4
 80090f4:	e0b1      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009108:	2301      	movs	r3, #1
 800910a:	e0a6      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	22c5      	movs	r2, #197	; 0xc5
 8009110:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f7ff fd17 	bl	8008b46 <SDIO_GetCommandResponse>
 8009118:	4603      	mov	r3, r0
 800911a:	461a      	mov	r2, r3
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	4293      	cmp	r3, r2
 8009120:	d001      	beq.n	8009126 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009122:	2301      	movs	r3, #1
 8009124:	e099      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009126:	2100      	movs	r1, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fd18 	bl	8008b5e <SDIO_GetResponse>
 800912e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4b4e      	ldr	r3, [pc, #312]	; (800926c <SDMMC_GetCmdResp1+0x1d8>)
 8009134:	4013      	ands	r3, r2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800913a:	2300      	movs	r3, #0
 800913c:	e08d      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	da02      	bge.n	800914a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009148:	e087      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009154:	2340      	movs	r3, #64	; 0x40
 8009156:	e080      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009162:	2380      	movs	r3, #128	; 0x80
 8009164:	e079      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009174:	e071      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009184:	e069      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009194:	e061      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091a4:	e059      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b4:	e051      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091c4:	e049      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091d4:	e041      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e4:	e039      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80091f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091f4:	e031      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009204:	e029      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009210:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009214:	e021      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009224:	e019      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009234:	e011      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009240:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009244:	e009      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009250:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009254:	e001      	b.n	800925a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000040 	.word	0x20000040
 8009268:	10624dd3 	.word	0x10624dd3
 800926c:	fdffe008 	.word	0xfdffe008

08009270 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009278:	4b1f      	ldr	r3, [pc, #124]	; (80092f8 <SDMMC_GetCmdResp2+0x88>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1f      	ldr	r2, [pc, #124]	; (80092fc <SDMMC_GetCmdResp2+0x8c>)
 800927e:	fba2 2303 	umull	r2, r3, r2, r3
 8009282:	0a5b      	lsrs	r3, r3, #9
 8009284:	f241 3288 	movw	r2, #5000	; 0x1388
 8009288:	fb02 f303 	mul.w	r3, r2, r3
 800928c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	1e5a      	subs	r2, r3, #1
 8009292:	60fa      	str	r2, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800929c:	e026      	b.n	80092ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0ef      	beq.n	800928e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1ea      	bne.n	800928e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2204      	movs	r2, #4
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092ca:	2304      	movs	r3, #4
 80092cc:	e00e      	b.n	80092ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e003      	b.n	80092ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	22c5      	movs	r2, #197	; 0xc5
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bc80      	pop	{r7}
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20000040 	.word	0x20000040
 80092fc:	10624dd3 	.word	0x10624dd3

08009300 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009308:	4b19      	ldr	r3, [pc, #100]	; (8009370 <SDMMC_GetCmdResp3+0x70>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a19      	ldr	r2, [pc, #100]	; (8009374 <SDMMC_GetCmdResp3+0x74>)
 800930e:	fba2 2303 	umull	r2, r3, r2, r3
 8009312:	0a5b      	lsrs	r3, r3, #9
 8009314:	f241 3288 	movw	r2, #5000	; 0x1388
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	1e5a      	subs	r2, r3, #1
 8009322:	60fa      	str	r2, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d102      	bne.n	800932e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800932c:	e01b      	b.n	8009366 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0ef      	beq.n	800931e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ea      	bne.n	800931e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2204      	movs	r2, #4
 8009358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800935a:	2304      	movs	r3, #4
 800935c:	e003      	b.n	8009366 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	22c5      	movs	r2, #197	; 0xc5
 8009362:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr
 8009370:	20000040 	.word	0x20000040
 8009374:	10624dd3 	.word	0x10624dd3

08009378 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009386:	4b35      	ldr	r3, [pc, #212]	; (800945c <SDMMC_GetCmdResp6+0xe4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a35      	ldr	r2, [pc, #212]	; (8009460 <SDMMC_GetCmdResp6+0xe8>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	0a5b      	lsrs	r3, r3, #9
 8009392:	f241 3288 	movw	r2, #5000	; 0x1388
 8009396:	fb02 f303 	mul.w	r3, r2, r3
 800939a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	1e5a      	subs	r2, r3, #1
 80093a0:	61fa      	str	r2, [r7, #28]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093aa:	e052      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0ef      	beq.n	800939c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1ea      	bne.n	800939c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2204      	movs	r2, #4
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093d8:	2304      	movs	r3, #4
 80093da:	e03a      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e02f      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fba7 	bl	8008b46 <SDIO_GetCommandResponse>
 80093f8:	4603      	mov	r3, r0
 80093fa:	461a      	mov	r2, r3
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	4293      	cmp	r3, r2
 8009400:	d001      	beq.n	8009406 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009402:	2301      	movs	r3, #1
 8009404:	e025      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	22c5      	movs	r2, #197	; 0xc5
 800940a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800940c:	2100      	movs	r1, #0
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fba5 	bl	8008b5e <SDIO_GetResponse>
 8009414:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d106      	bne.n	800942e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	e011      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800943c:	e009      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800944c:	e001      	b.n	8009452 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800944e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000040 	.word	0x20000040
 8009460:	10624dd3 	.word	0x10624dd3

08009464 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800946c:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <SDMMC_GetCmdResp7+0x94>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a22      	ldr	r2, [pc, #136]	; (80094fc <SDMMC_GetCmdResp7+0x98>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	0a5b      	lsrs	r3, r3, #9
 8009478:	f241 3288 	movw	r2, #5000	; 0x1388
 800947c:	fb02 f303 	mul.w	r3, r2, r3
 8009480:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1e5a      	subs	r2, r3, #1
 8009486:	60fa      	str	r2, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800948c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009490:	e02c      	b.n	80094ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009496:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0ef      	beq.n	8009482 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1ea      	bne.n	8009482 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2204      	movs	r2, #4
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094be:	2304      	movs	r3, #4
 80094c0:	e014      	b.n	80094ec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d004      	beq.n	80094d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e009      	b.n	80094ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2240      	movs	r2, #64	; 0x40
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80094ea:	2300      	movs	r3, #0
  
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000040 	.word	0x20000040
 80094fc:	10624dd3 	.word	0x10624dd3

08009500 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009500:	b084      	sub	sp, #16
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	f107 001c 	add.w	r0, r7, #28
 800950e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	2b01      	cmp	r3, #1
 8009516:	d122      	bne.n	800955e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800952c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009542:	2b01      	cmp	r3, #1
 8009544:	d105      	bne.n	8009552 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fafa 	bl	800ab4c <USB_CoreReset>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
 800955c:	e010      	b.n	8009580 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 faee 	bl	800ab4c <USB_CoreReset>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	2b01      	cmp	r3, #1
 8009584:	d10b      	bne.n	800959e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f043 0206 	orr.w	r2, r3, #6
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f043 0220 	orr.w	r2, r3, #32
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095aa:	b004      	add	sp, #16
 80095ac:	4770      	bx	lr
	...

080095b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	4613      	mov	r3, r2
 80095bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d165      	bne.n	8009690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a41      	ldr	r2, [pc, #260]	; (80096cc <USB_SetTurnaroundTime+0x11c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d906      	bls.n	80095da <USB_SetTurnaroundTime+0x2a>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4a40      	ldr	r2, [pc, #256]	; (80096d0 <USB_SetTurnaroundTime+0x120>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d202      	bcs.n	80095da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095d4:	230f      	movs	r3, #15
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e062      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a3c      	ldr	r2, [pc, #240]	; (80096d0 <USB_SetTurnaroundTime+0x120>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d306      	bcc.n	80095f0 <USB_SetTurnaroundTime+0x40>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	4a3b      	ldr	r2, [pc, #236]	; (80096d4 <USB_SetTurnaroundTime+0x124>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d202      	bcs.n	80095f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095ea:	230e      	movs	r3, #14
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	e057      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4a38      	ldr	r2, [pc, #224]	; (80096d4 <USB_SetTurnaroundTime+0x124>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d306      	bcc.n	8009606 <USB_SetTurnaroundTime+0x56>
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4a37      	ldr	r2, [pc, #220]	; (80096d8 <USB_SetTurnaroundTime+0x128>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d202      	bcs.n	8009606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009600:	230d      	movs	r3, #13
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e04c      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4a33      	ldr	r2, [pc, #204]	; (80096d8 <USB_SetTurnaroundTime+0x128>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d306      	bcc.n	800961c <USB_SetTurnaroundTime+0x6c>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4a32      	ldr	r2, [pc, #200]	; (80096dc <USB_SetTurnaroundTime+0x12c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d802      	bhi.n	800961c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009616:	230c      	movs	r3, #12
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	e041      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4a2f      	ldr	r2, [pc, #188]	; (80096dc <USB_SetTurnaroundTime+0x12c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d906      	bls.n	8009632 <USB_SetTurnaroundTime+0x82>
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4a2e      	ldr	r2, [pc, #184]	; (80096e0 <USB_SetTurnaroundTime+0x130>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d802      	bhi.n	8009632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800962c:	230b      	movs	r3, #11
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e036      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <USB_SetTurnaroundTime+0x130>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d906      	bls.n	8009648 <USB_SetTurnaroundTime+0x98>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4a29      	ldr	r2, [pc, #164]	; (80096e4 <USB_SetTurnaroundTime+0x134>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d802      	bhi.n	8009648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009642:	230a      	movs	r3, #10
 8009644:	617b      	str	r3, [r7, #20]
 8009646:	e02b      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4a26      	ldr	r2, [pc, #152]	; (80096e4 <USB_SetTurnaroundTime+0x134>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d906      	bls.n	800965e <USB_SetTurnaroundTime+0xae>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4a25      	ldr	r2, [pc, #148]	; (80096e8 <USB_SetTurnaroundTime+0x138>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d202      	bcs.n	800965e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009658:	2309      	movs	r3, #9
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e020      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	4a21      	ldr	r2, [pc, #132]	; (80096e8 <USB_SetTurnaroundTime+0x138>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d306      	bcc.n	8009674 <USB_SetTurnaroundTime+0xc4>
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4a20      	ldr	r2, [pc, #128]	; (80096ec <USB_SetTurnaroundTime+0x13c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d802      	bhi.n	8009674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800966e:	2308      	movs	r3, #8
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	e015      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4a1d      	ldr	r2, [pc, #116]	; (80096ec <USB_SetTurnaroundTime+0x13c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d906      	bls.n	800968a <USB_SetTurnaroundTime+0xda>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	4a1c      	ldr	r2, [pc, #112]	; (80096f0 <USB_SetTurnaroundTime+0x140>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d202      	bcs.n	800968a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009684:	2307      	movs	r3, #7
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e00a      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800968a:	2306      	movs	r3, #6
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e007      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d102      	bne.n	800969c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009696:	2309      	movs	r3, #9
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	e001      	b.n	80096a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800969c:	2309      	movs	r3, #9
 800969e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	029b      	lsls	r3, r3, #10
 80096b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80096b8:	431a      	orrs	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bc80      	pop	{r7}
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	00d8acbf 	.word	0x00d8acbf
 80096d0:	00e4e1c0 	.word	0x00e4e1c0
 80096d4:	00f42400 	.word	0x00f42400
 80096d8:	01067380 	.word	0x01067380
 80096dc:	011a499f 	.word	0x011a499f
 80096e0:	01312cff 	.word	0x01312cff
 80096e4:	014ca43f 	.word	0x014ca43f
 80096e8:	016e3600 	.word	0x016e3600
 80096ec:	01a6ab1f 	.word	0x01a6ab1f
 80096f0:	01e84800 	.word	0x01e84800

080096f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f043 0201 	orr.w	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	bc80      	pop	{r7}
 8009712:	4770      	bx	lr

08009714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f023 0201 	bic.w	r2, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	bc80      	pop	{r7}
 8009732:	4770      	bx	lr

08009734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d115      	bne.n	8009782 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009762:	2001      	movs	r0, #1
 8009764:	f7f8 fb40 	bl	8001de8 <HAL_Delay>
      ms++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 f961 	bl	800aa36 <USB_GetMode>
 8009774:	4603      	mov	r3, r0
 8009776:	2b01      	cmp	r3, #1
 8009778:	d01e      	beq.n	80097b8 <USB_SetCurrentMode+0x84>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b31      	cmp	r3, #49	; 0x31
 800977e:	d9f0      	bls.n	8009762 <USB_SetCurrentMode+0x2e>
 8009780:	e01a      	b.n	80097b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d115      	bne.n	80097b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009794:	2001      	movs	r0, #1
 8009796:	f7f8 fb27 	bl	8001de8 <HAL_Delay>
      ms++;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3301      	adds	r3, #1
 800979e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 f948 	bl	800aa36 <USB_GetMode>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <USB_SetCurrentMode+0x84>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b31      	cmp	r3, #49	; 0x31
 80097b0:	d9f0      	bls.n	8009794 <USB_SetCurrentMode+0x60>
 80097b2:	e001      	b.n	80097b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e005      	b.n	80097c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b32      	cmp	r3, #50	; 0x32
 80097bc:	d101      	bne.n	80097c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097cc:	b084      	sub	sp, #16
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b086      	sub	sp, #24
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	e009      	b.n	8009800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	3340      	adds	r3, #64	; 0x40
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	2200      	movs	r2, #0
 80097f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	3301      	adds	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b0e      	cmp	r3, #14
 8009804:	d9f2      	bls.n	80097ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d11c      	bne.n	8009846 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800981a:	f043 0302 	orr.w	r3, r3, #2
 800981e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	639a      	str	r2, [r3, #56]	; 0x38
 8009844:	e00b      	b.n	800985e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009864:	461a      	mov	r2, r3
 8009866:	2300      	movs	r3, #0
 8009868:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009870:	4619      	mov	r1, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009878:	461a      	mov	r2, r3
 800987a:	680b      	ldr	r3, [r1, #0]
 800987c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	2b01      	cmp	r3, #1
 8009882:	d10c      	bne.n	800989e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800988a:	2100      	movs	r1, #0
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f945 	bl	8009b1c <USB_SetDevSpeed>
 8009892:	e008      	b.n	80098a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009894:	2101      	movs	r1, #1
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f940 	bl	8009b1c <USB_SetDevSpeed>
 800989c:	e003      	b.n	80098a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800989e:	2103      	movs	r1, #3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f93b 	bl	8009b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098a6:	2110      	movs	r1, #16
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f8f3 	bl	8009a94 <USB_FlushTxFifo>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f90f 	bl	8009adc <USB_FlushRxFifo>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ce:	461a      	mov	r2, r3
 80098d0:	2300      	movs	r3, #0
 80098d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098da:	461a      	mov	r2, r3
 80098dc:	2300      	movs	r3, #0
 80098de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e6:	461a      	mov	r2, r3
 80098e8:	2300      	movs	r3, #0
 80098ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ec:	2300      	movs	r3, #0
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	e043      	b.n	800997a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009908:	d118      	bne.n	800993c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991c:	461a      	mov	r2, r3
 800991e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	e013      	b.n	800994e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009932:	461a      	mov	r2, r3
 8009934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	e008      	b.n	800994e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	461a      	mov	r2, r3
 800994a:	2300      	movs	r3, #0
 800994c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995a:	461a      	mov	r2, r3
 800995c:	2300      	movs	r3, #0
 800995e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996c:	461a      	mov	r2, r3
 800996e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009972:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	3301      	adds	r3, #1
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	429a      	cmp	r2, r3
 8009980:	d3b7      	bcc.n	80098f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009982:	2300      	movs	r3, #0
 8009984:	613b      	str	r3, [r7, #16]
 8009986:	e043      	b.n	8009a10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800999a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800999e:	d118      	bne.n	80099d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b2:	461a      	mov	r2, r3
 80099b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	e013      	b.n	80099e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c8:	461a      	mov	r2, r3
 80099ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	e008      	b.n	80099e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099de:	461a      	mov	r2, r3
 80099e0:	2300      	movs	r3, #0
 80099e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f0:	461a      	mov	r2, r3
 80099f2:	2300      	movs	r3, #0
 80099f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a02:	461a      	mov	r2, r3
 8009a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d3b7      	bcc.n	8009988 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	f043 0210 	orr.w	r2, r3, #16
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699a      	ldr	r2, [r3, #24]
 8009a50:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <USB_DevInit+0x2c4>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d005      	beq.n	8009a6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	f043 0208 	orr.w	r2, r3, #8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d107      	bne.n	8009a80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a78:	f043 0304 	orr.w	r3, r3, #4
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a8c:	b004      	add	sp, #16
 8009a8e:	4770      	bx	lr
 8009a90:	803c3800 	.word	0x803c3800

08009a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	019b      	lsls	r3, r3, #6
 8009aa6:	f043 0220 	orr.w	r2, r3, #32
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4a08      	ldr	r2, [pc, #32]	; (8009ad8 <USB_FlushTxFifo+0x44>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d901      	bls.n	8009ac0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e006      	b.n	8009ace <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0320 	and.w	r3, r3, #32
 8009ac8:	2b20      	cmp	r3, #32
 8009aca:	d0f0      	beq.n	8009aae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bc80      	pop	{r7}
 8009ad6:	4770      	bx	lr
 8009ad8:	00030d40 	.word	0x00030d40

08009adc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2210      	movs	r2, #16
 8009aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3301      	adds	r3, #1
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4a08      	ldr	r2, [pc, #32]	; (8009b18 <USB_FlushRxFifo+0x3c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d901      	bls.n	8009b00 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e006      	b.n	8009b0e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f003 0310 	and.w	r3, r3, #16
 8009b08:	2b10      	cmp	r3, #16
 8009b0a:	d0f0      	beq.n	8009aee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr
 8009b18:	00030d40 	.word	0x00030d40

08009b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	68f9      	ldr	r1, [r7, #12]
 8009b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bc80      	pop	{r7}
 8009b4a:	4770      	bx	lr

08009b4c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 0306 	and.w	r3, r3, #6
 8009b64:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75fb      	strb	r3, [r7, #23]
 8009b70:	e00a      	b.n	8009b88 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d002      	beq.n	8009b7e <USB_GetDevSpeed+0x32>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b06      	cmp	r3, #6
 8009b7c:	d102      	bne.n	8009b84 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	75fb      	strb	r3, [r7, #23]
 8009b82:	e001      	b.n	8009b88 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b84:	230f      	movs	r3, #15
 8009b86:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr

08009b94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d13a      	bne.n	8009c26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	69da      	ldr	r2, [r3, #28]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f003 030f 	and.w	r3, r3, #15
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	68f9      	ldr	r1, [r7, #12]
 8009bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d155      	bne.n	8009c94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	78db      	ldrb	r3, [r3, #3]
 8009c02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	059b      	lsls	r3, r3, #22
 8009c0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	e036      	b.n	8009c94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2c:	69da      	ldr	r2, [r3, #28]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	f003 030f 	and.w	r3, r3, #15
 8009c36:	2101      	movs	r1, #1
 8009c38:	fa01 f303 	lsl.w	r3, r1, r3
 8009c3c:	041b      	lsls	r3, r3, #16
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d11a      	bne.n	8009c94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	78db      	ldrb	r3, [r3, #3]
 8009c78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	0151      	lsls	r1, r2, #5
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	440a      	add	r2, r1
 8009c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bc80      	pop	{r7}
 8009c9e:	4770      	bx	lr

08009ca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	785b      	ldrb	r3, [r3, #1]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d161      	bne.n	8009d80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cd2:	d11f      	bne.n	8009d14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	0151      	lsls	r1, r2, #5
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	440a      	add	r2, r1
 8009cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	0151      	lsls	r1, r2, #5
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	440a      	add	r2, r1
 8009d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	2101      	movs	r1, #1
 8009d26:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d34:	4013      	ands	r3, r2
 8009d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	69da      	ldr	r2, [r3, #28]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 030f 	and.w	r3, r3, #15
 8009d48:	2101      	movs	r1, #1
 8009d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	43db      	mvns	r3, r3
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d58:	4013      	ands	r3, r2
 8009d5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	0159      	lsls	r1, r3, #5
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	440b      	add	r3, r1
 8009d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d76:	4619      	mov	r1, r3
 8009d78:	4b35      	ldr	r3, [pc, #212]	; (8009e50 <USB_DeactivateEndpoint+0x1b0>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	600b      	str	r3, [r1, #0]
 8009d7e:	e060      	b.n	8009e42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d96:	d11f      	bne.n	8009dd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009db6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	f003 030f 	and.w	r3, r3, #15
 8009de8:	2101      	movs	r1, #1
 8009dea:	fa01 f303 	lsl.w	r3, r1, r3
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	43db      	mvns	r3, r3
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009df8:	4013      	ands	r3, r2
 8009dfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 030f 	and.w	r3, r3, #15
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	43db      	mvns	r3, r3
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	0159      	lsls	r1, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	440b      	add	r3, r1
 8009e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <USB_DeactivateEndpoint+0x1b4>)
 8009e3e:	4013      	ands	r3, r2
 8009e40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	ec337800 	.word	0xec337800
 8009e54:	eff37800 	.word	0xeff37800

08009e58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08a      	sub	sp, #40	; 0x28
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	4613      	mov	r3, r2
 8009e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	785b      	ldrb	r3, [r3, #1]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	f040 815c 	bne.w	800a132 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d132      	bne.n	8009ee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee0:	0cdb      	lsrs	r3, r3, #19
 8009ee2:	04db      	lsls	r3, r3, #19
 8009ee4:	6113      	str	r3, [r2, #16]
 8009ee6:	e074      	b.n	8009fd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	69ba      	ldr	r2, [r7, #24]
 8009ef8:	0151      	lsls	r1, r2, #5
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	440a      	add	r2, r1
 8009efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f02:	0cdb      	lsrs	r3, r3, #19
 8009f04:	04db      	lsls	r3, r3, #19
 8009f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	0151      	lsls	r1, r2, #5
 8009f1a:	69fa      	ldr	r2, [r7, #28]
 8009f1c:	440a      	add	r2, r1
 8009f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6959      	ldr	r1, [r3, #20]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	440b      	add	r3, r1
 8009f44:	1e59      	subs	r1, r3, #1
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f50:	4b9d      	ldr	r3, [pc, #628]	; (800a1c8 <USB_EPStartXfer+0x370>)
 8009f52:	400b      	ands	r3, r1
 8009f54:	69b9      	ldr	r1, [r7, #24]
 8009f56:	0148      	lsls	r0, r1, #5
 8009f58:	69f9      	ldr	r1, [r7, #28]
 8009f5a:	4401      	add	r1, r0
 8009f5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f60:	4313      	orrs	r3, r2
 8009f62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f7a:	69b9      	ldr	r1, [r7, #24]
 8009f7c:	0148      	lsls	r0, r1, #5
 8009f7e:	69f9      	ldr	r1, [r7, #28]
 8009f80:	4401      	add	r1, r0
 8009f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f86:	4313      	orrs	r3, r2
 8009f88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	78db      	ldrb	r3, [r3, #3]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d11f      	bne.n	8009fd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	69ba      	ldr	r2, [r7, #24]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	69fa      	ldr	r2, [r7, #28]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009fb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d14b      	bne.n	800a070 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d009      	beq.n	8009ff4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	461a      	mov	r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	78db      	ldrb	r3, [r3, #3]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d128      	bne.n	800a04e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d110      	bne.n	800a02e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	69fa      	ldr	r2, [r7, #28]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	e00f      	b.n	800a04e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69ba      	ldr	r2, [r7, #24]
 800a03e:	0151      	lsls	r1, r2, #5
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	440a      	add	r2, r1
 800a044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a04c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	0151      	lsls	r1, r2, #5
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	440a      	add	r2, r1
 800a064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	e12f      	b.n	800a2d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	0151      	lsls	r1, r2, #5
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	440a      	add	r2, r1
 800a086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a08e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	78db      	ldrb	r3, [r3, #3]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d015      	beq.n	800a0c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8117 	beq.w	800a2d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	634b      	str	r3, [r1, #52]	; 0x34
 800a0c2:	e105      	b.n	800a2d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d110      	bne.n	800a0f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	e00f      	b.n	800a116 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	0151      	lsls	r1, r2, #5
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	440a      	add	r2, r1
 800a10c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a114:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	68d9      	ldr	r1, [r3, #12]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	b298      	uxth	r0, r3
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	4603      	mov	r3, r0
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 fa2a 	bl	800a584 <USB_WritePacket>
 800a130:	e0ce      	b.n	800a2d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a14c:	0cdb      	lsrs	r3, r3, #19
 800a14e:	04db      	lsls	r3, r3, #19
 800a150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a174:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d126      	bne.n	800a1cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18a:	691a      	ldr	r2, [r3, #16]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a194:	69b9      	ldr	r1, [r7, #24]
 800a196:	0148      	lsls	r0, r1, #5
 800a198:	69f9      	ldr	r1, [r7, #28]
 800a19a:	4401      	add	r1, r0
 800a19c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1c2:	6113      	str	r3, [r2, #16]
 800a1c4:	e036      	b.n	800a234 <USB_EPStartXfer+0x3dc>
 800a1c6:	bf00      	nop
 800a1c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	695a      	ldr	r2, [r3, #20]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ee:	691a      	ldr	r2, [r3, #16]
 800a1f0:	8afb      	ldrh	r3, [r7, #22]
 800a1f2:	04d9      	lsls	r1, r3, #19
 800a1f4:	4b39      	ldr	r3, [pc, #228]	; (800a2dc <USB_EPStartXfer+0x484>)
 800a1f6:	400b      	ands	r3, r1
 800a1f8:	69b9      	ldr	r1, [r7, #24]
 800a1fa:	0148      	lsls	r0, r1, #5
 800a1fc:	69f9      	ldr	r1, [r7, #28]
 800a1fe:	4401      	add	r1, r0
 800a200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a204:	4313      	orrs	r3, r2
 800a206:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a214:	691a      	ldr	r2, [r3, #16]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	8af9      	ldrh	r1, [r7, #22]
 800a21c:	fb01 f303 	mul.w	r3, r1, r3
 800a220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a224:	69b9      	ldr	r1, [r7, #24]
 800a226:	0148      	lsls	r0, r1, #5
 800a228:	69f9      	ldr	r1, [r7, #28]
 800a22a:	4401      	add	r1, r0
 800a22c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a230:	4313      	orrs	r3, r2
 800a232:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d10d      	bne.n	800a256 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d009      	beq.n	800a256 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	68d9      	ldr	r1, [r3, #12]
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a252:	460a      	mov	r2, r1
 800a254:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	78db      	ldrb	r3, [r3, #3]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d128      	bne.n	800a2b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d110      	bne.n	800a290 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	69ba      	ldr	r2, [r7, #24]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	69fa      	ldr	r2, [r7, #28]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	e00f      	b.n	800a2b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	0151      	lsls	r1, r2, #5
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	0151      	lsls	r1, r2, #5
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	440a      	add	r2, r1
 800a2c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3720      	adds	r7, #32
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	1ff80000 	.word	0x1ff80000

0800a2e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	f040 80cd 	bne.w	800a49c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d132      	bne.n	800a370 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a32c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	0151      	lsls	r1, r2, #5
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	440a      	add	r2, r1
 800a344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a34c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	0151      	lsls	r1, r2, #5
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	440a      	add	r2, r1
 800a364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a368:	0cdb      	lsrs	r3, r3, #19
 800a36a:	04db      	lsls	r3, r3, #19
 800a36c:	6113      	str	r3, [r2, #16]
 800a36e:	e04e      	b.n	800a40e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	440a      	add	r2, r1
 800a386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a38a:	0cdb      	lsrs	r3, r3, #19
 800a38c:	04db      	lsls	r3, r3, #19
 800a38e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	0151      	lsls	r1, r2, #5
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	695a      	ldr	r2, [r3, #20]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d903      	bls.n	800a3c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	0151      	lsls	r1, r2, #5
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	440a      	add	r2, r1
 800a3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3fe:	6939      	ldr	r1, [r7, #16]
 800a400:	0148      	lsls	r0, r1, #5
 800a402:	6979      	ldr	r1, [r7, #20]
 800a404:	4401      	add	r1, r0
 800a406:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a40a:	4313      	orrs	r3, r2
 800a40c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d11e      	bne.n	800a452 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d009      	beq.n	800a430 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a428:	461a      	mov	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	0151      	lsls	r1, r2, #5
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	440a      	add	r2, r1
 800a446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a44a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	e092      	b.n	800a578 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	0151      	lsls	r1, r2, #5
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	440a      	add	r2, r1
 800a468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a46c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a470:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d07e      	beq.n	800a578 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f003 030f 	and.w	r3, r3, #15
 800a48a:	2101      	movs	r1, #1
 800a48c:	fa01 f303 	lsl.w	r3, r1, r3
 800a490:	6979      	ldr	r1, [r7, #20]
 800a492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a496:	4313      	orrs	r3, r2
 800a498:	634b      	str	r3, [r1, #52]	; 0x34
 800a49a:	e06d      	b.n	800a578 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	0151      	lsls	r1, r2, #5
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	440a      	add	r2, r1
 800a4b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4b6:	0cdb      	lsrs	r3, r3, #19
 800a4b8:	04db      	lsls	r3, r3, #19
 800a4ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	0151      	lsls	r1, r2, #5
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	440a      	add	r2, r1
 800a506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a50a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a50e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a526:	6939      	ldr	r1, [r7, #16]
 800a528:	0148      	lsls	r0, r1, #5
 800a52a:	6979      	ldr	r1, [r7, #20]
 800a52c:	4401      	add	r1, r0
 800a52e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a532:	4313      	orrs	r3, r2
 800a534:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d10d      	bne.n	800a558 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	68d9      	ldr	r1, [r3, #12]
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	460a      	mov	r2, r1
 800a556:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	0151      	lsls	r1, r2, #5
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	440a      	add	r2, r1
 800a56e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	bc80      	pop	{r7}
 800a582:	4770      	bx	lr

0800a584 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a584:	b480      	push	{r7}
 800a586:	b089      	sub	sp, #36	; 0x24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4611      	mov	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	460b      	mov	r3, r1
 800a594:	71fb      	strb	r3, [r7, #7]
 800a596:	4613      	mov	r3, r2
 800a598:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d123      	bne.n	800a5f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5aa:	88bb      	ldrh	r3, [r7, #4]
 800a5ac:	3303      	adds	r3, #3
 800a5ae:	089b      	lsrs	r3, r3, #2
 800a5b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	e018      	b.n	800a5ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	031a      	lsls	r2, r3, #12
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	61bb      	str	r3, [r7, #24]
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d3e2      	bcc.n	800a5b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3724      	adds	r7, #36	; 0x24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr

0800a5fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b08b      	sub	sp, #44	; 0x2c
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	4613      	mov	r3, r2
 800a60a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a614:	88fb      	ldrh	r3, [r7, #6]
 800a616:	089b      	lsrs	r3, r3, #2
 800a618:	b29b      	uxth	r3, r3
 800a61a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a624:	2300      	movs	r3, #0
 800a626:	623b      	str	r3, [r7, #32]
 800a628:	e014      	b.n	800a654 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	601a      	str	r2, [r3, #0]
    pDest++;
 800a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a638:	3301      	adds	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	3301      	adds	r3, #1
 800a640:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	3301      	adds	r3, #1
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	3301      	adds	r3, #1
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	3301      	adds	r3, #1
 800a652:	623b      	str	r3, [r7, #32]
 800a654:	6a3a      	ldr	r2, [r7, #32]
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d3e6      	bcc.n	800a62a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a65c:	8bfb      	ldrh	r3, [r7, #30]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d01e      	beq.n	800a6a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a66c:	461a      	mov	r2, r3
 800a66e:	f107 0310 	add.w	r3, r7, #16
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	fa22 f303 	lsr.w	r3, r2, r3
 800a682:	b2da      	uxtb	r2, r3
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	701a      	strb	r2, [r3, #0]
      i++;
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	3301      	adds	r3, #1
 800a68c:	623b      	str	r3, [r7, #32]
      pDest++;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	3301      	adds	r3, #1
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a694:	8bfb      	ldrh	r3, [r7, #30]
 800a696:	3b01      	subs	r3, #1
 800a698:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a69a:	8bfb      	ldrh	r3, [r7, #30]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1ea      	bne.n	800a676 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	372c      	adds	r7, #44	; 0x2c
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d12c      	bne.n	800a722 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	db12      	blt.n	800a700 <USB_EPSetStall+0x54>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00f      	beq.n	800a700 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	0151      	lsls	r1, r2, #5
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	e02b      	b.n	800a77a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	db12      	blt.n	800a75a <USB_EPSetStall+0xae>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	0151      	lsls	r1, r2, #5
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	440a      	add	r2, r1
 800a750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a758:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr

0800a786 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a786:	b480      	push	{r7}
 800a788:	b085      	sub	sp, #20
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d128      	bne.n	800a7f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	0151      	lsls	r1, r2, #5
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	440a      	add	r2, r1
 800a7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	78db      	ldrb	r3, [r3, #3]
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d003      	beq.n	800a7d2 <USB_EPClearStall+0x4c>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	78db      	ldrb	r3, [r3, #3]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d138      	bne.n	800a844 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	e027      	b.n	800a844 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a812:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	78db      	ldrb	r3, [r3, #3]
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d003      	beq.n	800a824 <USB_EPClearStall+0x9e>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	78db      	ldrb	r3, [r3, #3]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d10f      	bne.n	800a844 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a83e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a842:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bc80      	pop	{r7}
 800a84e:	4770      	bx	lr

0800a850 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a86e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a872:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	011b      	lsls	r3, r3, #4
 800a880:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a88a:	4313      	orrs	r3, r2
 800a88c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	bc80      	pop	{r7}
 800a898:	4770      	bx	lr

0800a89a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8b4:	f023 0303 	bic.w	r3, r3, #3
 800a8b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8c8:	f023 0302 	bic.w	r3, r3, #2
 800a8cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr

0800a8da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8f4:	f023 0303 	bic.w	r3, r3, #3
 800a8f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a908:	f043 0302 	orr.w	r3, r3, #2
 800a90c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr

0800a91a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b085      	sub	sp, #20
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4013      	ands	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a932:	68fb      	ldr	r3, [r7, #12]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr

0800a93e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a93e:	b480      	push	{r7}
 800a940:	b085      	sub	sp, #20
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95a:	69db      	ldr	r3, [r3, #28]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	4013      	ands	r3, r2
 800a960:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	0c1b      	lsrs	r3, r3, #16
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bc80      	pop	{r7}
 800a96e:	4770      	bx	lr

0800a970 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	4013      	ands	r3, r2
 800a992:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	b29b      	uxth	r3, r3
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bc80      	pop	{r7}
 800a9a0:	4770      	bx	lr

0800a9a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b085      	sub	sp, #20
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9b2:	78fb      	ldrb	r3, [r7, #3]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc80      	pop	{r7}
 800a9da:	4770      	bx	lr

0800a9dc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	f003 030f 	and.w	r3, r3, #15
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0c:	01db      	lsls	r3, r3, #7
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	4013      	ands	r3, r2
 800aa28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr

0800aa36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	f003 0301 	and.w	r3, r3, #1
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr

0800aa50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa6e:	f023 0307 	bic.w	r3, r3, #7
 800aa72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bc80      	pop	{r7}
 800aa92:	4770      	bx	lr

0800aa94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	333c      	adds	r3, #60	; 0x3c
 800aaaa:	3304      	adds	r3, #4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4a25      	ldr	r2, [pc, #148]	; (800ab48 <USB_EP0_OutStart+0xb4>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d90a      	bls.n	800aace <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aac8:	d101      	bne.n	800aace <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e037      	b.n	800ab3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad4:	461a      	mov	r2, r3
 800aad6:	2300      	movs	r3, #0
 800aad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aaec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aafc:	f043 0318 	orr.w	r3, r3, #24
 800ab00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab16:	7afb      	ldrb	r3, [r7, #11]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d10f      	bne.n	800ab3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab22:	461a      	mov	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ab3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bc80      	pop	{r7}
 800ab46:	4770      	bx	lr
 800ab48:	4f54300a 	.word	0x4f54300a

0800ab4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	60fb      	str	r3, [r7, #12]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4a12      	ldr	r2, [pc, #72]	; (800abac <USB_CoreReset+0x60>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d901      	bls.n	800ab6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e01b      	b.n	800aba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	daf2      	bge.n	800ab58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f043 0201 	orr.w	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3301      	adds	r3, #1
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4a08      	ldr	r2, [pc, #32]	; (800abac <USB_CoreReset+0x60>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d901      	bls.n	800ab94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e006      	b.n	800aba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d0f0      	beq.n	800ab82 <USB_CoreReset+0x36>

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr
 800abac:	00030d40 	.word	0x00030d40

0800abb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800abb4:	4904      	ldr	r1, [pc, #16]	; (800abc8 <MX_FATFS_Init+0x18>)
 800abb6:	4805      	ldr	r0, [pc, #20]	; (800abcc <MX_FATFS_Init+0x1c>)
 800abb8:	f001 fc5e 	bl	800c478 <FATFS_LinkDriver>
 800abbc:	4603      	mov	r3, r0
 800abbe:	461a      	mov	r2, r3
 800abc0:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <MX_FATFS_Init+0x20>)
 800abc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abc4:	bf00      	nop
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20000718 	.word	0x20000718
 800abcc:	0800de8c 	.word	0x0800de8c
 800abd0:	20000714 	.word	0x20000714

0800abd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abde:	f000 f879 	bl	800acd4 <BSP_SD_IsDetected>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d001      	beq.n	800abec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e012      	b.n	800ac12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800abec:	480b      	ldr	r0, [pc, #44]	; (800ac1c <BSP_SD_Init+0x48>)
 800abee:	f7fa ff58 	bl	8005aa2 <HAL_SD_Init>
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d109      	bne.n	800ac10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800abfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac00:	4806      	ldr	r0, [pc, #24]	; (800ac1c <BSP_SD_Init+0x48>)
 800ac02:	f7fb fd31 	bl	8006668 <HAL_SD_ConfigWideBusOperation>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac10:	79fb      	ldrb	r3, [r7, #7]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200003a8 	.word	0x200003a8

0800ac20 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	4806      	ldr	r0, [pc, #24]	; (800ac58 <BSP_SD_ReadBlocks+0x38>)
 800ac3e:	f7fa ffdf 	bl	8005c00 <HAL_SD_ReadBlocks>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	200003a8 	.word	0x200003a8

0800ac5c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	68f9      	ldr	r1, [r7, #12]
 800ac78:	4806      	ldr	r0, [pc, #24]	; (800ac94 <BSP_SD_WriteBlocks+0x38>)
 800ac7a:	f7fb f99f 	bl	8005fbc <HAL_SD_WriteBlocks>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200003a8 	.word	0x200003a8

0800ac98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ac9c:	4805      	ldr	r0, [pc, #20]	; (800acb4 <BSP_SD_GetCardState+0x1c>)
 800ac9e:	f7fb fd7d 	bl	800679c <HAL_SD_GetCardState>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	bf14      	ite	ne
 800aca8:	2301      	movne	r3, #1
 800acaa:	2300      	moveq	r3, #0
 800acac:	b2db      	uxtb	r3, r3
}
 800acae:	4618      	mov	r0, r3
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200003a8 	.word	0x200003a8

0800acb8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	4803      	ldr	r0, [pc, #12]	; (800acd0 <BSP_SD_GetCardInfo+0x18>)
 800acc4:	f7fb fca4 	bl	8006610 <HAL_SD_GetCardInfo>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	200003a8 	.word	0x200003a8

0800acd4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800acda:	2301      	movs	r3, #1
 800acdc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	b2db      	uxtb	r3, r3
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bc80      	pop	{r7}
 800acea:	4770      	bx	lr

0800acec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	7c1b      	ldrb	r3, [r3, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d115      	bne.n	800ad30 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad08:	2202      	movs	r2, #2
 800ad0a:	2181      	movs	r1, #129	; 0x81
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f002 fcde 	bl	800d6ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	2101      	movs	r1, #1
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f002 fcd4 	bl	800d6ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ad2e:	e012      	b.n	800ad56 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad30:	2340      	movs	r3, #64	; 0x40
 800ad32:	2202      	movs	r2, #2
 800ad34:	2181      	movs	r1, #129	; 0x81
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f002 fcc9 	bl	800d6ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad42:	2340      	movs	r3, #64	; 0x40
 800ad44:	2202      	movs	r2, #2
 800ad46:	2101      	movs	r1, #1
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f002 fcc0 	bl	800d6ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad56:	2308      	movs	r3, #8
 800ad58:	2203      	movs	r2, #3
 800ad5a:	2182      	movs	r1, #130	; 0x82
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f002 fcb6 	bl	800d6ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad6c:	f002 fe02 	bl	800d974 <malloc>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800ad84:	2301      	movs	r3, #1
 800ad86:	73fb      	strb	r3, [r7, #15]
 800ad88:	e026      	b.n	800add8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	7c1b      	ldrb	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d109      	bne.n	800adc8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adbe:	2101      	movs	r1, #1
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f002 fd74 	bl	800d8ae <USBD_LL_PrepareReceive>
 800adc6:	e007      	b.n	800add8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adce:	2340      	movs	r3, #64	; 0x40
 800add0:	2101      	movs	r1, #1
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f002 fd6b 	bl	800d8ae <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800adf2:	2181      	movs	r1, #129	; 0x81
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f002 fc90 	bl	800d71a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae00:	2101      	movs	r1, #1
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f002 fc89 	bl	800d71a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae10:	2182      	movs	r1, #130	; 0x82
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f002 fc81 	bl	800d71a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00e      	beq.n	800ae46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f002 fda3 	bl	800d984 <free>
    pdev->pClassData = NULL;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d039      	beq.n	800aeee <USBD_CDC_Setup+0x9e>
 800ae7a:	2b20      	cmp	r3, #32
 800ae7c:	d17f      	bne.n	800af7e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	88db      	ldrh	r3, [r3, #6]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d029      	beq.n	800aeda <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	da11      	bge.n	800aeb4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ae9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	88d2      	ldrh	r2, [r2, #6]
 800aea2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aea4:	6939      	ldr	r1, [r7, #16]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88db      	ldrh	r3, [r3, #6]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 fa14 	bl	800c2da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aeb2:	e06b      	b.n	800af8c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	785a      	ldrb	r2, [r3, #1]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	88db      	ldrh	r3, [r3, #6]
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aeca:	6939      	ldr	r1, [r7, #16]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	88db      	ldrh	r3, [r3, #6]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f001 fa2f 	bl	800c336 <USBD_CtlPrepareRx>
      break;
 800aed8:	e058      	b.n	800af8c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	7850      	ldrb	r0, [r2, #1]
 800aee6:	2200      	movs	r2, #0
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	4798      	blx	r3
      break;
 800aeec:	e04e      	b.n	800af8c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	2b0b      	cmp	r3, #11
 800aef4:	d02e      	beq.n	800af54 <USBD_CDC_Setup+0x104>
 800aef6:	2b0b      	cmp	r3, #11
 800aef8:	dc38      	bgt.n	800af6c <USBD_CDC_Setup+0x11c>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <USBD_CDC_Setup+0xb4>
 800aefe:	2b0a      	cmp	r3, #10
 800af00:	d014      	beq.n	800af2c <USBD_CDC_Setup+0xdc>
 800af02:	e033      	b.n	800af6c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d107      	bne.n	800af1e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800af0e:	f107 030c 	add.w	r3, r7, #12
 800af12:	2202      	movs	r2, #2
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 f9df 	bl	800c2da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af1c:	e02e      	b.n	800af7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 f970 	bl	800c206 <USBD_CtlError>
            ret = USBD_FAIL;
 800af26:	2302      	movs	r3, #2
 800af28:	75fb      	strb	r3, [r7, #23]
          break;
 800af2a:	e027      	b.n	800af7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af32:	2b03      	cmp	r3, #3
 800af34:	d107      	bne.n	800af46 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800af36:	f107 030f 	add.w	r3, r7, #15
 800af3a:	2201      	movs	r2, #1
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f001 f9cb 	bl	800c2da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af44:	e01a      	b.n	800af7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f001 f95c 	bl	800c206 <USBD_CtlError>
            ret = USBD_FAIL;
 800af4e:	2302      	movs	r3, #2
 800af50:	75fb      	strb	r3, [r7, #23]
          break;
 800af52:	e013      	b.n	800af7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d00d      	beq.n	800af7a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f001 f950 	bl	800c206 <USBD_CtlError>
            ret = USBD_FAIL;
 800af66:	2302      	movs	r3, #2
 800af68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af6a:	e006      	b.n	800af7a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 f949 	bl	800c206 <USBD_CtlError>
          ret = USBD_FAIL;
 800af74:	2302      	movs	r3, #2
 800af76:	75fb      	strb	r3, [r7, #23]
          break;
 800af78:	e000      	b.n	800af7c <USBD_CDC_Setup+0x12c>
          break;
 800af7a:	bf00      	nop
      }
      break;
 800af7c:	e006      	b.n	800af8c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 f940 	bl	800c206 <USBD_CtlError>
      ret = USBD_FAIL;
 800af86:	2302      	movs	r3, #2
 800af88:	75fb      	strb	r3, [r7, #23]
      break;
 800af8a:	bf00      	nop
  }

  return ret;
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afb0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d03a      	beq.n	800b032 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800afbc:	78fa      	ldrb	r2, [r7, #3]
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	4613      	mov	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	331c      	adds	r3, #28
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d029      	beq.n	800b026 <USBD_CDC_DataIn+0x90>
 800afd2:	78fa      	ldrb	r2, [r7, #3]
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	440b      	add	r3, r1
 800afe0:	331c      	adds	r3, #28
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	78f9      	ldrb	r1, [r7, #3]
 800afe6:	68b8      	ldr	r0, [r7, #8]
 800afe8:	460b      	mov	r3, r1
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	1a5b      	subs	r3, r3, r1
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4403      	add	r3, r0
 800aff2:	3344      	adds	r3, #68	; 0x44
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	fbb2 f1f3 	udiv	r1, r2, r3
 800affa:	fb01 f303 	mul.w	r3, r1, r3
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d110      	bne.n	800b026 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b004:	78fa      	ldrb	r2, [r7, #3]
 800b006:	6879      	ldr	r1, [r7, #4]
 800b008:	4613      	mov	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	440b      	add	r3, r1
 800b012:	331c      	adds	r3, #28
 800b014:	2200      	movs	r2, #0
 800b016:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b018:	78f9      	ldrb	r1, [r7, #3]
 800b01a:	2300      	movs	r3, #0
 800b01c:	2200      	movs	r2, #0
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f002 fc22 	bl	800d868 <USBD_LL_Transmit>
 800b024:	e003      	b.n	800b02e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	e000      	b.n	800b034 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b032:	2302      	movs	r3, #2
  }
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f002 fc4d 	bl	800d8f4 <USBD_LL_GetRxDataSize>
 800b05a:	4602      	mov	r2, r0
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00d      	beq.n	800b088 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b080:	4611      	mov	r1, r2
 800b082:	4798      	blx	r3

    return USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	e000      	b.n	800b08a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b088:	2302      	movs	r3, #2
  }
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d015      	beq.n	800b0d8 <USBD_CDC_EP0_RxReady+0x46>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0b2:	2bff      	cmp	r3, #255	; 0xff
 800b0b4:	d010      	beq.n	800b0d8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b0c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0cc:	b292      	uxth	r2, r2
 800b0ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	22ff      	movs	r2, #255	; 0xff
 800b0d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2243      	movs	r2, #67	; 0x43
 800b0f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b0f2:	4b03      	ldr	r3, [pc, #12]	; (800b100 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bc80      	pop	{r7}
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	200000d4 	.word	0x200000d4

0800b104 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2243      	movs	r2, #67	; 0x43
 800b110:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b112:	4b03      	ldr	r3, [pc, #12]	; (800b120 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	bc80      	pop	{r7}
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20000090 	.word	0x20000090

0800b124 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2243      	movs	r2, #67	; 0x43
 800b130:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b132:	4b03      	ldr	r3, [pc, #12]	; (800b140 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc80      	pop	{r7}
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	20000118 	.word	0x20000118

0800b144 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	220a      	movs	r2, #10
 800b150:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b152:	4b03      	ldr	r3, [pc, #12]	; (800b160 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	2000004c 	.word	0x2000004c

0800b164 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b16e:	2302      	movs	r3, #2
 800b170:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bc80      	pop	{r7}
 800b18e:	4770      	bx	lr

0800b190 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b1ae:	88fa      	ldrh	r2, [r7, #6]
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	371c      	adds	r7, #28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bc80      	pop	{r7}
 800b1c0:	4770      	bx	lr

0800b1c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bc80      	pop	{r7}
 800b1e6:	4770      	bx	lr

0800b1e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d017      	beq.n	800b232 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	7c1b      	ldrb	r3, [r3, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d109      	bne.n	800b21e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b210:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b214:	2101      	movs	r1, #1
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f002 fb49 	bl	800d8ae <USBD_LL_PrepareReceive>
 800b21c:	e007      	b.n	800b22e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b224:	2340      	movs	r3, #64	; 0x40
 800b226:	2101      	movs	r1, #1
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f002 fb40 	bl	800d8ae <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	e000      	b.n	800b234 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b232:	2302      	movs	r3, #2
  }
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b250:	2302      	movs	r3, #2
 800b252:	e01a      	b.n	800b28a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	79fa      	ldrb	r2, [r7, #7]
 800b280:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f002 f9be 	bl	800d604 <USBD_LL_Init>

  return USBD_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b292:	b480      	push	{r7}
 800b294:	b085      	sub	sp, #20
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d006      	beq.n	800b2b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]
 800b2b2:	e001      	b.n	800b2b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr

0800b2c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f002 f9e3 	bl	800d698 <USBD_LL_Start>

  return USBD_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr

0800b2f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00c      	beq.n	800b324 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	78fa      	ldrb	r2, [r7, #3]
 800b314:	4611      	mov	r1, r2
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	4798      	blx	r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b324:	7bfb      	ldrb	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	460b      	mov	r3, r1
 800b338:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	78fa      	ldrb	r2, [r7, #3]
 800b344:	4611      	mov	r1, r2
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3

  return USBD_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 ff11 	bl	800c18e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b37a:	461a      	mov	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b388:	f003 031f 	and.w	r3, r3, #31
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d016      	beq.n	800b3be <USBD_LL_SetupStage+0x6a>
 800b390:	2b02      	cmp	r3, #2
 800b392:	d81c      	bhi.n	800b3ce <USBD_LL_SetupStage+0x7a>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <USBD_LL_SetupStage+0x4a>
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d008      	beq.n	800b3ae <USBD_LL_SetupStage+0x5a>
 800b39c:	e017      	b.n	800b3ce <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa04 	bl	800b7b4 <USBD_StdDevReq>
      break;
 800b3ac:	e01a      	b.n	800b3e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa66 	bl	800b888 <USBD_StdItfReq>
      break;
 800b3bc:	e012      	b.n	800b3e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 faa6 	bl	800b918 <USBD_StdEPReq>
      break;
 800b3cc:	e00a      	b.n	800b3e4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f002 f9bb 	bl	800d758 <USBD_LL_StallEP>
      break;
 800b3e2:	bf00      	nop
  }

  return USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b086      	sub	sp, #24
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	60f8      	str	r0, [r7, #12]
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3fc:	7afb      	ldrb	r3, [r7, #11]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d14b      	bne.n	800b49a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b408:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b410:	2b03      	cmp	r3, #3
 800b412:	d134      	bne.n	800b47e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	68da      	ldr	r2, [r3, #12]
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d919      	bls.n	800b454 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	68da      	ldr	r2, [r3, #12]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	1ad2      	subs	r2, r2, r3
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b436:	429a      	cmp	r2, r3
 800b438:	d203      	bcs.n	800b442 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b43e:	b29b      	uxth	r3, r3
 800b440:	e002      	b.n	800b448 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b446:	b29b      	uxth	r3, r3
 800b448:	461a      	mov	r2, r3
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 ff90 	bl	800c372 <USBD_CtlContinueRx>
 800b452:	e038      	b.n	800b4c6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00a      	beq.n	800b476 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b466:	2b03      	cmp	r3, #3
 800b468:	d105      	bne.n	800b476 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 ff8d 	bl	800c396 <USBD_CtlSendStatus>
 800b47c:	e023      	b.n	800b4c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b484:	2b05      	cmp	r3, #5
 800b486:	d11e      	bne.n	800b4c6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b490:	2100      	movs	r1, #0
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f002 f960 	bl	800d758 <USBD_LL_StallEP>
 800b498:	e015      	b.n	800b4c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00d      	beq.n	800b4c2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d108      	bne.n	800b4c2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	7afa      	ldrb	r2, [r7, #11]
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	4798      	blx	r3
 800b4c0:	e001      	b.n	800b4c6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	e000      	b.n	800b4c8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d17f      	bne.n	800b5e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3314      	adds	r3, #20
 800b4e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d15c      	bne.n	800b5ae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	68da      	ldr	r2, [r3, #12]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d915      	bls.n	800b52c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	68da      	ldr	r2, [r3, #12]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	1ad2      	subs	r2, r2, r3
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	b29b      	uxth	r3, r3
 800b514:	461a      	mov	r2, r3
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 fefa 	bl	800c312 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f002 f9c2 	bl	800d8ae <USBD_LL_PrepareReceive>
 800b52a:	e04e      	b.n	800b5ca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	6912      	ldr	r2, [r2, #16]
 800b534:	fbb3 f1f2 	udiv	r1, r3, r2
 800b538:	fb01 f202 	mul.w	r2, r1, r2
 800b53c:	1a9b      	subs	r3, r3, r2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d11c      	bne.n	800b57c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d316      	bcc.n	800b57c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b558:	429a      	cmp	r2, r3
 800b55a:	d20f      	bcs.n	800b57c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b55c:	2200      	movs	r2, #0
 800b55e:	2100      	movs	r1, #0
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 fed6 	bl	800c312 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b56e:	2300      	movs	r3, #0
 800b570:	2200      	movs	r2, #0
 800b572:	2100      	movs	r1, #0
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f002 f99a 	bl	800d8ae <USBD_LL_PrepareReceive>
 800b57a:	e026      	b.n	800b5ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00a      	beq.n	800b59e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d105      	bne.n	800b59e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b59e:	2180      	movs	r1, #128	; 0x80
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f002 f8d9 	bl	800d758 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 ff08 	bl	800c3bc <USBD_CtlReceiveStatus>
 800b5ac:	e00d      	b.n	800b5ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d004      	beq.n	800b5c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d103      	bne.n	800b5ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b5c2:	2180      	movs	r1, #128	; 0x80
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f002 f8c7 	bl	800d758 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d11d      	bne.n	800b610 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff fe81 	bl	800b2dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b5e2:	e015      	b.n	800b610 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00d      	beq.n	800b60c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d108      	bne.n	800b60c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	7afa      	ldrb	r2, [r7, #11]
 800b604:	4611      	mov	r1, r2
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	4798      	blx	r3
 800b60a:	e001      	b.n	800b610 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b60c:	2302      	movs	r3, #2
 800b60e:	e000      	b.n	800b612 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	2200      	movs	r2, #0
 800b626:	2100      	movs	r1, #0
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f002 f850 	bl	800d6ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2240      	movs	r2, #64	; 0x40
 800b63a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b63e:	2340      	movs	r3, #64	; 0x40
 800b640:	2200      	movs	r2, #0
 800b642:	2180      	movs	r1, #128	; 0x80
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f002 f842 	bl	800d6ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2240      	movs	r2, #64	; 0x40
 800b654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	6852      	ldr	r2, [r2, #4]
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	4611      	mov	r1, r2
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	4798      	blx	r3
  }

  return USBD_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bc80      	pop	{r7}
 800b6b8:	4770      	bx	lr

0800b6ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2204      	movs	r2, #4
 800b6d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bc80      	pop	{r7}
 800b6e0:	4770      	bx	lr

0800b6e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f0:	2b04      	cmp	r3, #4
 800b6f2:	d105      	bne.n	800b700 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	bc80      	pop	{r7}
 800b70a:	4770      	bx	lr

0800b70c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d10b      	bne.n	800b736 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr

0800b758 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bc80      	pop	{r7}
 800b76e:	4770      	bx	lr

0800b770 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	bc80      	pop	{r7}
 800b782:	4770      	bx	lr

0800b784 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6852      	ldr	r2, [r2, #4]
 800b7a0:	b2d2      	uxtb	r2, r2
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3

  return USBD_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7ca:	2b40      	cmp	r3, #64	; 0x40
 800b7cc:	d005      	beq.n	800b7da <USBD_StdDevReq+0x26>
 800b7ce:	2b40      	cmp	r3, #64	; 0x40
 800b7d0:	d84f      	bhi.n	800b872 <USBD_StdDevReq+0xbe>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <USBD_StdDevReq+0x36>
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d14b      	bne.n	800b872 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	4798      	blx	r3
      break;
 800b7e8:	e048      	b.n	800b87c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	785b      	ldrb	r3, [r3, #1]
 800b7ee:	2b09      	cmp	r3, #9
 800b7f0:	d839      	bhi.n	800b866 <USBD_StdDevReq+0xb2>
 800b7f2:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <USBD_StdDevReq+0x44>)
 800b7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f8:	0800b849 	.word	0x0800b849
 800b7fc:	0800b85d 	.word	0x0800b85d
 800b800:	0800b867 	.word	0x0800b867
 800b804:	0800b853 	.word	0x0800b853
 800b808:	0800b867 	.word	0x0800b867
 800b80c:	0800b82b 	.word	0x0800b82b
 800b810:	0800b821 	.word	0x0800b821
 800b814:	0800b867 	.word	0x0800b867
 800b818:	0800b83f 	.word	0x0800b83f
 800b81c:	0800b835 	.word	0x0800b835
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f9dc 	bl	800bbe0 <USBD_GetDescriptor>
          break;
 800b828:	e022      	b.n	800b870 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fb3f 	bl	800beb0 <USBD_SetAddress>
          break;
 800b832:	e01d      	b.n	800b870 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fb7e 	bl	800bf38 <USBD_SetConfig>
          break;
 800b83c:	e018      	b.n	800b870 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fc07 	bl	800c054 <USBD_GetConfig>
          break;
 800b846:	e013      	b.n	800b870 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fc37 	bl	800c0be <USBD_GetStatus>
          break;
 800b850:	e00e      	b.n	800b870 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fc65 	bl	800c124 <USBD_SetFeature>
          break;
 800b85a:	e009      	b.n	800b870 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fc74 	bl	800c14c <USBD_ClrFeature>
          break;
 800b864:	e004      	b.n	800b870 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fccc 	bl	800c206 <USBD_CtlError>
          break;
 800b86e:	bf00      	nop
      }
      break;
 800b870:	e004      	b.n	800b87c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fcc6 	bl	800c206 <USBD_CtlError>
      break;
 800b87a:	bf00      	nop
  }

  return ret;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop

0800b888 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b89e:	2b40      	cmp	r3, #64	; 0x40
 800b8a0:	d005      	beq.n	800b8ae <USBD_StdItfReq+0x26>
 800b8a2:	2b40      	cmp	r3, #64	; 0x40
 800b8a4:	d82e      	bhi.n	800b904 <USBD_StdItfReq+0x7c>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <USBD_StdItfReq+0x26>
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	d12a      	bne.n	800b904 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d81d      	bhi.n	800b8f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	889b      	ldrh	r3, [r3, #4]
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d813      	bhi.n	800b8ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	88db      	ldrh	r3, [r3, #6]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d110      	bne.n	800b900 <USBD_StdItfReq+0x78>
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10d      	bne.n	800b900 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fd56 	bl	800c396 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8ea:	e009      	b.n	800b900 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fc89 	bl	800c206 <USBD_CtlError>
          break;
 800b8f4:	e004      	b.n	800b900 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fc84 	bl	800c206 <USBD_CtlError>
          break;
 800b8fe:	e000      	b.n	800b902 <USBD_StdItfReq+0x7a>
          break;
 800b900:	bf00      	nop
      }
      break;
 800b902:	e004      	b.n	800b90e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fc7d 	bl	800c206 <USBD_CtlError>
      break;
 800b90c:	bf00      	nop
  }

  return USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	889b      	ldrh	r3, [r3, #4]
 800b92a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b934:	2b40      	cmp	r3, #64	; 0x40
 800b936:	d007      	beq.n	800b948 <USBD_StdEPReq+0x30>
 800b938:	2b40      	cmp	r3, #64	; 0x40
 800b93a:	f200 8146 	bhi.w	800bbca <USBD_StdEPReq+0x2b2>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00a      	beq.n	800b958 <USBD_StdEPReq+0x40>
 800b942:	2b20      	cmp	r3, #32
 800b944:	f040 8141 	bne.w	800bbca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	4798      	blx	r3
      break;
 800b956:	e13d      	b.n	800bbd4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b960:	2b20      	cmp	r3, #32
 800b962:	d10a      	bne.n	800b97a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	4798      	blx	r3
 800b972:	4603      	mov	r3, r0
 800b974:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	e12d      	b.n	800bbd6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	785b      	ldrb	r3, [r3, #1]
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d007      	beq.n	800b992 <USBD_StdEPReq+0x7a>
 800b982:	2b03      	cmp	r3, #3
 800b984:	f300 811b 	bgt.w	800bbbe <USBD_StdEPReq+0x2a6>
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d072      	beq.n	800ba72 <USBD_StdEPReq+0x15a>
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d03a      	beq.n	800ba06 <USBD_StdEPReq+0xee>
 800b990:	e115      	b.n	800bbbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d002      	beq.n	800b9a2 <USBD_StdEPReq+0x8a>
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d015      	beq.n	800b9cc <USBD_StdEPReq+0xb4>
 800b9a0:	e02b      	b.n	800b9fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00c      	beq.n	800b9c2 <USBD_StdEPReq+0xaa>
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b80      	cmp	r3, #128	; 0x80
 800b9ac:	d009      	beq.n	800b9c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 fed0 	bl	800d758 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b9b8:	2180      	movs	r1, #128	; 0x80
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 fecc 	bl	800d758 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9c0:	e020      	b.n	800ba04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fc1e 	bl	800c206 <USBD_CtlError>
              break;
 800b9ca:	e01b      	b.n	800ba04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	885b      	ldrh	r3, [r3, #2]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10e      	bne.n	800b9f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00b      	beq.n	800b9f2 <USBD_StdEPReq+0xda>
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	2b80      	cmp	r3, #128	; 0x80
 800b9de:	d008      	beq.n	800b9f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	88db      	ldrh	r3, [r3, #6]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d104      	bne.n	800b9f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 feb3 	bl	800d758 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fccf 	bl	800c396 <USBD_CtlSendStatus>

              break;
 800b9f8:	e004      	b.n	800ba04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fc02 	bl	800c206 <USBD_CtlError>
              break;
 800ba02:	bf00      	nop
          }
          break;
 800ba04:	e0e0      	b.n	800bbc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d002      	beq.n	800ba16 <USBD_StdEPReq+0xfe>
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d015      	beq.n	800ba40 <USBD_StdEPReq+0x128>
 800ba14:	e026      	b.n	800ba64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00c      	beq.n	800ba36 <USBD_StdEPReq+0x11e>
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	2b80      	cmp	r3, #128	; 0x80
 800ba20:	d009      	beq.n	800ba36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f001 fe96 	bl	800d758 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba2c:	2180      	movs	r1, #128	; 0x80
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 fe92 	bl	800d758 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba34:	e01c      	b.n	800ba70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fbe4 	bl	800c206 <USBD_CtlError>
              break;
 800ba3e:	e017      	b.n	800ba70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	885b      	ldrh	r3, [r3, #2]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d112      	bne.n	800ba6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d004      	beq.n	800ba5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fe9d 	bl	800d796 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fc9a 	bl	800c396 <USBD_CtlSendStatus>
              }
              break;
 800ba62:	e004      	b.n	800ba6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fbcd 	bl	800c206 <USBD_CtlError>
              break;
 800ba6c:	e000      	b.n	800ba70 <USBD_StdEPReq+0x158>
              break;
 800ba6e:	bf00      	nop
          }
          break;
 800ba70:	e0aa      	b.n	800bbc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d002      	beq.n	800ba82 <USBD_StdEPReq+0x16a>
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d032      	beq.n	800bae6 <USBD_StdEPReq+0x1ce>
 800ba80:	e097      	b.n	800bbb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d007      	beq.n	800ba98 <USBD_StdEPReq+0x180>
 800ba88:	7bbb      	ldrb	r3, [r7, #14]
 800ba8a:	2b80      	cmp	r3, #128	; 0x80
 800ba8c:	d004      	beq.n	800ba98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fbb8 	bl	800c206 <USBD_CtlError>
                break;
 800ba96:	e091      	b.n	800bbbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	da0b      	bge.n	800bab8 <USBD_StdEPReq+0x1a0>
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	3310      	adds	r3, #16
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	4413      	add	r3, r2
 800bab4:	3304      	adds	r3, #4
 800bab6:	e00b      	b.n	800bad0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
 800baba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	3304      	adds	r3, #4
 800bad0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2202      	movs	r2, #2
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fbfb 	bl	800c2da <USBD_CtlSendData>
              break;
 800bae4:	e06a      	b.n	800bbbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baea:	2b00      	cmp	r3, #0
 800baec:	da11      	bge.n	800bb12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	f003 020f 	and.w	r2, r3, #15
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	440b      	add	r3, r1
 800bb00:	3318      	adds	r3, #24
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d117      	bne.n	800bb38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fb7b 	bl	800c206 <USBD_CtlError>
                  break;
 800bb10:	e054      	b.n	800bbbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	f003 020f 	and.w	r2, r3, #15
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	440b      	add	r3, r1
 800bb24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d104      	bne.n	800bb38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fb68 	bl	800c206 <USBD_CtlError>
                  break;
 800bb36:	e041      	b.n	800bbbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	da0b      	bge.n	800bb58 <USBD_StdEPReq+0x240>
 800bb40:	7bbb      	ldrb	r3, [r7, #14]
 800bb42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb46:	4613      	mov	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	3310      	adds	r3, #16
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	3304      	adds	r3, #4
 800bb56:	e00b      	b.n	800bb70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb5e:	4613      	mov	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	3304      	adds	r3, #4
 800bb70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <USBD_StdEPReq+0x266>
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	2b80      	cmp	r3, #128	; 0x80
 800bb7c:	d103      	bne.n	800bb86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2200      	movs	r2, #0
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	e00e      	b.n	800bba4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 fe22 	bl	800d7d4 <USBD_LL_IsStallEP>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d003      	beq.n	800bb9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	e002      	b.n	800bba4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2200      	movs	r2, #0
 800bba2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2202      	movs	r2, #2
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb95 	bl	800c2da <USBD_CtlSendData>
              break;
 800bbb0:	e004      	b.n	800bbbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fb26 	bl	800c206 <USBD_CtlError>
              break;
 800bbba:	bf00      	nop
          }
          break;
 800bbbc:	e004      	b.n	800bbc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fb20 	bl	800c206 <USBD_CtlError>
          break;
 800bbc6:	bf00      	nop
      }
      break;
 800bbc8:	e004      	b.n	800bbd4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fb1a 	bl	800c206 <USBD_CtlError>
      break;
 800bbd2:	bf00      	nop
  }

  return ret;
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbea:	2300      	movs	r3, #0
 800bbec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	885b      	ldrh	r3, [r3, #2]
 800bbfa:	0a1b      	lsrs	r3, r3, #8
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	2b06      	cmp	r3, #6
 800bc02:	f200 8128 	bhi.w	800be56 <USBD_GetDescriptor+0x276>
 800bc06:	a201      	add	r2, pc, #4	; (adr r2, 800bc0c <USBD_GetDescriptor+0x2c>)
 800bc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0c:	0800bc29 	.word	0x0800bc29
 800bc10:	0800bc41 	.word	0x0800bc41
 800bc14:	0800bc81 	.word	0x0800bc81
 800bc18:	0800be57 	.word	0x0800be57
 800bc1c:	0800be57 	.word	0x0800be57
 800bc20:	0800bdf7 	.word	0x0800bdf7
 800bc24:	0800be23 	.word	0x0800be23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	7c12      	ldrb	r2, [r2, #16]
 800bc34:	f107 0108 	add.w	r1, r7, #8
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4798      	blx	r3
 800bc3c:	60f8      	str	r0, [r7, #12]
      break;
 800bc3e:	e112      	b.n	800be66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	7c1b      	ldrb	r3, [r3, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10d      	bne.n	800bc64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc50:	f107 0208 	add.w	r2, r7, #8
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
 800bc58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	2202      	movs	r2, #2
 800bc60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc62:	e100      	b.n	800be66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	f107 0208 	add.w	r2, r7, #8
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	701a      	strb	r2, [r3, #0]
      break;
 800bc7e:	e0f2      	b.n	800be66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	885b      	ldrh	r3, [r3, #2]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b05      	cmp	r3, #5
 800bc88:	f200 80ac 	bhi.w	800bde4 <USBD_GetDescriptor+0x204>
 800bc8c:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <USBD_GetDescriptor+0xb4>)
 800bc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc92:	bf00      	nop
 800bc94:	0800bcad 	.word	0x0800bcad
 800bc98:	0800bce1 	.word	0x0800bce1
 800bc9c:	0800bd15 	.word	0x0800bd15
 800bca0:	0800bd49 	.word	0x0800bd49
 800bca4:	0800bd7d 	.word	0x0800bd7d
 800bca8:	0800bdb1 	.word	0x0800bdb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00b      	beq.n	800bcd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	7c12      	ldrb	r2, [r2, #16]
 800bcc4:	f107 0108 	add.w	r1, r7, #8
 800bcc8:	4610      	mov	r0, r2
 800bcca:	4798      	blx	r3
 800bccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcce:	e091      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fa97 	bl	800c206 <USBD_CtlError>
            err++;
 800bcd8:	7afb      	ldrb	r3, [r7, #11]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcde:	e089      	b.n	800bdf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	7c12      	ldrb	r2, [r2, #16]
 800bcf8:	f107 0108 	add.w	r1, r7, #8
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	4798      	blx	r3
 800bd00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd02:	e077      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fa7d 	bl	800c206 <USBD_CtlError>
            err++;
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	72fb      	strb	r3, [r7, #11]
          break;
 800bd12:	e06f      	b.n	800bdf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00b      	beq.n	800bd38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	7c12      	ldrb	r2, [r2, #16]
 800bd2c:	f107 0108 	add.w	r1, r7, #8
 800bd30:	4610      	mov	r0, r2
 800bd32:	4798      	blx	r3
 800bd34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd36:	e05d      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fa63 	bl	800c206 <USBD_CtlError>
            err++;
 800bd40:	7afb      	ldrb	r3, [r7, #11]
 800bd42:	3301      	adds	r3, #1
 800bd44:	72fb      	strb	r3, [r7, #11]
          break;
 800bd46:	e055      	b.n	800bdf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7c12      	ldrb	r2, [r2, #16]
 800bd60:	f107 0108 	add.w	r1, r7, #8
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
 800bd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd6a:	e043      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa49 	bl	800c206 <USBD_CtlError>
            err++;
 800bd74:	7afb      	ldrb	r3, [r7, #11]
 800bd76:	3301      	adds	r3, #1
 800bd78:	72fb      	strb	r3, [r7, #11]
          break;
 800bd7a:	e03b      	b.n	800bdf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00b      	beq.n	800bda0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	7c12      	ldrb	r2, [r2, #16]
 800bd94:	f107 0108 	add.w	r1, r7, #8
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
 800bd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd9e:	e029      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fa2f 	bl	800c206 <USBD_CtlError>
            err++;
 800bda8:	7afb      	ldrb	r3, [r7, #11]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	72fb      	strb	r3, [r7, #11]
          break;
 800bdae:	e021      	b.n	800bdf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	7c12      	ldrb	r2, [r2, #16]
 800bdc8:	f107 0108 	add.w	r1, r7, #8
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdd2:	e00f      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa15 	bl	800c206 <USBD_CtlError>
            err++;
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	3301      	adds	r3, #1
 800bde0:	72fb      	strb	r3, [r7, #11]
          break;
 800bde2:	e007      	b.n	800bdf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fa0d 	bl	800c206 <USBD_CtlError>
          err++;
 800bdec:	7afb      	ldrb	r3, [r7, #11]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bdf2:	e038      	b.n	800be66 <USBD_GetDescriptor+0x286>
 800bdf4:	e037      	b.n	800be66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7c1b      	ldrb	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d109      	bne.n	800be12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be06:	f107 0208 	add.w	r2, r7, #8
 800be0a:	4610      	mov	r0, r2
 800be0c:	4798      	blx	r3
 800be0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be10:	e029      	b.n	800be66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f9f6 	bl	800c206 <USBD_CtlError>
        err++;
 800be1a:	7afb      	ldrb	r3, [r7, #11]
 800be1c:	3301      	adds	r3, #1
 800be1e:	72fb      	strb	r3, [r7, #11]
      break;
 800be20:	e021      	b.n	800be66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7c1b      	ldrb	r3, [r3, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10d      	bne.n	800be46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	f107 0208 	add.w	r2, r7, #8
 800be36:	4610      	mov	r0, r2
 800be38:	4798      	blx	r3
 800be3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3301      	adds	r3, #1
 800be40:	2207      	movs	r2, #7
 800be42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be44:	e00f      	b.n	800be66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f9dc 	bl	800c206 <USBD_CtlError>
        err++;
 800be4e:	7afb      	ldrb	r3, [r7, #11]
 800be50:	3301      	adds	r3, #1
 800be52:	72fb      	strb	r3, [r7, #11]
      break;
 800be54:	e007      	b.n	800be66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f9d4 	bl	800c206 <USBD_CtlError>
      err++;
 800be5e:	7afb      	ldrb	r3, [r7, #11]
 800be60:	3301      	adds	r3, #1
 800be62:	72fb      	strb	r3, [r7, #11]
      break;
 800be64:	bf00      	nop
  }

  if (err != 0U)
 800be66:	7afb      	ldrb	r3, [r7, #11]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d11c      	bne.n	800bea6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be6c:	893b      	ldrh	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d011      	beq.n	800be96 <USBD_GetDescriptor+0x2b6>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	88db      	ldrh	r3, [r3, #6]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00d      	beq.n	800be96 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	88da      	ldrh	r2, [r3, #6]
 800be7e:	893b      	ldrh	r3, [r7, #8]
 800be80:	4293      	cmp	r3, r2
 800be82:	bf28      	it	cs
 800be84:	4613      	movcs	r3, r2
 800be86:	b29b      	uxth	r3, r3
 800be88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be8a:	893b      	ldrh	r3, [r7, #8]
 800be8c:	461a      	mov	r2, r3
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fa22 	bl	800c2da <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	88db      	ldrh	r3, [r3, #6]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fa79 	bl	800c396 <USBD_CtlSendStatus>
 800bea4:	e000      	b.n	800bea8 <USBD_GetDescriptor+0x2c8>
    return;
 800bea6:	bf00      	nop
    }
  }
}
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop

0800beb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	889b      	ldrh	r3, [r3, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d130      	bne.n	800bf24 <USBD_SetAddress+0x74>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	88db      	ldrh	r3, [r3, #6]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d12c      	bne.n	800bf24 <USBD_SetAddress+0x74>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	885b      	ldrh	r3, [r3, #2]
 800bece:	2b7f      	cmp	r3, #127	; 0x7f
 800bed0:	d828      	bhi.n	800bf24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	885b      	ldrh	r3, [r3, #2]
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bedc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d104      	bne.n	800bef2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f98b 	bl	800c206 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bef0:	e01d      	b.n	800bf2e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	7bfa      	ldrb	r2, [r7, #15]
 800bef6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f001 fc93 	bl	800d82a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fa46 	bl	800c396 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d004      	beq.n	800bf1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2202      	movs	r2, #2
 800bf14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf18:	e009      	b.n	800bf2e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf22:	e004      	b.n	800bf2e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f96d 	bl	800c206 <USBD_CtlError>
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	885b      	ldrh	r3, [r3, #2]
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	4b41      	ldr	r3, [pc, #260]	; (800c050 <USBD_SetConfig+0x118>)
 800bf4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf4c:	4b40      	ldr	r3, [pc, #256]	; (800c050 <USBD_SetConfig+0x118>)
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d904      	bls.n	800bf5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f955 	bl	800c206 <USBD_CtlError>
 800bf5c:	e075      	b.n	800c04a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d002      	beq.n	800bf6e <USBD_SetConfig+0x36>
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d023      	beq.n	800bfb4 <USBD_SetConfig+0x7c>
 800bf6c:	e062      	b.n	800c034 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf6e:	4b38      	ldr	r3, [pc, #224]	; (800c050 <USBD_SetConfig+0x118>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d01a      	beq.n	800bfac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bf76:	4b36      	ldr	r3, [pc, #216]	; (800c050 <USBD_SetConfig+0x118>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2203      	movs	r2, #3
 800bf84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf88:	4b31      	ldr	r3, [pc, #196]	; (800c050 <USBD_SetConfig+0x118>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff f9ae 	bl	800b2f0 <USBD_SetClassConfig>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d104      	bne.n	800bfa4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 f932 	bl	800c206 <USBD_CtlError>
            return;
 800bfa2:	e052      	b.n	800c04a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f9f6 	bl	800c396 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfaa:	e04e      	b.n	800c04a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f9f2 	bl	800c396 <USBD_CtlSendStatus>
        break;
 800bfb2:	e04a      	b.n	800c04a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfb4:	4b26      	ldr	r3, [pc, #152]	; (800c050 <USBD_SetConfig+0x118>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d112      	bne.n	800bfe2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bfc4:	4b22      	ldr	r3, [pc, #136]	; (800c050 <USBD_SetConfig+0x118>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bfce:	4b20      	ldr	r3, [pc, #128]	; (800c050 <USBD_SetConfig+0x118>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff f9aa 	bl	800b32e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f9db 	bl	800c396 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfe0:	e033      	b.n	800c04a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bfe2:	4b1b      	ldr	r3, [pc, #108]	; (800c050 <USBD_SetConfig+0x118>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d01d      	beq.n	800c02c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7ff f998 	bl	800b32e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bffe:	4b14      	ldr	r3, [pc, #80]	; (800c050 <USBD_SetConfig+0x118>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c008:	4b11      	ldr	r3, [pc, #68]	; (800c050 <USBD_SetConfig+0x118>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff f96e 	bl	800b2f0 <USBD_SetClassConfig>
 800c014:	4603      	mov	r3, r0
 800c016:	2b02      	cmp	r3, #2
 800c018:	d104      	bne.n	800c024 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f8f2 	bl	800c206 <USBD_CtlError>
            return;
 800c022:	e012      	b.n	800c04a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f9b6 	bl	800c396 <USBD_CtlSendStatus>
        break;
 800c02a:	e00e      	b.n	800c04a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f9b2 	bl	800c396 <USBD_CtlSendStatus>
        break;
 800c032:	e00a      	b.n	800c04a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f8e5 	bl	800c206 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c03c:	4b04      	ldr	r3, [pc, #16]	; (800c050 <USBD_SetConfig+0x118>)
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff f973 	bl	800b32e <USBD_ClrClassConfig>
        break;
 800c048:	bf00      	nop
    }
  }
}
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	2000071c 	.word	0x2000071c

0800c054 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	88db      	ldrh	r3, [r3, #6]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d004      	beq.n	800c070 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f8cc 	bl	800c206 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c06e:	e022      	b.n	800c0b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c076:	2b02      	cmp	r3, #2
 800c078:	dc02      	bgt.n	800c080 <USBD_GetConfig+0x2c>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dc03      	bgt.n	800c086 <USBD_GetConfig+0x32>
 800c07e:	e015      	b.n	800c0ac <USBD_GetConfig+0x58>
 800c080:	2b03      	cmp	r3, #3
 800c082:	d00b      	beq.n	800c09c <USBD_GetConfig+0x48>
 800c084:	e012      	b.n	800c0ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3308      	adds	r3, #8
 800c090:	2201      	movs	r2, #1
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f920 	bl	800c2da <USBD_CtlSendData>
        break;
 800c09a:	e00c      	b.n	800c0b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f918 	bl	800c2da <USBD_CtlSendData>
        break;
 800c0aa:	e004      	b.n	800c0b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f8a9 	bl	800c206 <USBD_CtlError>
        break;
 800c0b4:	bf00      	nop
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d81e      	bhi.n	800c112 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	88db      	ldrh	r3, [r3, #6]
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d004      	beq.n	800c0e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f891 	bl	800c206 <USBD_CtlError>
        break;
 800c0e4:	e01a      	b.n	800c11c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d005      	beq.n	800c102 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f043 0202 	orr.w	r2, r3, #2
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	330c      	adds	r3, #12
 800c106:	2202      	movs	r2, #2
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f8e5 	bl	800c2da <USBD_CtlSendData>
      break;
 800c110:	e004      	b.n	800c11c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f876 	bl	800c206 <USBD_CtlError>
      break;
 800c11a:	bf00      	nop
  }
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	885b      	ldrh	r3, [r3, #2]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d106      	bne.n	800c144 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f929 	bl	800c396 <USBD_CtlSendStatus>
  }
}
 800c144:	bf00      	nop
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c15c:	3b01      	subs	r3, #1
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d80b      	bhi.n	800c17a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	885b      	ldrh	r3, [r3, #2]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d10c      	bne.n	800c184 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f90f 	bl	800c396 <USBD_CtlSendStatus>
      }
      break;
 800c178:	e004      	b.n	800c184 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f842 	bl	800c206 <USBD_CtlError>
      break;
 800c182:	e000      	b.n	800c186 <USBD_ClrFeature+0x3a>
      break;
 800c184:	bf00      	nop
  }
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781a      	ldrb	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	785a      	ldrb	r2, [r3, #1]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	3303      	adds	r3, #3
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	021b      	lsls	r3, r3, #8
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	4413      	add	r3, r2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	3305      	adds	r3, #5
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	021b      	lsls	r3, r3, #8
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	4413      	add	r3, r2
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	3306      	adds	r3, #6
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	3307      	adds	r3, #7
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	021b      	lsls	r3, r3, #8
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	4413      	add	r3, r2
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	80da      	strh	r2, [r3, #6]

}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	bc80      	pop	{r7}
 800c204:	4770      	bx	lr

0800c206 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c210:	2180      	movs	r1, #128	; 0x80
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 faa0 	bl	800d758 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c218:	2100      	movs	r1, #0
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f001 fa9c 	bl	800d758 <USBD_LL_StallEP>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c234:	2300      	movs	r3, #0
 800c236:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d032      	beq.n	800c2a4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 f834 	bl	800c2ac <USBD_GetLen>
 800c244:	4603      	mov	r3, r0
 800c246:	3301      	adds	r3, #1
 800c248:	b29b      	uxth	r3, r3
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	75fa      	strb	r2, [r7, #23]
 800c258:	461a      	mov	r2, r3
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	4413      	add	r3, r2
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	7812      	ldrb	r2, [r2, #0]
 800c262:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	75fa      	strb	r2, [r7, #23]
 800c26a:	461a      	mov	r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4413      	add	r3, r2
 800c270:	2203      	movs	r2, #3
 800c272:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c274:	e012      	b.n	800c29c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	60fa      	str	r2, [r7, #12]
 800c27c:	7dfa      	ldrb	r2, [r7, #23]
 800c27e:	1c51      	adds	r1, r2, #1
 800c280:	75f9      	strb	r1, [r7, #23]
 800c282:	4611      	mov	r1, r2
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	440a      	add	r2, r1
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	1c5a      	adds	r2, r3, #1
 800c290:	75fa      	strb	r2, [r7, #23]
 800c292:	461a      	mov	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	4413      	add	r3, r2
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e8      	bne.n	800c276 <USBD_GetString+0x4e>
    }
  }
}
 800c2a4:	bf00      	nop
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c2b8:	e005      	b.n	800c2c6 <USBD_GetLen+0x1a>
  {
    len++;
 800c2ba:	7bfb      	ldrb	r3, [r7, #15]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1f5      	bne.n	800c2ba <USBD_GetLen+0xe>
  }

  return len;
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bc80      	pop	{r7}
 800c2d8:	4770      	bx	lr

0800c2da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2f0:	88fa      	ldrh	r2, [r7, #6]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c2f6:	88fa      	ldrh	r2, [r7, #6]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	2100      	movs	r1, #0
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f001 fab0 	bl	800d868 <USBD_LL_Transmit>

  return USBD_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	60b9      	str	r1, [r7, #8]
 800c31c:	4613      	mov	r3, r2
 800c31e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	2100      	movs	r1, #0
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f001 fa9e 	bl	800d868 <USBD_LL_Transmit>

  return USBD_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	4613      	mov	r3, r2
 800c342:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2203      	movs	r2, #3
 800c348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c34c:	88fa      	ldrh	r2, [r7, #6]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c354:	88fa      	ldrh	r2, [r7, #6]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	2100      	movs	r1, #0
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f001 faa3 	bl	800d8ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	4613      	mov	r3, r2
 800c37e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	2100      	movs	r1, #0
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f001 fa91 	bl	800d8ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b082      	sub	sp, #8
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2204      	movs	r2, #4
 800c3a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f001 fa5b 	bl	800d868 <USBD_LL_Transmit>

  return USBD_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2205      	movs	r2, #5
 800c3c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f001 fa6b 	bl	800d8ae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c3fc:	7a5b      	ldrb	r3, [r3, #9]
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b01      	cmp	r3, #1
 800c402:	d831      	bhi.n	800c468 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c404:	4b1b      	ldr	r3, [pc, #108]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c406:	7a5b      	ldrb	r3, [r3, #9]
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	461a      	mov	r2, r3
 800c40c:	4b19      	ldr	r3, [pc, #100]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c40e:	2100      	movs	r1, #0
 800c410:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c412:	4b18      	ldr	r3, [pc, #96]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c414:	7a5b      	ldrb	r3, [r3, #9]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	4a16      	ldr	r2, [pc, #88]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c422:	4b14      	ldr	r3, [pc, #80]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c424:	7a5b      	ldrb	r3, [r3, #9]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	4b12      	ldr	r3, [pc, #72]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c42c:	4413      	add	r3, r2
 800c42e:	79fa      	ldrb	r2, [r7, #7]
 800c430:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c432:	4b10      	ldr	r3, [pc, #64]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c434:	7a5b      	ldrb	r3, [r3, #9]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	b2d1      	uxtb	r1, r2
 800c43c:	4a0d      	ldr	r2, [pc, #52]	; (800c474 <FATFS_LinkDriverEx+0x90>)
 800c43e:	7251      	strb	r1, [r2, #9]
 800c440:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c442:	7dbb      	ldrb	r3, [r7, #22]
 800c444:	3330      	adds	r3, #48	; 0x30
 800c446:	b2da      	uxtb	r2, r3
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	3301      	adds	r3, #1
 800c450:	223a      	movs	r2, #58	; 0x3a
 800c452:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	3302      	adds	r3, #2
 800c458:	222f      	movs	r2, #47	; 0x2f
 800c45a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	3303      	adds	r3, #3
 800c460:	2200      	movs	r2, #0
 800c462:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c468:	7dfb      	ldrb	r3, [r7, #23]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bc80      	pop	{r7}
 800c472:	4770      	bx	lr
 800c474:	20000720 	.word	0x20000720

0800c478 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c482:	2200      	movs	r2, #0
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff ffac 	bl	800c3e4 <FATFS_LinkDriverEx>
 800c48c:	4603      	mov	r3, r0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c4a2:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <SD_initialize+0x38>)
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800c4a8:	f7fe fb94 	bl	800abd4 <BSP_SD_Init>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d107      	bne.n	800c4c2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c4b2:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <SD_initialize+0x38>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	f023 0301 	bic.w	r3, r3, #1
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <SD_initialize+0x38>)
 800c4c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c4c2:	4b03      	ldr	r3, [pc, #12]	; (800c4d0 <SD_initialize+0x38>)
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	b2db      	uxtb	r3, r3
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	2000015b 	.word	0x2000015b

0800c4d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c4de:	4b0b      	ldr	r3, [pc, #44]	; (800c50c <SD_status+0x38>)
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c4e4:	f7fe fbd8 	bl	800ac98 <BSP_SD_GetCardState>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d107      	bne.n	800c4fe <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c4ee:	4b07      	ldr	r3, [pc, #28]	; (800c50c <SD_status+0x38>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	f023 0301 	bic.w	r3, r3, #1
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	4b04      	ldr	r3, [pc, #16]	; (800c50c <SD_status+0x38>)
 800c4fc:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c4fe:	4b03      	ldr	r3, [pc, #12]	; (800c50c <SD_status+0x38>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
}
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	2000015b 	.word	0x2000015b

0800c510 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	607a      	str	r2, [r7, #4]
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c524:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <SD_read+0x54>)
 800c526:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800c528:	4b0f      	ldr	r3, [pc, #60]	; (800c568 <SD_read+0x58>)
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	68b8      	ldr	r0, [r7, #8]
 800c530:	f7fe fb76 	bl	800ac20 <BSP_SD_ReadBlocks>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10e      	bne.n	800c558 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c53a:	e006      	b.n	800c54a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	1e5a      	subs	r2, r3, #1
 800c540:	613a      	str	r2, [r7, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <SD_read+0x3a>
      {
        return RES_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e007      	b.n	800c55a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c54a:	f7fe fba5 	bl	800ac98 <BSP_SD_GetCardState>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1f3      	bne.n	800c53c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c558:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3718      	adds	r7, #24
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	000186a0 	.word	0x000186a0
 800c568:	05f5e100 	.word	0x05f5e100

0800c56c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	4603      	mov	r3, r0
 800c57a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c580:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <SD_write+0x54>)
 800c582:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800c584:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <SD_write+0x58>)
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	6879      	ldr	r1, [r7, #4]
 800c58a:	68b8      	ldr	r0, [r7, #8]
 800c58c:	f7fe fb66 	bl	800ac5c <BSP_SD_WriteBlocks>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10e      	bne.n	800c5b4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c596:	e006      	b.n	800c5a6 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	1e5a      	subs	r2, r3, #1
 800c59c:	613a      	str	r2, [r7, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <SD_write+0x3a>
      {
        return RES_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e007      	b.n	800c5b6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c5a6:	f7fe fb77 	bl	800ac98 <BSP_SD_GetCardState>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1f3      	bne.n	800c598 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	000186a0 	.word	0x000186a0
 800c5c4:	05f5e100 	.word	0x05f5e100

0800c5c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08c      	sub	sp, #48	; 0x30
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	603a      	str	r2, [r7, #0]
 800c5d2:	71fb      	strb	r3, [r7, #7]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c5de:	4b24      	ldr	r3, [pc, #144]	; (800c670 <SD_ioctl+0xa8>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <SD_ioctl+0x28>
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e03b      	b.n	800c668 <SD_ioctl+0xa0>
  
  switch (cmd)
 800c5f0:	79bb      	ldrb	r3, [r7, #6]
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d833      	bhi.n	800c65e <SD_ioctl+0x96>
 800c5f6:	a201      	add	r2, pc, #4	; (adr r2, 800c5fc <SD_ioctl+0x34>)
 800c5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fc:	0800c60d 	.word	0x0800c60d
 800c600:	0800c615 	.word	0x0800c615
 800c604:	0800c62d 	.word	0x0800c62d
 800c608:	0800c647 	.word	0x0800c647
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c612:	e027      	b.n	800c664 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c614:	f107 030c 	add.w	r3, r7, #12
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fb4d 	bl	800acb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c62a:	e01b      	b.n	800c664 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c62c:	f107 030c 	add.w	r3, r7, #12
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fb41 	bl	800acb8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c638:	b29a      	uxth	r2, r3
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c644:	e00e      	b.n	800c664 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c646:	f107 030c 	add.w	r3, r7, #12
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe fb34 	bl	800acb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c65c:	e002      	b.n	800c664 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800c65e:	2304      	movs	r3, #4
 800c660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800c664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3730      	adds	r7, #48	; 0x30
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	2000015b 	.word	0x2000015b

0800c674 <Button_IncTick>:
} ;

struct Button_Struct Button[BUTTONS];


void Button_IncTick(void){
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
	static uint8_t inc_div;
	if (inc_div) {inc_div--;}	//Входной делитель частоты опроса
 800c67a:	4bb9      	ldr	r3, [pc, #740]	; (800c960 <Button_IncTick+0x2ec>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <Button_IncTick+0x1c>
 800c682:	4bb7      	ldr	r3, [pc, #732]	; (800c960 <Button_IncTick+0x2ec>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	3b01      	subs	r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	4bb5      	ldr	r3, [pc, #724]	; (800c960 <Button_IncTick+0x2ec>)
 800c68c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 800c68e:	e186      	b.n	800c99e <Button_IncTick+0x32a>
		inc_div = DIVIDER;		//на 10
 800c690:	4bb3      	ldr	r3, [pc, #716]	; (800c960 <Button_IncTick+0x2ec>)
 800c692:	220a      	movs	r2, #10
 800c694:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800c696:	2300      	movs	r3, #0
 800c698:	71fb      	strb	r3, [r7, #7]
 800c69a:	e17c      	b.n	800c996 <Button_IncTick+0x322>
			uint8_t tmp = HAL_GPIO_ReadPin(Button[i].Port, Button[i].Pin);
 800c69c:	79fa      	ldrb	r2, [r7, #7]
 800c69e:	49b1      	ldr	r1, [pc, #708]	; (800c964 <Button_IncTick+0x2f0>)
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	440b      	add	r3, r1
 800c6aa:	6818      	ldr	r0, [r3, #0]
 800c6ac:	79fa      	ldrb	r2, [r7, #7]
 800c6ae:	49ad      	ldr	r1, [pc, #692]	; (800c964 <Button_IncTick+0x2f0>)
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	f7f6 fefe 	bl	80034c0 <HAL_GPIO_ReadPin>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	71bb      	strb	r3, [r7, #6]
			if (tmp == Button[i].PinState) {
 800c6c8:	79fa      	ldrb	r2, [r7, #7]
 800c6ca:	49a6      	ldr	r1, [pc, #664]	; (800c964 <Button_IncTick+0x2f0>)
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	3306      	adds	r3, #6
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	79ba      	ldrb	r2, [r7, #6]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d173      	bne.n	800c7c8 <Button_IncTick+0x154>
				if (Button[i].Timer) {
 800c6e0:	79fa      	ldrb	r2, [r7, #7]
 800c6e2:	49a0      	ldr	r1, [pc, #640]	; (800c964 <Button_IncTick+0x2f0>)
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	440b      	add	r3, r1
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 814c 	beq.w	800c990 <Button_IncTick+0x31c>
					Button[i].Timer++;
 800c6f8:	79fa      	ldrb	r2, [r7, #7]
 800c6fa:	499a      	ldr	r1, [pc, #616]	; (800c964 <Button_IncTick+0x2f0>)
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	440b      	add	r3, r1
 800c706:	3308      	adds	r3, #8
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	3301      	adds	r3, #1
 800c70c:	b298      	uxth	r0, r3
 800c70e:	4995      	ldr	r1, [pc, #596]	; (800c964 <Button_IncTick+0x2f0>)
 800c710:	4613      	mov	r3, r2
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	440b      	add	r3, r1
 800c71a:	3308      	adds	r3, #8
 800c71c:	4602      	mov	r2, r0
 800c71e:	801a      	strh	r2, [r3, #0]
					if(Button[i].Timer == SHORT_TIME){
 800c720:	79fa      	ldrb	r2, [r7, #7]
 800c722:	4990      	ldr	r1, [pc, #576]	; (800c964 <Button_IncTick+0x2f0>)
 800c724:	4613      	mov	r3, r2
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	4413      	add	r3, r2
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	440b      	add	r3, r1
 800c72e:	3308      	adds	r3, #8
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	2b1e      	cmp	r3, #30
 800c734:	d123      	bne.n	800c77e <Button_IncTick+0x10a>
						if ((Button[i].Event == SHORT_CLC)||(Button[i].Event == DOUBLE_CLC)){
 800c736:	79fa      	ldrb	r2, [r7, #7]
 800c738:	498a      	ldr	r1, [pc, #552]	; (800c964 <Button_IncTick+0x2f0>)
 800c73a:	4613      	mov	r3, r2
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	330a      	adds	r3, #10
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d00a      	beq.n	800c762 <Button_IncTick+0xee>
 800c74c:	79fa      	ldrb	r2, [r7, #7]
 800c74e:	4985      	ldr	r1, [pc, #532]	; (800c964 <Button_IncTick+0x2f0>)
 800c750:	4613      	mov	r3, r2
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	4413      	add	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	440b      	add	r3, r1
 800c75a:	330a      	adds	r3, #10
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d10d      	bne.n	800c77e <Button_IncTick+0x10a>
							Event_Button(i, Button[i].Event);					// отправка по таймеру
 800c762:	79fa      	ldrb	r2, [r7, #7]
 800c764:	497f      	ldr	r1, [pc, #508]	; (800c964 <Button_IncTick+0x2f0>)
 800c766:	4613      	mov	r3, r2
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	4413      	add	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	440b      	add	r3, r1
 800c770:	330a      	adds	r3, #10
 800c772:	781a      	ldrb	r2, [r3, #0]
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	4611      	mov	r1, r2
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 f917 	bl	800c9ac <Event_Button>
					if(Button[i].Timer == LONG_TIME){							// Тут мы если вместо кнопки переключатель
 800c77e:	79fa      	ldrb	r2, [r7, #7]
 800c780:	4978      	ldr	r1, [pc, #480]	; (800c964 <Button_IncTick+0x2f0>)
 800c782:	4613      	mov	r3, r2
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	440b      	add	r3, r1
 800c78c:	3308      	adds	r3, #8
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	2b50      	cmp	r3, #80	; 0x50
 800c792:	f040 80fd 	bne.w	800c990 <Button_IncTick+0x31c>
						Button[i].Event = SWITCH;
 800c796:	79fa      	ldrb	r2, [r7, #7]
 800c798:	4972      	ldr	r1, [pc, #456]	; (800c964 <Button_IncTick+0x2f0>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	440b      	add	r3, r1
 800c7a4:	330a      	adds	r3, #10
 800c7a6:	2205      	movs	r2, #5
 800c7a8:	701a      	strb	r2, [r3, #0]
						Event_Button(i, Button[i].Event);
 800c7aa:	79fa      	ldrb	r2, [r7, #7]
 800c7ac:	496d      	ldr	r1, [pc, #436]	; (800c964 <Button_IncTick+0x2f0>)
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	440b      	add	r3, r1
 800c7b8:	330a      	adds	r3, #10
 800c7ba:	781a      	ldrb	r2, [r3, #0]
 800c7bc:	79fb      	ldrb	r3, [r7, #7]
 800c7be:	4611      	mov	r1, r2
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 f8f3 	bl	800c9ac <Event_Button>
 800c7c6:	e0e3      	b.n	800c990 <Button_IncTick+0x31c>
				Button[i].PinState = tmp;
 800c7c8:	79fa      	ldrb	r2, [r7, #7]
 800c7ca:	4966      	ldr	r1, [pc, #408]	; (800c964 <Button_IncTick+0x2f0>)
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	4413      	add	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	440b      	add	r3, r1
 800c7d6:	3306      	adds	r3, #6
 800c7d8:	79ba      	ldrb	r2, [r7, #6]
 800c7da:	701a      	strb	r2, [r3, #0]
				if (Button[i].Timer > NOISE_TIME){								// если таймер больше 10 мс.
 800c7dc:	79fa      	ldrb	r2, [r7, #7]
 800c7de:	4961      	ldr	r1, [pc, #388]	; (800c964 <Button_IncTick+0x2f0>)
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	4413      	add	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	440b      	add	r3, r1
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	f240 8096 	bls.w	800c920 <Button_IncTick+0x2ac>
					if(Button[i].Timer < SHORT_TIME){							// если это меньше 300 мс
 800c7f4:	79fa      	ldrb	r2, [r7, #7]
 800c7f6:	495b      	ldr	r1, [pc, #364]	; (800c964 <Button_IncTick+0x2f0>)
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	3308      	adds	r3, #8
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	2b1d      	cmp	r3, #29
 800c808:	d850      	bhi.n	800c8ac <Button_IncTick+0x238>
						Button[i].Timer = 1;
 800c80a:	79fa      	ldrb	r2, [r7, #7]
 800c80c:	4955      	ldr	r1, [pc, #340]	; (800c964 <Button_IncTick+0x2f0>)
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	440b      	add	r3, r1
 800c818:	3308      	adds	r3, #8
 800c81a:	2201      	movs	r2, #1
 800c81c:	801a      	strh	r2, [r3, #0]
						if(Button[i].Event == PRESS){							// если в событиях было пусто
 800c81e:	79fa      	ldrb	r2, [r7, #7]
 800c820:	4950      	ldr	r1, [pc, #320]	; (800c964 <Button_IncTick+0x2f0>)
 800c822:	4613      	mov	r3, r2
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	440b      	add	r3, r1
 800c82c:	330a      	adds	r3, #10
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d10a      	bne.n	800c84a <Button_IncTick+0x1d6>
							Button[i].Event = SHORT_CLC;						// То фиксируем первое нажатие. Но не отправляем, а запускаем таймер снова
 800c834:	79fa      	ldrb	r2, [r7, #7]
 800c836:	494b      	ldr	r1, [pc, #300]	; (800c964 <Button_IncTick+0x2f0>)
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	440b      	add	r3, r1
 800c842:	330a      	adds	r3, #10
 800c844:	2202      	movs	r2, #2
 800c846:	701a      	strb	r2, [r3, #0]
 800c848:	e0a2      	b.n	800c990 <Button_IncTick+0x31c>
						else if(Button[i].Event == SHORT_CLC){					// если нажатие уже было
 800c84a:	79fa      	ldrb	r2, [r7, #7]
 800c84c:	4945      	ldr	r1, [pc, #276]	; (800c964 <Button_IncTick+0x2f0>)
 800c84e:	4613      	mov	r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	4413      	add	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	440b      	add	r3, r1
 800c858:	330a      	adds	r3, #10
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d10a      	bne.n	800c876 <Button_IncTick+0x202>
							Button[i].Event = DOUBLE_CLC; 						// Фиксируем двойное нажатие
 800c860:	79fa      	ldrb	r2, [r7, #7]
 800c862:	4940      	ldr	r1, [pc, #256]	; (800c964 <Button_IncTick+0x2f0>)
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	440b      	add	r3, r1
 800c86e:	330a      	adds	r3, #10
 800c870:	2203      	movs	r2, #3
 800c872:	701a      	strb	r2, [r3, #0]
 800c874:	e08c      	b.n	800c990 <Button_IncTick+0x31c>
						else if(Button[i].Event == DOUBLE_CLC){					//
 800c876:	79fa      	ldrb	r2, [r7, #7]
 800c878:	493a      	ldr	r1, [pc, #232]	; (800c964 <Button_IncTick+0x2f0>)
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	330a      	adds	r3, #10
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b03      	cmp	r3, #3
 800c88a:	f040 8081 	bne.w	800c990 <Button_IncTick+0x31c>
							Event_Button(i, Button[i].Event); 					// Двойное отправляем сразу или по таймеру.
 800c88e:	79fa      	ldrb	r2, [r7, #7]
 800c890:	4934      	ldr	r1, [pc, #208]	; (800c964 <Button_IncTick+0x2f0>)
 800c892:	4613      	mov	r3, r2
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	4413      	add	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	440b      	add	r3, r1
 800c89c:	330a      	adds	r3, #10
 800c89e:	781a      	ldrb	r2, [r3, #0]
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 f881 	bl	800c9ac <Event_Button>
 800c8aa:	e071      	b.n	800c990 <Button_IncTick+0x31c>
					else if(Button[i].Timer < LONG_TIME){						// Если мы были в нажатом положении больше 200 мс
 800c8ac:	79fa      	ldrb	r2, [r7, #7]
 800c8ae:	492d      	ldr	r1, [pc, #180]	; (800c964 <Button_IncTick+0x2f0>)
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	2b4f      	cmp	r3, #79	; 0x4f
 800c8c0:	d823      	bhi.n	800c90a <Button_IncTick+0x296>
						if(Button[i].Event == PRESS){							//
 800c8c2:	79fa      	ldrb	r2, [r7, #7]
 800c8c4:	4927      	ldr	r1, [pc, #156]	; (800c964 <Button_IncTick+0x2f0>)
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	330a      	adds	r3, #10
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d15b      	bne.n	800c990 <Button_IncTick+0x31c>
							Button[i].Event = LONG_CLC; 						// Фиксируем длинное нажатие
 800c8d8:	79fa      	ldrb	r2, [r7, #7]
 800c8da:	4922      	ldr	r1, [pc, #136]	; (800c964 <Button_IncTick+0x2f0>)
 800c8dc:	4613      	mov	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	440b      	add	r3, r1
 800c8e6:	330a      	adds	r3, #10
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	701a      	strb	r2, [r3, #0]
							Event_Button(i, Button[i].Event);
 800c8ec:	79fa      	ldrb	r2, [r7, #7]
 800c8ee:	491d      	ldr	r1, [pc, #116]	; (800c964 <Button_IncTick+0x2f0>)
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	4413      	add	r3, r2
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	440b      	add	r3, r1
 800c8fa:	330a      	adds	r3, #10
 800c8fc:	781a      	ldrb	r2, [r3, #0]
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f852 	bl	800c9ac <Event_Button>
 800c908:	e042      	b.n	800c990 <Button_IncTick+0x31c>
						Button[i].Timer = 0;
 800c90a:	79fa      	ldrb	r2, [r7, #7]
 800c90c:	4915      	ldr	r1, [pc, #84]	; (800c964 <Button_IncTick+0x2f0>)
 800c90e:	4613      	mov	r3, r2
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	440b      	add	r3, r1
 800c918:	3308      	adds	r3, #8
 800c91a:	2200      	movs	r2, #0
 800c91c:	801a      	strh	r2, [r3, #0]
 800c91e:	e037      	b.n	800c990 <Button_IncTick+0x31c>
					if (Button[i].Timer) {										// если таймер меньше 10 мс.
 800c920:	79fa      	ldrb	r2, [r7, #7]
 800c922:	4910      	ldr	r1, [pc, #64]	; (800c964 <Button_IncTick+0x2f0>)
 800c924:	4613      	mov	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	440b      	add	r3, r1
 800c92e:	3308      	adds	r3, #8
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d018      	beq.n	800c968 <Button_IncTick+0x2f4>
						Button[i].Timer = 0;
 800c936:	79fa      	ldrb	r2, [r7, #7]
 800c938:	490a      	ldr	r1, [pc, #40]	; (800c964 <Button_IncTick+0x2f0>)
 800c93a:	4613      	mov	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	440b      	add	r3, r1
 800c944:	3308      	adds	r3, #8
 800c946:	2200      	movs	r2, #0
 800c948:	801a      	strh	r2, [r3, #0]
						Button[i].Event = NONE;
 800c94a:	79fa      	ldrb	r2, [r7, #7]
 800c94c:	4905      	ldr	r1, [pc, #20]	; (800c964 <Button_IncTick+0x2f0>)
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	440b      	add	r3, r1
 800c958:	330a      	adds	r3, #10
 800c95a:	2200      	movs	r2, #0
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	e017      	b.n	800c990 <Button_IncTick+0x31c>
 800c960:	20000774 	.word	0x20000774
 800c964:	2000072c 	.word	0x2000072c
						Button[i].Event = PRESS;
 800c968:	79fa      	ldrb	r2, [r7, #7]
 800c96a:	490f      	ldr	r1, [pc, #60]	; (800c9a8 <Button_IncTick+0x334>)
 800c96c:	4613      	mov	r3, r2
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	4413      	add	r3, r2
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	440b      	add	r3, r1
 800c976:	330a      	adds	r3, #10
 800c978:	2201      	movs	r2, #1
 800c97a:	701a      	strb	r2, [r3, #0]
						Button[i].Timer = 1;									// Первре срабатывание.
 800c97c:	79fa      	ldrb	r2, [r7, #7]
 800c97e:	490a      	ldr	r1, [pc, #40]	; (800c9a8 <Button_IncTick+0x334>)
 800c980:	4613      	mov	r3, r2
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	4413      	add	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	440b      	add	r3, r1
 800c98a:	3308      	adds	r3, #8
 800c98c:	2201      	movs	r2, #1
 800c98e:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < BUTTONS; i++){									//Перебор всех кнопок
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	3301      	adds	r3, #1
 800c994:	71fb      	strb	r3, [r7, #7]
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	2b05      	cmp	r3, #5
 800c99a:	f67f ae7f 	bls.w	800c69c <Button_IncTick+0x28>
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	2000072c 	.word	0x2000072c

0800c9ac <Event_Button>:
void Event_Button (uint8_t Butt, Button_events_TypeDef Event){
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	460a      	mov	r2, r1
 800c9b6:	71fb      	strb	r3, [r7, #7]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	71bb      	strb	r3, [r7, #6]


	Buttons_Handler(Butt, Event);
 800c9bc:	79ba      	ldrb	r2, [r7, #6]
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f4 f9c0 	bl	8000d48 <Buttons_Handler>
//	uint8_t Send_msg[25] = "Button [x] type [x]\r\n";
//	Send_msg[8] = Butt + 0x30;
//	Send_msg[17] = Event + 0x30;
//	Debug_UART( Send_msg, DBG_BTN,  21);

	Button[Butt].Event = NONE;
 800c9c8:	79fa      	ldrb	r2, [r7, #7]
 800c9ca:	490b      	ldr	r1, [pc, #44]	; (800c9f8 <Event_Button+0x4c>)
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	440b      	add	r3, r1
 800c9d6:	330a      	adds	r3, #10
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]
	Button[Butt].Timer = 0;
 800c9dc:	79fa      	ldrb	r2, [r7, #7]
 800c9de:	4906      	ldr	r1, [pc, #24]	; (800c9f8 <Event_Button+0x4c>)
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	005b      	lsls	r3, r3, #1
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	440b      	add	r3, r1
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	801a      	strh	r2, [r3, #0]

}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	2000072c 	.word	0x2000072c

0800c9fc <Buttons_Init>:


};


void Buttons_Init (void){
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0

	Button[0].Port = In1_GPIO_Port;
 800ca00:	4b45      	ldr	r3, [pc, #276]	; (800cb18 <Buttons_Init+0x11c>)
 800ca02:	4a46      	ldr	r2, [pc, #280]	; (800cb1c <Buttons_Init+0x120>)
 800ca04:	601a      	str	r2, [r3, #0]
	Button[1].Port = In2_GPIO_Port;
 800ca06:	4b44      	ldr	r3, [pc, #272]	; (800cb18 <Buttons_Init+0x11c>)
 800ca08:	4a44      	ldr	r2, [pc, #272]	; (800cb1c <Buttons_Init+0x120>)
 800ca0a:	60da      	str	r2, [r3, #12]
	Button[2].Port = In3_GPIO_Port;
 800ca0c:	4b42      	ldr	r3, [pc, #264]	; (800cb18 <Buttons_Init+0x11c>)
 800ca0e:	4a44      	ldr	r2, [pc, #272]	; (800cb20 <Buttons_Init+0x124>)
 800ca10:	619a      	str	r2, [r3, #24]
	Button[3].Port = In4_GPIO_Port;
 800ca12:	4b41      	ldr	r3, [pc, #260]	; (800cb18 <Buttons_Init+0x11c>)
 800ca14:	4a42      	ldr	r2, [pc, #264]	; (800cb20 <Buttons_Init+0x124>)
 800ca16:	625a      	str	r2, [r3, #36]	; 0x24
	Button[4].Port = In5_GPIO_Port;
 800ca18:	4b3f      	ldr	r3, [pc, #252]	; (800cb18 <Buttons_Init+0x11c>)
 800ca1a:	4a41      	ldr	r2, [pc, #260]	; (800cb20 <Buttons_Init+0x124>)
 800ca1c:	631a      	str	r2, [r3, #48]	; 0x30
	Button[5].Port = In6_GPIO_Port;
 800ca1e:	4b3e      	ldr	r3, [pc, #248]	; (800cb18 <Buttons_Init+0x11c>)
 800ca20:	4a3f      	ldr	r2, [pc, #252]	; (800cb20 <Buttons_Init+0x124>)
 800ca22:	63da      	str	r2, [r3, #60]	; 0x3c

	Button[0].Pin = In1_Pin;
 800ca24:	4b3c      	ldr	r3, [pc, #240]	; (800cb18 <Buttons_Init+0x11c>)
 800ca26:	2240      	movs	r2, #64	; 0x40
 800ca28:	809a      	strh	r2, [r3, #4]
	Button[1].Pin = In2_Pin;
 800ca2a:	4b3b      	ldr	r3, [pc, #236]	; (800cb18 <Buttons_Init+0x11c>)
 800ca2c:	2280      	movs	r2, #128	; 0x80
 800ca2e:	821a      	strh	r2, [r3, #16]
	Button[2].Pin = In3_Pin;
 800ca30:	4b39      	ldr	r3, [pc, #228]	; (800cb18 <Buttons_Init+0x11c>)
 800ca32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ca36:	839a      	strh	r2, [r3, #28]
	Button[3].Pin = In4_Pin;
 800ca38:	4b37      	ldr	r3, [pc, #220]	; (800cb18 <Buttons_Init+0x11c>)
 800ca3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca3e:	851a      	strh	r2, [r3, #40]	; 0x28
	Button[4].Pin = In5_Pin;
 800ca40:	4b35      	ldr	r3, [pc, #212]	; (800cb18 <Buttons_Init+0x11c>)
 800ca42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ca46:	869a      	strh	r2, [r3, #52]	; 0x34
	Button[5].Pin = In6_Pin;
 800ca48:	4b33      	ldr	r3, [pc, #204]	; (800cb18 <Buttons_Init+0x11c>)
 800ca4a:	2204      	movs	r2, #4
 800ca4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	Button[0].PinState = HAL_GPIO_ReadPin(Button[0].Port, Button[0].Pin);
 800ca50:	4b31      	ldr	r3, [pc, #196]	; (800cb18 <Buttons_Init+0x11c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a30      	ldr	r2, [pc, #192]	; (800cb18 <Buttons_Init+0x11c>)
 800ca56:	8892      	ldrh	r2, [r2, #4]
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7f6 fd30 	bl	80034c0 <HAL_GPIO_ReadPin>
 800ca60:	4603      	mov	r3, r0
 800ca62:	461a      	mov	r2, r3
 800ca64:	4b2c      	ldr	r3, [pc, #176]	; (800cb18 <Buttons_Init+0x11c>)
 800ca66:	719a      	strb	r2, [r3, #6]
	Button[1].PinState = HAL_GPIO_ReadPin(Button[1].Port, Button[1].Pin);
 800ca68:	4b2b      	ldr	r3, [pc, #172]	; (800cb18 <Buttons_Init+0x11c>)
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	4a2a      	ldr	r2, [pc, #168]	; (800cb18 <Buttons_Init+0x11c>)
 800ca6e:	8a12      	ldrh	r2, [r2, #16]
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7f6 fd24 	bl	80034c0 <HAL_GPIO_ReadPin>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	4b26      	ldr	r3, [pc, #152]	; (800cb18 <Buttons_Init+0x11c>)
 800ca7e:	749a      	strb	r2, [r3, #18]
	Button[2].PinState = HAL_GPIO_ReadPin(Button[2].Port, Button[2].Pin);
 800ca80:	4b25      	ldr	r3, [pc, #148]	; (800cb18 <Buttons_Init+0x11c>)
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	4a24      	ldr	r2, [pc, #144]	; (800cb18 <Buttons_Init+0x11c>)
 800ca86:	8b92      	ldrh	r2, [r2, #28]
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7f6 fd18 	bl	80034c0 <HAL_GPIO_ReadPin>
 800ca90:	4603      	mov	r3, r0
 800ca92:	461a      	mov	r2, r3
 800ca94:	4b20      	ldr	r3, [pc, #128]	; (800cb18 <Buttons_Init+0x11c>)
 800ca96:	779a      	strb	r2, [r3, #30]
	Button[3].PinState = HAL_GPIO_ReadPin(Button[3].Port, Button[3].Pin);
 800ca98:	4b1f      	ldr	r3, [pc, #124]	; (800cb18 <Buttons_Init+0x11c>)
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	4a1e      	ldr	r2, [pc, #120]	; (800cb18 <Buttons_Init+0x11c>)
 800ca9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800caa0:	4611      	mov	r1, r2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7f6 fd0c 	bl	80034c0 <HAL_GPIO_ReadPin>
 800caa8:	4603      	mov	r3, r0
 800caaa:	461a      	mov	r2, r3
 800caac:	4b1a      	ldr	r3, [pc, #104]	; (800cb18 <Buttons_Init+0x11c>)
 800caae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Button[4].PinState = HAL_GPIO_ReadPin(Button[4].Port, Button[4].Pin);
 800cab2:	4b19      	ldr	r3, [pc, #100]	; (800cb18 <Buttons_Init+0x11c>)
 800cab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab6:	4a18      	ldr	r2, [pc, #96]	; (800cb18 <Buttons_Init+0x11c>)
 800cab8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800caba:	4611      	mov	r1, r2
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7f6 fcff 	bl	80034c0 <HAL_GPIO_ReadPin>
 800cac2:	4603      	mov	r3, r0
 800cac4:	461a      	mov	r2, r3
 800cac6:	4b14      	ldr	r3, [pc, #80]	; (800cb18 <Buttons_Init+0x11c>)
 800cac8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Button[5].PinState = HAL_GPIO_ReadPin(Button[5].Port, Button[5].Pin);
 800cacc:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <Buttons_Init+0x11c>)
 800cace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad0:	4a11      	ldr	r2, [pc, #68]	; (800cb18 <Buttons_Init+0x11c>)
 800cad2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f6 fcf1 	bl	80034c0 <HAL_GPIO_ReadPin>
 800cade:	4603      	mov	r3, r0
 800cae0:	461a      	mov	r2, r3
 800cae2:	4b0d      	ldr	r3, [pc, #52]	; (800cb18 <Buttons_Init+0x11c>)
 800cae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	Button[0].Event = NONE;
 800cae8:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <Buttons_Init+0x11c>)
 800caea:	2200      	movs	r2, #0
 800caec:	729a      	strb	r2, [r3, #10]
	Button[1].Event = NONE;
 800caee:	4b0a      	ldr	r3, [pc, #40]	; (800cb18 <Buttons_Init+0x11c>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	759a      	strb	r2, [r3, #22]
	Button[2].Event = NONE;
 800caf4:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <Buttons_Init+0x11c>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Button[3].Event = NONE;
 800cafc:	4b06      	ldr	r3, [pc, #24]	; (800cb18 <Buttons_Init+0x11c>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Button[4].Event = NONE;
 800cb04:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <Buttons_Init+0x11c>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Button[5].Event = NONE;
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <Buttons_Init+0x11c>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

//	Debug_UART( "Button init\r\n", DBG_OK,  13);

}
 800cb14:	bf00      	nop
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	2000072c 	.word	0x2000072c
 800cb1c:	40020800 	.word	0x40020800
 800cb20:	40020400 	.word	0x40020400

0800cb24 <Debug_LED_IncTic>:
#include "debug_LED.h"

LED_ColorTypeDef Debug_LED1;
LED_ColorTypeDef Debug_LED2;

void Debug_LED_IncTic(void){
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0

	static uint8_t switch_timer = 22;
	switch_timer--;
 800cb28:	4b63      	ldr	r3, [pc, #396]	; (800ccb8 <Debug_LED_IncTic+0x194>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	4b61      	ldr	r3, [pc, #388]	; (800ccb8 <Debug_LED_IncTic+0x194>)
 800cb32:	701a      	strb	r2, [r3, #0]
	if (switch_timer == 11) {
 800cb34:	4b60      	ldr	r3, [pc, #384]	; (800ccb8 <Debug_LED_IncTic+0x194>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b0b      	cmp	r3, #11
 800cb3a:	d15a      	bne.n	800cbf2 <Debug_LED_IncTic+0xce>
		switch (Debug_LED1) {
 800cb3c:	4b5f      	ldr	r3, [pc, #380]	; (800ccbc <Debug_LED_IncTic+0x198>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d855      	bhi.n	800cbf0 <Debug_LED_IncTic+0xcc>
 800cb44:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <Debug_LED_IncTic+0x28>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cbd7 	.word	0x0800cbd7
 800cb50:	0800cb81 	.word	0x0800cb81
 800cb54:	0800cba7 	.word	0x0800cba7
 800cb58:	0800cb5d 	.word	0x0800cb5d
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cb5c:	4b58      	ldr	r3, [pc, #352]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a57      	ldr	r2, [pc, #348]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb62:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cb66:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0; 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;}
 800cb68:	4b55      	ldr	r3, [pc, #340]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a54      	ldr	r2, [pc, #336]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	2201      	movs	r2, #1
 800cb76:	2110      	movs	r1, #16
 800cb78:	4851      	ldr	r0, [pc, #324]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb7a:	f7f6 fcb8 	bl	80034ee <HAL_GPIO_WritePin>
 800cb7e:	e038      	b.n	800cbf2 <Debug_LED_IncTic+0xce>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800cb80:	4b4f      	ldr	r3, [pc, #316]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a4e      	ldr	r2, [pc, #312]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb8a:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800cb8c:	4b4c      	ldr	r3, [pc, #304]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a4b      	ldr	r2, [pc, #300]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cb92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cb9e:	4848      	ldr	r0, [pc, #288]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cba0:	f7f6 fca5 	bl	80034ee <HAL_GPIO_WritePin>
 800cba4:	e025      	b.n	800cbf2 <Debug_LED_IncTic+0xce>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800cba6:	4b46      	ldr	r3, [pc, #280]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a45      	ldr	r2, [pc, #276]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	2110      	movs	r1, #16
 800cbb6:	4842      	ldr	r0, [pc, #264]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbb8:	f7f6 fc99 	bl	80034ee <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;}
 800cbbc:	4b40      	ldr	r3, [pc, #256]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a3f      	ldr	r2, [pc, #252]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cbce:	483c      	ldr	r0, [pc, #240]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbd0:	f7f6 fc8d 	bl	80034ee <HAL_GPIO_WritePin>
 800cbd4:	e00d      	b.n	800cbf2 <Debug_LED_IncTic+0xce>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cbd6:	4b3a      	ldr	r3, [pc, #232]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a39      	ldr	r2, [pc, #228]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbdc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cbe0:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800cbe2:	4b37      	ldr	r3, [pc, #220]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a36      	ldr	r2, [pc, #216]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cbe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	e000      	b.n	800cbf2 <Debug_LED_IncTic+0xce>
			default:		{break;}
 800cbf0:	bf00      	nop
		}
	}
	if (switch_timer == 0) {
 800cbf2:	4b31      	ldr	r3, [pc, #196]	; (800ccb8 <Debug_LED_IncTic+0x194>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d15c      	bne.n	800ccb4 <Debug_LED_IncTic+0x190>
		switch (Debug_LED2) {
 800cbfa:	4b32      	ldr	r3, [pc, #200]	; (800ccc4 <Debug_LED_IncTic+0x1a0>)
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d854      	bhi.n	800ccac <Debug_LED_IncTic+0x188>
 800cc02:	a201      	add	r2, pc, #4	; (adr r2, 800cc08 <Debug_LED_IncTic+0xe4>)
 800cc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc08:	0800cc93 	.word	0x0800cc93
 800cc0c:	0800cc3f 	.word	0x0800cc3f
 800cc10:	0800cc63 	.word	0x0800cc63
 800cc14:	0800cc19 	.word	0x0800cc19
			case GREEN: 	{	GPIOC->MODER &= ~(GPIO_MODER_MODE4);
 800cc18:	4b29      	ldr	r3, [pc, #164]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a28      	ldr	r2, [pc, #160]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc22:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE13_0; 	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800cc24:	4b26      	ldr	r3, [pc, #152]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a25      	ldr	r2, [pc, #148]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cc36:	4822      	ldr	r0, [pc, #136]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc38:	f7f6 fc59 	bl	80034ee <HAL_GPIO_WritePin>
 800cc3c:	e037      	b.n	800ccae <Debug_LED_IncTic+0x18a>
			case RED: 		{	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cc3e:	4b20      	ldr	r3, [pc, #128]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a1f      	ldr	r2, [pc, #124]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc44:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cc48:	6013      	str	r3, [r2, #0]
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;}
 800cc4a:	4b1d      	ldr	r3, [pc, #116]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a1c      	ldr	r2, [pc, #112]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc54:	6013      	str	r3, [r2, #0]
 800cc56:	2200      	movs	r2, #0
 800cc58:	2110      	movs	r1, #16
 800cc5a:	4819      	ldr	r0, [pc, #100]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc5c:	f7f6 fc47 	bl	80034ee <HAL_GPIO_WritePin>
 800cc60:	e025      	b.n	800ccae <Debug_LED_IncTic+0x18a>
			case YELLOW: 	{	GPIOC->MODER |= GPIO_MODER_MODE13_0;	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800cc62:	4b17      	ldr	r3, [pc, #92]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a16      	ldr	r2, [pc, #88]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2110      	movs	r1, #16
 800cc72:	4813      	ldr	r0, [pc, #76]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc74:	f7f6 fc3b 	bl	80034ee <HAL_GPIO_WritePin>
								GPIOC->MODER |= GPIO_MODER_MODE4_0;		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;}
 800cc78:	4b11      	ldr	r3, [pc, #68]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a10      	ldr	r2, [pc, #64]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cc8a:	480d      	ldr	r0, [pc, #52]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc8c:	f7f6 fc2f 	bl	80034ee <HAL_GPIO_WritePin>
 800cc90:	e00d      	b.n	800ccae <Debug_LED_IncTic+0x18a>
			case BLACK: 	{ 	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 800cc92:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a0a      	ldr	r2, [pc, #40]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cc98:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800cc9c:	6013      	str	r3, [r2, #0]
								GPIOC->MODER &= ~(GPIO_MODER_MODE4); break;}
 800cc9e:	4b08      	ldr	r3, [pc, #32]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a07      	ldr	r2, [pc, #28]	; (800ccc0 <Debug_LED_IncTic+0x19c>)
 800cca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	e000      	b.n	800ccae <Debug_LED_IncTic+0x18a>
			default:		{break;}
 800ccac:	bf00      	nop
		}
		switch_timer = 22;
 800ccae:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <Debug_LED_IncTic+0x194>)
 800ccb0:	2216      	movs	r2, #22
 800ccb2:	701a      	strb	r2, [r3, #0]
	}

}
 800ccb4:	bf00      	nop
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	2000015c 	.word	0x2000015c
 800ccbc:	20000775 	.word	0x20000775
 800ccc0:	40020800 	.word	0x40020800
 800ccc4:	20000776 	.word	0x20000776

0800ccc8 <Debug_LED_Init>:

}



void Debug_LED_Init (void){
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0

	Debug_LED1 = BLACK;
 800cccc:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <Debug_LED_Init+0x18>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	701a      	strb	r2, [r3, #0]
	Debug_LED2 = BLACK;
 800ccd2:	4b04      	ldr	r3, [pc, #16]	; (800cce4 <Debug_LED_Init+0x1c>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
//	Debug_UART( "Debug_LED init\r\n", DBG_OK, 16);

}
 800ccd8:	bf00      	nop
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bc80      	pop	{r7}
 800ccde:	4770      	bx	lr
 800cce0:	20000775 	.word	0x20000775
 800cce4:	20000776 	.word	0x20000776

0800cce8 <MM_Init>:
//{
//	__RBIT(data);
//        return data;
//};

void MM_Init(void){
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0

	Spi_LED_Init();
 800ccec:	f000 f8d8 	bl	800cea0 <Spi_LED_Init>
	Buttons_Init();
 800ccf0:	f7ff fe84 	bl	800c9fc <Buttons_Init>
	Debug_LED_Init();
 800ccf4:	f7ff ffe8 	bl	800ccc8 <Debug_LED_Init>
	Out_Init();
 800ccf8:	f000 f862 	bl	800cdc0 <Out_Init>

//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\033[36mParametrica.ru\033[0m\r\n", 27, 5);
//	init_OK = 1;
}
 800ccfc:	bf00      	nop
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <HAL_IncTick>:


void HAL_IncTick(void)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cd04:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <HAL_IncTick+0x30>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <HAL_IncTick+0x34>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4413      	add	r3, r2
 800cd10:	4a08      	ldr	r2, [pc, #32]	; (800cd34 <HAL_IncTick+0x34>)
 800cd12:	6013      	str	r3, [r2, #0]
  if (init_OK){
 800cd14:	4b08      	ldr	r3, [pc, #32]	; (800cd38 <HAL_IncTick+0x38>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d007      	beq.n	800cd2c <HAL_IncTick+0x2c>
	  Main_IncTic();
 800cd1c:	f7f3 ffb4 	bl	8000c88 <Main_IncTic>
	  Debug_LED_IncTic();
 800cd20:	f7ff ff00 	bl	800cb24 <Debug_LED_IncTic>
	  Button_IncTick();
 800cd24:	f7ff fca6 	bl	800c674 <Button_IncTick>
	  Spi_LED_IncTick();
 800cd28:	f000 f86e 	bl	800ce08 <Spi_LED_IncTick>

  }
}
 800cd2c:	bf00      	nop
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	20000048 	.word	0x20000048
 800cd34:	20000710 	.word	0x20000710
 800cd38:	20000777 	.word	0x20000777

0800cd3c <Set_Out>:

#include "out.h"
#include "tim.h"
#include "debug_LED.h"

void Set_Out(PowerChannelTypeDef Channel, uint16_t volume){
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	460a      	mov	r2, r1
 800cd46:	71fb      	strb	r3, [r7, #7]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	80bb      	strh	r3, [r7, #4]
if (volume > 1000) {volume = 1000;}
 800cd4c:	88bb      	ldrh	r3, [r7, #4]
 800cd4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd52:	d902      	bls.n	800cd5a <Set_Out+0x1e>
 800cd54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cd58:	80bb      	strh	r3, [r7, #4]
	if (Channel == P_OUT_1){TIM4->CCR1 = volume;}
 800cd5a:	79fb      	ldrb	r3, [r7, #7]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d102      	bne.n	800cd66 <Set_Out+0x2a>
 800cd60:	4a15      	ldr	r2, [pc, #84]	; (800cdb8 <Set_Out+0x7c>)
 800cd62:	88bb      	ldrh	r3, [r7, #4]
 800cd64:	6353      	str	r3, [r2, #52]	; 0x34
	if (Channel == P_OUT_2){TIM4->CCR2 = volume;}
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d102      	bne.n	800cd72 <Set_Out+0x36>
 800cd6c:	4a12      	ldr	r2, [pc, #72]	; (800cdb8 <Set_Out+0x7c>)
 800cd6e:	88bb      	ldrh	r3, [r7, #4]
 800cd70:	6393      	str	r3, [r2, #56]	; 0x38
	if (Channel == P_OUT_3){TIM4->CCR3 = volume;}
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d102      	bne.n	800cd7e <Set_Out+0x42>
 800cd78:	4a0f      	ldr	r2, [pc, #60]	; (800cdb8 <Set_Out+0x7c>)
 800cd7a:	88bb      	ldrh	r3, [r7, #4]
 800cd7c:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Channel == P_OUT_4){TIM4->CCR4 = volume;}
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d102      	bne.n	800cd8a <Set_Out+0x4e>
 800cd84:	4a0c      	ldr	r2, [pc, #48]	; (800cdb8 <Set_Out+0x7c>)
 800cd86:	88bb      	ldrh	r3, [r7, #4]
 800cd88:	6413      	str	r3, [r2, #64]	; 0x40
	if (Channel == P_OUT_5){TIM3->CCR3 = volume;}
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d102      	bne.n	800cd96 <Set_Out+0x5a>
 800cd90:	4a0a      	ldr	r2, [pc, #40]	; (800cdbc <Set_Out+0x80>)
 800cd92:	88bb      	ldrh	r3, [r7, #4]
 800cd94:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (Channel == P_OUT_6){TIM3->CCR4 = volume;}
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	2b05      	cmp	r3, #5
 800cd9a:	d102      	bne.n	800cda2 <Set_Out+0x66>
 800cd9c:	4a07      	ldr	r2, [pc, #28]	; (800cdbc <Set_Out+0x80>)
 800cd9e:	88bb      	ldrh	r3, [r7, #4]
 800cda0:	6413      	str	r3, [r2, #64]	; 0x40
	if (Channel == P_OUT_7){TIM3->CCR1 = volume;}
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	2b06      	cmp	r3, #6
 800cda6:	d102      	bne.n	800cdae <Set_Out+0x72>
 800cda8:	4a04      	ldr	r2, [pc, #16]	; (800cdbc <Set_Out+0x80>)
 800cdaa:	88bb      	ldrh	r3, [r7, #4]
 800cdac:	6353      	str	r3, [r2, #52]	; 0x34

}
 800cdae:	bf00      	nop
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bc80      	pop	{r7}
 800cdb6:	4770      	bx	lr
 800cdb8:	40000800 	.word	0x40000800
 800cdbc:	40000400 	.word	0x40000400

0800cdc0 <Out_Init>:
	if (Channel == P_OUT_1234){TIM4->PSC = volume;}
	if (Channel == P_OUT_567){TIM3->PSC = volume;}


}
void Out_Init(void){
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Start(&htim4);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	480e      	ldr	r0, [pc, #56]	; (800ce00 <Out_Init+0x40>)
 800cdc8:	f7fa fae6 	bl	8007398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800cdcc:	2104      	movs	r1, #4
 800cdce:	480c      	ldr	r0, [pc, #48]	; (800ce00 <Out_Init+0x40>)
 800cdd0:	f7fa fae2 	bl	8007398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800cdd4:	2108      	movs	r1, #8
 800cdd6:	480a      	ldr	r0, [pc, #40]	; (800ce00 <Out_Init+0x40>)
 800cdd8:	f7fa fade 	bl	8007398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800cddc:	210c      	movs	r1, #12
 800cdde:	4808      	ldr	r0, [pc, #32]	; (800ce00 <Out_Init+0x40>)
 800cde0:	f7fa fada 	bl	8007398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800cde4:	2100      	movs	r1, #0
 800cde6:	4807      	ldr	r0, [pc, #28]	; (800ce04 <Out_Init+0x44>)
 800cde8:	f7fa fad6 	bl	8007398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800cdec:	2108      	movs	r1, #8
 800cdee:	4805      	ldr	r0, [pc, #20]	; (800ce04 <Out_Init+0x44>)
 800cdf0:	f7fa fad2 	bl	8007398 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800cdf4:	210c      	movs	r1, #12
 800cdf6:	4803      	ldr	r0, [pc, #12]	; (800ce04 <Out_Init+0x44>)
 800cdf8:	f7fa face 	bl	8007398 <HAL_TIM_PWM_Start>

//	Debug_UART((uint8_t *) "Out init\r\n", DBG_OK, 10);

}
 800cdfc:	bf00      	nop
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20000640 	.word	0x20000640
 800ce04:	200005f8 	.word	0x200005f8

0800ce08 <Spi_LED_IncTick>:


//=========================================================================================================

void Spi_LED_IncTick(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	af00      	add	r7, sp, #0

//-------------------------------------------------------------
	Frame_Delay--;
 800ce0c:	4b1e      	ldr	r3, [pc, #120]	; (800ce88 <Spi_LED_IncTick+0x80>)
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	4b1c      	ldr	r3, [pc, #112]	; (800ce88 <Spi_LED_IncTick+0x80>)
 800ce16:	801a      	strh	r2, [r3, #0]

	if (Frame_Delay == 2) {
 800ce18:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <Spi_LED_IncTick+0x80>)
 800ce1a:	881b      	ldrh	r3, [r3, #0]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d112      	bne.n	800ce46 <Spi_LED_IncTick+0x3e>
		if (Spi_LED_Cmplt_Frame_Flag & 0x01){
 800ce20:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <Spi_LED_IncTick+0x84>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00c      	beq.n	800ce46 <Spi_LED_IncTick+0x3e>
			//HAL_SPI_Transmit(&hspi1, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi1, &OutputArray[0][0].Green , LED_MAX * 3);
 800ce2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ce30:	4917      	ldr	r1, [pc, #92]	; (800ce90 <Spi_LED_IncTick+0x88>)
 800ce32:	4818      	ldr	r0, [pc, #96]	; (800ce94 <Spi_LED_IncTick+0x8c>)
 800ce34:	f7fa f870 	bl	8006f18 <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x01;
 800ce38:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <Spi_LED_IncTick+0x84>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	f023 0301 	bic.w	r3, r3, #1
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	4b12      	ldr	r3, [pc, #72]	; (800ce8c <Spi_LED_IncTick+0x84>)
 800ce44:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 1) {
 800ce46:	4b10      	ldr	r3, [pc, #64]	; (800ce88 <Spi_LED_IncTick+0x80>)
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d112      	bne.n	800ce74 <Spi_LED_IncTick+0x6c>
		if (Spi_LED_Cmplt_Frame_Flag & 0x02){
 800ce4e:	4b0f      	ldr	r3, [pc, #60]	; (800ce8c <Spi_LED_IncTick+0x84>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00c      	beq.n	800ce74 <Spi_LED_IncTick+0x6c>
			//HAL_SPI_Transmit(&hspi2, &OutputArray[0][0].Green , 9, 10);
			HAL_SPI_Transmit_DMA(&hspi2, &OutputArray[1][0].Green , LED_MAX * 3);
 800ce5a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ce5e:	490e      	ldr	r1, [pc, #56]	; (800ce98 <Spi_LED_IncTick+0x90>)
 800ce60:	480e      	ldr	r0, [pc, #56]	; (800ce9c <Spi_LED_IncTick+0x94>)
 800ce62:	f7fa f859 	bl	8006f18 <HAL_SPI_Transmit_DMA>
			Spi_LED_Cmplt_Frame_Flag &= ~0x02;
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <Spi_LED_IncTick+0x84>)
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	f023 0302 	bic.w	r3, r3, #2
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <Spi_LED_IncTick+0x84>)
 800ce72:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Frame_Delay == 0) {
 800ce74:	4b04      	ldr	r3, [pc, #16]	; (800ce88 <Spi_LED_IncTick+0x80>)
 800ce76:	881b      	ldrh	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <Spi_LED_IncTick+0x7a>
		Frame_Delay = 1000 / SPI_FREQ;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <Spi_LED_IncTick+0x80>)
 800ce7e:	2232      	movs	r2, #50	; 0x32
 800ce80:	801a      	strh	r2, [r3, #0]
	}
}
 800ce82:	bf00      	nop
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	2000015e 	.word	0x2000015e
 800ce8c:	20000778 	.word	0x20000778
 800ce90:	2000077c 	.word	0x2000077c
 800ce94:	2000042c 	.word	0x2000042c
 800ce98:	20001334 	.word	0x20001334
 800ce9c:	20000484 	.word	0x20000484

0800cea0 <Spi_LED_Init>:
//=========================================================================================================
void Spi_LED_Init(void){
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
	Spi_LED_Cmplt_Frame_Flag |= 0x01 | 0x02;
 800cea6:	4b2f      	ldr	r3, [pc, #188]	; (800cf64 <Spi_LED_Init+0xc4>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	f043 0303 	orr.w	r3, r3, #3
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	4b2c      	ldr	r3, [pc, #176]	; (800cf64 <Spi_LED_Init+0xc4>)
 800ceb2:	701a      	strb	r2, [r3, #0]

	extern DMA_HandleTypeDef hdma_spi1_tx;
	extern DMA_HandleTypeDef hdma_spi2_tx;

	HAL_DMA_Init(&hdma_spi1_tx);
 800ceb4:	482c      	ldr	r0, [pc, #176]	; (800cf68 <Spi_LED_Init+0xc8>)
 800ceb6:	f7f5 fc0b 	bl	80026d0 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi2_tx);
 800ceba:	482c      	ldr	r0, [pc, #176]	; (800cf6c <Spi_LED_Init+0xcc>)
 800cebc:	f7f5 fc08 	bl	80026d0 <HAL_DMA_Init>

	for (uint16_t i = 0; i < LED_MAX; i++){
 800cec0:	2300      	movs	r3, #0
 800cec2:	80fb      	strh	r3, [r7, #6]
 800cec4:	e01c      	b.n	800cf00 <Spi_LED_Init+0x60>
		OutputArray[0][i].Green = g;
 800cec6:	88fa      	ldrh	r2, [r7, #6]
 800cec8:	4929      	ldr	r1, [pc, #164]	; (800cf70 <Spi_LED_Init+0xd0>)
 800ceca:	4613      	mov	r3, r2
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4413      	add	r3, r2
 800ced0:	440b      	add	r3, r1
 800ced2:	2200      	movs	r2, #0
 800ced4:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Red 	= r;
 800ced6:	88fa      	ldrh	r2, [r7, #6]
 800ced8:	4925      	ldr	r1, [pc, #148]	; (800cf70 <Spi_LED_Init+0xd0>)
 800ceda:	4613      	mov	r3, r2
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	4413      	add	r3, r2
 800cee0:	440b      	add	r3, r1
 800cee2:	3301      	adds	r3, #1
 800cee4:	2200      	movs	r2, #0
 800cee6:	701a      	strb	r2, [r3, #0]
		OutputArray[0][i].Blue 	= b;
 800cee8:	88fa      	ldrh	r2, [r7, #6]
 800ceea:	4921      	ldr	r1, [pc, #132]	; (800cf70 <Spi_LED_Init+0xd0>)
 800ceec:	4613      	mov	r3, r2
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	4413      	add	r3, r2
 800cef2:	440b      	add	r3, r1
 800cef4:	3302      	adds	r3, #2
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800cefa:	88fb      	ldrh	r3, [r7, #6]
 800cefc:	3301      	adds	r3, #1
 800cefe:	80fb      	strh	r3, [r7, #6]
 800cf00:	88fb      	ldrh	r3, [r7, #6]
 800cf02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf06:	d3de      	bcc.n	800cec6 <Spi_LED_Init+0x26>
	}

	for (uint16_t i = 0; i < LED_MAX; i++){
 800cf08:	2300      	movs	r3, #0
 800cf0a:	80bb      	strh	r3, [r7, #4]
 800cf0c:	e020      	b.n	800cf50 <Spi_LED_Init+0xb0>
		OutputArray[1][i].Green =	g;
 800cf0e:	88ba      	ldrh	r2, [r7, #4]
 800cf10:	4917      	ldr	r1, [pc, #92]	; (800cf70 <Spi_LED_Init+0xd0>)
 800cf12:	4613      	mov	r3, r2
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	4413      	add	r3, r2
 800cf18:	440b      	add	r3, r1
 800cf1a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800cf1e:	2200      	movs	r2, #0
 800cf20:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Red 	=	r;
 800cf22:	88ba      	ldrh	r2, [r7, #4]
 800cf24:	4912      	ldr	r1, [pc, #72]	; (800cf70 <Spi_LED_Init+0xd0>)
 800cf26:	4613      	mov	r3, r2
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	4413      	add	r3, r2
 800cf2c:	440b      	add	r3, r1
 800cf2e:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800cf32:	2200      	movs	r2, #0
 800cf34:	701a      	strb	r2, [r3, #0]
		OutputArray[1][i].Blue 	=	b;
 800cf36:	88ba      	ldrh	r2, [r7, #4]
 800cf38:	490d      	ldr	r1, [pc, #52]	; (800cf70 <Spi_LED_Init+0xd0>)
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4413      	add	r3, r2
 800cf40:	440b      	add	r3, r1
 800cf42:	f603 33ba 	addw	r3, r3, #3002	; 0xbba
 800cf46:	2200      	movs	r2, #0
 800cf48:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < LED_MAX; i++){
 800cf4a:	88bb      	ldrh	r3, [r7, #4]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	80bb      	strh	r3, [r7, #4]
 800cf50:	88bb      	ldrh	r3, [r7, #4]
 800cf52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf56:	d3da      	bcc.n	800cf0e <Spi_LED_Init+0x6e>


//	Debug_UART((uint8_t *) "SPI_LED init\r\n", DBG_OK, 14);


}
 800cf58:	bf00      	nop
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20000778 	.word	0x20000778
 800cf68:	20000534 	.word	0x20000534
 800cf6c:	20000594 	.word	0x20000594
 800cf70:	2000077c 	.word	0x2000077c

0800cf74 <HAL_SPI_TxCpltCallback>:
//=========================================================================================================
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1){Spi_LED_Cmplt_Frame_Flag |= 0x01;}
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a0d      	ldr	r2, [pc, #52]	; (800cfb8 <HAL_SPI_TxCpltCallback+0x44>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d106      	bne.n	800cf94 <HAL_SPI_TxCpltCallback+0x20>
 800cf86:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <HAL_SPI_TxCpltCallback+0x48>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <HAL_SPI_TxCpltCallback+0x48>)
 800cf92:	701a      	strb	r2, [r3, #0]
	if (hspi->Instance == SPI2){Spi_LED_Cmplt_Frame_Flag |= 0x02;}
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a09      	ldr	r2, [pc, #36]	; (800cfc0 <HAL_SPI_TxCpltCallback+0x4c>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d106      	bne.n	800cfac <HAL_SPI_TxCpltCallback+0x38>
 800cf9e:	4b07      	ldr	r3, [pc, #28]	; (800cfbc <HAL_SPI_TxCpltCallback+0x48>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	f043 0302 	orr.w	r3, r3, #2
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	4b04      	ldr	r3, [pc, #16]	; (800cfbc <HAL_SPI_TxCpltCallback+0x48>)
 800cfaa:	701a      	strb	r2, [r3, #0]
//	itoa(tmp, string + 2, 16);
//	string[14] = Spi_LED_Cmplt_Frame_Flag + 0x30;
//	if (string[15] == *" ") {string[15] = *".";} else {string[15] = *" ";}
//	HAL_UART_Transmit(&huart2, string, 16, 2);

}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bc80      	pop	{r7}
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	40013000 	.word	0x40013000
 800cfbc:	20000778 	.word	0x20000778
 800cfc0:	40003800 	.word	0x40003800

0800cfc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	4912      	ldr	r1, [pc, #72]	; (800d014 <MX_USB_DEVICE_Init+0x50>)
 800cfcc:	4812      	ldr	r0, [pc, #72]	; (800d018 <MX_USB_DEVICE_Init+0x54>)
 800cfce:	f7fe f935 	bl	800b23c <USBD_Init>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cfd8:	f7f3 ffb6 	bl	8000f48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cfdc:	490f      	ldr	r1, [pc, #60]	; (800d01c <MX_USB_DEVICE_Init+0x58>)
 800cfde:	480e      	ldr	r0, [pc, #56]	; (800d018 <MX_USB_DEVICE_Init+0x54>)
 800cfe0:	f7fe f957 	bl	800b292 <USBD_RegisterClass>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cfea:	f7f3 ffad 	bl	8000f48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cfee:	490c      	ldr	r1, [pc, #48]	; (800d020 <MX_USB_DEVICE_Init+0x5c>)
 800cff0:	4809      	ldr	r0, [pc, #36]	; (800d018 <MX_USB_DEVICE_Init+0x54>)
 800cff2:	f7fe f8b7 	bl	800b164 <USBD_CDC_RegisterInterface>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cffc:	f7f3 ffa4 	bl	8000f48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d000:	4805      	ldr	r0, [pc, #20]	; (800d018 <MX_USB_DEVICE_Init+0x54>)
 800d002:	f7fe f95f 	bl	800b2c4 <USBD_Start>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d001      	beq.n	800d010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d00c:	f7f3 ff9c 	bl	8000f48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d010:	bf00      	nop
 800d012:	bd80      	pop	{r7, pc}
 800d014:	20000170 	.word	0x20000170
 800d018:	20001eec 	.word	0x20001eec
 800d01c:	20000058 	.word	0x20000058
 800d020:	20000160 	.word	0x20000160

0800d024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d028:	2200      	movs	r2, #0
 800d02a:	4905      	ldr	r1, [pc, #20]	; (800d040 <CDC_Init_FS+0x1c>)
 800d02c:	4805      	ldr	r0, [pc, #20]	; (800d044 <CDC_Init_FS+0x20>)
 800d02e:	f7fe f8af 	bl	800b190 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d032:	4905      	ldr	r1, [pc, #20]	; (800d048 <CDC_Init_FS+0x24>)
 800d034:	4803      	ldr	r0, [pc, #12]	; (800d044 <CDC_Init_FS+0x20>)
 800d036:	f7fe f8c4 	bl	800b1c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d03a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	200029b0 	.word	0x200029b0
 800d044:	20001eec 	.word	0x20001eec
 800d048:	200021b0 	.word	0x200021b0

0800d04c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d052:	4618      	mov	r0, r3
 800d054:	46bd      	mov	sp, r7
 800d056:	bc80      	pop	{r7}
 800d058:	4770      	bx	lr
	...

0800d05c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	4603      	mov	r3, r0
 800d064:	6039      	str	r1, [r7, #0]
 800d066:	71fb      	strb	r3, [r7, #7]
 800d068:	4613      	mov	r3, r2
 800d06a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	2b23      	cmp	r3, #35	; 0x23
 800d070:	d84a      	bhi.n	800d108 <CDC_Control_FS+0xac>
 800d072:	a201      	add	r2, pc, #4	; (adr r2, 800d078 <CDC_Control_FS+0x1c>)
 800d074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d078:	0800d109 	.word	0x0800d109
 800d07c:	0800d109 	.word	0x0800d109
 800d080:	0800d109 	.word	0x0800d109
 800d084:	0800d109 	.word	0x0800d109
 800d088:	0800d109 	.word	0x0800d109
 800d08c:	0800d109 	.word	0x0800d109
 800d090:	0800d109 	.word	0x0800d109
 800d094:	0800d109 	.word	0x0800d109
 800d098:	0800d109 	.word	0x0800d109
 800d09c:	0800d109 	.word	0x0800d109
 800d0a0:	0800d109 	.word	0x0800d109
 800d0a4:	0800d109 	.word	0x0800d109
 800d0a8:	0800d109 	.word	0x0800d109
 800d0ac:	0800d109 	.word	0x0800d109
 800d0b0:	0800d109 	.word	0x0800d109
 800d0b4:	0800d109 	.word	0x0800d109
 800d0b8:	0800d109 	.word	0x0800d109
 800d0bc:	0800d109 	.word	0x0800d109
 800d0c0:	0800d109 	.word	0x0800d109
 800d0c4:	0800d109 	.word	0x0800d109
 800d0c8:	0800d109 	.word	0x0800d109
 800d0cc:	0800d109 	.word	0x0800d109
 800d0d0:	0800d109 	.word	0x0800d109
 800d0d4:	0800d109 	.word	0x0800d109
 800d0d8:	0800d109 	.word	0x0800d109
 800d0dc:	0800d109 	.word	0x0800d109
 800d0e0:	0800d109 	.word	0x0800d109
 800d0e4:	0800d109 	.word	0x0800d109
 800d0e8:	0800d109 	.word	0x0800d109
 800d0ec:	0800d109 	.word	0x0800d109
 800d0f0:	0800d109 	.word	0x0800d109
 800d0f4:	0800d109 	.word	0x0800d109
 800d0f8:	0800d109 	.word	0x0800d109
 800d0fc:	0800d109 	.word	0x0800d109
 800d100:	0800d109 	.word	0x0800d109
 800d104:	0800d109 	.word	0x0800d109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d108:	bf00      	nop
  }

  return (USBD_OK);
 800d10a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	bc80      	pop	{r7}
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop

0800d118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <CDC_Receive_FS+0x24>)
 800d126:	f7fe f84c 	bl	800b1c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d12a:	4804      	ldr	r0, [pc, #16]	; (800d13c <CDC_Receive_FS+0x24>)
 800d12c:	f7fe f85c 	bl	800b1e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20001eec 	.word	0x20001eec

0800d140 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	6039      	str	r1, [r7, #0]
 800d14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	2212      	movs	r2, #18
 800d150:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d152:	4b03      	ldr	r3, [pc, #12]	; (800d160 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d154:	4618      	mov	r0, r3
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	bc80      	pop	{r7}
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	2000018c 	.word	0x2000018c

0800d164 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	6039      	str	r1, [r7, #0]
 800d16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2204      	movs	r2, #4
 800d174:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d176:	4b03      	ldr	r3, [pc, #12]	; (800d184 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d178:	4618      	mov	r0, r3
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bc80      	pop	{r7}
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	200001a0 	.word	0x200001a0

0800d188 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	4603      	mov	r3, r0
 800d190:	6039      	str	r1, [r7, #0]
 800d192:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d105      	bne.n	800d1a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d19a:	683a      	ldr	r2, [r7, #0]
 800d19c:	4907      	ldr	r1, [pc, #28]	; (800d1bc <USBD_FS_ProductStrDescriptor+0x34>)
 800d19e:	4808      	ldr	r0, [pc, #32]	; (800d1c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1a0:	f7ff f842 	bl	800c228 <USBD_GetString>
 800d1a4:	e004      	b.n	800d1b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	4904      	ldr	r1, [pc, #16]	; (800d1bc <USBD_FS_ProductStrDescriptor+0x34>)
 800d1aa:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1ac:	f7ff f83c 	bl	800c228 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1b0:	4b02      	ldr	r3, [pc, #8]	; (800d1bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	200031b0 	.word	0x200031b0
 800d1c0:	0800dc28 	.word	0x0800dc28

0800d1c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	6039      	str	r1, [r7, #0]
 800d1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	4904      	ldr	r1, [pc, #16]	; (800d1e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1d4:	4804      	ldr	r0, [pc, #16]	; (800d1e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1d6:	f7ff f827 	bl	800c228 <USBD_GetString>
  return USBD_StrDesc;
 800d1da:	4b02      	ldr	r3, [pc, #8]	; (800d1e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	200031b0 	.word	0x200031b0
 800d1e8:	0800dc3c 	.word	0x0800dc3c

0800d1ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	6039      	str	r1, [r7, #0]
 800d1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	221a      	movs	r2, #26
 800d1fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1fe:	f000 f843 	bl	800d288 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d202:	4b02      	ldr	r3, [pc, #8]	; (800d20c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	200001a4 	.word	0x200001a4

0800d210 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d105      	bne.n	800d22e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	4907      	ldr	r1, [pc, #28]	; (800d244 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d226:	4808      	ldr	r0, [pc, #32]	; (800d248 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d228:	f7fe fffe 	bl	800c228 <USBD_GetString>
 800d22c:	e004      	b.n	800d238 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d22e:	683a      	ldr	r2, [r7, #0]
 800d230:	4904      	ldr	r1, [pc, #16]	; (800d244 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d232:	4805      	ldr	r0, [pc, #20]	; (800d248 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d234:	f7fe fff8 	bl	800c228 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d238:	4b02      	ldr	r3, [pc, #8]	; (800d244 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	200031b0 	.word	0x200031b0
 800d248:	0800dc50 	.word	0x0800dc50

0800d24c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	6039      	str	r1, [r7, #0]
 800d256:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d105      	bne.n	800d26a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	4907      	ldr	r1, [pc, #28]	; (800d280 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d262:	4808      	ldr	r0, [pc, #32]	; (800d284 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d264:	f7fe ffe0 	bl	800c228 <USBD_GetString>
 800d268:	e004      	b.n	800d274 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	4904      	ldr	r1, [pc, #16]	; (800d280 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d26e:	4805      	ldr	r0, [pc, #20]	; (800d284 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d270:	f7fe ffda 	bl	800c228 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d274:	4b02      	ldr	r3, [pc, #8]	; (800d280 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	200031b0 	.word	0x200031b0
 800d284:	0800dc5c 	.word	0x0800dc5c

0800d288 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <Get_SerialNum+0x44>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d294:	4b0e      	ldr	r3, [pc, #56]	; (800d2d0 <Get_SerialNum+0x48>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d29a:	4b0e      	ldr	r3, [pc, #56]	; (800d2d4 <Get_SerialNum+0x4c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2ae:	2208      	movs	r2, #8
 800d2b0:	4909      	ldr	r1, [pc, #36]	; (800d2d8 <Get_SerialNum+0x50>)
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f000 f814 	bl	800d2e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2b8:	2204      	movs	r2, #4
 800d2ba:	4908      	ldr	r1, [pc, #32]	; (800d2dc <Get_SerialNum+0x54>)
 800d2bc:	68b8      	ldr	r0, [r7, #8]
 800d2be:	f000 f80f 	bl	800d2e0 <IntToUnicode>
  }
}
 800d2c2:	bf00      	nop
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	1fff7a10 	.word	0x1fff7a10
 800d2d0:	1fff7a14 	.word	0x1fff7a14
 800d2d4:	1fff7a18 	.word	0x1fff7a18
 800d2d8:	200001a6 	.word	0x200001a6
 800d2dc:	200001b6 	.word	0x200001b6

0800d2e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	75fb      	strb	r3, [r7, #23]
 800d2f6:	e027      	b.n	800d348 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	0f1b      	lsrs	r3, r3, #28
 800d2fc:	2b09      	cmp	r3, #9
 800d2fe:	d80b      	bhi.n	800d318 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	0f1b      	lsrs	r3, r3, #28
 800d304:	b2da      	uxtb	r2, r3
 800d306:	7dfb      	ldrb	r3, [r7, #23]
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4619      	mov	r1, r3
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	440b      	add	r3, r1
 800d310:	3230      	adds	r2, #48	; 0x30
 800d312:	b2d2      	uxtb	r2, r2
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	e00a      	b.n	800d32e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	0f1b      	lsrs	r3, r3, #28
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	4619      	mov	r1, r3
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	440b      	add	r3, r1
 800d328:	3237      	adds	r2, #55	; 0x37
 800d32a:	b2d2      	uxtb	r2, r2
 800d32c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	011b      	lsls	r3, r3, #4
 800d332:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d334:	7dfb      	ldrb	r3, [r7, #23]
 800d336:	005b      	lsls	r3, r3, #1
 800d338:	3301      	adds	r3, #1
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	4413      	add	r3, r2
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d342:	7dfb      	ldrb	r3, [r7, #23]
 800d344:	3301      	adds	r3, #1
 800d346:	75fb      	strb	r3, [r7, #23]
 800d348:	7dfa      	ldrb	r2, [r7, #23]
 800d34a:	79fb      	ldrb	r3, [r7, #7]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d3d3      	bcc.n	800d2f8 <IntToUnicode+0x18>
  }
}
 800d350:	bf00      	nop
 800d352:	bf00      	nop
 800d354:	371c      	adds	r7, #28
 800d356:	46bd      	mov	sp, r7
 800d358:	bc80      	pop	{r7}
 800d35a:	4770      	bx	lr

0800d35c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b08a      	sub	sp, #40	; 0x28
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d364:	f107 0314 	add.w	r3, r7, #20
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	605a      	str	r2, [r3, #4]
 800d36e:	609a      	str	r2, [r3, #8]
 800d370:	60da      	str	r2, [r3, #12]
 800d372:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d37c:	d147      	bne.n	800d40e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d37e:	2300      	movs	r3, #0
 800d380:	613b      	str	r3, [r7, #16]
 800d382:	4b25      	ldr	r3, [pc, #148]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d386:	4a24      	ldr	r2, [pc, #144]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d388:	f043 0301 	orr.w	r3, r3, #1
 800d38c:	6313      	str	r3, [r2, #48]	; 0x30
 800d38e:	4b22      	ldr	r3, [pc, #136]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	613b      	str	r3, [r7, #16]
 800d398:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d39a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d39e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3a8:	f107 0314 	add.w	r3, r7, #20
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	481b      	ldr	r0, [pc, #108]	; (800d41c <HAL_PCD_MspInit+0xc0>)
 800d3b0:	f7f5 fdea 	bl	8002f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d3b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d3b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d3c6:	230a      	movs	r3, #10
 800d3c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3ca:	f107 0314 	add.w	r3, r7, #20
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	4812      	ldr	r0, [pc, #72]	; (800d41c <HAL_PCD_MspInit+0xc0>)
 800d3d2:	f7f5 fdd9 	bl	8002f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3d6:	4b10      	ldr	r3, [pc, #64]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3da:	4a0f      	ldr	r2, [pc, #60]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e0:	6353      	str	r3, [r2, #52]	; 0x34
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ea:	4a0b      	ldr	r2, [pc, #44]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d3ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3f0:	6453      	str	r3, [r2, #68]	; 0x44
 800d3f2:	4b09      	ldr	r3, [pc, #36]	; (800d418 <HAL_PCD_MspInit+0xbc>)
 800d3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3fa:	60fb      	str	r3, [r7, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d3fe:	2200      	movs	r2, #0
 800d400:	2100      	movs	r1, #0
 800d402:	2043      	movs	r0, #67	; 0x43
 800d404:	f7f5 f911 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d408:	2043      	movs	r0, #67	; 0x43
 800d40a:	f7f5 f92a 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d40e:	bf00      	nop
 800d410:	3728      	adds	r7, #40	; 0x28
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	40023800 	.word	0x40023800
 800d41c:	40020000 	.word	0x40020000

0800d420 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d434:	4619      	mov	r1, r3
 800d436:	4610      	mov	r0, r2
 800d438:	f7fd ff8c 	bl	800b354 <USBD_LL_SetupStage>
}
 800d43c:	bf00      	nop
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d456:	78fa      	ldrb	r2, [r7, #3]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	1a9b      	subs	r3, r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	440b      	add	r3, r1
 800d464:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	78fb      	ldrb	r3, [r7, #3]
 800d46c:	4619      	mov	r1, r3
 800d46e:	f7fd ffbe 	bl	800b3ee <USBD_LL_DataOutStage>
}
 800d472:	bf00      	nop
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b082      	sub	sp, #8
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	460b      	mov	r3, r1
 800d484:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800d48c:	78fa      	ldrb	r2, [r7, #3]
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	4613      	mov	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	1a9b      	subs	r3, r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	440b      	add	r3, r1
 800d49a:	3348      	adds	r3, #72	; 0x48
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	78fb      	ldrb	r3, [r7, #3]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f7fe f815 	bl	800b4d0 <USBD_LL_DataInStage>
}
 800d4a6:	bf00      	nop
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b082      	sub	sp, #8
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe f925 	bl	800b70c <USBD_LL_SOF>
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b084      	sub	sp, #16
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]
 800d4e2:	e008      	b.n	800d4f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d102      	bne.n	800d4f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	73fb      	strb	r3, [r7, #15]
 800d4f0:	e001      	b.n	800d4f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d4f2:	f7f3 fd29 	bl	8000f48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d4fc:	7bfa      	ldrb	r2, [r7, #15]
 800d4fe:	4611      	mov	r1, r2
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe f8cb 	bl	800b69c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fe f884 	bl	800b61a <USBD_LL_Reset>
}
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe f8c5 	bl	800b6ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	6812      	ldr	r2, [r2, #0]
 800d53e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d542:	f043 0301 	orr.w	r3, r3, #1
 800d546:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a1b      	ldr	r3, [r3, #32]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d005      	beq.n	800d55c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d550:	4b04      	ldr	r3, [pc, #16]	; (800d564 <HAL_PCD_SuspendCallback+0x48>)
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	4a03      	ldr	r2, [pc, #12]	; (800d564 <HAL_PCD_SuspendCallback+0x48>)
 800d556:	f043 0306 	orr.w	r3, r3, #6
 800d55a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	e000ed00 	.word	0xe000ed00

0800d568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d576:	4618      	mov	r0, r3
 800d578:	f7fe f8b3 	bl	800b6e2 <USBD_LL_Resume>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d596:	78fa      	ldrb	r2, [r7, #3]
 800d598:	4611      	mov	r1, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe f8dc 	bl	800b758 <USBD_LL_IsoOUTIncomplete>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5ba:	78fa      	ldrb	r2, [r7, #3]
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe f8be 	bl	800b740 <USBD_LL_IsoINIncomplete>
}
 800d5c4:	bf00      	nop
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe f8c8 	bl	800b770 <USBD_LL_DevConnected>
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fe f8c4 	bl	800b784 <USBD_LL_DevDisconnected>
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d139      	bne.n	800d688 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d614:	4a1f      	ldr	r2, [pc, #124]	; (800d694 <USBD_LL_Init+0x90>)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a1d      	ldr	r2, [pc, #116]	; (800d694 <USBD_LL_Init+0x90>)
 800d620:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d624:	4b1b      	ldr	r3, [pc, #108]	; (800d694 <USBD_LL_Init+0x90>)
 800d626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d62a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d62c:	4b19      	ldr	r3, [pc, #100]	; (800d694 <USBD_LL_Init+0x90>)
 800d62e:	2204      	movs	r2, #4
 800d630:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d632:	4b18      	ldr	r3, [pc, #96]	; (800d694 <USBD_LL_Init+0x90>)
 800d634:	2202      	movs	r2, #2
 800d636:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d638:	4b16      	ldr	r3, [pc, #88]	; (800d694 <USBD_LL_Init+0x90>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d63e:	4b15      	ldr	r3, [pc, #84]	; (800d694 <USBD_LL_Init+0x90>)
 800d640:	2202      	movs	r2, #2
 800d642:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d644:	4b13      	ldr	r3, [pc, #76]	; (800d694 <USBD_LL_Init+0x90>)
 800d646:	2200      	movs	r2, #0
 800d648:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d64a:	4b12      	ldr	r3, [pc, #72]	; (800d694 <USBD_LL_Init+0x90>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d650:	4b10      	ldr	r3, [pc, #64]	; (800d694 <USBD_LL_Init+0x90>)
 800d652:	2201      	movs	r2, #1
 800d654:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d656:	4b0f      	ldr	r3, [pc, #60]	; (800d694 <USBD_LL_Init+0x90>)
 800d658:	2200      	movs	r2, #0
 800d65a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d65c:	480d      	ldr	r0, [pc, #52]	; (800d694 <USBD_LL_Init+0x90>)
 800d65e:	f7f6 f8a3 	bl	80037a8 <HAL_PCD_Init>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d668:	f7f3 fc6e 	bl	8000f48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d66c:	2180      	movs	r1, #128	; 0x80
 800d66e:	4809      	ldr	r0, [pc, #36]	; (800d694 <USBD_LL_Init+0x90>)
 800d670:	f7f7 f9e0 	bl	8004a34 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d674:	2240      	movs	r2, #64	; 0x40
 800d676:	2100      	movs	r1, #0
 800d678:	4806      	ldr	r0, [pc, #24]	; (800d694 <USBD_LL_Init+0x90>)
 800d67a:	f7f7 f995 	bl	80049a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d67e:	2280      	movs	r2, #128	; 0x80
 800d680:	2101      	movs	r1, #1
 800d682:	4804      	ldr	r0, [pc, #16]	; (800d694 <USBD_LL_Init+0x90>)
 800d684:	f7f7 f990 	bl	80049a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	200033b0 	.word	0x200033b0

0800d698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7f6 f997 	bl	80039e2 <HAL_PCD_Start>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 f92e 	bl	800d91c <USBD_Get_USB_Status>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	4611      	mov	r1, r2
 800d6da:	461a      	mov	r2, r3
 800d6dc:	4603      	mov	r3, r0
 800d6de:	70fb      	strb	r3, [r7, #3]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70bb      	strb	r3, [r7, #2]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6f6:	78bb      	ldrb	r3, [r7, #2]
 800d6f8:	883a      	ldrh	r2, [r7, #0]
 800d6fa:	78f9      	ldrb	r1, [r7, #3]
 800d6fc:	f7f6 fd5c 	bl	80041b8 <HAL_PCD_EP_Open>
 800d700:	4603      	mov	r3, r0
 800d702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d704:	7bfb      	ldrb	r3, [r7, #15]
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f908 	bl	800d91c <USBD_Get_USB_Status>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d710:	7bbb      	ldrb	r3, [r7, #14]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	460b      	mov	r3, r1
 800d724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d726:	2300      	movs	r3, #0
 800d728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d734:	78fa      	ldrb	r2, [r7, #3]
 800d736:	4611      	mov	r1, r2
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f6 fda5 	bl	8004288 <HAL_PCD_EP_Close>
 800d73e:	4603      	mov	r3, r0
 800d740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 f8e9 	bl	800d91c <USBD_Get_USB_Status>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d764:	2300      	movs	r3, #0
 800d766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d772:	78fa      	ldrb	r2, [r7, #3]
 800d774:	4611      	mov	r1, r2
 800d776:	4618      	mov	r0, r3
 800d778:	f7f6 fe7c 	bl	8004474 <HAL_PCD_EP_SetStall>
 800d77c:	4603      	mov	r3, r0
 800d77e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d780:	7bfb      	ldrb	r3, [r7, #15]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 f8ca 	bl	800d91c <USBD_Get_USB_Status>
 800d788:	4603      	mov	r3, r0
 800d78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b084      	sub	sp, #16
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7b0:	78fa      	ldrb	r2, [r7, #3]
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7f6 fec1 	bl	800453c <HAL_PCD_EP_ClrStall>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 f8ab 	bl	800d91c <USBD_Get_USB_Status>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d7e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	da0b      	bge.n	800d808 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d7f6:	68f9      	ldr	r1, [r7, #12]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	440b      	add	r3, r1
 800d802:	333e      	adds	r3, #62	; 0x3e
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	e00b      	b.n	800d820 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d808:	78fb      	ldrb	r3, [r7, #3]
 800d80a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d80e:	68f9      	ldr	r1, [r7, #12]
 800d810:	4613      	mov	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	1a9b      	subs	r3, r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	440b      	add	r3, r1
 800d81a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d81e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d820:	4618      	mov	r0, r3
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	bc80      	pop	{r7}
 800d828:	4770      	bx	lr

0800d82a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	460b      	mov	r3, r1
 800d834:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d844:	78fa      	ldrb	r2, [r7, #3]
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f6 fc90 	bl	800416e <HAL_PCD_SetAddress>
 800d84e:	4603      	mov	r3, r0
 800d850:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	4618      	mov	r0, r3
 800d856:	f000 f861 	bl	800d91c <USBD_Get_USB_Status>
 800d85a:	4603      	mov	r3, r0
 800d85c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d85e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	607a      	str	r2, [r7, #4]
 800d872:	461a      	mov	r2, r3
 800d874:	460b      	mov	r3, r1
 800d876:	72fb      	strb	r3, [r7, #11]
 800d878:	4613      	mov	r3, r2
 800d87a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d88a:	893b      	ldrh	r3, [r7, #8]
 800d88c:	7af9      	ldrb	r1, [r7, #11]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	f7f6 fda6 	bl	80043e0 <HAL_PCD_EP_Transmit>
 800d894:	4603      	mov	r3, r0
 800d896:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d898:	7dfb      	ldrb	r3, [r7, #23]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 f83e 	bl	800d91c <USBD_Get_USB_Status>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b086      	sub	sp, #24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	60f8      	str	r0, [r7, #12]
 800d8b6:	607a      	str	r2, [r7, #4]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	72fb      	strb	r3, [r7, #11]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d8d0:	893b      	ldrh	r3, [r7, #8]
 800d8d2:	7af9      	ldrb	r1, [r7, #11]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	f7f6 fd21 	bl	800431c <HAL_PCD_EP_Receive>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f000 f81b 	bl	800d91c <USBD_Get_USB_Status>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3718      	adds	r7, #24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d906:	78fa      	ldrb	r2, [r7, #3]
 800d908:	4611      	mov	r1, r2
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f6 fd51 	bl	80043b2 <HAL_PCD_EP_GetRxCount>
 800d910:	4603      	mov	r3, r0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	4603      	mov	r3, r0
 800d924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d92a:	79fb      	ldrb	r3, [r7, #7]
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d817      	bhi.n	800d960 <USBD_Get_USB_Status+0x44>
 800d930:	a201      	add	r2, pc, #4	; (adr r2, 800d938 <USBD_Get_USB_Status+0x1c>)
 800d932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d936:	bf00      	nop
 800d938:	0800d949 	.word	0x0800d949
 800d93c:	0800d94f 	.word	0x0800d94f
 800d940:	0800d955 	.word	0x0800d955
 800d944:	0800d95b 	.word	0x0800d95b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	73fb      	strb	r3, [r7, #15]
    break;
 800d94c:	e00b      	b.n	800d966 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d94e:	2302      	movs	r3, #2
 800d950:	73fb      	strb	r3, [r7, #15]
    break;
 800d952:	e008      	b.n	800d966 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d954:	2301      	movs	r3, #1
 800d956:	73fb      	strb	r3, [r7, #15]
    break;
 800d958:	e005      	b.n	800d966 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d95a:	2302      	movs	r3, #2
 800d95c:	73fb      	strb	r3, [r7, #15]
    break;
 800d95e:	e002      	b.n	800d966 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d960:	2302      	movs	r3, #2
 800d962:	73fb      	strb	r3, [r7, #15]
    break;
 800d964:	bf00      	nop
  }
  return usb_status;
 800d966:	7bfb      	ldrb	r3, [r7, #15]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3714      	adds	r7, #20
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bc80      	pop	{r7}
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop

0800d974 <malloc>:
 800d974:	4b02      	ldr	r3, [pc, #8]	; (800d980 <malloc+0xc>)
 800d976:	4601      	mov	r1, r0
 800d978:	6818      	ldr	r0, [r3, #0]
 800d97a:	f000 b82b 	b.w	800d9d4 <_malloc_r>
 800d97e:	bf00      	nop
 800d980:	2000020c 	.word	0x2000020c

0800d984 <free>:
 800d984:	4b02      	ldr	r3, [pc, #8]	; (800d990 <free+0xc>)
 800d986:	4601      	mov	r1, r0
 800d988:	6818      	ldr	r0, [r3, #0]
 800d98a:	f000 b8f3 	b.w	800db74 <_free_r>
 800d98e:	bf00      	nop
 800d990:	2000020c 	.word	0x2000020c

0800d994 <sbrk_aligned>:
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	4e0e      	ldr	r6, [pc, #56]	; (800d9d0 <sbrk_aligned+0x3c>)
 800d998:	460c      	mov	r4, r1
 800d99a:	6831      	ldr	r1, [r6, #0]
 800d99c:	4605      	mov	r5, r0
 800d99e:	b911      	cbnz	r1, 800d9a6 <sbrk_aligned+0x12>
 800d9a0:	f000 f8ac 	bl	800dafc <_sbrk_r>
 800d9a4:	6030      	str	r0, [r6, #0]
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	f000 f8a7 	bl	800dafc <_sbrk_r>
 800d9ae:	1c43      	adds	r3, r0, #1
 800d9b0:	d00a      	beq.n	800d9c8 <sbrk_aligned+0x34>
 800d9b2:	1cc4      	adds	r4, r0, #3
 800d9b4:	f024 0403 	bic.w	r4, r4, #3
 800d9b8:	42a0      	cmp	r0, r4
 800d9ba:	d007      	beq.n	800d9cc <sbrk_aligned+0x38>
 800d9bc:	1a21      	subs	r1, r4, r0
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f000 f89c 	bl	800dafc <_sbrk_r>
 800d9c4:	3001      	adds	r0, #1
 800d9c6:	d101      	bne.n	800d9cc <sbrk_aligned+0x38>
 800d9c8:	f04f 34ff 	mov.w	r4, #4294967295
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bd70      	pop	{r4, r5, r6, pc}
 800d9d0:	200037b4 	.word	0x200037b4

0800d9d4 <_malloc_r>:
 800d9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d8:	1ccd      	adds	r5, r1, #3
 800d9da:	f025 0503 	bic.w	r5, r5, #3
 800d9de:	3508      	adds	r5, #8
 800d9e0:	2d0c      	cmp	r5, #12
 800d9e2:	bf38      	it	cc
 800d9e4:	250c      	movcc	r5, #12
 800d9e6:	2d00      	cmp	r5, #0
 800d9e8:	4607      	mov	r7, r0
 800d9ea:	db01      	blt.n	800d9f0 <_malloc_r+0x1c>
 800d9ec:	42a9      	cmp	r1, r5
 800d9ee:	d905      	bls.n	800d9fc <_malloc_r+0x28>
 800d9f0:	230c      	movs	r3, #12
 800d9f2:	2600      	movs	r6, #0
 800d9f4:	603b      	str	r3, [r7, #0]
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dad0 <_malloc_r+0xfc>
 800da00:	f000 f868 	bl	800dad4 <__malloc_lock>
 800da04:	f8d8 3000 	ldr.w	r3, [r8]
 800da08:	461c      	mov	r4, r3
 800da0a:	bb5c      	cbnz	r4, 800da64 <_malloc_r+0x90>
 800da0c:	4629      	mov	r1, r5
 800da0e:	4638      	mov	r0, r7
 800da10:	f7ff ffc0 	bl	800d994 <sbrk_aligned>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	4604      	mov	r4, r0
 800da18:	d155      	bne.n	800dac6 <_malloc_r+0xf2>
 800da1a:	f8d8 4000 	ldr.w	r4, [r8]
 800da1e:	4626      	mov	r6, r4
 800da20:	2e00      	cmp	r6, #0
 800da22:	d145      	bne.n	800dab0 <_malloc_r+0xdc>
 800da24:	2c00      	cmp	r4, #0
 800da26:	d048      	beq.n	800daba <_malloc_r+0xe6>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	4631      	mov	r1, r6
 800da2c:	4638      	mov	r0, r7
 800da2e:	eb04 0903 	add.w	r9, r4, r3
 800da32:	f000 f863 	bl	800dafc <_sbrk_r>
 800da36:	4581      	cmp	r9, r0
 800da38:	d13f      	bne.n	800daba <_malloc_r+0xe6>
 800da3a:	6821      	ldr	r1, [r4, #0]
 800da3c:	4638      	mov	r0, r7
 800da3e:	1a6d      	subs	r5, r5, r1
 800da40:	4629      	mov	r1, r5
 800da42:	f7ff ffa7 	bl	800d994 <sbrk_aligned>
 800da46:	3001      	adds	r0, #1
 800da48:	d037      	beq.n	800daba <_malloc_r+0xe6>
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	442b      	add	r3, r5
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	f8d8 3000 	ldr.w	r3, [r8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d038      	beq.n	800daca <_malloc_r+0xf6>
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	42a2      	cmp	r2, r4
 800da5c:	d12b      	bne.n	800dab6 <_malloc_r+0xe2>
 800da5e:	2200      	movs	r2, #0
 800da60:	605a      	str	r2, [r3, #4]
 800da62:	e00f      	b.n	800da84 <_malloc_r+0xb0>
 800da64:	6822      	ldr	r2, [r4, #0]
 800da66:	1b52      	subs	r2, r2, r5
 800da68:	d41f      	bmi.n	800daaa <_malloc_r+0xd6>
 800da6a:	2a0b      	cmp	r2, #11
 800da6c:	d917      	bls.n	800da9e <_malloc_r+0xca>
 800da6e:	1961      	adds	r1, r4, r5
 800da70:	42a3      	cmp	r3, r4
 800da72:	6025      	str	r5, [r4, #0]
 800da74:	bf18      	it	ne
 800da76:	6059      	strne	r1, [r3, #4]
 800da78:	6863      	ldr	r3, [r4, #4]
 800da7a:	bf08      	it	eq
 800da7c:	f8c8 1000 	streq.w	r1, [r8]
 800da80:	5162      	str	r2, [r4, r5]
 800da82:	604b      	str	r3, [r1, #4]
 800da84:	4638      	mov	r0, r7
 800da86:	f104 060b 	add.w	r6, r4, #11
 800da8a:	f000 f829 	bl	800dae0 <__malloc_unlock>
 800da8e:	f026 0607 	bic.w	r6, r6, #7
 800da92:	1d23      	adds	r3, r4, #4
 800da94:	1af2      	subs	r2, r6, r3
 800da96:	d0ae      	beq.n	800d9f6 <_malloc_r+0x22>
 800da98:	1b9b      	subs	r3, r3, r6
 800da9a:	50a3      	str	r3, [r4, r2]
 800da9c:	e7ab      	b.n	800d9f6 <_malloc_r+0x22>
 800da9e:	42a3      	cmp	r3, r4
 800daa0:	6862      	ldr	r2, [r4, #4]
 800daa2:	d1dd      	bne.n	800da60 <_malloc_r+0x8c>
 800daa4:	f8c8 2000 	str.w	r2, [r8]
 800daa8:	e7ec      	b.n	800da84 <_malloc_r+0xb0>
 800daaa:	4623      	mov	r3, r4
 800daac:	6864      	ldr	r4, [r4, #4]
 800daae:	e7ac      	b.n	800da0a <_malloc_r+0x36>
 800dab0:	4634      	mov	r4, r6
 800dab2:	6876      	ldr	r6, [r6, #4]
 800dab4:	e7b4      	b.n	800da20 <_malloc_r+0x4c>
 800dab6:	4613      	mov	r3, r2
 800dab8:	e7cc      	b.n	800da54 <_malloc_r+0x80>
 800daba:	230c      	movs	r3, #12
 800dabc:	4638      	mov	r0, r7
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	f000 f80e 	bl	800dae0 <__malloc_unlock>
 800dac4:	e797      	b.n	800d9f6 <_malloc_r+0x22>
 800dac6:	6025      	str	r5, [r4, #0]
 800dac8:	e7dc      	b.n	800da84 <_malloc_r+0xb0>
 800daca:	605b      	str	r3, [r3, #4]
 800dacc:	deff      	udf	#255	; 0xff
 800dace:	bf00      	nop
 800dad0:	200037b0 	.word	0x200037b0

0800dad4 <__malloc_lock>:
 800dad4:	4801      	ldr	r0, [pc, #4]	; (800dadc <__malloc_lock+0x8>)
 800dad6:	f000 b84b 	b.w	800db70 <__retarget_lock_acquire_recursive>
 800dada:	bf00      	nop
 800dadc:	200038f4 	.word	0x200038f4

0800dae0 <__malloc_unlock>:
 800dae0:	4801      	ldr	r0, [pc, #4]	; (800dae8 <__malloc_unlock+0x8>)
 800dae2:	f000 b846 	b.w	800db72 <__retarget_lock_release_recursive>
 800dae6:	bf00      	nop
 800dae8:	200038f4 	.word	0x200038f4

0800daec <memset>:
 800daec:	4603      	mov	r3, r0
 800daee:	4402      	add	r2, r0
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d100      	bne.n	800daf6 <memset+0xa>
 800daf4:	4770      	bx	lr
 800daf6:	f803 1b01 	strb.w	r1, [r3], #1
 800dafa:	e7f9      	b.n	800daf0 <memset+0x4>

0800dafc <_sbrk_r>:
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	2300      	movs	r3, #0
 800db00:	4d05      	ldr	r5, [pc, #20]	; (800db18 <_sbrk_r+0x1c>)
 800db02:	4604      	mov	r4, r0
 800db04:	4608      	mov	r0, r1
 800db06:	602b      	str	r3, [r5, #0]
 800db08:	f7f3 fe24 	bl	8001754 <_sbrk>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d102      	bne.n	800db16 <_sbrk_r+0x1a>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	b103      	cbz	r3, 800db16 <_sbrk_r+0x1a>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	200038f0 	.word	0x200038f0

0800db1c <__errno>:
 800db1c:	4b01      	ldr	r3, [pc, #4]	; (800db24 <__errno+0x8>)
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	2000020c 	.word	0x2000020c

0800db28 <__libc_init_array>:
 800db28:	b570      	push	{r4, r5, r6, lr}
 800db2a:	2600      	movs	r6, #0
 800db2c:	4d0c      	ldr	r5, [pc, #48]	; (800db60 <__libc_init_array+0x38>)
 800db2e:	4c0d      	ldr	r4, [pc, #52]	; (800db64 <__libc_init_array+0x3c>)
 800db30:	1b64      	subs	r4, r4, r5
 800db32:	10a4      	asrs	r4, r4, #2
 800db34:	42a6      	cmp	r6, r4
 800db36:	d109      	bne.n	800db4c <__libc_init_array+0x24>
 800db38:	f000 f864 	bl	800dc04 <_init>
 800db3c:	2600      	movs	r6, #0
 800db3e:	4d0a      	ldr	r5, [pc, #40]	; (800db68 <__libc_init_array+0x40>)
 800db40:	4c0a      	ldr	r4, [pc, #40]	; (800db6c <__libc_init_array+0x44>)
 800db42:	1b64      	subs	r4, r4, r5
 800db44:	10a4      	asrs	r4, r4, #2
 800db46:	42a6      	cmp	r6, r4
 800db48:	d105      	bne.n	800db56 <__libc_init_array+0x2e>
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800db50:	4798      	blx	r3
 800db52:	3601      	adds	r6, #1
 800db54:	e7ee      	b.n	800db34 <__libc_init_array+0xc>
 800db56:	f855 3b04 	ldr.w	r3, [r5], #4
 800db5a:	4798      	blx	r3
 800db5c:	3601      	adds	r6, #1
 800db5e:	e7f2      	b.n	800db46 <__libc_init_array+0x1e>
 800db60:	0800dea8 	.word	0x0800dea8
 800db64:	0800dea8 	.word	0x0800dea8
 800db68:	0800dea8 	.word	0x0800dea8
 800db6c:	0800deac 	.word	0x0800deac

0800db70 <__retarget_lock_acquire_recursive>:
 800db70:	4770      	bx	lr

0800db72 <__retarget_lock_release_recursive>:
 800db72:	4770      	bx	lr

0800db74 <_free_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4605      	mov	r5, r0
 800db78:	2900      	cmp	r1, #0
 800db7a:	d040      	beq.n	800dbfe <_free_r+0x8a>
 800db7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db80:	1f0c      	subs	r4, r1, #4
 800db82:	2b00      	cmp	r3, #0
 800db84:	bfb8      	it	lt
 800db86:	18e4      	addlt	r4, r4, r3
 800db88:	f7ff ffa4 	bl	800dad4 <__malloc_lock>
 800db8c:	4a1c      	ldr	r2, [pc, #112]	; (800dc00 <_free_r+0x8c>)
 800db8e:	6813      	ldr	r3, [r2, #0]
 800db90:	b933      	cbnz	r3, 800dba0 <_free_r+0x2c>
 800db92:	6063      	str	r3, [r4, #4]
 800db94:	6014      	str	r4, [r2, #0]
 800db96:	4628      	mov	r0, r5
 800db98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db9c:	f7ff bfa0 	b.w	800dae0 <__malloc_unlock>
 800dba0:	42a3      	cmp	r3, r4
 800dba2:	d908      	bls.n	800dbb6 <_free_r+0x42>
 800dba4:	6820      	ldr	r0, [r4, #0]
 800dba6:	1821      	adds	r1, r4, r0
 800dba8:	428b      	cmp	r3, r1
 800dbaa:	bf01      	itttt	eq
 800dbac:	6819      	ldreq	r1, [r3, #0]
 800dbae:	685b      	ldreq	r3, [r3, #4]
 800dbb0:	1809      	addeq	r1, r1, r0
 800dbb2:	6021      	streq	r1, [r4, #0]
 800dbb4:	e7ed      	b.n	800db92 <_free_r+0x1e>
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	b10b      	cbz	r3, 800dbc0 <_free_r+0x4c>
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	d9fa      	bls.n	800dbb6 <_free_r+0x42>
 800dbc0:	6811      	ldr	r1, [r2, #0]
 800dbc2:	1850      	adds	r0, r2, r1
 800dbc4:	42a0      	cmp	r0, r4
 800dbc6:	d10b      	bne.n	800dbe0 <_free_r+0x6c>
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	4401      	add	r1, r0
 800dbcc:	1850      	adds	r0, r2, r1
 800dbce:	4283      	cmp	r3, r0
 800dbd0:	6011      	str	r1, [r2, #0]
 800dbd2:	d1e0      	bne.n	800db96 <_free_r+0x22>
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	4408      	add	r0, r1
 800dbda:	6010      	str	r0, [r2, #0]
 800dbdc:	6053      	str	r3, [r2, #4]
 800dbde:	e7da      	b.n	800db96 <_free_r+0x22>
 800dbe0:	d902      	bls.n	800dbe8 <_free_r+0x74>
 800dbe2:	230c      	movs	r3, #12
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	e7d6      	b.n	800db96 <_free_r+0x22>
 800dbe8:	6820      	ldr	r0, [r4, #0]
 800dbea:	1821      	adds	r1, r4, r0
 800dbec:	428b      	cmp	r3, r1
 800dbee:	bf01      	itttt	eq
 800dbf0:	6819      	ldreq	r1, [r3, #0]
 800dbf2:	685b      	ldreq	r3, [r3, #4]
 800dbf4:	1809      	addeq	r1, r1, r0
 800dbf6:	6021      	streq	r1, [r4, #0]
 800dbf8:	6063      	str	r3, [r4, #4]
 800dbfa:	6054      	str	r4, [r2, #4]
 800dbfc:	e7cb      	b.n	800db96 <_free_r+0x22>
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	200037b0 	.word	0x200037b0

0800dc04 <_init>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	bf00      	nop
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_fini>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr
